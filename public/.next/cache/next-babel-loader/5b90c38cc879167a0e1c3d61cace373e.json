{"ast":null,"code":"import _slicedToArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nexport var Uint8Matrix = /*#__PURE__*/function () {\n  function Uint8Matrix(rows, cols, defaultValue) {\n    _classCallCheck(this, Uint8Matrix);\n\n    var data = new Uint8Array(rows * cols);\n\n    for (var i = 0, len = rows * cols; i < len; i++) {\n      data[i] = defaultValue;\n    }\n\n    this._data = data;\n    this.rows = rows;\n    this.cols = cols;\n  }\n\n  _createClass(Uint8Matrix, [{\n    key: \"get\",\n    value: function get(row, col) {\n      return this._data[row * this.cols + col];\n    }\n  }, {\n    key: \"set\",\n    value: function set(row, col, value) {\n      this._data[row * this.cols + col] = value;\n    }\n  }]);\n\n  return Uint8Matrix;\n}();\nexport var StateMachine = /*#__PURE__*/function () {\n  function StateMachine(edges) {\n    _classCallCheck(this, StateMachine);\n\n    var maxCharCode = 0;\n    var maxState = 0\n    /* Invalid */\n    ;\n\n    for (var i = 0, len = edges.length; i < len; i++) {\n      var _edges$i = _slicedToArray(edges[i], 3),\n          from = _edges$i[0],\n          chCode = _edges$i[1],\n          to = _edges$i[2];\n\n      if (chCode > maxCharCode) {\n        maxCharCode = chCode;\n      }\n\n      if (from > maxState) {\n        maxState = from;\n      }\n\n      if (to > maxState) {\n        maxState = to;\n      }\n    }\n\n    maxCharCode++;\n    maxState++;\n    var states = new Uint8Matrix(maxState, maxCharCode, 0\n    /* Invalid */\n    );\n\n    for (var _i = 0, _len = edges.length; _i < _len; _i++) {\n      var _edges$_i = _slicedToArray(edges[_i], 3),\n          _from = _edges$_i[0],\n          _chCode = _edges$_i[1],\n          _to = _edges$_i[2];\n\n      states.set(_from, _chCode, _to);\n    }\n\n    this._states = states;\n    this._maxCharCode = maxCharCode;\n  }\n\n  _createClass(StateMachine, [{\n    key: \"nextState\",\n    value: function nextState(currentState, chCode) {\n      if (chCode < 0 || chCode >= this._maxCharCode) {\n        return 0\n        /* Invalid */\n        ;\n      }\n\n      return this._states.get(currentState, chCode);\n    }\n  }]);\n\n  return StateMachine;\n}(); // State machine for http:// or https:// or file://\n\nvar _stateMachine = null;\n\nfunction getStateMachine() {\n  if (_stateMachine === null) {\n    _stateMachine = new StateMachine([[1\n    /* Start */\n    , 104\n    /* h */\n    , 2\n    /* H */\n    ], [1\n    /* Start */\n    , 72\n    /* H */\n    , 2\n    /* H */\n    ], [1\n    /* Start */\n    , 102\n    /* f */\n    , 6\n    /* F */\n    ], [1\n    /* Start */\n    , 70\n    /* F */\n    , 6\n    /* F */\n    ], [2\n    /* H */\n    , 116\n    /* t */\n    , 3\n    /* HT */\n    ], [2\n    /* H */\n    , 84\n    /* T */\n    , 3\n    /* HT */\n    ], [3\n    /* HT */\n    , 116\n    /* t */\n    , 4\n    /* HTT */\n    ], [3\n    /* HT */\n    , 84\n    /* T */\n    , 4\n    /* HTT */\n    ], [4\n    /* HTT */\n    , 112\n    /* p */\n    , 5\n    /* HTTP */\n    ], [4\n    /* HTT */\n    , 80\n    /* P */\n    , 5\n    /* HTTP */\n    ], [5\n    /* HTTP */\n    , 115\n    /* s */\n    , 9\n    /* BeforeColon */\n    ], [5\n    /* HTTP */\n    , 83\n    /* S */\n    , 9\n    /* BeforeColon */\n    ], [5\n    /* HTTP */\n    , 58\n    /* Colon */\n    , 10\n    /* AfterColon */\n    ], [6\n    /* F */\n    , 105\n    /* i */\n    , 7\n    /* FI */\n    ], [6\n    /* F */\n    , 73\n    /* I */\n    , 7\n    /* FI */\n    ], [7\n    /* FI */\n    , 108\n    /* l */\n    , 8\n    /* FIL */\n    ], [7\n    /* FI */\n    , 76\n    /* L */\n    , 8\n    /* FIL */\n    ], [8\n    /* FIL */\n    , 101\n    /* e */\n    , 9\n    /* BeforeColon */\n    ], [8\n    /* FIL */\n    , 69\n    /* E */\n    , 9\n    /* BeforeColon */\n    ], [9\n    /* BeforeColon */\n    , 58\n    /* Colon */\n    , 10\n    /* AfterColon */\n    ], [10\n    /* AfterColon */\n    , 47\n    /* Slash */\n    , 11\n    /* AlmostThere */\n    ], [11\n    /* AlmostThere */\n    , 47\n    /* Slash */\n    , 12\n    /* End */\n    ]]);\n  }\n\n  return _stateMachine;\n}\n\nvar _classifier = null;\n\nfunction getClassifier() {\n  if (_classifier === null) {\n    _classifier = new CharacterClassifier(0\n    /* None */\n    );\n    var FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…';\n\n    for (var i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n      _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1\n      /* ForceTermination */\n      );\n    }\n\n    var CANNOT_END_WITH_CHARACTERS = '.,;';\n\n    for (var _i2 = 0; _i2 < CANNOT_END_WITH_CHARACTERS.length; _i2++) {\n      _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(_i2), 2\n      /* CannotEndIn */\n      );\n    }\n  }\n\n  return _classifier;\n}\n\nexport var LinkComputer = /*#__PURE__*/function () {\n  function LinkComputer() {\n    _classCallCheck(this, LinkComputer);\n  }\n\n  _createClass(LinkComputer, null, [{\n    key: \"_createLink\",\n    value: function _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n      // Do not allow to end link in certain characters...\n      var lastIncludedCharIndex = linkEndIndex - 1;\n\n      do {\n        var chCode = line.charCodeAt(lastIncludedCharIndex);\n        var chClass = classifier.get(chCode);\n\n        if (chClass !== 2\n        /* CannotEndIn */\n        ) {\n            break;\n          }\n\n        lastIncludedCharIndex--;\n      } while (lastIncludedCharIndex > linkBeginIndex); // Handle links enclosed in parens, square brackets and curlys.\n\n\n      if (linkBeginIndex > 0) {\n        var charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n        var lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n\n        if (charCodeBeforeLink === 40\n        /* OpenParen */\n        && lastCharCodeInLink === 41\n        /* CloseParen */\n        || charCodeBeforeLink === 91\n        /* OpenSquareBracket */\n        && lastCharCodeInLink === 93\n        /* CloseSquareBracket */\n        || charCodeBeforeLink === 123\n        /* OpenCurlyBrace */\n        && lastCharCodeInLink === 125\n        /* CloseCurlyBrace */\n        ) {\n          // Do not end in ) if ( is before the link start\n          // Do not end in ] if [ is before the link start\n          // Do not end in } if { is before the link start\n          lastIncludedCharIndex--;\n        }\n      }\n\n      return {\n        range: {\n          startLineNumber: lineNumber,\n          startColumn: linkBeginIndex + 1,\n          endLineNumber: lineNumber,\n          endColumn: lastIncludedCharIndex + 2\n        },\n        url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n      };\n    }\n  }, {\n    key: \"computeLinks\",\n    value: function computeLinks(model) {\n      var stateMachine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getStateMachine();\n      var classifier = getClassifier();\n      var result = [];\n\n      for (var i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n        var line = model.getLineContent(i);\n        var len = line.length;\n        var j = 0;\n        var linkBeginIndex = 0;\n        var linkBeginChCode = 0;\n        var state = 1\n        /* Start */\n        ;\n        var hasOpenParens = false;\n        var hasOpenSquareBracket = false;\n        var inSquareBrackets = false;\n        var hasOpenCurlyBracket = false;\n\n        while (j < len) {\n          var resetStateMachine = false;\n          var chCode = line.charCodeAt(j);\n\n          if (state === 13\n          /* Accept */\n          ) {\n              var chClass = void 0;\n\n              switch (chCode) {\n                case 40\n                /* OpenParen */\n                :\n                  hasOpenParens = true;\n                  chClass = 0\n                  /* None */\n                  ;\n                  break;\n\n                case 41\n                /* CloseParen */\n                :\n                  chClass = hasOpenParens ? 0\n                  /* None */\n                  : 1\n                  /* ForceTermination */\n                  ;\n                  break;\n\n                case 91\n                /* OpenSquareBracket */\n                :\n                  inSquareBrackets = true;\n                  hasOpenSquareBracket = true;\n                  chClass = 0\n                  /* None */\n                  ;\n                  break;\n\n                case 93\n                /* CloseSquareBracket */\n                :\n                  inSquareBrackets = false;\n                  chClass = hasOpenSquareBracket ? 0\n                  /* None */\n                  : 1\n                  /* ForceTermination */\n                  ;\n                  break;\n\n                case 123\n                /* OpenCurlyBrace */\n                :\n                  hasOpenCurlyBracket = true;\n                  chClass = 0\n                  /* None */\n                  ;\n                  break;\n\n                case 125\n                /* CloseCurlyBrace */\n                :\n                  chClass = hasOpenCurlyBracket ? 0\n                  /* None */\n                  : 1\n                  /* ForceTermination */\n                  ;\n                  break;\n\n                /* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\n\n                case 39\n                /* SingleQuote */\n                :\n                  chClass = linkBeginChCode === 34\n                  /* DoubleQuote */\n                  || linkBeginChCode === 96\n                  /* BackTick */\n                  ? 0\n                  /* None */\n                  : 1\n                  /* ForceTermination */\n                  ;\n                  break;\n\n                case 34\n                /* DoubleQuote */\n                :\n                  chClass = linkBeginChCode === 39\n                  /* SingleQuote */\n                  || linkBeginChCode === 96\n                  /* BackTick */\n                  ? 0\n                  /* None */\n                  : 1\n                  /* ForceTermination */\n                  ;\n                  break;\n\n                case 96\n                /* BackTick */\n                :\n                  chClass = linkBeginChCode === 39\n                  /* SingleQuote */\n                  || linkBeginChCode === 34\n                  /* DoubleQuote */\n                  ? 0\n                  /* None */\n                  : 1\n                  /* ForceTermination */\n                  ;\n                  break;\n\n                case 42\n                /* Asterisk */\n                :\n                  // `*` terminates a link if the link began with `*`\n                  chClass = linkBeginChCode === 42\n                  /* Asterisk */\n                  ? 1\n                  /* ForceTermination */\n                  : 0\n                  /* None */\n                  ;\n                  break;\n\n                case 124\n                /* Pipe */\n                :\n                  // `|` terminates a link if the link began with `|`\n                  chClass = linkBeginChCode === 124\n                  /* Pipe */\n                  ? 1\n                  /* ForceTermination */\n                  : 0\n                  /* None */\n                  ;\n                  break;\n\n                case 32\n                /* Space */\n                :\n                  // ` ` allow space in between [ and ]\n                  chClass = inSquareBrackets ? 0\n                  /* None */\n                  : 1\n                  /* ForceTermination */\n                  ;\n                  break;\n\n                default:\n                  chClass = classifier.get(chCode);\n              } // Check if character terminates link\n\n\n              if (chClass === 1\n              /* ForceTermination */\n              ) {\n                  result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                  resetStateMachine = true;\n                }\n            } else if (state === 12\n          /* End */\n          ) {\n              var _chClass = void 0;\n\n              if (chCode === 91\n              /* OpenSquareBracket */\n              ) {\n                  // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                  hasOpenSquareBracket = true;\n                  _chClass = 0\n                  /* None */\n                  ;\n                } else {\n                _chClass = classifier.get(chCode);\n              } // Check if character terminates link\n\n\n              if (_chClass === 1\n              /* ForceTermination */\n              ) {\n                  resetStateMachine = true;\n                } else {\n                state = 13\n                /* Accept */\n                ;\n              }\n            } else {\n            state = stateMachine.nextState(state, chCode);\n\n            if (state === 0\n            /* Invalid */\n            ) {\n                resetStateMachine = true;\n              }\n          }\n\n          if (resetStateMachine) {\n            state = 1\n            /* Start */\n            ;\n            hasOpenParens = false;\n            hasOpenSquareBracket = false;\n            hasOpenCurlyBracket = false; // Record where the link started\n\n            linkBeginIndex = j + 1;\n            linkBeginChCode = chCode;\n          }\n\n          j++;\n        }\n\n        if (state === 13\n        /* Accept */\n        ) {\n            result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n          }\n      }\n\n      return result;\n    }\n  }]);\n\n  return LinkComputer;\n}();\n/**\r\n * Returns an array of all links contains in the provided\r\n * document. *Note* that this operation is computational\r\n * expensive and should not run in the UI thread.\r\n */\n\nexport function computeLinks(model) {\n  if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n    // Unknown caller!\n    return [];\n  }\n\n  return LinkComputer.computeLinks(model);\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js"],"names":["CharacterClassifier","Uint8Matrix","rows","cols","defaultValue","data","Uint8Array","i","len","_data","row","col","value","StateMachine","edges","maxCharCode","maxState","length","from","chCode","to","states","set","_states","_maxCharCode","currentState","get","_stateMachine","getStateMachine","_classifier","getClassifier","FORCE_TERMINATION_CHARACTERS","charCodeAt","CANNOT_END_WITH_CHARACTERS","LinkComputer","classifier","line","lineNumber","linkBeginIndex","linkEndIndex","lastIncludedCharIndex","chClass","charCodeBeforeLink","lastCharCodeInLink","range","startLineNumber","startColumn","endLineNumber","endColumn","url","substring","model","stateMachine","result","lineCount","getLineCount","getLineContent","j","linkBeginChCode","state","hasOpenParens","hasOpenSquareBracket","inSquareBrackets","hasOpenCurlyBracket","resetStateMachine","push","_createLink","nextState","computeLinks"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CharacterClassifier } from '../core/characterClassifier.js';\r\nexport class Uint8Matrix {\r\n    constructor(rows, cols, defaultValue) {\r\n        const data = new Uint8Array(rows * cols);\r\n        for (let i = 0, len = rows * cols; i < len; i++) {\r\n            data[i] = defaultValue;\r\n        }\r\n        this._data = data;\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n    }\r\n    get(row, col) {\r\n        return this._data[row * this.cols + col];\r\n    }\r\n    set(row, col, value) {\r\n        this._data[row * this.cols + col] = value;\r\n    }\r\n}\r\nexport class StateMachine {\r\n    constructor(edges) {\r\n        let maxCharCode = 0;\r\n        let maxState = 0 /* Invalid */;\r\n        for (let i = 0, len = edges.length; i < len; i++) {\r\n            let [from, chCode, to] = edges[i];\r\n            if (chCode > maxCharCode) {\r\n                maxCharCode = chCode;\r\n            }\r\n            if (from > maxState) {\r\n                maxState = from;\r\n            }\r\n            if (to > maxState) {\r\n                maxState = to;\r\n            }\r\n        }\r\n        maxCharCode++;\r\n        maxState++;\r\n        let states = new Uint8Matrix(maxState, maxCharCode, 0 /* Invalid */);\r\n        for (let i = 0, len = edges.length; i < len; i++) {\r\n            let [from, chCode, to] = edges[i];\r\n            states.set(from, chCode, to);\r\n        }\r\n        this._states = states;\r\n        this._maxCharCode = maxCharCode;\r\n    }\r\n    nextState(currentState, chCode) {\r\n        if (chCode < 0 || chCode >= this._maxCharCode) {\r\n            return 0 /* Invalid */;\r\n        }\r\n        return this._states.get(currentState, chCode);\r\n    }\r\n}\r\n// State machine for http:// or https:// or file://\r\nlet _stateMachine = null;\r\nfunction getStateMachine() {\r\n    if (_stateMachine === null) {\r\n        _stateMachine = new StateMachine([\r\n            [1 /* Start */, 104 /* h */, 2 /* H */],\r\n            [1 /* Start */, 72 /* H */, 2 /* H */],\r\n            [1 /* Start */, 102 /* f */, 6 /* F */],\r\n            [1 /* Start */, 70 /* F */, 6 /* F */],\r\n            [2 /* H */, 116 /* t */, 3 /* HT */],\r\n            [2 /* H */, 84 /* T */, 3 /* HT */],\r\n            [3 /* HT */, 116 /* t */, 4 /* HTT */],\r\n            [3 /* HT */, 84 /* T */, 4 /* HTT */],\r\n            [4 /* HTT */, 112 /* p */, 5 /* HTTP */],\r\n            [4 /* HTT */, 80 /* P */, 5 /* HTTP */],\r\n            [5 /* HTTP */, 115 /* s */, 9 /* BeforeColon */],\r\n            [5 /* HTTP */, 83 /* S */, 9 /* BeforeColon */],\r\n            [5 /* HTTP */, 58 /* Colon */, 10 /* AfterColon */],\r\n            [6 /* F */, 105 /* i */, 7 /* FI */],\r\n            [6 /* F */, 73 /* I */, 7 /* FI */],\r\n            [7 /* FI */, 108 /* l */, 8 /* FIL */],\r\n            [7 /* FI */, 76 /* L */, 8 /* FIL */],\r\n            [8 /* FIL */, 101 /* e */, 9 /* BeforeColon */],\r\n            [8 /* FIL */, 69 /* E */, 9 /* BeforeColon */],\r\n            [9 /* BeforeColon */, 58 /* Colon */, 10 /* AfterColon */],\r\n            [10 /* AfterColon */, 47 /* Slash */, 11 /* AlmostThere */],\r\n            [11 /* AlmostThere */, 47 /* Slash */, 12 /* End */],\r\n        ]);\r\n    }\r\n    return _stateMachine;\r\n}\r\nlet _classifier = null;\r\nfunction getClassifier() {\r\n    if (_classifier === null) {\r\n        _classifier = new CharacterClassifier(0 /* None */);\r\n        const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…';\r\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\r\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* ForceTermination */);\r\n        }\r\n        const CANNOT_END_WITH_CHARACTERS = '.,;';\r\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\r\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CannotEndIn */);\r\n        }\r\n    }\r\n    return _classifier;\r\n}\r\nexport class LinkComputer {\r\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\r\n        // Do not allow to end link in certain characters...\r\n        let lastIncludedCharIndex = linkEndIndex - 1;\r\n        do {\r\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\r\n            const chClass = classifier.get(chCode);\r\n            if (chClass !== 2 /* CannotEndIn */) {\r\n                break;\r\n            }\r\n            lastIncludedCharIndex--;\r\n        } while (lastIncludedCharIndex > linkBeginIndex);\r\n        // Handle links enclosed in parens, square brackets and curlys.\r\n        if (linkBeginIndex > 0) {\r\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\r\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\r\n            if ((charCodeBeforeLink === 40 /* OpenParen */ && lastCharCodeInLink === 41 /* CloseParen */)\r\n                || (charCodeBeforeLink === 91 /* OpenSquareBracket */ && lastCharCodeInLink === 93 /* CloseSquareBracket */)\r\n                || (charCodeBeforeLink === 123 /* OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CloseCurlyBrace */)) {\r\n                // Do not end in ) if ( is before the link start\r\n                // Do not end in ] if [ is before the link start\r\n                // Do not end in } if { is before the link start\r\n                lastIncludedCharIndex--;\r\n            }\r\n        }\r\n        return {\r\n            range: {\r\n                startLineNumber: lineNumber,\r\n                startColumn: linkBeginIndex + 1,\r\n                endLineNumber: lineNumber,\r\n                endColumn: lastIncludedCharIndex + 2\r\n            },\r\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\r\n        };\r\n    }\r\n    static computeLinks(model, stateMachine = getStateMachine()) {\r\n        const classifier = getClassifier();\r\n        let result = [];\r\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\r\n            const line = model.getLineContent(i);\r\n            const len = line.length;\r\n            let j = 0;\r\n            let linkBeginIndex = 0;\r\n            let linkBeginChCode = 0;\r\n            let state = 1 /* Start */;\r\n            let hasOpenParens = false;\r\n            let hasOpenSquareBracket = false;\r\n            let inSquareBrackets = false;\r\n            let hasOpenCurlyBracket = false;\r\n            while (j < len) {\r\n                let resetStateMachine = false;\r\n                const chCode = line.charCodeAt(j);\r\n                if (state === 13 /* Accept */) {\r\n                    let chClass;\r\n                    switch (chCode) {\r\n                        case 40 /* OpenParen */:\r\n                            hasOpenParens = true;\r\n                            chClass = 0 /* None */;\r\n                            break;\r\n                        case 41 /* CloseParen */:\r\n                            chClass = (hasOpenParens ? 0 /* None */ : 1 /* ForceTermination */);\r\n                            break;\r\n                        case 91 /* OpenSquareBracket */:\r\n                            inSquareBrackets = true;\r\n                            hasOpenSquareBracket = true;\r\n                            chClass = 0 /* None */;\r\n                            break;\r\n                        case 93 /* CloseSquareBracket */:\r\n                            inSquareBrackets = false;\r\n                            chClass = (hasOpenSquareBracket ? 0 /* None */ : 1 /* ForceTermination */);\r\n                            break;\r\n                        case 123 /* OpenCurlyBrace */:\r\n                            hasOpenCurlyBracket = true;\r\n                            chClass = 0 /* None */;\r\n                            break;\r\n                        case 125 /* CloseCurlyBrace */:\r\n                            chClass = (hasOpenCurlyBracket ? 0 /* None */ : 1 /* ForceTermination */);\r\n                            break;\r\n                        /* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\r\n                        case 39 /* SingleQuote */:\r\n                            chClass = (linkBeginChCode === 34 /* DoubleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\r\n                            break;\r\n                        case 34 /* DoubleQuote */:\r\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\r\n                            break;\r\n                        case 96 /* BackTick */:\r\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 34 /* DoubleQuote */) ? 0 /* None */ : 1 /* ForceTermination */;\r\n                            break;\r\n                        case 42 /* Asterisk */:\r\n                            // `*` terminates a link if the link began with `*`\r\n                            chClass = (linkBeginChCode === 42 /* Asterisk */) ? 1 /* ForceTermination */ : 0 /* None */;\r\n                            break;\r\n                        case 124 /* Pipe */:\r\n                            // `|` terminates a link if the link began with `|`\r\n                            chClass = (linkBeginChCode === 124 /* Pipe */) ? 1 /* ForceTermination */ : 0 /* None */;\r\n                            break;\r\n                        case 32 /* Space */:\r\n                            // ` ` allow space in between [ and ]\r\n                            chClass = (inSquareBrackets ? 0 /* None */ : 1 /* ForceTermination */);\r\n                            break;\r\n                        default:\r\n                            chClass = classifier.get(chCode);\r\n                    }\r\n                    // Check if character terminates link\r\n                    if (chClass === 1 /* ForceTermination */) {\r\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\r\n                        resetStateMachine = true;\r\n                    }\r\n                }\r\n                else if (state === 12 /* End */) {\r\n                    let chClass;\r\n                    if (chCode === 91 /* OpenSquareBracket */) {\r\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\r\n                        hasOpenSquareBracket = true;\r\n                        chClass = 0 /* None */;\r\n                    }\r\n                    else {\r\n                        chClass = classifier.get(chCode);\r\n                    }\r\n                    // Check if character terminates link\r\n                    if (chClass === 1 /* ForceTermination */) {\r\n                        resetStateMachine = true;\r\n                    }\r\n                    else {\r\n                        state = 13 /* Accept */;\r\n                    }\r\n                }\r\n                else {\r\n                    state = stateMachine.nextState(state, chCode);\r\n                    if (state === 0 /* Invalid */) {\r\n                        resetStateMachine = true;\r\n                    }\r\n                }\r\n                if (resetStateMachine) {\r\n                    state = 1 /* Start */;\r\n                    hasOpenParens = false;\r\n                    hasOpenSquareBracket = false;\r\n                    hasOpenCurlyBracket = false;\r\n                    // Record where the link started\r\n                    linkBeginIndex = j + 1;\r\n                    linkBeginChCode = chCode;\r\n                }\r\n                j++;\r\n            }\r\n            if (state === 13 /* Accept */) {\r\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Returns an array of all links contains in the provided\r\n * document. *Note* that this operation is computational\r\n * expensive and should not run in the UI thread.\r\n */\r\nexport function computeLinks(model) {\r\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\r\n        // Unknown caller!\r\n        return [];\r\n    }\r\n    return LinkComputer.computeLinks(model);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}