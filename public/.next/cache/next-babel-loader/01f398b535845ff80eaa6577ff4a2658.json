{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar _a;\n\nimport { TimeoutTimer } from '../../../base/common/async.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../../common/core/lineTokens.js';\nimport { TokenizationRegistry } from '../../common/modes.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nvar ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('standaloneColorizer', {\n  createHTML: function createHTML(value) {\n    return value;\n  }\n});\nexport var Colorizer = /*#__PURE__*/function () {\n  function Colorizer() {\n    _classCallCheck(this, Colorizer);\n  }\n\n  _createClass(Colorizer, null, [{\n    key: \"colorizeElement\",\n    value: function colorizeElement(themeService, modeService, domNode, options) {\n      options = options || {};\n      var theme = options.theme || 'vs';\n      var mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\n\n      if (!mimeType) {\n        console.error('Mode not detected');\n        return Promise.resolve();\n      }\n\n      themeService.setTheme(theme);\n      var text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\n      domNode.className += ' ' + theme;\n\n      var render = function render(str) {\n        var _a;\n\n        var trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _a !== void 0 ? _a : str;\n        domNode.innerHTML = trustedhtml;\n      };\n\n      return this.colorize(modeService, text || '', mimeType, options).then(render, function (err) {\n        return console.error(err);\n      });\n    }\n  }, {\n    key: \"colorize\",\n    value: function colorize(modeService, text, mimeType, options) {\n      var tabSize = 4;\n\n      if (options && typeof options.tabSize === 'number') {\n        tabSize = options.tabSize;\n      }\n\n      if (strings.startsWithUTF8BOM(text)) {\n        text = text.substr(1);\n      }\n\n      var lines = strings.splitLines(text);\n      var language = modeService.getModeId(mimeType);\n\n      if (!language) {\n        return Promise.resolve(_fakeColorize(lines, tabSize));\n      } // Send out the event to create the mode\n\n\n      modeService.triggerMode(language);\n      var tokenizationSupport = TokenizationRegistry.get(language);\n\n      if (tokenizationSupport) {\n        return _colorize(lines, tabSize, tokenizationSupport);\n      }\n\n      var tokenizationSupportPromise = TokenizationRegistry.getPromise(language);\n\n      if (tokenizationSupportPromise) {\n        // A tokenizer will be registered soon\n        return new Promise(function (resolve, reject) {\n          tokenizationSupportPromise.then(function (tokenizationSupport) {\n            _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\n          }, reject);\n        });\n      }\n\n      return new Promise(function (resolve, reject) {\n        var listener = null;\n        var timeout = null;\n\n        var execute = function execute() {\n          if (listener) {\n            listener.dispose();\n            listener = null;\n          }\n\n          if (timeout) {\n            timeout.dispose();\n            timeout = null;\n          }\n\n          var tokenizationSupport = TokenizationRegistry.get(language);\n\n          if (tokenizationSupport) {\n            _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\n\n            return;\n          }\n\n          resolve(_fakeColorize(lines, tabSize));\n        }; // wait 500ms for mode to load, then give up\n\n\n        timeout = new TimeoutTimer();\n        timeout.cancelAndSet(execute, 500);\n        listener = TokenizationRegistry.onDidChange(function (e) {\n          if (e.changedLanguages.indexOf(language) >= 0) {\n            execute();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"colorizeLine\",\n    value: function colorizeLine(line, mightContainNonBasicASCII, mightContainRTL, tokens) {\n      var tabSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 4;\n      var isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\n      var containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\n      var renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, tokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n      return renderResult.html;\n    }\n  }, {\n    key: \"colorizeModelLine\",\n    value: function colorizeModelLine(model, lineNumber) {\n      var tabSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n      var content = model.getLineContent(lineNumber);\n      model.forceTokenization(lineNumber);\n      var tokens = model.getLineTokens(lineNumber);\n      var inflatedTokens = tokens.inflate();\n      return this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\n    }\n  }]);\n\n  return Colorizer;\n}();\n\nfunction _colorize(lines, tabSize, tokenizationSupport) {\n  return new Promise(function (c, e) {\n    var execute = function execute() {\n      var result = _actualColorize(lines, tabSize, tokenizationSupport);\n\n      if (tokenizationSupport instanceof MonarchTokenizer) {\n        var status = tokenizationSupport.getLoadStatus();\n\n        if (status.loaded === false) {\n          status.promise.then(execute, e);\n          return;\n        }\n      }\n\n      c(result);\n    };\n\n    execute();\n  });\n}\n\nfunction _fakeColorize(lines, tabSize) {\n  var html = [];\n  var defaultMetadata = (0\n  /* None */\n  << 11\n  /* FONT_STYLE_OFFSET */\n  | 1\n  /* DefaultForeground */\n  << 14\n  /* FOREGROUND_OFFSET */\n  | 2\n  /* DefaultBackground */\n  << 23\n  /* BACKGROUND_OFFSET */\n  ) >>> 0;\n  var tokens = new Uint32Array(2);\n  tokens[0] = 0;\n  tokens[1] = defaultMetadata;\n\n  for (var i = 0, length = lines.length; i < length; i++) {\n    var line = lines[i];\n    tokens[0] = line.length;\n    var lineTokens = new LineTokens(tokens, line);\n    var isBasicASCII = ViewLineRenderingData.isBasicASCII(line,\n    /* check for basic ASCII */\n    true);\n    var containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII,\n    /* check for RTL */\n    true);\n    var renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n    html = html.concat(renderResult.html);\n    html.push('<br/>');\n  }\n\n  return html.join('');\n}\n\nfunction _actualColorize(lines, tabSize, tokenizationSupport) {\n  var html = [];\n  var state = tokenizationSupport.getInitialState();\n\n  for (var i = 0, length = lines.length; i < length; i++) {\n    var line = lines[i];\n    var tokenizeResult = tokenizationSupport.tokenize2(line, true, state, 0);\n    LineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\n    var lineTokens = new LineTokens(tokenizeResult.tokens, line);\n    var isBasicASCII = ViewLineRenderingData.isBasicASCII(line,\n    /* check for basic ASCII */\n    true);\n    var containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII,\n    /* check for RTL */\n    true);\n    var renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens.inflate(), [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n    html = html.concat(renderResult.html);\n    html.push('<br/>');\n    state = tokenizeResult.endState;\n  }\n\n  return html.join('');\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/standalone/browser/colorizer.js"],"names":["_a","TimeoutTimer","strings","LineTokens","TokenizationRegistry","RenderLineInput","renderViewLine2","renderViewLine","ViewLineRenderingData","MonarchTokenizer","ttPolicy","window","trustedTypes","createPolicy","createHTML","value","Colorizer","themeService","modeService","domNode","options","theme","mimeType","getAttribute","console","error","Promise","resolve","setTheme","text","firstChild","nodeValue","className","render","str","trustedhtml","innerHTML","colorize","then","err","tabSize","startsWithUTF8BOM","substr","lines","splitLines","language","getModeId","_fakeColorize","triggerMode","tokenizationSupport","get","_colorize","tokenizationSupportPromise","getPromise","reject","listener","timeout","execute","dispose","cancelAndSet","onDidChange","e","changedLanguages","indexOf","line","mightContainNonBasicASCII","mightContainRTL","tokens","isBasicASCII","containsRTL","renderResult","html","model","lineNumber","content","getLineContent","forceTokenization","getLineTokens","inflatedTokens","inflate","colorizeLine","c","result","_actualColorize","status","getLoadStatus","loaded","promise","defaultMetadata","Uint32Array","i","length","lineTokens","concat","push","join","state","getInitialState","tokenizeResult","tokenize2","convertToEndOffset","endState"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _a;\r\nimport { TimeoutTimer } from '../../../base/common/async.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { LineTokens } from '../../common/core/lineTokens.js';\r\nimport { TokenizationRegistry } from '../../common/modes.js';\r\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\r\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\r\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\r\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('standaloneColorizer', { createHTML: value => value });\r\nexport class Colorizer {\r\n    static colorizeElement(themeService, modeService, domNode, options) {\r\n        options = options || {};\r\n        let theme = options.theme || 'vs';\r\n        let mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\r\n        if (!mimeType) {\r\n            console.error('Mode not detected');\r\n            return Promise.resolve();\r\n        }\r\n        themeService.setTheme(theme);\r\n        let text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\r\n        domNode.className += ' ' + theme;\r\n        let render = (str) => {\r\n            var _a;\r\n            const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _a !== void 0 ? _a : str;\r\n            domNode.innerHTML = trustedhtml;\r\n        };\r\n        return this.colorize(modeService, text || '', mimeType, options).then(render, (err) => console.error(err));\r\n    }\r\n    static colorize(modeService, text, mimeType, options) {\r\n        let tabSize = 4;\r\n        if (options && typeof options.tabSize === 'number') {\r\n            tabSize = options.tabSize;\r\n        }\r\n        if (strings.startsWithUTF8BOM(text)) {\r\n            text = text.substr(1);\r\n        }\r\n        let lines = strings.splitLines(text);\r\n        let language = modeService.getModeId(mimeType);\r\n        if (!language) {\r\n            return Promise.resolve(_fakeColorize(lines, tabSize));\r\n        }\r\n        // Send out the event to create the mode\r\n        modeService.triggerMode(language);\r\n        const tokenizationSupport = TokenizationRegistry.get(language);\r\n        if (tokenizationSupport) {\r\n            return _colorize(lines, tabSize, tokenizationSupport);\r\n        }\r\n        const tokenizationSupportPromise = TokenizationRegistry.getPromise(language);\r\n        if (tokenizationSupportPromise) {\r\n            // A tokenizer will be registered soon\r\n            return new Promise((resolve, reject) => {\r\n                tokenizationSupportPromise.then(tokenizationSupport => {\r\n                    _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\r\n                }, reject);\r\n            });\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let listener = null;\r\n            let timeout = null;\r\n            const execute = () => {\r\n                if (listener) {\r\n                    listener.dispose();\r\n                    listener = null;\r\n                }\r\n                if (timeout) {\r\n                    timeout.dispose();\r\n                    timeout = null;\r\n                }\r\n                const tokenizationSupport = TokenizationRegistry.get(language);\r\n                if (tokenizationSupport) {\r\n                    _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\r\n                    return;\r\n                }\r\n                resolve(_fakeColorize(lines, tabSize));\r\n            };\r\n            // wait 500ms for mode to load, then give up\r\n            timeout = new TimeoutTimer();\r\n            timeout.cancelAndSet(execute, 500);\r\n            listener = TokenizationRegistry.onDidChange((e) => {\r\n                if (e.changedLanguages.indexOf(language) >= 0) {\r\n                    execute();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    static colorizeLine(line, mightContainNonBasicASCII, mightContainRTL, tokens, tabSize = 4) {\r\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\r\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\r\n        let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, tokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\r\n        return renderResult.html;\r\n    }\r\n    static colorizeModelLine(model, lineNumber, tabSize = 4) {\r\n        let content = model.getLineContent(lineNumber);\r\n        model.forceTokenization(lineNumber);\r\n        let tokens = model.getLineTokens(lineNumber);\r\n        let inflatedTokens = tokens.inflate();\r\n        return this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\r\n    }\r\n}\r\nfunction _colorize(lines, tabSize, tokenizationSupport) {\r\n    return new Promise((c, e) => {\r\n        const execute = () => {\r\n            const result = _actualColorize(lines, tabSize, tokenizationSupport);\r\n            if (tokenizationSupport instanceof MonarchTokenizer) {\r\n                const status = tokenizationSupport.getLoadStatus();\r\n                if (status.loaded === false) {\r\n                    status.promise.then(execute, e);\r\n                    return;\r\n                }\r\n            }\r\n            c(result);\r\n        };\r\n        execute();\r\n    });\r\n}\r\nfunction _fakeColorize(lines, tabSize) {\r\n    let html = [];\r\n    const defaultMetadata = ((0 /* None */ << 11 /* FONT_STYLE_OFFSET */)\r\n        | (1 /* DefaultForeground */ << 14 /* FOREGROUND_OFFSET */)\r\n        | (2 /* DefaultBackground */ << 23 /* BACKGROUND_OFFSET */)) >>> 0;\r\n    const tokens = new Uint32Array(2);\r\n    tokens[0] = 0;\r\n    tokens[1] = defaultMetadata;\r\n    for (let i = 0, length = lines.length; i < length; i++) {\r\n        let line = lines[i];\r\n        tokens[0] = line.length;\r\n        const lineTokens = new LineTokens(tokens, line);\r\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\r\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\r\n        let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\r\n        html = html.concat(renderResult.html);\r\n        html.push('<br/>');\r\n    }\r\n    return html.join('');\r\n}\r\nfunction _actualColorize(lines, tabSize, tokenizationSupport) {\r\n    let html = [];\r\n    let state = tokenizationSupport.getInitialState();\r\n    for (let i = 0, length = lines.length; i < length; i++) {\r\n        let line = lines[i];\r\n        let tokenizeResult = tokenizationSupport.tokenize2(line, true, state, 0);\r\n        LineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\r\n        let lineTokens = new LineTokens(tokenizeResult.tokens, line);\r\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\r\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\r\n        let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens.inflate(), [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\r\n        html = html.concat(renderResult.html);\r\n        html.push('<br/>');\r\n        state = tokenizeResult.endState;\r\n    }\r\n    return html.join('');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}