{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { Configuration } from '../config/configuration.js';\nimport { VisibleLinesCollection } from './viewLayer.js';\nimport { ViewPart } from './viewPart.js';\nexport var ViewOverlays = /*#__PURE__*/function (_ViewPart) {\n  _inherits(ViewOverlays, _ViewPart);\n\n  var _super = _createSuper(ViewOverlays);\n\n  function ViewOverlays(context) {\n    var _this;\n\n    _classCallCheck(this, ViewOverlays);\n\n    _this = _super.call(this, context);\n    _this._visibleLines = new VisibleLinesCollection(_assertThisInitialized(_this));\n    _this.domNode = _this._visibleLines.domNode;\n    _this._dynamicOverlays = [];\n    _this._isFocused = false;\n\n    _this.domNode.setClassName('view-overlays');\n\n    return _this;\n  }\n\n  _createClass(ViewOverlays, [{\n    key: \"shouldRender\",\n    value: function shouldRender() {\n      if (_get(_getPrototypeOf(ViewOverlays.prototype), \"shouldRender\", this).call(this)) {\n        return true;\n      }\n\n      for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n        var dynamicOverlay = this._dynamicOverlays[i];\n\n        if (dynamicOverlay.shouldRender()) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ViewOverlays.prototype), \"dispose\", this).call(this);\n\n      for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n        var dynamicOverlay = this._dynamicOverlays[i];\n        dynamicOverlay.dispose();\n      }\n\n      this._dynamicOverlays = [];\n    }\n  }, {\n    key: \"getDomNode\",\n    value: function getDomNode() {\n      return this.domNode;\n    } // ---- begin IVisibleLinesHost\n\n  }, {\n    key: \"createVisibleLine\",\n    value: function createVisibleLine() {\n      return new ViewOverlayLine(this._context.configuration, this._dynamicOverlays);\n    } // ---- end IVisibleLinesHost\n\n  }, {\n    key: \"addDynamicOverlay\",\n    value: function addDynamicOverlay(overlay) {\n      this._dynamicOverlays.push(overlay);\n    } // ----- event handlers\n\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      this._visibleLines.onConfigurationChanged(e);\n\n      var startLineNumber = this._visibleLines.getStartLineNumber();\n\n      var endLineNumber = this._visibleLines.getEndLineNumber();\n\n      for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        var line = this._visibleLines.getVisibleLine(lineNumber);\n\n        line.onConfigurationChanged(e);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return this._visibleLines.onFlushed(e);\n    }\n  }, {\n    key: \"onFocusChanged\",\n    value: function onFocusChanged(e) {\n      this._isFocused = e.isFocused;\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return this._visibleLines.onLinesChanged(e);\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return this._visibleLines.onLinesDeleted(e);\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return this._visibleLines.onLinesInserted(e);\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return this._visibleLines.onScrollChanged(e) || true;\n    }\n  }, {\n    key: \"onTokensChanged\",\n    value: function onTokensChanged(e) {\n      return this._visibleLines.onTokensChanged(e);\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return this._visibleLines.onZonesChanged(e);\n    } // ----- end event handlers\n\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      var toRender = this._dynamicOverlays.filter(function (overlay) {\n        return overlay.shouldRender();\n      });\n\n      for (var i = 0, len = toRender.length; i < len; i++) {\n        var dynamicOverlay = toRender[i];\n        dynamicOverlay.prepareRender(ctx);\n        dynamicOverlay.onDidRender();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx) {\n      // Overwriting to bypass `shouldRender` flag\n      this._viewOverlaysRender(ctx);\n\n      this.domNode.toggleClassName('focused', this._isFocused);\n    }\n  }, {\n    key: \"_viewOverlaysRender\",\n    value: function _viewOverlaysRender(ctx) {\n      this._visibleLines.renderLines(ctx.viewportData);\n    }\n  }]);\n\n  return ViewOverlays;\n}(ViewPart);\nexport var ViewOverlayLine = /*#__PURE__*/function () {\n  function ViewOverlayLine(configuration, dynamicOverlays) {\n    _classCallCheck(this, ViewOverlayLine);\n\n    this._configuration = configuration;\n    this._lineHeight = this._configuration.options.get(53\n    /* lineHeight */\n    );\n    this._dynamicOverlays = dynamicOverlays;\n    this._domNode = null;\n    this._renderedContent = null;\n  }\n\n  _createClass(ViewOverlayLine, [{\n    key: \"getDomNode\",\n    value: function getDomNode() {\n      if (!this._domNode) {\n        return null;\n      }\n\n      return this._domNode.domNode;\n    }\n  }, {\n    key: \"setDomNode\",\n    value: function setDomNode(domNode) {\n      this._domNode = createFastDomNode(domNode);\n    }\n  }, {\n    key: \"onContentChanged\",\n    value: function onContentChanged() {// Nothing\n    }\n  }, {\n    key: \"onTokensChanged\",\n    value: function onTokensChanged() {// Nothing\n    }\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      this._lineHeight = this._configuration.options.get(53\n      /* lineHeight */\n      );\n    }\n  }, {\n    key: \"renderLine\",\n    value: function renderLine(lineNumber, deltaTop, viewportData, sb) {\n      var result = '';\n\n      for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n        var dynamicOverlay = this._dynamicOverlays[i];\n        result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n      }\n\n      if (this._renderedContent === result) {\n        // No rendering needed\n        return false;\n      }\n\n      this._renderedContent = result;\n      sb.appendASCIIString('<div style=\"position:absolute;top:');\n      sb.appendASCIIString(String(deltaTop));\n      sb.appendASCIIString('px;width:100%;height:');\n      sb.appendASCIIString(String(this._lineHeight));\n      sb.appendASCIIString('px;\">');\n      sb.appendASCIIString(result);\n      sb.appendASCIIString('</div>');\n      return true;\n    }\n  }, {\n    key: \"layoutLine\",\n    value: function layoutLine(lineNumber, deltaTop) {\n      if (this._domNode) {\n        this._domNode.setTop(deltaTop);\n\n        this._domNode.setHeight(this._lineHeight);\n      }\n    }\n  }]);\n\n  return ViewOverlayLine;\n}();\nexport var ContentViewOverlays = /*#__PURE__*/function (_ViewOverlays) {\n  _inherits(ContentViewOverlays, _ViewOverlays);\n\n  var _super2 = _createSuper(ContentViewOverlays);\n\n  function ContentViewOverlays(context) {\n    var _this2;\n\n    _classCallCheck(this, ContentViewOverlays);\n\n    _this2 = _super2.call(this, context);\n    var options = _this2._context.configuration.options;\n    var layoutInfo = options.get(124\n    /* layoutInfo */\n    );\n    _this2._contentWidth = layoutInfo.contentWidth;\n\n    _this2.domNode.setHeight(0);\n\n    return _this2;\n  } // --- begin event handlers\n\n\n  _createClass(ContentViewOverlays, [{\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n      var layoutInfo = options.get(124\n      /* layoutInfo */\n      );\n      this._contentWidth = layoutInfo.contentWidth;\n      return _get(_getPrototypeOf(ContentViewOverlays.prototype), \"onConfigurationChanged\", this).call(this, e) || true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return _get(_getPrototypeOf(ContentViewOverlays.prototype), \"onScrollChanged\", this).call(this, e) || e.scrollWidthChanged;\n    } // --- end event handlers\n\n  }, {\n    key: \"_viewOverlaysRender\",\n    value: function _viewOverlaysRender(ctx) {\n      _get(_getPrototypeOf(ContentViewOverlays.prototype), \"_viewOverlaysRender\", this).call(this, ctx);\n\n      this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n    }\n  }]);\n\n  return ContentViewOverlays;\n}(ViewOverlays);\nexport var MarginViewOverlays = /*#__PURE__*/function (_ViewOverlays2) {\n  _inherits(MarginViewOverlays, _ViewOverlays2);\n\n  var _super3 = _createSuper(MarginViewOverlays);\n\n  function MarginViewOverlays(context) {\n    var _this3;\n\n    _classCallCheck(this, MarginViewOverlays);\n\n    _this3 = _super3.call(this, context);\n    var options = _this3._context.configuration.options;\n    var layoutInfo = options.get(124\n    /* layoutInfo */\n    );\n    _this3._contentLeft = layoutInfo.contentLeft;\n\n    _this3.domNode.setClassName('margin-view-overlays');\n\n    _this3.domNode.setWidth(1);\n\n    Configuration.applyFontInfo(_this3.domNode, options.get(38\n    /* fontInfo */\n    ));\n    return _this3;\n  }\n\n  _createClass(MarginViewOverlays, [{\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n      Configuration.applyFontInfo(this.domNode, options.get(38\n      /* fontInfo */\n      ));\n      var layoutInfo = options.get(124\n      /* layoutInfo */\n      );\n      this._contentLeft = layoutInfo.contentLeft;\n      return _get(_getPrototypeOf(MarginViewOverlays.prototype), \"onConfigurationChanged\", this).call(this, e) || true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return _get(_getPrototypeOf(MarginViewOverlays.prototype), \"onScrollChanged\", this).call(this, e) || e.scrollHeightChanged;\n    }\n  }, {\n    key: \"_viewOverlaysRender\",\n    value: function _viewOverlaysRender(ctx) {\n      _get(_getPrototypeOf(MarginViewOverlays.prototype), \"_viewOverlaysRender\", this).call(this, ctx);\n\n      var height = Math.min(ctx.scrollHeight, 1000000);\n      this.domNode.setHeight(height);\n      this.domNode.setWidth(this._contentLeft);\n    }\n  }]);\n\n  return MarginViewOverlays;\n}(ViewOverlays);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/view/viewOverlays.js"],"names":["createFastDomNode","Configuration","VisibleLinesCollection","ViewPart","ViewOverlays","context","_visibleLines","domNode","_dynamicOverlays","_isFocused","setClassName","i","len","length","dynamicOverlay","shouldRender","dispose","ViewOverlayLine","_context","configuration","overlay","push","e","onConfigurationChanged","startLineNumber","getStartLineNumber","endLineNumber","getEndLineNumber","lineNumber","line","getVisibleLine","onFlushed","isFocused","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","onTokensChanged","onZonesChanged","ctx","toRender","filter","prepareRender","onDidRender","_viewOverlaysRender","toggleClassName","renderLines","viewportData","dynamicOverlays","_configuration","_lineHeight","options","get","_domNode","_renderedContent","deltaTop","sb","result","render","appendASCIIString","String","setTop","setHeight","ContentViewOverlays","layoutInfo","_contentWidth","contentWidth","scrollWidthChanged","setWidth","Math","max","scrollWidth","MarginViewOverlays","_contentLeft","contentLeft","applyFontInfo","scrollHeightChanged","height","min","scrollHeight"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\r\nimport { Configuration } from '../config/configuration.js';\r\nimport { VisibleLinesCollection } from './viewLayer.js';\r\nimport { ViewPart } from './viewPart.js';\r\nexport class ViewOverlays extends ViewPart {\r\n    constructor(context) {\r\n        super(context);\r\n        this._visibleLines = new VisibleLinesCollection(this);\r\n        this.domNode = this._visibleLines.domNode;\r\n        this._dynamicOverlays = [];\r\n        this._isFocused = false;\r\n        this.domNode.setClassName('view-overlays');\r\n    }\r\n    shouldRender() {\r\n        if (super.shouldRender()) {\r\n            return true;\r\n        }\r\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\r\n            const dynamicOverlay = this._dynamicOverlays[i];\r\n            if (dynamicOverlay.shouldRender()) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\r\n            const dynamicOverlay = this._dynamicOverlays[i];\r\n            dynamicOverlay.dispose();\r\n        }\r\n        this._dynamicOverlays = [];\r\n    }\r\n    getDomNode() {\r\n        return this.domNode;\r\n    }\r\n    // ---- begin IVisibleLinesHost\r\n    createVisibleLine() {\r\n        return new ViewOverlayLine(this._context.configuration, this._dynamicOverlays);\r\n    }\r\n    // ---- end IVisibleLinesHost\r\n    addDynamicOverlay(overlay) {\r\n        this._dynamicOverlays.push(overlay);\r\n    }\r\n    // ----- event handlers\r\n    onConfigurationChanged(e) {\r\n        this._visibleLines.onConfigurationChanged(e);\r\n        const startLineNumber = this._visibleLines.getStartLineNumber();\r\n        const endLineNumber = this._visibleLines.getEndLineNumber();\r\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            const line = this._visibleLines.getVisibleLine(lineNumber);\r\n            line.onConfigurationChanged(e);\r\n        }\r\n        return true;\r\n    }\r\n    onFlushed(e) {\r\n        return this._visibleLines.onFlushed(e);\r\n    }\r\n    onFocusChanged(e) {\r\n        this._isFocused = e.isFocused;\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return this._visibleLines.onLinesChanged(e);\r\n    }\r\n    onLinesDeleted(e) {\r\n        return this._visibleLines.onLinesDeleted(e);\r\n    }\r\n    onLinesInserted(e) {\r\n        return this._visibleLines.onLinesInserted(e);\r\n    }\r\n    onScrollChanged(e) {\r\n        return this._visibleLines.onScrollChanged(e) || true;\r\n    }\r\n    onTokensChanged(e) {\r\n        return this._visibleLines.onTokensChanged(e);\r\n    }\r\n    onZonesChanged(e) {\r\n        return this._visibleLines.onZonesChanged(e);\r\n    }\r\n    // ----- end event handlers\r\n    prepareRender(ctx) {\r\n        const toRender = this._dynamicOverlays.filter(overlay => overlay.shouldRender());\r\n        for (let i = 0, len = toRender.length; i < len; i++) {\r\n            const dynamicOverlay = toRender[i];\r\n            dynamicOverlay.prepareRender(ctx);\r\n            dynamicOverlay.onDidRender();\r\n        }\r\n    }\r\n    render(ctx) {\r\n        // Overwriting to bypass `shouldRender` flag\r\n        this._viewOverlaysRender(ctx);\r\n        this.domNode.toggleClassName('focused', this._isFocused);\r\n    }\r\n    _viewOverlaysRender(ctx) {\r\n        this._visibleLines.renderLines(ctx.viewportData);\r\n    }\r\n}\r\nexport class ViewOverlayLine {\r\n    constructor(configuration, dynamicOverlays) {\r\n        this._configuration = configuration;\r\n        this._lineHeight = this._configuration.options.get(53 /* lineHeight */);\r\n        this._dynamicOverlays = dynamicOverlays;\r\n        this._domNode = null;\r\n        this._renderedContent = null;\r\n    }\r\n    getDomNode() {\r\n        if (!this._domNode) {\r\n            return null;\r\n        }\r\n        return this._domNode.domNode;\r\n    }\r\n    setDomNode(domNode) {\r\n        this._domNode = createFastDomNode(domNode);\r\n    }\r\n    onContentChanged() {\r\n        // Nothing\r\n    }\r\n    onTokensChanged() {\r\n        // Nothing\r\n    }\r\n    onConfigurationChanged(e) {\r\n        this._lineHeight = this._configuration.options.get(53 /* lineHeight */);\r\n    }\r\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\r\n        let result = '';\r\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\r\n            const dynamicOverlay = this._dynamicOverlays[i];\r\n            result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\r\n        }\r\n        if (this._renderedContent === result) {\r\n            // No rendering needed\r\n            return false;\r\n        }\r\n        this._renderedContent = result;\r\n        sb.appendASCIIString('<div style=\"position:absolute;top:');\r\n        sb.appendASCIIString(String(deltaTop));\r\n        sb.appendASCIIString('px;width:100%;height:');\r\n        sb.appendASCIIString(String(this._lineHeight));\r\n        sb.appendASCIIString('px;\">');\r\n        sb.appendASCIIString(result);\r\n        sb.appendASCIIString('</div>');\r\n        return true;\r\n    }\r\n    layoutLine(lineNumber, deltaTop) {\r\n        if (this._domNode) {\r\n            this._domNode.setTop(deltaTop);\r\n            this._domNode.setHeight(this._lineHeight);\r\n        }\r\n    }\r\n}\r\nexport class ContentViewOverlays extends ViewOverlays {\r\n    constructor(context) {\r\n        super(context);\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._contentWidth = layoutInfo.contentWidth;\r\n        this.domNode.setHeight(0);\r\n    }\r\n    // --- begin event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._contentWidth = layoutInfo.contentWidth;\r\n        return super.onConfigurationChanged(e) || true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return super.onScrollChanged(e) || e.scrollWidthChanged;\r\n    }\r\n    // --- end event handlers\r\n    _viewOverlaysRender(ctx) {\r\n        super._viewOverlaysRender(ctx);\r\n        this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\r\n    }\r\n}\r\nexport class MarginViewOverlays extends ViewOverlays {\r\n    constructor(context) {\r\n        super(context);\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._contentLeft = layoutInfo.contentLeft;\r\n        this.domNode.setClassName('margin-view-overlays');\r\n        this.domNode.setWidth(1);\r\n        Configuration.applyFontInfo(this.domNode, options.get(38 /* fontInfo */));\r\n    }\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        Configuration.applyFontInfo(this.domNode, options.get(38 /* fontInfo */));\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._contentLeft = layoutInfo.contentLeft;\r\n        return super.onConfigurationChanged(e) || true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return super.onScrollChanged(e) || e.scrollHeightChanged;\r\n    }\r\n    _viewOverlaysRender(ctx) {\r\n        super._viewOverlaysRender(ctx);\r\n        const height = Math.min(ctx.scrollHeight, 1000000);\r\n        this.domNode.setHeight(height);\r\n        this.domNode.setWidth(this._contentLeft);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}