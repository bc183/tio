{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveLineNumber, editorLineNumbers } from '../../../common/view/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport var LineNumbersOverlay = /*#__PURE__*/function (_DynamicViewOverlay) {\n  _inherits(LineNumbersOverlay, _DynamicViewOverlay);\n\n  var _super = _createSuper(LineNumbersOverlay);\n\n  function LineNumbersOverlay(context) {\n    var _this;\n\n    _classCallCheck(this, LineNumbersOverlay);\n\n    _this = _super.call(this);\n    _this._context = context;\n\n    _this._readConfig();\n\n    _this._lastCursorModelPosition = new Position(1, 1);\n    _this._renderResult = null;\n\n    _this._context.addEventHandler(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(LineNumbersOverlay, [{\n    key: \"_readConfig\",\n    value: function _readConfig() {\n      var options = this._context.configuration.options;\n      this._lineHeight = options.get(53\n      /* lineHeight */\n      );\n      var lineNumbers = options.get(54\n      /* lineNumbers */\n      );\n      this._renderLineNumbers = lineNumbers.renderType;\n      this._renderCustomLineNumbers = lineNumbers.renderFn;\n      this._renderFinalNewline = options.get(79\n      /* renderFinalNewline */\n      );\n      var layoutInfo = options.get(124\n      /* layoutInfo */\n      );\n      this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n      this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._context.removeEventHandler(this);\n\n      this._renderResult = null;\n\n      _get(_getPrototypeOf(LineNumbersOverlay.prototype), \"dispose\", this).call(this);\n    } // --- begin event handlers\n\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      this._readConfig();\n\n      return true;\n    }\n  }, {\n    key: \"onCursorStateChanged\",\n    value: function onCursorStateChanged(e) {\n      var primaryViewPosition = e.selections[0].getPosition();\n      this._lastCursorModelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n\n      if (this._renderLineNumbers === 2\n      /* Relative */\n      || this._renderLineNumbers === 3\n      /* Interval */\n      ) {\n          return true;\n        }\n\n      return false;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return e.scrollTopChanged;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    } // --- end event handlers\n\n  }, {\n    key: \"_getLineRenderLineNumber\",\n    value: function _getLineRenderLineNumber(viewLineNumber) {\n      var modelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n\n      if (modelPosition.column !== 1) {\n        return '';\n      }\n\n      var modelLineNumber = modelPosition.lineNumber;\n\n      if (this._renderCustomLineNumbers) {\n        return this._renderCustomLineNumbers(modelLineNumber);\n      }\n\n      if (this._renderLineNumbers === 2\n      /* Relative */\n      ) {\n          var diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n\n          if (diff === 0) {\n            return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n          }\n\n          return String(diff);\n        }\n\n      if (this._renderLineNumbers === 3\n      /* Interval */\n      ) {\n          if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n            return String(modelLineNumber);\n          }\n\n          if (modelLineNumber % 10 === 0) {\n            return String(modelLineNumber);\n          }\n\n          return '';\n        }\n\n      return String(modelLineNumber);\n    }\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      if (this._renderLineNumbers === 0\n      /* Off */\n      ) {\n          this._renderResult = null;\n          return;\n        }\n\n      var lineHeightClassName = platform.isLinux ? this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd' : '';\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n      var common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft.toString() + 'px;width:' + this._lineNumbersWidth.toString() + 'px;\">';\n\n      var lineCount = this._context.model.getLineCount();\n\n      var output = [];\n\n      for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n        var lineIndex = lineNumber - visibleStartLineNumber;\n\n        if (!this._renderFinalNewline) {\n          if (lineNumber === lineCount && this._context.model.getLineLength(lineNumber) === 0) {\n            // Do not render last (empty) line\n            output[lineIndex] = '';\n            continue;\n          }\n        }\n\n        var renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n\n        if (renderLineNumber) {\n          output[lineIndex] = common + renderLineNumber + '</div>';\n        } else {\n          output[lineIndex] = '';\n        }\n      }\n\n      this._renderResult = output;\n    }\n  }, {\n    key: \"render\",\n    value: function render(startLineNumber, lineNumber) {\n      if (!this._renderResult) {\n        return '';\n      }\n\n      var lineIndex = lineNumber - startLineNumber;\n\n      if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n        return '';\n      }\n\n      return this._renderResult[lineIndex];\n    }\n  }]);\n\n  return LineNumbersOverlay;\n}(DynamicViewOverlay);\nLineNumbersOverlay.CLASS_NAME = 'line-numbers'; // theming\n\nregisterThemingParticipant(function (theme, collector) {\n  var lineNumbers = theme.getColor(editorLineNumbers);\n\n  if (lineNumbers) {\n    collector.addRule(\".monaco-editor .line-numbers { color: \".concat(lineNumbers, \"; }\"));\n  }\n\n  var activeLineNumber = theme.getColor(editorActiveLineNumber);\n\n  if (activeLineNumber) {\n    collector.addRule(\".monaco-editor .current-line ~ .line-numbers { color: \".concat(activeLineNumber, \"; }\"));\n  }\n});","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js"],"names":["platform","DynamicViewOverlay","Position","editorActiveLineNumber","editorLineNumbers","registerThemingParticipant","LineNumbersOverlay","context","_context","_readConfig","_lastCursorModelPosition","_renderResult","addEventHandler","options","configuration","_lineHeight","get","lineNumbers","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","layoutInfo","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","removeEventHandler","e","primaryViewPosition","selections","getPosition","model","coordinatesConverter","convertViewPositionToModelPosition","scrollTopChanged","viewLineNumber","modelPosition","column","modelLineNumber","lineNumber","diff","Math","abs","String","ctx","lineHeightClassName","isLinux","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","common","CLASS_NAME","toString","lineCount","getLineCount","output","lineIndex","getLineLength","renderLineNumber","_getLineRenderLineNumber","length","theme","collector","getColor","addRule","activeLineNumber"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './lineNumbers.css';\r\nimport * as platform from '../../../../base/common/platform.js';\r\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\r\nimport { Position } from '../../../common/core/position.js';\r\nimport { editorActiveLineNumber, editorLineNumbers } from '../../../common/view/editorColorRegistry.js';\r\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\r\nexport class LineNumbersOverlay extends DynamicViewOverlay {\r\n    constructor(context) {\r\n        super();\r\n        this._context = context;\r\n        this._readConfig();\r\n        this._lastCursorModelPosition = new Position(1, 1);\r\n        this._renderResult = null;\r\n        this._context.addEventHandler(this);\r\n    }\r\n    _readConfig() {\r\n        const options = this._context.configuration.options;\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        const lineNumbers = options.get(54 /* lineNumbers */);\r\n        this._renderLineNumbers = lineNumbers.renderType;\r\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\r\n        this._renderFinalNewline = options.get(79 /* renderFinalNewline */);\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\r\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\r\n    }\r\n    dispose() {\r\n        this._context.removeEventHandler(this);\r\n        this._renderResult = null;\r\n        super.dispose();\r\n    }\r\n    // --- begin event handlers\r\n    onConfigurationChanged(e) {\r\n        this._readConfig();\r\n        return true;\r\n    }\r\n    onCursorStateChanged(e) {\r\n        const primaryViewPosition = e.selections[0].getPosition();\r\n        this._lastCursorModelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\r\n        if (this._renderLineNumbers === 2 /* Relative */ || this._renderLineNumbers === 3 /* Interval */) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    onFlushed(e) {\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return true;\r\n    }\r\n    onLinesDeleted(e) {\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return e.scrollTopChanged;\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    // --- end event handlers\r\n    _getLineRenderLineNumber(viewLineNumber) {\r\n        const modelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\r\n        if (modelPosition.column !== 1) {\r\n            return '';\r\n        }\r\n        const modelLineNumber = modelPosition.lineNumber;\r\n        if (this._renderCustomLineNumbers) {\r\n            return this._renderCustomLineNumbers(modelLineNumber);\r\n        }\r\n        if (this._renderLineNumbers === 2 /* Relative */) {\r\n            const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\r\n            if (diff === 0) {\r\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\r\n            }\r\n            return String(diff);\r\n        }\r\n        if (this._renderLineNumbers === 3 /* Interval */) {\r\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\r\n                return String(modelLineNumber);\r\n            }\r\n            if (modelLineNumber % 10 === 0) {\r\n                return String(modelLineNumber);\r\n            }\r\n            return '';\r\n        }\r\n        return String(modelLineNumber);\r\n    }\r\n    prepareRender(ctx) {\r\n        if (this._renderLineNumbers === 0 /* Off */) {\r\n            this._renderResult = null;\r\n            return;\r\n        }\r\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\r\n        const common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft.toString() + 'px;width:' + this._lineNumbersWidth.toString() + 'px;\">';\r\n        const lineCount = this._context.model.getLineCount();\r\n        const output = [];\r\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\r\n            const lineIndex = lineNumber - visibleStartLineNumber;\r\n            if (!this._renderFinalNewline) {\r\n                if (lineNumber === lineCount && this._context.model.getLineLength(lineNumber) === 0) {\r\n                    // Do not render last (empty) line\r\n                    output[lineIndex] = '';\r\n                    continue;\r\n                }\r\n            }\r\n            const renderLineNumber = this._getLineRenderLineNumber(lineNumber);\r\n            if (renderLineNumber) {\r\n                output[lineIndex] = (common\r\n                    + renderLineNumber\r\n                    + '</div>');\r\n            }\r\n            else {\r\n                output[lineIndex] = '';\r\n            }\r\n        }\r\n        this._renderResult = output;\r\n    }\r\n    render(startLineNumber, lineNumber) {\r\n        if (!this._renderResult) {\r\n            return '';\r\n        }\r\n        const lineIndex = lineNumber - startLineNumber;\r\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\r\n            return '';\r\n        }\r\n        return this._renderResult[lineIndex];\r\n    }\r\n}\r\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\r\n// theming\r\nregisterThemingParticipant((theme, collector) => {\r\n    const lineNumbers = theme.getColor(editorLineNumbers);\r\n    if (lineNumbers) {\r\n        collector.addRule(`.monaco-editor .line-numbers { color: ${lineNumbers}; }`);\r\n    }\r\n    const activeLineNumber = theme.getColor(editorActiveLineNumber);\r\n    if (activeLineNumber) {\r\n        collector.addRule(`.monaco-editor .current-line ~ .line-numbers { color: ${activeLineNumber}; }`);\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}