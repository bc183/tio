{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from './browser.js';\nimport { KeyCodeUtils, SimpleKeybinding } from '../common/keyCodes.js';\nimport * as platform from '../common/platform.js';\nvar KEY_CODE_MAP = new Array(230);\nvar INVERSE_KEY_CODE_MAP = new Array(112\n/* MAX_VALUE */\n);\n\n(function () {\n  for (var i = 0; i < INVERSE_KEY_CODE_MAP.length; i++) {\n    INVERSE_KEY_CODE_MAP[i] = -1;\n  }\n\n  function define(code, keyCode) {\n    KEY_CODE_MAP[code] = keyCode;\n    INVERSE_KEY_CODE_MAP[keyCode] = code;\n  }\n\n  define(3, 7\n  /* PauseBreak */\n  ); // VK_CANCEL 0x03 Control-break processing\n\n  define(8, 1\n  /* Backspace */\n  );\n  define(9, 2\n  /* Tab */\n  );\n  define(13, 3\n  /* Enter */\n  );\n  define(16, 4\n  /* Shift */\n  );\n  define(17, 5\n  /* Ctrl */\n  );\n  define(18, 6\n  /* Alt */\n  );\n  define(19, 7\n  /* PauseBreak */\n  );\n  define(20, 8\n  /* CapsLock */\n  );\n  define(27, 9\n  /* Escape */\n  );\n  define(32, 10\n  /* Space */\n  );\n  define(33, 11\n  /* PageUp */\n  );\n  define(34, 12\n  /* PageDown */\n  );\n  define(35, 13\n  /* End */\n  );\n  define(36, 14\n  /* Home */\n  );\n  define(37, 15\n  /* LeftArrow */\n  );\n  define(38, 16\n  /* UpArrow */\n  );\n  define(39, 17\n  /* RightArrow */\n  );\n  define(40, 18\n  /* DownArrow */\n  );\n  define(45, 19\n  /* Insert */\n  );\n  define(46, 20\n  /* Delete */\n  );\n  define(48, 21\n  /* KEY_0 */\n  );\n  define(49, 22\n  /* KEY_1 */\n  );\n  define(50, 23\n  /* KEY_2 */\n  );\n  define(51, 24\n  /* KEY_3 */\n  );\n  define(52, 25\n  /* KEY_4 */\n  );\n  define(53, 26\n  /* KEY_5 */\n  );\n  define(54, 27\n  /* KEY_6 */\n  );\n  define(55, 28\n  /* KEY_7 */\n  );\n  define(56, 29\n  /* KEY_8 */\n  );\n  define(57, 30\n  /* KEY_9 */\n  );\n  define(65, 31\n  /* KEY_A */\n  );\n  define(66, 32\n  /* KEY_B */\n  );\n  define(67, 33\n  /* KEY_C */\n  );\n  define(68, 34\n  /* KEY_D */\n  );\n  define(69, 35\n  /* KEY_E */\n  );\n  define(70, 36\n  /* KEY_F */\n  );\n  define(71, 37\n  /* KEY_G */\n  );\n  define(72, 38\n  /* KEY_H */\n  );\n  define(73, 39\n  /* KEY_I */\n  );\n  define(74, 40\n  /* KEY_J */\n  );\n  define(75, 41\n  /* KEY_K */\n  );\n  define(76, 42\n  /* KEY_L */\n  );\n  define(77, 43\n  /* KEY_M */\n  );\n  define(78, 44\n  /* KEY_N */\n  );\n  define(79, 45\n  /* KEY_O */\n  );\n  define(80, 46\n  /* KEY_P */\n  );\n  define(81, 47\n  /* KEY_Q */\n  );\n  define(82, 48\n  /* KEY_R */\n  );\n  define(83, 49\n  /* KEY_S */\n  );\n  define(84, 50\n  /* KEY_T */\n  );\n  define(85, 51\n  /* KEY_U */\n  );\n  define(86, 52\n  /* KEY_V */\n  );\n  define(87, 53\n  /* KEY_W */\n  );\n  define(88, 54\n  /* KEY_X */\n  );\n  define(89, 55\n  /* KEY_Y */\n  );\n  define(90, 56\n  /* KEY_Z */\n  );\n  define(93, 58\n  /* ContextMenu */\n  );\n  define(96, 93\n  /* NUMPAD_0 */\n  );\n  define(97, 94\n  /* NUMPAD_1 */\n  );\n  define(98, 95\n  /* NUMPAD_2 */\n  );\n  define(99, 96\n  /* NUMPAD_3 */\n  );\n  define(100, 97\n  /* NUMPAD_4 */\n  );\n  define(101, 98\n  /* NUMPAD_5 */\n  );\n  define(102, 99\n  /* NUMPAD_6 */\n  );\n  define(103, 100\n  /* NUMPAD_7 */\n  );\n  define(104, 101\n  /* NUMPAD_8 */\n  );\n  define(105, 102\n  /* NUMPAD_9 */\n  );\n  define(106, 103\n  /* NUMPAD_MULTIPLY */\n  );\n  define(107, 104\n  /* NUMPAD_ADD */\n  );\n  define(108, 105\n  /* NUMPAD_SEPARATOR */\n  );\n  define(109, 106\n  /* NUMPAD_SUBTRACT */\n  );\n  define(110, 107\n  /* NUMPAD_DECIMAL */\n  );\n  define(111, 108\n  /* NUMPAD_DIVIDE */\n  );\n  define(112, 59\n  /* F1 */\n  );\n  define(113, 60\n  /* F2 */\n  );\n  define(114, 61\n  /* F3 */\n  );\n  define(115, 62\n  /* F4 */\n  );\n  define(116, 63\n  /* F5 */\n  );\n  define(117, 64\n  /* F6 */\n  );\n  define(118, 65\n  /* F7 */\n  );\n  define(119, 66\n  /* F8 */\n  );\n  define(120, 67\n  /* F9 */\n  );\n  define(121, 68\n  /* F10 */\n  );\n  define(122, 69\n  /* F11 */\n  );\n  define(123, 70\n  /* F12 */\n  );\n  define(124, 71\n  /* F13 */\n  );\n  define(125, 72\n  /* F14 */\n  );\n  define(126, 73\n  /* F15 */\n  );\n  define(127, 74\n  /* F16 */\n  );\n  define(128, 75\n  /* F17 */\n  );\n  define(129, 76\n  /* F18 */\n  );\n  define(130, 77\n  /* F19 */\n  );\n  define(144, 78\n  /* NumLock */\n  );\n  define(145, 79\n  /* ScrollLock */\n  );\n  define(186, 80\n  /* US_SEMICOLON */\n  );\n  define(187, 81\n  /* US_EQUAL */\n  );\n  define(188, 82\n  /* US_COMMA */\n  );\n  define(189, 83\n  /* US_MINUS */\n  );\n  define(190, 84\n  /* US_DOT */\n  );\n  define(191, 85\n  /* US_SLASH */\n  );\n  define(192, 86\n  /* US_BACKTICK */\n  );\n  define(193, 110\n  /* ABNT_C1 */\n  );\n  define(194, 111\n  /* ABNT_C2 */\n  );\n  define(219, 87\n  /* US_OPEN_SQUARE_BRACKET */\n  );\n  define(220, 88\n  /* US_BACKSLASH */\n  );\n  define(221, 89\n  /* US_CLOSE_SQUARE_BRACKET */\n  );\n  define(222, 90\n  /* US_QUOTE */\n  );\n  define(223, 91\n  /* OEM_8 */\n  );\n  define(226, 92\n  /* OEM_102 */\n  );\n  /**\r\n   * https://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\r\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\r\n   */\n\n  define(229, 109\n  /* KEY_IN_COMPOSITION */\n  );\n\n  if (browser.isFirefox) {\n    define(59, 80\n    /* US_SEMICOLON */\n    );\n    define(107, 81\n    /* US_EQUAL */\n    );\n    define(109, 83\n    /* US_MINUS */\n    );\n\n    if (platform.isMacintosh) {\n      define(224, 57\n      /* Meta */\n      );\n    }\n  } else if (browser.isWebKit) {\n    define(91, 57\n    /* Meta */\n    );\n\n    if (platform.isMacintosh) {\n      // the two meta keys in the Mac have different key codes (91 and 93)\n      define(93, 57\n      /* Meta */\n      );\n    } else {\n      define(92, 57\n      /* Meta */\n      );\n    }\n  }\n})();\n\nfunction extractKeyCode(e) {\n  if (e.charCode) {\n    // \"keypress\" events mostly\n    var _char = String.fromCharCode(e.charCode).toUpperCase();\n\n    return KeyCodeUtils.fromString(_char);\n  }\n\n  return KEY_CODE_MAP[e.keyCode] || 0\n  /* Unknown */\n  ;\n}\n\nvar ctrlKeyMod = platform.isMacintosh ? 256\n/* WinCtrl */\n: 2048\n/* CtrlCmd */\n;\nvar altKeyMod = 512\n/* Alt */\n;\nvar shiftKeyMod = 1024\n/* Shift */\n;\nvar metaKeyMod = platform.isMacintosh ? 2048\n/* CtrlCmd */\n: 256\n/* WinCtrl */\n;\nexport var StandardKeyboardEvent = /*#__PURE__*/function () {\n  function StandardKeyboardEvent(source) {\n    _classCallCheck(this, StandardKeyboardEvent);\n\n    this._standardKeyboardEventBrand = true;\n    var e = source;\n    this.browserEvent = e;\n    this.target = e.target;\n    this.ctrlKey = e.ctrlKey;\n    this.shiftKey = e.shiftKey;\n    this.altKey = e.altKey;\n    this.metaKey = e.metaKey;\n    this.keyCode = extractKeyCode(e);\n    this.code = e.code; // console.info(e.type + \": keyCode: \" + e.keyCode + \", which: \" + e.which + \", charCode: \" + e.charCode + \", detail: \" + e.detail + \" ====> \" + this.keyCode + ' -- ' + KeyCode[this.keyCode]);\n\n    this.ctrlKey = this.ctrlKey || this.keyCode === 5\n    /* Ctrl */\n    ;\n    this.altKey = this.altKey || this.keyCode === 6\n    /* Alt */\n    ;\n    this.shiftKey = this.shiftKey || this.keyCode === 4\n    /* Shift */\n    ;\n    this.metaKey = this.metaKey || this.keyCode === 57\n    /* Meta */\n    ;\n    this._asKeybinding = this._computeKeybinding();\n    this._asRuntimeKeybinding = this._computeRuntimeKeybinding(); // console.log(`code: ${e.code}, keyCode: ${e.keyCode}, key: ${e.key}`);\n  }\n\n  _createClass(StandardKeyboardEvent, [{\n    key: \"preventDefault\",\n    value: function preventDefault() {\n      if (this.browserEvent && this.browserEvent.preventDefault) {\n        this.browserEvent.preventDefault();\n      }\n    }\n  }, {\n    key: \"stopPropagation\",\n    value: function stopPropagation() {\n      if (this.browserEvent && this.browserEvent.stopPropagation) {\n        this.browserEvent.stopPropagation();\n      }\n    }\n  }, {\n    key: \"toKeybinding\",\n    value: function toKeybinding() {\n      return this._asRuntimeKeybinding;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this._asKeybinding === other;\n    }\n  }, {\n    key: \"_computeKeybinding\",\n    value: function _computeKeybinding() {\n      var key = 0\n      /* Unknown */\n      ;\n\n      if (this.keyCode !== 5\n      /* Ctrl */\n      && this.keyCode !== 4\n      /* Shift */\n      && this.keyCode !== 6\n      /* Alt */\n      && this.keyCode !== 57\n      /* Meta */\n      ) {\n          key = this.keyCode;\n        }\n\n      var result = 0;\n\n      if (this.ctrlKey) {\n        result |= ctrlKeyMod;\n      }\n\n      if (this.altKey) {\n        result |= altKeyMod;\n      }\n\n      if (this.shiftKey) {\n        result |= shiftKeyMod;\n      }\n\n      if (this.metaKey) {\n        result |= metaKeyMod;\n      }\n\n      result |= key;\n      return result;\n    }\n  }, {\n    key: \"_computeRuntimeKeybinding\",\n    value: function _computeRuntimeKeybinding() {\n      var key = 0\n      /* Unknown */\n      ;\n\n      if (this.keyCode !== 5\n      /* Ctrl */\n      && this.keyCode !== 4\n      /* Shift */\n      && this.keyCode !== 6\n      /* Alt */\n      && this.keyCode !== 57\n      /* Meta */\n      ) {\n          key = this.keyCode;\n        }\n\n      return new SimpleKeybinding(this.ctrlKey, this.shiftKey, this.altKey, this.metaKey, key);\n    }\n  }]);\n\n  return StandardKeyboardEvent;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/browser/keyboardEvent.js"],"names":["browser","KeyCodeUtils","SimpleKeybinding","platform","KEY_CODE_MAP","Array","INVERSE_KEY_CODE_MAP","i","length","define","code","keyCode","isFirefox","isMacintosh","isWebKit","extractKeyCode","e","charCode","char","String","fromCharCode","toUpperCase","fromString","ctrlKeyMod","altKeyMod","shiftKeyMod","metaKeyMod","StandardKeyboardEvent","source","_standardKeyboardEventBrand","browserEvent","target","ctrlKey","shiftKey","altKey","metaKey","_asKeybinding","_computeKeybinding","_asRuntimeKeybinding","_computeRuntimeKeybinding","preventDefault","stopPropagation","other","key","result"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,uBAA/C;AACA,OAAO,KAAKC,QAAZ,MAA0B,uBAA1B;AACA,IAAIC,YAAY,GAAG,IAAIC,KAAJ,CAAU,GAAV,CAAnB;AACA,IAAIC,oBAAoB,GAAG,IAAID,KAAJ,CAAU;AAAI;AAAd,CAA3B;;AACA,CAAC,YAAY;AACT,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,oBAAoB,CAACE,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AAClDD,IAAAA,oBAAoB,CAACC,CAAD,CAApB,GAA0B,CAAC,CAA3B;AACH;;AACD,WAASE,MAAT,CAAgBC,IAAhB,EAAsBC,OAAtB,EAA+B;AAC3BP,IAAAA,YAAY,CAACM,IAAD,CAAZ,GAAqBC,OAArB;AACAL,IAAAA,oBAAoB,CAACK,OAAD,CAApB,GAAgCD,IAAhC;AACH;;AACDD,EAAAA,MAAM,CAAC,CAAD,EAAI;AAAE;AAAN,GAAN,CARS,CAQsB;;AAC/BA,EAAAA,MAAM,CAAC,CAAD,EAAI;AAAE;AAAN,GAAN;AACAA,EAAAA,MAAM,CAAC,CAAD,EAAI;AAAE;AAAN,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAE;AAAP,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAE;AAAP,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAE;AAAP,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAE;AAAP,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAE;AAAP,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAE;AAAP,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAE;AAAP,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;AACAA,EAAAA,MAAM,CAAC,EAAD,EAAK;AAAG;AAAR,GAAN;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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as browser from './browser.js';\r\nimport { KeyCodeUtils, SimpleKeybinding } from '../common/keyCodes.js';\r\nimport * as platform from '../common/platform.js';\r\nlet KEY_CODE_MAP = new Array(230);\r\nlet INVERSE_KEY_CODE_MAP = new Array(112 /* MAX_VALUE */);\r\n(function () {\r\n    for (let i = 0; i < INVERSE_KEY_CODE_MAP.length; i++) {\r\n        INVERSE_KEY_CODE_MAP[i] = -1;\r\n    }\r\n    function define(code, keyCode) {\r\n        KEY_CODE_MAP[code] = keyCode;\r\n        INVERSE_KEY_CODE_MAP[keyCode] = code;\r\n    }\r\n    define(3, 7 /* PauseBreak */); // VK_CANCEL 0x03 Control-break processing\r\n    define(8, 1 /* Backspace */);\r\n    define(9, 2 /* Tab */);\r\n    define(13, 3 /* Enter */);\r\n    define(16, 4 /* Shift */);\r\n    define(17, 5 /* Ctrl */);\r\n    define(18, 6 /* Alt */);\r\n    define(19, 7 /* PauseBreak */);\r\n    define(20, 8 /* CapsLock */);\r\n    define(27, 9 /* Escape */);\r\n    define(32, 10 /* Space */);\r\n    define(33, 11 /* PageUp */);\r\n    define(34, 12 /* PageDown */);\r\n    define(35, 13 /* End */);\r\n    define(36, 14 /* Home */);\r\n    define(37, 15 /* LeftArrow */);\r\n    define(38, 16 /* UpArrow */);\r\n    define(39, 17 /* RightArrow */);\r\n    define(40, 18 /* DownArrow */);\r\n    define(45, 19 /* Insert */);\r\n    define(46, 20 /* Delete */);\r\n    define(48, 21 /* KEY_0 */);\r\n    define(49, 22 /* KEY_1 */);\r\n    define(50, 23 /* KEY_2 */);\r\n    define(51, 24 /* KEY_3 */);\r\n    define(52, 25 /* KEY_4 */);\r\n    define(53, 26 /* KEY_5 */);\r\n    define(54, 27 /* KEY_6 */);\r\n    define(55, 28 /* KEY_7 */);\r\n    define(56, 29 /* KEY_8 */);\r\n    define(57, 30 /* KEY_9 */);\r\n    define(65, 31 /* KEY_A */);\r\n    define(66, 32 /* KEY_B */);\r\n    define(67, 33 /* KEY_C */);\r\n    define(68, 34 /* KEY_D */);\r\n    define(69, 35 /* KEY_E */);\r\n    define(70, 36 /* KEY_F */);\r\n    define(71, 37 /* KEY_G */);\r\n    define(72, 38 /* KEY_H */);\r\n    define(73, 39 /* KEY_I */);\r\n    define(74, 40 /* KEY_J */);\r\n    define(75, 41 /* KEY_K */);\r\n    define(76, 42 /* KEY_L */);\r\n    define(77, 43 /* KEY_M */);\r\n    define(78, 44 /* KEY_N */);\r\n    define(79, 45 /* KEY_O */);\r\n    define(80, 46 /* KEY_P */);\r\n    define(81, 47 /* KEY_Q */);\r\n    define(82, 48 /* KEY_R */);\r\n    define(83, 49 /* KEY_S */);\r\n    define(84, 50 /* KEY_T */);\r\n    define(85, 51 /* KEY_U */);\r\n    define(86, 52 /* KEY_V */);\r\n    define(87, 53 /* KEY_W */);\r\n    define(88, 54 /* KEY_X */);\r\n    define(89, 55 /* KEY_Y */);\r\n    define(90, 56 /* KEY_Z */);\r\n    define(93, 58 /* ContextMenu */);\r\n    define(96, 93 /* NUMPAD_0 */);\r\n    define(97, 94 /* NUMPAD_1 */);\r\n    define(98, 95 /* NUMPAD_2 */);\r\n    define(99, 96 /* NUMPAD_3 */);\r\n    define(100, 97 /* NUMPAD_4 */);\r\n    define(101, 98 /* NUMPAD_5 */);\r\n    define(102, 99 /* NUMPAD_6 */);\r\n    define(103, 100 /* NUMPAD_7 */);\r\n    define(104, 101 /* NUMPAD_8 */);\r\n    define(105, 102 /* NUMPAD_9 */);\r\n    define(106, 103 /* NUMPAD_MULTIPLY */);\r\n    define(107, 104 /* NUMPAD_ADD */);\r\n    define(108, 105 /* NUMPAD_SEPARATOR */);\r\n    define(109, 106 /* NUMPAD_SUBTRACT */);\r\n    define(110, 107 /* NUMPAD_DECIMAL */);\r\n    define(111, 108 /* NUMPAD_DIVIDE */);\r\n    define(112, 59 /* F1 */);\r\n    define(113, 60 /* F2 */);\r\n    define(114, 61 /* F3 */);\r\n    define(115, 62 /* F4 */);\r\n    define(116, 63 /* F5 */);\r\n    define(117, 64 /* F6 */);\r\n    define(118, 65 /* F7 */);\r\n    define(119, 66 /* F8 */);\r\n    define(120, 67 /* F9 */);\r\n    define(121, 68 /* F10 */);\r\n    define(122, 69 /* F11 */);\r\n    define(123, 70 /* F12 */);\r\n    define(124, 71 /* F13 */);\r\n    define(125, 72 /* F14 */);\r\n    define(126, 73 /* F15 */);\r\n    define(127, 74 /* F16 */);\r\n    define(128, 75 /* F17 */);\r\n    define(129, 76 /* F18 */);\r\n    define(130, 77 /* F19 */);\r\n    define(144, 78 /* NumLock */);\r\n    define(145, 79 /* ScrollLock */);\r\n    define(186, 80 /* US_SEMICOLON */);\r\n    define(187, 81 /* US_EQUAL */);\r\n    define(188, 82 /* US_COMMA */);\r\n    define(189, 83 /* US_MINUS */);\r\n    define(190, 84 /* US_DOT */);\r\n    define(191, 85 /* US_SLASH */);\r\n    define(192, 86 /* US_BACKTICK */);\r\n    define(193, 110 /* ABNT_C1 */);\r\n    define(194, 111 /* ABNT_C2 */);\r\n    define(219, 87 /* US_OPEN_SQUARE_BRACKET */);\r\n    define(220, 88 /* US_BACKSLASH */);\r\n    define(221, 89 /* US_CLOSE_SQUARE_BRACKET */);\r\n    define(222, 90 /* US_QUOTE */);\r\n    define(223, 91 /* OEM_8 */);\r\n    define(226, 92 /* OEM_102 */);\r\n    /**\r\n     * https://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\r\n     * If an Input Method Editor is processing key input and the event is keydown, return 229.\r\n     */\r\n    define(229, 109 /* KEY_IN_COMPOSITION */);\r\n    if (browser.isFirefox) {\r\n        define(59, 80 /* US_SEMICOLON */);\r\n        define(107, 81 /* US_EQUAL */);\r\n        define(109, 83 /* US_MINUS */);\r\n        if (platform.isMacintosh) {\r\n            define(224, 57 /* Meta */);\r\n        }\r\n    }\r\n    else if (browser.isWebKit) {\r\n        define(91, 57 /* Meta */);\r\n        if (platform.isMacintosh) {\r\n            // the two meta keys in the Mac have different key codes (91 and 93)\r\n            define(93, 57 /* Meta */);\r\n        }\r\n        else {\r\n            define(92, 57 /* Meta */);\r\n        }\r\n    }\r\n})();\r\nfunction extractKeyCode(e) {\r\n    if (e.charCode) {\r\n        // \"keypress\" events mostly\r\n        let char = String.fromCharCode(e.charCode).toUpperCase();\r\n        return KeyCodeUtils.fromString(char);\r\n    }\r\n    return KEY_CODE_MAP[e.keyCode] || 0 /* Unknown */;\r\n}\r\nconst ctrlKeyMod = (platform.isMacintosh ? 256 /* WinCtrl */ : 2048 /* CtrlCmd */);\r\nconst altKeyMod = 512 /* Alt */;\r\nconst shiftKeyMod = 1024 /* Shift */;\r\nconst metaKeyMod = (platform.isMacintosh ? 2048 /* CtrlCmd */ : 256 /* WinCtrl */);\r\nexport class StandardKeyboardEvent {\r\n    constructor(source) {\r\n        this._standardKeyboardEventBrand = true;\r\n        let e = source;\r\n        this.browserEvent = e;\r\n        this.target = e.target;\r\n        this.ctrlKey = e.ctrlKey;\r\n        this.shiftKey = e.shiftKey;\r\n        this.altKey = e.altKey;\r\n        this.metaKey = e.metaKey;\r\n        this.keyCode = extractKeyCode(e);\r\n        this.code = e.code;\r\n        // console.info(e.type + \": keyCode: \" + e.keyCode + \", which: \" + e.which + \", charCode: \" + e.charCode + \", detail: \" + e.detail + \" ====> \" + this.keyCode + ' -- ' + KeyCode[this.keyCode]);\r\n        this.ctrlKey = this.ctrlKey || this.keyCode === 5 /* Ctrl */;\r\n        this.altKey = this.altKey || this.keyCode === 6 /* Alt */;\r\n        this.shiftKey = this.shiftKey || this.keyCode === 4 /* Shift */;\r\n        this.metaKey = this.metaKey || this.keyCode === 57 /* Meta */;\r\n        this._asKeybinding = this._computeKeybinding();\r\n        this._asRuntimeKeybinding = this._computeRuntimeKeybinding();\r\n        // console.log(`code: ${e.code}, keyCode: ${e.keyCode}, key: ${e.key}`);\r\n    }\r\n    preventDefault() {\r\n        if (this.browserEvent && this.browserEvent.preventDefault) {\r\n            this.browserEvent.preventDefault();\r\n        }\r\n    }\r\n    stopPropagation() {\r\n        if (this.browserEvent && this.browserEvent.stopPropagation) {\r\n            this.browserEvent.stopPropagation();\r\n        }\r\n    }\r\n    toKeybinding() {\r\n        return this._asRuntimeKeybinding;\r\n    }\r\n    equals(other) {\r\n        return this._asKeybinding === other;\r\n    }\r\n    _computeKeybinding() {\r\n        let key = 0 /* Unknown */;\r\n        if (this.keyCode !== 5 /* Ctrl */ && this.keyCode !== 4 /* Shift */ && this.keyCode !== 6 /* Alt */ && this.keyCode !== 57 /* Meta */) {\r\n            key = this.keyCode;\r\n        }\r\n        let result = 0;\r\n        if (this.ctrlKey) {\r\n            result |= ctrlKeyMod;\r\n        }\r\n        if (this.altKey) {\r\n            result |= altKeyMod;\r\n        }\r\n        if (this.shiftKey) {\r\n            result |= shiftKeyMod;\r\n        }\r\n        if (this.metaKey) {\r\n            result |= metaKeyMod;\r\n        }\r\n        result |= key;\r\n        return result;\r\n    }\r\n    _computeRuntimeKeybinding() {\r\n        let key = 0 /* Unknown */;\r\n        if (this.keyCode !== 5 /* Ctrl */ && this.keyCode !== 4 /* Shift */ && this.keyCode !== 6 /* Alt */ && this.keyCode !== 57 /* Meta */) {\r\n            key = this.keyCode;\r\n        }\r\n        return new SimpleKeybinding(this.ctrlKey, this.shiftKey, this.altKey, this.metaKey, key);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}