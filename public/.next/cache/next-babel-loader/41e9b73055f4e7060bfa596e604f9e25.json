{"ast":null,"code":"import _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _regeneratorRuntime from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/regenerator\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _toConsumableArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ComposedTreeDelegate } from './abstractTree.js';\nimport { ObjectTree, CompressibleObjectTree } from './objectTree.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { dispose as _dispose, DisposableStore } from '../../../common/lifecycle.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { timeout, createCancelablePromise } from '../../../common/async.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { isPromiseCanceledError, onUnexpectedError } from '../../../common/errors.js';\nimport { isFilterResult, getVisibleState } from './indexTreeModel.js';\nimport { treeItemLoadingIcon } from './treeIcons.js';\n\nfunction createAsyncDataTreeNode(props) {\n  return Object.assign(Object.assign({}, props), {\n    children: [],\n    refreshPromise: undefined,\n    stale: true,\n    slow: false,\n    collapsedByDefault: undefined\n  });\n}\n\nfunction isAncestor(ancestor, descendant) {\n  if (!descendant.parent) {\n    return false;\n  } else if (descendant.parent === ancestor) {\n    return true;\n  } else {\n    return isAncestor(ancestor, descendant.parent);\n  }\n}\n\nfunction intersects(node, other) {\n  return node === other || isAncestor(node, other) || isAncestor(other, node);\n}\n\nvar AsyncDataTreeNodeWrapper = /*#__PURE__*/function () {\n  function AsyncDataTreeNodeWrapper(node) {\n    _classCallCheck(this, AsyncDataTreeNodeWrapper);\n\n    this.node = node;\n  }\n\n  _createClass(AsyncDataTreeNodeWrapper, [{\n    key: \"element\",\n    get: function get() {\n      return this.node.element.element;\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      return this.node.children.map(function (node) {\n        return new AsyncDataTreeNodeWrapper(node);\n      });\n    }\n  }, {\n    key: \"depth\",\n    get: function get() {\n      return this.node.depth;\n    }\n  }, {\n    key: \"visibleChildrenCount\",\n    get: function get() {\n      return this.node.visibleChildrenCount;\n    }\n  }, {\n    key: \"visibleChildIndex\",\n    get: function get() {\n      return this.node.visibleChildIndex;\n    }\n  }, {\n    key: \"collapsible\",\n    get: function get() {\n      return this.node.collapsible;\n    }\n  }, {\n    key: \"collapsed\",\n    get: function get() {\n      return this.node.collapsed;\n    }\n  }, {\n    key: \"visible\",\n    get: function get() {\n      return this.node.visible;\n    }\n  }, {\n    key: \"filterData\",\n    get: function get() {\n      return this.node.filterData;\n    }\n  }]);\n\n  return AsyncDataTreeNodeWrapper;\n}();\n\nvar AsyncDataTreeRenderer = /*#__PURE__*/function () {\n  function AsyncDataTreeRenderer(renderer, nodeMapper, onDidChangeTwistieState) {\n    _classCallCheck(this, AsyncDataTreeRenderer);\n\n    this.renderer = renderer;\n    this.nodeMapper = nodeMapper;\n    this.onDidChangeTwistieState = onDidChangeTwistieState;\n    this.renderedNodes = new Map();\n    this.templateId = renderer.templateId;\n  }\n\n  _createClass(AsyncDataTreeRenderer, [{\n    key: \"renderTemplate\",\n    value: function renderTemplate(container) {\n      var templateData = this.renderer.renderTemplate(container);\n      return {\n        templateData: templateData\n      };\n    }\n  }, {\n    key: \"renderElement\",\n    value: function renderElement(node, index, templateData, height) {\n      this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n  }, {\n    key: \"renderTwistie\",\n    value: function renderTwistie(element, twistieElement) {\n      if (element.slow) {\n        var _twistieElement$class;\n\n        (_twistieElement$class = twistieElement.classList).add.apply(_twistieElement$class, _toConsumableArray(treeItemLoadingIcon.classNamesArray));\n\n        return true;\n      } else {\n        var _twistieElement$class2;\n\n        (_twistieElement$class2 = twistieElement.classList).remove.apply(_twistieElement$class2, _toConsumableArray(treeItemLoadingIcon.classNamesArray));\n\n        return false;\n      }\n    }\n  }, {\n    key: \"disposeElement\",\n    value: function disposeElement(node, index, templateData, height) {\n      if (this.renderer.disposeElement) {\n        this.renderer.disposeElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n      }\n    }\n  }, {\n    key: \"disposeTemplate\",\n    value: function disposeTemplate(templateData) {\n      this.renderer.disposeTemplate(templateData.templateData);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.renderedNodes.clear();\n    }\n  }]);\n\n  return AsyncDataTreeRenderer;\n}();\n\nfunction asTreeEvent(e) {\n  return {\n    browserEvent: e.browserEvent,\n    elements: e.elements.map(function (e) {\n      return e.element;\n    })\n  };\n}\n\nfunction asTreeMouseEvent(e) {\n  return {\n    browserEvent: e.browserEvent,\n    element: e.element && e.element.element,\n    target: e.target\n  };\n}\n\nvar AsyncDataTreeElementsDragAndDropData = /*#__PURE__*/function (_ElementsDragAndDropD) {\n  _inherits(AsyncDataTreeElementsDragAndDropData, _ElementsDragAndDropD);\n\n  var _super = _createSuper(AsyncDataTreeElementsDragAndDropData);\n\n  function AsyncDataTreeElementsDragAndDropData(data) {\n    var _this;\n\n    _classCallCheck(this, AsyncDataTreeElementsDragAndDropData);\n\n    _this = _super.call(this, data.elements.map(function (node) {\n      return node.element;\n    }));\n    _this.data = data;\n    return _this;\n  }\n\n  return AsyncDataTreeElementsDragAndDropData;\n}(ElementsDragAndDropData);\n\nfunction asAsyncDataTreeDragAndDropData(data) {\n  if (data instanceof ElementsDragAndDropData) {\n    return new AsyncDataTreeElementsDragAndDropData(data);\n  }\n\n  return data;\n}\n\nvar AsyncDataTreeNodeListDragAndDrop = /*#__PURE__*/function () {\n  function AsyncDataTreeNodeListDragAndDrop(dnd) {\n    _classCallCheck(this, AsyncDataTreeNodeListDragAndDrop);\n\n    this.dnd = dnd;\n  }\n\n  _createClass(AsyncDataTreeNodeListDragAndDrop, [{\n    key: \"getDragURI\",\n    value: function getDragURI(node) {\n      return this.dnd.getDragURI(node.element);\n    }\n  }, {\n    key: \"getDragLabel\",\n    value: function getDragLabel(nodes, originalEvent) {\n      if (this.dnd.getDragLabel) {\n        return this.dnd.getDragLabel(nodes.map(function (node) {\n          return node.element;\n        }), originalEvent);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(data, originalEvent) {\n      if (this.dnd.onDragStart) {\n        this.dnd.onDragStart(asAsyncDataTreeDragAndDropData(data), originalEvent);\n      }\n    }\n  }, {\n    key: \"onDragOver\",\n    value: function onDragOver(data, targetNode, targetIndex, originalEvent) {\n      var raw = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n  }, {\n    key: \"drop\",\n    value: function drop(data, targetNode, targetIndex, originalEvent) {\n      this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n  }, {\n    key: \"onDragEnd\",\n    value: function onDragEnd(originalEvent) {\n      if (this.dnd.onDragEnd) {\n        this.dnd.onDragEnd(originalEvent);\n      }\n    }\n  }]);\n\n  return AsyncDataTreeNodeListDragAndDrop;\n}();\n\nfunction asObjectTreeOptions(options) {\n  return options && Object.assign(Object.assign({}, options), {\n    collapseByDefault: true,\n    identityProvider: options.identityProvider && {\n      getId: function getId(el) {\n        return options.identityProvider.getId(el.element);\n      }\n    },\n    dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd),\n    multipleSelectionController: options.multipleSelectionController && {\n      isSelectionSingleChangeEvent: function isSelectionSingleChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionSingleChangeEvent(Object.assign(Object.assign({}, e), {\n          element: e.element\n        }));\n      },\n      isSelectionRangeChangeEvent: function isSelectionRangeChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionRangeChangeEvent(Object.assign(Object.assign({}, e), {\n          element: e.element\n        }));\n      }\n    },\n    accessibilityProvider: options.accessibilityProvider && Object.assign(Object.assign({}, options.accessibilityProvider), {\n      getPosInSet: undefined,\n      getSetSize: undefined,\n      getRole: options.accessibilityProvider.getRole ? function (el) {\n        return options.accessibilityProvider.getRole(el.element);\n      } : function () {\n        return 'treeitem';\n      },\n      isChecked: options.accessibilityProvider.isChecked ? function (e) {\n        var _a;\n\n        return !!((_a = options.accessibilityProvider) === null || _a === void 0 ? void 0 : _a.isChecked(e.element));\n      } : undefined,\n      getAriaLabel: function getAriaLabel(e) {\n        return options.accessibilityProvider.getAriaLabel(e.element);\n      },\n      getWidgetAriaLabel: function getWidgetAriaLabel() {\n        return options.accessibilityProvider.getWidgetAriaLabel();\n      },\n      getWidgetRole: options.accessibilityProvider.getWidgetRole ? function () {\n        return options.accessibilityProvider.getWidgetRole();\n      } : function () {\n        return 'tree';\n      },\n      getAriaLevel: options.accessibilityProvider.getAriaLevel && function (node) {\n        return options.accessibilityProvider.getAriaLevel(node.element);\n      },\n      getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && function (node) {\n        return options.accessibilityProvider.getActiveDescendantId(node.element);\n      }\n    }),\n    filter: options.filter && {\n      filter: function filter(e, parentVisibility) {\n        return options.filter.filter(e.element, parentVisibility);\n      }\n    },\n    keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, options.keyboardNavigationLabelProvider), {\n      getKeyboardNavigationLabel: function getKeyboardNavigationLabel(e) {\n        return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\n      }\n    }),\n    sorter: undefined,\n    expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : function (e) {\n      return options.expandOnlyOnTwistieClick(e.element);\n    },\n    additionalScrollHeight: options.additionalScrollHeight\n  });\n}\n\nfunction dfs(node, fn) {\n  fn(node);\n  node.children.forEach(function (child) {\n    return dfs(child, fn);\n  });\n}\n\nexport var AsyncDataTree = /*#__PURE__*/function () {\n  function AsyncDataTree(user, container, delegate, renderers, dataSource) {\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n    _classCallCheck(this, AsyncDataTree);\n\n    this.user = user;\n    this.dataSource = dataSource;\n    this.nodes = new Map();\n    this.subTreeRefreshPromises = new Map();\n    this.refreshPromises = new Map();\n    this._onDidRender = new Emitter();\n    this._onDidChangeNodeSlowState = new Emitter();\n    this.nodeMapper = new WeakMapper(function (node) {\n      return new AsyncDataTreeNodeWrapper(node);\n    });\n    this.disposables = new DisposableStore();\n    this.identityProvider = options.identityProvider;\n    this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n    this.sorter = options.sorter;\n    this.collapseByDefault = options.collapseByDefault;\n    this.tree = this.createTree(user, container, delegate, renderers, options);\n    this.root = createAsyncDataTreeNode({\n      element: undefined,\n      parent: null,\n      hasChildren: true\n    });\n\n    if (this.identityProvider) {\n      this.root = Object.assign(Object.assign({}, this.root), {\n        id: null\n      });\n    }\n\n    this.nodes.set(null, this.root);\n    this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\n  }\n\n  _createClass(AsyncDataTree, [{\n    key: \"createTree\",\n    value: function createTree(user, container, delegate, renderers, options) {\n      var _this2 = this;\n\n      var objectTreeDelegate = new ComposedTreeDelegate(delegate);\n      var objectTreeRenderers = renderers.map(function (r) {\n        return new AsyncDataTreeRenderer(r, _this2.nodeMapper, _this2._onDidChangeNodeSlowState.event);\n      });\n      var objectTreeOptions = asObjectTreeOptions(options) || {};\n      return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.tree.updateOptions(options);\n    } // Widget\n\n  }, {\n    key: \"getHTMLElement\",\n    value: function getHTMLElement() {\n      return this.tree.getHTMLElement();\n    }\n  }, {\n    key: \"domFocus\",\n    value: function domFocus() {\n      this.tree.domFocus();\n    }\n  }, {\n    key: \"layout\",\n    value: function layout(height, width) {\n      this.tree.layout(height, width);\n    }\n  }, {\n    key: \"style\",\n    value: function style(styles) {\n      this.tree.style(styles);\n    } // Model\n\n  }, {\n    key: \"getInput\",\n    value: function getInput() {\n      return this.root.element;\n    }\n  }, {\n    key: \"setInput\",\n    value: function setInput(input, viewState) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var viewStateContext;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.refreshPromises.forEach(function (promise) {\n                  return promise.cancel();\n                });\n                this.refreshPromises.clear();\n                this.root.element = input;\n                viewStateContext = viewState && {\n                  viewState: viewState,\n                  focus: [],\n                  selection: []\n                };\n                _context.next = 6;\n                return this._updateChildren(input, true, false, viewStateContext);\n\n              case 6:\n                if (viewStateContext) {\n                  this.tree.setFocus(viewStateContext.focus);\n                  this.tree.setSelection(viewStateContext.selection);\n                }\n\n                if (viewState && typeof viewState.scrollTop === 'number') {\n                  this.scrollTop = viewState.scrollTop;\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_updateChildren\",\n    value: function _updateChildren() {\n      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root.element;\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rerender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var viewStateContext = arguments.length > 3 ? arguments[3] : undefined;\n      var options = arguments.length > 4 ? arguments[4] : undefined;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var node;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(typeof this.root.element === 'undefined')) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new TreeError(this.user, 'Tree input not set');\n\n              case 2:\n                if (!this.root.refreshPromise) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 5;\n                return this.root.refreshPromise;\n\n              case 5:\n                _context2.next = 7;\n                return Event.toPromise(this._onDidRender.event);\n\n              case 7:\n                node = this.getDataNode(element);\n                _context2.next = 10;\n                return this.refreshAndRenderNode(node, recursive, viewStateContext, options);\n\n              case 10:\n                if (rerender) {\n                  try {\n                    this.tree.rerender(node);\n                  } catch (_a) {// missing nodes are fine, this could've resulted from\n                    // parallel refresh calls, removing `node` altogether\n                  }\n                }\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    } // View\n\n  }, {\n    key: \"rerender\",\n    value: function rerender(element) {\n      if (element === undefined || element === this.root.element) {\n        this.tree.rerender();\n        return;\n      }\n\n      var node = this.getDataNode(element);\n      this.tree.rerender(node);\n    }\n  }, {\n    key: \"collapse\",\n    value: function collapse(element) {\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var node = this.getDataNode(element);\n      return this.tree.collapse(node === this.root ? null : node, recursive);\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(element) {\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var node, result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(typeof this.root.element === 'undefined')) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new TreeError(this.user, 'Tree input not set');\n\n              case 2:\n                if (!this.root.refreshPromise) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                _context3.next = 5;\n                return this.root.refreshPromise;\n\n              case 5:\n                _context3.next = 7;\n                return Event.toPromise(this._onDidRender.event);\n\n              case 7:\n                node = this.getDataNode(element);\n\n                if (!(this.tree.hasElement(node) && !this.tree.isCollapsible(node))) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", false);\n\n              case 10:\n                if (!node.refreshPromise) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                _context3.next = 13;\n                return this.root.refreshPromise;\n\n              case 13:\n                _context3.next = 15;\n                return Event.toPromise(this._onDidRender.event);\n\n              case 15:\n                if (!(node !== this.root && !node.refreshPromise && !this.tree.isCollapsed(node))) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", false);\n\n              case 17:\n                result = this.tree.expand(node === this.root ? null : node, recursive);\n\n                if (!node.refreshPromise) {\n                  _context3.next = 23;\n                  break;\n                }\n\n                _context3.next = 21;\n                return this.root.refreshPromise;\n\n              case 21:\n                _context3.next = 23;\n                return Event.toPromise(this._onDidRender.event);\n\n              case 23:\n                return _context3.abrupt(\"return\", result);\n\n              case 24:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(elements, browserEvent) {\n      var _this3 = this;\n\n      var nodes = elements.map(function (e) {\n        return _this3.getDataNode(e);\n      });\n      this.tree.setSelection(nodes, browserEvent);\n    }\n  }, {\n    key: \"getSelection\",\n    value: function getSelection() {\n      var nodes = this.tree.getSelection();\n      return nodes.map(function (n) {\n        return n.element;\n      });\n    }\n  }, {\n    key: \"setFocus\",\n    value: function setFocus(elements, browserEvent) {\n      var _this4 = this;\n\n      var nodes = elements.map(function (e) {\n        return _this4.getDataNode(e);\n      });\n      this.tree.setFocus(nodes, browserEvent);\n    }\n  }, {\n    key: \"getFocus\",\n    value: function getFocus() {\n      var nodes = this.tree.getFocus();\n      return nodes.map(function (n) {\n        return n.element;\n      });\n    }\n  }, {\n    key: \"reveal\",\n    value: function reveal(element, relativeTop) {\n      this.tree.reveal(this.getDataNode(element), relativeTop);\n    } // Implementation\n\n  }, {\n    key: \"getDataNode\",\n    value: function getDataNode(element) {\n      var node = this.nodes.get(element === this.root.element ? null : element);\n\n      if (!node) {\n        throw new TreeError(this.user, \"Data tree node not found: \".concat(element));\n      }\n\n      return node;\n    }\n  }, {\n    key: \"refreshAndRenderNode\",\n    value: function refreshAndRenderNode(node, recursive, viewStateContext, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.refreshNode(node, recursive, viewStateContext);\n\n              case 2:\n                this.render(node, viewStateContext, options);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"refreshNode\",\n    value: function refreshNode(node, recursive, viewStateContext) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this5 = this;\n\n        var result;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.subTreeRefreshPromises.forEach(function (refreshPromise, refreshNode) {\n                  if (!result && intersects(refreshNode, node)) {\n                    result = refreshPromise.then(function () {\n                      return _this5.refreshNode(node, recursive, viewStateContext);\n                    });\n                  }\n                });\n\n                if (!result) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", result);\n\n              case 3:\n                return _context5.abrupt(\"return\", this.doRefreshSubTree(node, recursive, viewStateContext));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"doRefreshSubTree\",\n    value: function doRefreshSubTree(node, recursive, viewStateContext) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _this6 = this;\n\n        var done, childrenToRefresh;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                node.refreshPromise = new Promise(function (c) {\n                  return done = c;\n                });\n                this.subTreeRefreshPromises.set(node, node.refreshPromise);\n                node.refreshPromise[\"finally\"](function () {\n                  node.refreshPromise = undefined;\n\n                  _this6.subTreeRefreshPromises[\"delete\"](node);\n                });\n                _context6.prev = 3;\n                _context6.next = 6;\n                return this.doRefreshNode(node, recursive, viewStateContext);\n\n              case 6:\n                childrenToRefresh = _context6.sent;\n                node.stale = false;\n                _context6.next = 10;\n                return Promise.all(childrenToRefresh.map(function (child) {\n                  return _this6.doRefreshSubTree(child, recursive, viewStateContext);\n                }));\n\n              case 10:\n                _context6.prev = 10;\n                done();\n                return _context6.finish(10);\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[3,, 10, 13]]);\n      }));\n    }\n  }, {\n    key: \"doRefreshNode\",\n    value: function doRefreshNode(node, recursive, viewStateContext) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _this7 = this;\n\n        var childrenPromise, slowTimeout, children;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                node.hasChildren = !!this.dataSource.hasChildren(node.element);\n\n                if (!node.hasChildren) {\n                  childrenPromise = Promise.resolve(Iterable.empty());\n                } else {\n                  slowTimeout = timeout(800);\n                  slowTimeout.then(function () {\n                    node.slow = true;\n\n                    _this7._onDidChangeNodeSlowState.fire(node);\n                  }, function (_) {\n                    return null;\n                  });\n                  childrenPromise = this.doGetChildren(node)[\"finally\"](function () {\n                    return slowTimeout.cancel();\n                  });\n                }\n\n                _context7.prev = 2;\n                _context7.next = 5;\n                return childrenPromise;\n\n              case 5:\n                children = _context7.sent;\n                return _context7.abrupt(\"return\", this.setChildren(node, children, recursive, viewStateContext));\n\n              case 9:\n                _context7.prev = 9;\n                _context7.t0 = _context7[\"catch\"](2);\n\n                if (node !== this.root && this.tree.hasElement(node)) {\n                  this.tree.collapse(node);\n                }\n\n                if (!isPromiseCanceledError(_context7.t0)) {\n                  _context7.next = 14;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", []);\n\n              case 14:\n                throw _context7.t0;\n\n              case 15:\n                _context7.prev = 15;\n\n                if (node.slow) {\n                  node.slow = false;\n\n                  this._onDidChangeNodeSlowState.fire(node);\n                }\n\n                return _context7.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[2, 9, 15, 18]]);\n      }));\n    }\n  }, {\n    key: \"doGetChildren\",\n    value: function doGetChildren(node) {\n      var _this8 = this;\n\n      var result = this.refreshPromises.get(node);\n\n      if (result) {\n        return result;\n      }\n\n      result = createCancelablePromise(function () {\n        return __awaiter(_this8, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n          var children;\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  _context8.next = 2;\n                  return this.dataSource.getChildren(node.element);\n\n                case 2:\n                  children = _context8.sent;\n                  return _context8.abrupt(\"return\", this.processChildren(children));\n\n                case 4:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8, this);\n        }));\n      });\n      this.refreshPromises.set(node, result);\n      return result[\"finally\"](function () {\n        _this8.refreshPromises[\"delete\"](node);\n      });\n    }\n  }, {\n    key: \"_onDidChangeCollapseState\",\n    value: function _onDidChangeCollapseState(_ref) {\n      var node = _ref.node,\n          deep = _ref.deep;\n\n      if (node.element === null) {\n        return;\n      }\n\n      if (!node.collapsed && node.element.stale) {\n        if (deep) {\n          this.collapse(node.element.element);\n        } else {\n          this.refreshAndRenderNode(node.element, false)[\"catch\"](onUnexpectedError);\n        }\n      }\n    }\n  }, {\n    key: \"setChildren\",\n    value: function setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\n      var _this9 = this,\n          _node$children;\n\n      var childrenElements = _toConsumableArray(childrenElementsIterable); // perf: if the node was and still is a leaf, avoid all this hassle\n\n\n      if (node.children.length === 0 && childrenElements.length === 0) {\n        return [];\n      }\n\n      var nodesToForget = new Map();\n      var childrenTreeNodesById = new Map();\n\n      var _iterator = _createForOfIteratorHelper(node.children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          nodesToForget.set(child.element, child);\n\n          if (this.identityProvider) {\n            var collapsed = this.tree.isCollapsed(child);\n            childrenTreeNodesById.set(child.id, {\n              node: child,\n              collapsed: collapsed\n            });\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var childrenToRefresh = [];\n      var children = childrenElements.map(function (element) {\n        var hasChildren = !!_this9.dataSource.hasChildren(element);\n\n        if (!_this9.identityProvider) {\n          var asyncDataTreeNode = createAsyncDataTreeNode({\n            element: element,\n            parent: node,\n            hasChildren: hasChildren\n          });\n\n          if (hasChildren && _this9.collapseByDefault && !_this9.collapseByDefault(element)) {\n            asyncDataTreeNode.collapsedByDefault = false;\n            childrenToRefresh.push(asyncDataTreeNode);\n          }\n\n          return asyncDataTreeNode;\n        }\n\n        var id = _this9.identityProvider.getId(element).toString();\n\n        var result = childrenTreeNodesById.get(id);\n\n        if (result) {\n          var _asyncDataTreeNode = result.node;\n          nodesToForget[\"delete\"](_asyncDataTreeNode.element);\n\n          _this9.nodes[\"delete\"](_asyncDataTreeNode.element);\n\n          _this9.nodes.set(element, _asyncDataTreeNode);\n\n          _asyncDataTreeNode.element = element;\n          _asyncDataTreeNode.hasChildren = hasChildren;\n\n          if (recursive) {\n            if (result.collapsed) {\n              _asyncDataTreeNode.children.forEach(function (node) {\n                return dfs(node, function (node) {\n                  return _this9.nodes[\"delete\"](node.element);\n                });\n              });\n\n              _asyncDataTreeNode.children.splice(0, _asyncDataTreeNode.children.length);\n\n              _asyncDataTreeNode.stale = true;\n            } else {\n              childrenToRefresh.push(_asyncDataTreeNode);\n            }\n          } else if (hasChildren && _this9.collapseByDefault && !_this9.collapseByDefault(element)) {\n            _asyncDataTreeNode.collapsedByDefault = false;\n            childrenToRefresh.push(_asyncDataTreeNode);\n          }\n\n          return _asyncDataTreeNode;\n        }\n\n        var childAsyncDataTreeNode = createAsyncDataTreeNode({\n          element: element,\n          parent: node,\n          id: id,\n          hasChildren: hasChildren\n        });\n\n        if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\n          viewStateContext.focus.push(childAsyncDataTreeNode);\n        }\n\n        if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\n          viewStateContext.selection.push(childAsyncDataTreeNode);\n        }\n\n        if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\n          childrenToRefresh.push(childAsyncDataTreeNode);\n        } else if (hasChildren && _this9.collapseByDefault && !_this9.collapseByDefault(element)) {\n          childAsyncDataTreeNode.collapsedByDefault = false;\n          childrenToRefresh.push(childAsyncDataTreeNode);\n        }\n\n        return childAsyncDataTreeNode;\n      });\n\n      var _iterator2 = _createForOfIteratorHelper(nodesToForget.values()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _node = _step2.value;\n          dfs(_node, function (node) {\n            return _this9.nodes[\"delete\"](node.element);\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(children),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _child = _step3.value;\n          this.nodes.set(_child.element, _child);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      (_node$children = node.children).splice.apply(_node$children, [0, node.children.length].concat(_toConsumableArray(children))); // TODO@joao this doesn't take filter into account\n\n\n      if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\n        children[0].collapsedByDefault = false;\n        childrenToRefresh.push(children[0]);\n      }\n\n      return childrenToRefresh;\n    }\n  }, {\n    key: \"render\",\n    value: function render(node, viewStateContext, options) {\n      var _this10 = this;\n\n      var children = node.children.map(function (node) {\n        return _this10.asTreeElement(node, viewStateContext);\n      });\n      var objectTreeOptions = options && Object.assign(Object.assign({}, options), {\n        diffIdentityProvider: options.diffIdentityProvider && {\n          getId: function getId(node) {\n            return options.diffIdentityProvider.getId(node.element);\n          }\n        }\n      });\n      this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\n\n      if (node !== this.root) {\n        this.tree.setCollapsible(node, node.hasChildren);\n      }\n\n      this._onDidRender.fire();\n    }\n  }, {\n    key: \"asTreeElement\",\n    value: function asTreeElement(node, viewStateContext) {\n      var _this11 = this;\n\n      if (node.stale) {\n        return {\n          element: node,\n          collapsible: node.hasChildren,\n          collapsed: true\n        };\n      }\n\n      var collapsed;\n\n      if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\n        collapsed = false;\n      } else {\n        collapsed = node.collapsedByDefault;\n      }\n\n      node.collapsedByDefault = undefined;\n      return {\n        element: node,\n        children: node.hasChildren ? Iterable.map(node.children, function (child) {\n          return _this11.asTreeElement(child, viewStateContext);\n        }) : [],\n        collapsible: node.hasChildren,\n        collapsed: collapsed\n      };\n    }\n  }, {\n    key: \"processChildren\",\n    value: function processChildren(children) {\n      if (this.sorter) {\n        children = _toConsumableArray(children).sort(this.sorter.compare.bind(this.sorter));\n      }\n\n      return children;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.disposables.dispose();\n    }\n  }, {\n    key: \"onDidChangeFocus\",\n    get: function get() {\n      return Event.map(this.tree.onDidChangeFocus, asTreeEvent);\n    }\n  }, {\n    key: \"onDidChangeSelection\",\n    get: function get() {\n      return Event.map(this.tree.onDidChangeSelection, asTreeEvent);\n    }\n  }, {\n    key: \"onMouseDblClick\",\n    get: function get() {\n      return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent);\n    }\n  }, {\n    key: \"onPointer\",\n    get: function get() {\n      return Event.map(this.tree.onPointer, asTreeMouseEvent);\n    }\n  }, {\n    key: \"onDidFocus\",\n    get: function get() {\n      return this.tree.onDidFocus;\n    }\n  }, {\n    key: \"onDidDispose\",\n    get: function get() {\n      return this.tree.onDidDispose;\n    }\n  }, {\n    key: \"scrollTop\",\n    get: function get() {\n      return this.tree.scrollTop;\n    },\n    set: function set(scrollTop) {\n      this.tree.scrollTop = scrollTop;\n    }\n  }]);\n\n  return AsyncDataTree;\n}();\n\nvar CompressibleAsyncDataTreeNodeWrapper = /*#__PURE__*/function () {\n  function CompressibleAsyncDataTreeNodeWrapper(node) {\n    _classCallCheck(this, CompressibleAsyncDataTreeNodeWrapper);\n\n    this.node = node;\n  }\n\n  _createClass(CompressibleAsyncDataTreeNodeWrapper, [{\n    key: \"element\",\n    get: function get() {\n      return {\n        elements: this.node.element.elements.map(function (e) {\n          return e.element;\n        }),\n        incompressible: this.node.element.incompressible\n      };\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      return this.node.children.map(function (node) {\n        return new CompressibleAsyncDataTreeNodeWrapper(node);\n      });\n    }\n  }, {\n    key: \"depth\",\n    get: function get() {\n      return this.node.depth;\n    }\n  }, {\n    key: \"visibleChildrenCount\",\n    get: function get() {\n      return this.node.visibleChildrenCount;\n    }\n  }, {\n    key: \"visibleChildIndex\",\n    get: function get() {\n      return this.node.visibleChildIndex;\n    }\n  }, {\n    key: \"collapsible\",\n    get: function get() {\n      return this.node.collapsible;\n    }\n  }, {\n    key: \"collapsed\",\n    get: function get() {\n      return this.node.collapsed;\n    }\n  }, {\n    key: \"visible\",\n    get: function get() {\n      return this.node.visible;\n    }\n  }, {\n    key: \"filterData\",\n    get: function get() {\n      return this.node.filterData;\n    }\n  }]);\n\n  return CompressibleAsyncDataTreeNodeWrapper;\n}();\n\nvar CompressibleAsyncDataTreeRenderer = /*#__PURE__*/function () {\n  function CompressibleAsyncDataTreeRenderer(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\n    _classCallCheck(this, CompressibleAsyncDataTreeRenderer);\n\n    this.renderer = renderer;\n    this.nodeMapper = nodeMapper;\n    this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\n    this.onDidChangeTwistieState = onDidChangeTwistieState;\n    this.renderedNodes = new Map();\n    this.disposables = [];\n    this.templateId = renderer.templateId;\n  }\n\n  _createClass(CompressibleAsyncDataTreeRenderer, [{\n    key: \"renderTemplate\",\n    value: function renderTemplate(container) {\n      var templateData = this.renderer.renderTemplate(container);\n      return {\n        templateData: templateData\n      };\n    }\n  }, {\n    key: \"renderElement\",\n    value: function renderElement(node, index, templateData, height) {\n      this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n  }, {\n    key: \"renderCompressedElements\",\n    value: function renderCompressedElements(node, index, templateData, height) {\n      this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n  }, {\n    key: \"renderTwistie\",\n    value: function renderTwistie(element, twistieElement) {\n      if (element.slow) {\n        var _twistieElement$class3;\n\n        (_twistieElement$class3 = twistieElement.classList).add.apply(_twistieElement$class3, _toConsumableArray(treeItemLoadingIcon.classNamesArray));\n\n        return true;\n      } else {\n        var _twistieElement$class4;\n\n        (_twistieElement$class4 = twistieElement.classList).remove.apply(_twistieElement$class4, _toConsumableArray(treeItemLoadingIcon.classNamesArray));\n\n        return false;\n      }\n    }\n  }, {\n    key: \"disposeElement\",\n    value: function disposeElement(node, index, templateData, height) {\n      if (this.renderer.disposeElement) {\n        this.renderer.disposeElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n      }\n    }\n  }, {\n    key: \"disposeCompressedElements\",\n    value: function disposeCompressedElements(node, index, templateData, height) {\n      if (this.renderer.disposeCompressedElements) {\n        this.renderer.disposeCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n      }\n    }\n  }, {\n    key: \"disposeTemplate\",\n    value: function disposeTemplate(templateData) {\n      this.renderer.disposeTemplate(templateData.templateData);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.renderedNodes.clear();\n      this.disposables = _dispose(this.disposables);\n    }\n  }]);\n\n  return CompressibleAsyncDataTreeRenderer;\n}();\n\nfunction asCompressibleObjectTreeOptions(options) {\n  var objectTreeOptions = options && asObjectTreeOptions(options);\n  return objectTreeOptions && Object.assign(Object.assign({}, objectTreeOptions), {\n    keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, objectTreeOptions.keyboardNavigationLabelProvider), {\n      getCompressedNodeKeyboardNavigationLabel: function getCompressedNodeKeyboardNavigationLabel(els) {\n        return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(function (e) {\n          return e.element;\n        }));\n      }\n    })\n  });\n}\n\nexport var CompressibleAsyncDataTree = /*#__PURE__*/function (_AsyncDataTree) {\n  _inherits(CompressibleAsyncDataTree, _AsyncDataTree);\n\n  var _super2 = _createSuper(CompressibleAsyncDataTree);\n\n  function CompressibleAsyncDataTree(user, container, virtualDelegate, compressionDelegate, renderers, dataSource) {\n    var _this12;\n\n    var options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\n    _classCallCheck(this, CompressibleAsyncDataTree);\n\n    _this12 = _super2.call(this, user, container, virtualDelegate, renderers, dataSource, options);\n    _this12.compressionDelegate = compressionDelegate;\n    _this12.compressibleNodeMapper = new WeakMapper(function (node) {\n      return new CompressibleAsyncDataTreeNodeWrapper(node);\n    });\n    _this12.filter = options.filter;\n    return _this12;\n  }\n\n  _createClass(CompressibleAsyncDataTree, [{\n    key: \"createTree\",\n    value: function createTree(user, container, delegate, renderers, options) {\n      var _this13 = this;\n\n      var objectTreeDelegate = new ComposedTreeDelegate(delegate);\n      var objectTreeRenderers = renderers.map(function (r) {\n        return new CompressibleAsyncDataTreeRenderer(r, _this13.nodeMapper, function () {\n          return _this13.compressibleNodeMapper;\n        }, _this13._onDidChangeNodeSlowState.event);\n      });\n      var objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\n      return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n  }, {\n    key: \"asTreeElement\",\n    value: function asTreeElement(node, viewStateContext) {\n      return Object.assign({\n        incompressible: this.compressionDelegate.isIncompressible(node.element)\n      }, _get(_getPrototypeOf(CompressibleAsyncDataTree.prototype), \"asTreeElement\", this).call(this, node, viewStateContext));\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.tree.updateOptions(options);\n    }\n  }, {\n    key: \"render\",\n    value: function render(node, viewStateContext) {\n      var _this14 = this;\n\n      if (!this.identityProvider) {\n        return _get(_getPrototypeOf(CompressibleAsyncDataTree.prototype), \"render\", this).call(this, node, viewStateContext);\n      } // Preserve traits across compressions. Hacky but does the trick.\n      // This is hard to fix properly since it requires rewriting the traits\n      // across trees and lists. Let's just keep it this way for now.\n\n\n      var getId = function getId(element) {\n        return _this14.identityProvider.getId(element).toString();\n      };\n\n      var getUncompressedIds = function getUncompressedIds(nodes) {\n        var result = new Set();\n\n        var _iterator4 = _createForOfIteratorHelper(nodes),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _node2 = _step4.value;\n\n            var compressedNode = _this14.tree.getCompressedTreeNode(_node2 === _this14.root ? null : _node2);\n\n            if (!compressedNode.element) {\n              continue;\n            }\n\n            var _iterator5 = _createForOfIteratorHelper(compressedNode.element.elements),\n                _step5;\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var _node3 = _step5.value;\n                result.add(getId(_node3.element));\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        return result;\n      };\n\n      var oldSelection = getUncompressedIds(this.tree.getSelection());\n      var oldFocus = getUncompressedIds(this.tree.getFocus());\n\n      _get(_getPrototypeOf(CompressibleAsyncDataTree.prototype), \"render\", this).call(this, node, viewStateContext);\n\n      var selection = this.getSelection();\n      var didChangeSelection = false;\n      var focus = this.getFocus();\n      var didChangeFocus = false;\n\n      var visit = function visit(node) {\n        var compressedNode = node.element;\n\n        if (compressedNode) {\n          for (var i = 0; i < compressedNode.elements.length; i++) {\n            var id = getId(compressedNode.elements[i].element);\n            var element = compressedNode.elements[compressedNode.elements.length - 1].element; // github.com/microsoft/vscode/issues/85938\n\n            if (oldSelection.has(id) && selection.indexOf(element) === -1) {\n              selection.push(element);\n              didChangeSelection = true;\n            }\n\n            if (oldFocus.has(id) && focus.indexOf(element) === -1) {\n              focus.push(element);\n              didChangeFocus = true;\n            }\n          }\n        }\n\n        node.children.forEach(visit);\n      };\n\n      visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\n\n      if (didChangeSelection) {\n        this.setSelection(selection);\n      }\n\n      if (didChangeFocus) {\n        this.setFocus(focus);\n      }\n    } // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n    // and we have to filter everything beforehand\n    // Related to #85193 and #85835\n\n  }, {\n    key: \"processChildren\",\n    value: function processChildren(children) {\n      var _this15 = this;\n\n      if (this.filter) {\n        children = Iterable.filter(children, function (e) {\n          var result = _this15.filter.filter(e, 1\n          /* Visible */\n          );\n\n          var visibility = getVisibility(result);\n\n          if (visibility === 2\n          /* Recurse */\n          ) {\n              throw new Error('Recursive tree visibility not supported in async data compressed trees');\n            }\n\n          return visibility === 1\n          /* Visible */\n          ;\n        });\n      }\n\n      return _get(_getPrototypeOf(CompressibleAsyncDataTree.prototype), \"processChildren\", this).call(this, children);\n    }\n  }]);\n\n  return CompressibleAsyncDataTree;\n}(AsyncDataTree);\n\nfunction getVisibility(filterResult) {\n  if (typeof filterResult === 'boolean') {\n    return filterResult ? 1\n    /* Visible */\n    : 0\n    /* Hidden */\n    ;\n  } else if (isFilterResult(filterResult)) {\n    return getVisibleState(filterResult.visibility);\n  } else {\n    return getVisibleState(filterResult);\n  }\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/asyncDataTree.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ComposedTreeDelegate","ObjectTree","CompressibleObjectTree","TreeError","WeakMapper","dispose","DisposableStore","Emitter","Event","timeout","createCancelablePromise","Iterable","ElementsDragAndDropData","isPromiseCanceledError","onUnexpectedError","isFilterResult","getVisibleState","treeItemLoadingIcon","createAsyncDataTreeNode","props","Object","assign","children","refreshPromise","undefined","stale","slow","collapsedByDefault","isAncestor","ancestor","descendant","parent","intersects","node","other","AsyncDataTreeNodeWrapper","element","map","depth","visibleChildrenCount","visibleChildIndex","collapsible","collapsed","visible","filterData","AsyncDataTreeRenderer","renderer","nodeMapper","onDidChangeTwistieState","renderedNodes","Map","templateId","container","templateData","renderTemplate","index","height","renderElement","twistieElement","classList","add","classNamesArray","remove","disposeElement","disposeTemplate","clear","asTreeEvent","browserEvent","elements","asTreeMouseEvent","target","AsyncDataTreeElementsDragAndDropData","data","asAsyncDataTreeDragAndDropData","AsyncDataTreeNodeListDragAndDrop","dnd","getDragURI","nodes","originalEvent","getDragLabel","onDragStart","targetNode","targetIndex","raw","onDragOver","drop","onDragEnd","asObjectTreeOptions","options","collapseByDefault","identityProvider","getId","el","multipleSelectionController","isSelectionSingleChangeEvent","isSelectionRangeChangeEvent","accessibilityProvider","getPosInSet","getSetSize","getRole","isChecked","_a","getAriaLabel","getWidgetAriaLabel","getWidgetRole","getAriaLevel","getActiveDescendantId","filter","parentVisibility","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","sorter","expandOnlyOnTwistieClick","additionalScrollHeight","dfs","fn","forEach","child","AsyncDataTree","user","delegate","renderers","dataSource","subTreeRefreshPromises","refreshPromises","_onDidRender","_onDidChangeNodeSlowState","disposables","autoExpandSingleChildren","tree","createTree","root","hasChildren","id","set","onDidChangeCollapseState","_onDidChangeCollapseState","objectTreeDelegate","objectTreeRenderers","r","event","objectTreeOptions","updateOptions","getHTMLElement","domFocus","width","layout","styles","style","input","viewState","promise","cancel","viewStateContext","focus","selection","_updateChildren","setFocus","setSelection","scrollTop","recursive","rerender","toPromise","getDataNode","refreshAndRenderNode","collapse","hasElement","isCollapsible","isCollapsed","expand","getSelection","n","getFocus","relativeTop","reveal","get","refreshNode","render","doRefreshSubTree","c","doRefreshNode","childrenToRefresh","all","childrenPromise","empty","slowTimeout","fire","_","doGetChildren","setChildren","getChildren","processChildren","deep","childrenElementsIterable","childrenElements","length","nodesToForget","childrenTreeNodesById","asyncDataTreeNode","push","toString","splice","childAsyncDataTreeNode","indexOf","expanded","values","asTreeElement","diffIdentityProvider","setCollapsible","sort","compare","bind","onDidChangeFocus","onDidChangeSelection","onMouseDblClick","onPointer","onDidFocus","onDidDispose","CompressibleAsyncDataTreeNodeWrapper","incompressible","CompressibleAsyncDataTreeRenderer","compressibleNodeMapperProvider","renderCompressedElements","disposeCompressedElements","asCompressibleObjectTreeOptions","getCompressedNodeKeyboardNavigationLabel","els","CompressibleAsyncDataTree","virtualDelegate","compressionDelegate","compressibleNodeMapper","isIncompressible","getUncompressedIds","Set","compressedNode","getCompressedTreeNode","oldSelection","oldFocus","didChangeSelection","didChangeFocus","visit","i","has","visibility","getVisibility","Error","filterResult"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,MAAAA,OAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,IAAAA,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,SAASO,oBAAT,QAAqC,mBAArC;AACA,SAASC,UAAT,EAAqBC,sBAArB,QAAmD,iBAAnD;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,WAAtC;AACA,SAASC,OAAO,IAAPA,QAAT,EAAkBC,eAAlB,QAAyC,8BAAzC;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,0BAA/B;AACA,SAASC,OAAT,EAAkBC,uBAAlB,QAAiD,0BAAjD;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,uBAAT,QAAwC,qBAAxC;AACA,SAASC,sBAAT,EAAiCC,iBAAjC,QAA0D,2BAA1D;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,qBAAhD;AACA,SAASC,mBAAT,QAAoC,gBAApC;;AACA,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AACpC,SAAOC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,CAAd,EAAwC;AAAEG,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,cAAc,EAAEC,SAAhC;AAA2CC,IAAAA,KAAK,EAAE,IAAlD;AAAwDC,IAAAA,IAAI,EAAE,KAA9D;AAAqEC,IAAAA,kBAAkB,EAAEH;AAAzF,GAAxC,CAAP;AACH;;AACD,SAASI,UAAT,CAAoBC,QAApB,EAA8BC,UAA9B,EAA0C;AACtC,MAAI,CAACA,UAAU,CAACC,MAAhB,EAAwB;AACpB,WAAO,KAAP;AACH,GAFD,MAGK,IAAID,UAAU,CAACC,MAAX,KAAsBF,QAA1B,EAAoC;AACrC,WAAO,IAAP;AACH,GAFI,MAGA;AACD,WAAOD,UAAU,CAACC,QAAD,EAAWC,UAAU,CAACC,MAAtB,CAAjB;AACH;AACJ;;AACD,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiC;AAC7B,SAAOD,IAAI,KAAKC,KAAT,IAAkBN,UAAU,CAACK,IAAD,EAAOC,KAAP,CAA5B,IAA6CN,UAAU,CAACM,KAAD,EAAQD,IAAR,CAA9D;AACH;;IACKE,wB;AACF,oCAAYF,IAAZ,EAAkB;AAAA;;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;;;wBACa;AAAE,aAAO,KAAKA,IAAL,CAAUG,OAAV,CAAkBA,OAAzB;AAAmC;;;wBACpC;AAAE,aAAO,KAAKH,IAAL,CAAUX,QAAV,CAAmBe,GAAnB,CAAuB,UAAAJ,IAAI;AAAA,eAAI,IAAIE,wBAAJ,CAA6BF,IAA7B,CAAJ;AAAA,OAA3B,CAAP;AAA4E;;;wBACjF;AAAE,aAAO,KAAKA,IAAL,CAAUK,KAAjB;AAAyB;;;wBACZ;AAAE,aAAO,KAAKL,IAAL,CAAUM,oBAAjB;AAAwC;;;wBAC7C;AAAE,aAAO,KAAKN,IAAL,CAAUO,iBAAjB;AAAqC;;;wBAC7C;AAAE,aAAO,KAAKP,IAAL,CAAUQ,WAAjB;AAA+B;;;wBACnC;AAAE,aAAO,KAAKR,IAAL,CAAUS,SAAjB;AAA6B;;;wBACjC;AAAE,aAAO,KAAKT,IAAL,CAAUU,OAAjB;AAA2B;;;wBAC1B;AAAE,aAAO,KAAKV,IAAL,CAAUW,UAAjB;AAA8B;;;;;;IAE/CC,qB;AACF,iCAAYC,QAAZ,EAAsBC,UAAtB,EAAkCC,uBAAlC,EAA2D;AAAA;;AACvD,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AACA,SAAKC,UAAL,GAAkBL,QAAQ,CAACK,UAA3B;AACH;;;;mCACcC,S,EAAW;AACtB,UAAMC,YAAY,GAAG,KAAKP,QAAL,CAAcQ,cAAd,CAA6BF,SAA7B,CAArB;AACA,aAAO;AAAEC,QAAAA,YAAY,EAAZA;AAAF,OAAP;AACH;;;kCACapB,I,EAAMsB,K,EAAOF,Y,EAAcG,M,EAAQ;AAC7C,WAAKV,QAAL,CAAcW,aAAd,CAA4B,KAAKV,UAAL,CAAgBV,GAAhB,CAAoBJ,IAApB,CAA5B,EAAuDsB,KAAvD,EAA8DF,YAAY,CAACA,YAA3E,EAAyFG,MAAzF;AACH;;;kCACapB,O,EAASsB,c,EAAgB;AACnC,UAAItB,OAAO,CAACV,IAAZ,EAAkB;AAAA;;AACd,iCAAAgC,cAAc,CAACC,SAAf,EAAyBC,GAAzB,iDAAgC3C,mBAAmB,CAAC4C,eAApD;;AACA,eAAO,IAAP;AACH,OAHD,MAIK;AAAA;;AACD,kCAAAH,cAAc,CAACC,SAAf,EAAyBG,MAAzB,kDAAmC7C,mBAAmB,CAAC4C,eAAvD;;AACA,eAAO,KAAP;AACH;AACJ;;;mCACc5B,I,EAAMsB,K,EAAOF,Y,EAAcG,M,EAAQ;AAC9C,UAAI,KAAKV,QAAL,CAAciB,cAAlB,EAAkC;AAC9B,aAAKjB,QAAL,CAAciB,cAAd,CAA6B,KAAKhB,UAAL,CAAgBV,GAAhB,CAAoBJ,IAApB,CAA7B,EAAwDsB,KAAxD,EAA+DF,YAAY,CAACA,YAA5E,EAA0FG,MAA1F;AACH;AACJ;;;oCACeH,Y,EAAc;AAC1B,WAAKP,QAAL,CAAckB,eAAd,CAA8BX,YAAY,CAACA,YAA3C;AACH;;;8BACS;AACN,WAAKJ,aAAL,CAAmBgB,KAAnB;AACH;;;;;;AAEL,SAASC,WAAT,CAAqBxE,CAArB,EAAwB;AACpB,SAAO;AACHyE,IAAAA,YAAY,EAAEzE,CAAC,CAACyE,YADb;AAEHC,IAAAA,QAAQ,EAAE1E,CAAC,CAAC0E,QAAF,CAAW/B,GAAX,CAAe,UAAA3C,CAAC;AAAA,aAAIA,CAAC,CAAC0C,OAAN;AAAA,KAAhB;AAFP,GAAP;AAIH;;AACD,SAASiC,gBAAT,CAA0B3E,CAA1B,EAA6B;AACzB,SAAO;AACHyE,IAAAA,YAAY,EAAEzE,CAAC,CAACyE,YADb;AAEH/B,IAAAA,OAAO,EAAE1C,CAAC,CAAC0C,OAAF,IAAa1C,CAAC,CAAC0C,OAAF,CAAUA,OAF7B;AAGHkC,IAAAA,MAAM,EAAE5E,CAAC,CAAC4E;AAHP,GAAP;AAKH;;IACKC,oC;;;;;AACF,gDAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,IAAI,CAACJ,QAAL,CAAc/B,GAAd,CAAkB,UAAAJ,IAAI;AAAA,aAAIA,IAAI,CAACG,OAAT;AAAA,KAAtB,CAAN;AACA,UAAKoC,IAAL,GAAYA,IAAZ;AAFc;AAGjB;;;EAJ8C5D,uB;;AAMnD,SAAS6D,8BAAT,CAAwCD,IAAxC,EAA8C;AAC1C,MAAIA,IAAI,YAAY5D,uBAApB,EAA6C;AACzC,WAAO,IAAI2D,oCAAJ,CAAyCC,IAAzC,CAAP;AACH;;AACD,SAAOA,IAAP;AACH;;IACKE,gC;AACF,4CAAYC,GAAZ,EAAiB;AAAA;;AACb,SAAKA,GAAL,GAAWA,GAAX;AACH;;;;+BACU1C,I,EAAM;AACb,aAAO,KAAK0C,GAAL,CAASC,UAAT,CAAoB3C,IAAI,CAACG,OAAzB,CAAP;AACH;;;iCACYyC,K,EAAOC,a,EAAe;AAC/B,UAAI,KAAKH,GAAL,CAASI,YAAb,EAA2B;AACvB,eAAO,KAAKJ,GAAL,CAASI,YAAT,CAAsBF,KAAK,CAACxC,GAAN,CAAU,UAAAJ,IAAI;AAAA,iBAAIA,IAAI,CAACG,OAAT;AAAA,SAAd,CAAtB,EAAuD0C,aAAvD,CAAP;AACH;;AACD,aAAOtD,SAAP;AACH;;;gCACWgD,I,EAAMM,a,EAAe;AAC7B,UAAI,KAAKH,GAAL,CAASK,WAAb,EAA0B;AACtB,aAAKL,GAAL,CAASK,WAAT,CAAqBP,8BAA8B,CAACD,IAAD,CAAnD,EAA2DM,aAA3D;AACH;AACJ;;;+BACUN,I,EAAMS,U,EAAYC,W,EAAaJ,a,EAA2B;AAAA,UAAZK,GAAY,uEAAN,IAAM;AACjE,aAAO,KAAKR,GAAL,CAASS,UAAT,CAAoBX,8BAA8B,CAACD,IAAD,CAAlD,EAA0DS,UAAU,IAAIA,UAAU,CAAC7C,OAAnF,EAA4F8C,WAA5F,EAAyGJ,aAAzG,CAAP;AACH;;;yBACIN,I,EAAMS,U,EAAYC,W,EAAaJ,a,EAAe;AAC/C,WAAKH,GAAL,CAASU,IAAT,CAAcZ,8BAA8B,CAACD,IAAD,CAA5C,EAAoDS,UAAU,IAAIA,UAAU,CAAC7C,OAA7E,EAAsF8C,WAAtF,EAAmGJ,aAAnG;AACH;;;8BACSA,a,EAAe;AACrB,UAAI,KAAKH,GAAL,CAASW,SAAb,EAAwB;AACpB,aAAKX,GAAL,CAASW,SAAT,CAAmBR,aAAnB;AACH;AACJ;;;;;;AAEL,SAASS,mBAAT,CAA6BC,OAA7B,EAAsC;AAClC,SAAOA,OAAO,IAAIpE,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBmE,OAAlB,CAAd,EAA0C;AAAEC,IAAAA,iBAAiB,EAAE,IAArB;AAA2BC,IAAAA,gBAAgB,EAAEF,OAAO,CAACE,gBAAR,IAA4B;AAC7HC,MAAAA,KAD6H,iBACvHC,EADuH,EACnH;AACN,eAAOJ,OAAO,CAACE,gBAAR,CAAyBC,KAAzB,CAA+BC,EAAE,CAACxD,OAAlC,CAAP;AACH;AAH4H,KAAzE;AAIrDuC,IAAAA,GAAG,EAAEa,OAAO,CAACb,GAAR,IAAe,IAAID,gCAAJ,CAAqCc,OAAO,CAACb,GAA7C,CAJiC;AAIkBkB,IAAAA,2BAA2B,EAAEL,OAAO,CAACK,2BAAR,IAAuC;AAC1IC,MAAAA,4BAD0I,wCAC7GpG,CAD6G,EAC1G;AAC5B,eAAO8F,OAAO,CAACK,2BAAR,CAAoCC,4BAApC,CAAiE1E,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB3B,CAAlB,CAAd,EAAoC;AAAE0C,UAAAA,OAAO,EAAE1C,CAAC,CAAC0C;AAAb,SAApC,CAAjE,CAAP;AACH,OAHyI;AAI1I2D,MAAAA,2BAJ0I,uCAI9GrG,CAJ8G,EAI3G;AAC3B,eAAO8F,OAAO,CAACK,2BAAR,CAAoCE,2BAApC,CAAgE3E,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB3B,CAAlB,CAAd,EAAoC;AAAE0C,UAAAA,OAAO,EAAE1C,CAAC,CAAC0C;AAAb,SAApC,CAAhE,CAAP;AACH;AANyI,KAJtF;AAWrD4D,IAAAA,qBAAqB,EAAER,OAAO,CAACQ,qBAAR,IAAiC5E,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBmE,OAAO,CAACQ,qBAA1B,CAAd,EAAgE;AAAEC,MAAAA,WAAW,EAAEzE,SAAf;AAA0B0E,MAAAA,UAAU,EAAE1E,SAAtC;AAAiD2E,MAAAA,OAAO,EAAEX,OAAO,CAACQ,qBAAR,CAA8BG,OAA9B,GAAwC,UAACP,EAAD,EAAQ;AAC7N,eAAOJ,OAAO,CAACQ,qBAAR,CAA8BG,OAA9B,CAAsCP,EAAE,CAACxD,OAAzC,CAAP;AACH,OAFgL,GAE7K;AAAA,eAAM,UAAN;AAAA,OAFmH;AAEjGgE,MAAAA,SAAS,EAAEZ,OAAO,CAACQ,qBAAR,CAA8BI,SAA9B,GAA0C,UAAC1G,CAAD,EAAO;AAC9E,YAAI2G,EAAJ;;AACA,eAAO,CAAC,EAAE,CAACA,EAAE,GAAGb,OAAO,CAACQ,qBAAd,MAAyC,IAAzC,IAAiDK,EAAE,KAAK,KAAK,CAA7D,GAAiE,KAAK,CAAtE,GAA0EA,EAAE,CAACD,SAAH,CAAa1G,CAAC,CAAC0C,OAAf,CAA5E,CAAR;AACH,OAHgC,GAG7BZ,SALmH;AAKxG8E,MAAAA,YALwG,wBAK3F5G,CAL2F,EAKxF;AAC3B,eAAO8F,OAAO,CAACQ,qBAAR,CAA8BM,YAA9B,CAA2C5G,CAAC,CAAC0C,OAA7C,CAAP;AACH,OAPsH;AAQvHmE,MAAAA,kBARuH,gCAQlG;AACjB,eAAOf,OAAO,CAACQ,qBAAR,CAA8BO,kBAA9B,EAAP;AACH,OAVsH;AAUpHC,MAAAA,aAAa,EAAEhB,OAAO,CAACQ,qBAAR,CAA8BQ,aAA9B,GAA8C;AAAA,eAAMhB,OAAO,CAACQ,qBAAR,CAA8BQ,aAA9B,EAAN;AAAA,OAA9C,GAAoG;AAAA,eAAM,MAAN;AAAA,OAVC;AAUaC,MAAAA,YAAY,EAAEjB,OAAO,CAACQ,qBAAR,CAA8BS,YAA9B,IAA+C,UAAAxE,IAAI,EAAI;AACrM,eAAOuD,OAAO,CAACQ,qBAAR,CAA8BS,YAA9B,CAA2CxE,IAAI,CAACG,OAAhD,CAAP;AACH,OAZsH;AAYnHsE,MAAAA,qBAAqB,EAAElB,OAAO,CAACQ,qBAAR,CAA8BU,qBAA9B,IAAwD,UAAAzE,IAAI,EAAI;AACvF,eAAOuD,OAAO,CAACQ,qBAAR,CAA8BU,qBAA9B,CAAoDzE,IAAI,CAACG,OAAzD,CAAP;AACH;AAdsH,KAAhE,CAXH;AAyB7CuE,IAAAA,MAAM,EAAEnB,OAAO,CAACmB,MAAR,IAAkB;AACjCA,MAAAA,MADiC,kBAC1BjH,CAD0B,EACvBkH,gBADuB,EACL;AACxB,eAAOpB,OAAO,CAACmB,MAAR,CAAeA,MAAf,CAAsBjH,CAAC,CAAC0C,OAAxB,EAAiCwE,gBAAjC,CAAP;AACH;AAHgC,KAzBmB;AA6BrDC,IAAAA,+BAA+B,EAAErB,OAAO,CAACqB,+BAAR,IAA2CzF,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBmE,OAAO,CAACqB,+BAA1B,CAAd,EAA0E;AAAEC,MAAAA,0BAAF,sCAA6BpH,CAA7B,EAAgC;AACjL,eAAO8F,OAAO,CAACqB,+BAAR,CAAwCC,0BAAxC,CAAmEpH,CAAC,CAAC0C,OAArE,CAAP;AACH;AAFoJ,KAA1E,CA7BvB;AA+B9C2E,IAAAA,MAAM,EAAEvF,SA/BsC;AA+B3BwF,IAAAA,wBAAwB,EAAE,OAAOxB,OAAO,CAACwB,wBAAf,KAA4C,WAA5C,GAA0DxF,SAA1D,GAAuE,OAAOgE,OAAO,CAACwB,wBAAf,KAA4C,UAA5C,GAAyDxB,OAAO,CAACwB,wBAAjE,GAA6F,UAAAtH,CAAC;AAAA,aAAI8F,OAAO,CAACwB,wBAAR,CAAiCtH,CAAC,CAAC0C,OAAnC,CAAJ;AAAA,KA/BpK;AA+BuN6E,IAAAA,sBAAsB,EAAEzB,OAAO,CAACyB;AA/BvP,GAA1C,CAAlB;AAgCH;;AACD,SAASC,GAAT,CAAajF,IAAb,EAAmBkF,EAAnB,EAAuB;AACnBA,EAAAA,EAAE,CAAClF,IAAD,CAAF;AACAA,EAAAA,IAAI,CAACX,QAAL,CAAc8F,OAAd,CAAsB,UAAAC,KAAK;AAAA,WAAIH,GAAG,CAACG,KAAD,EAAQF,EAAR,CAAP;AAAA,GAA3B;AACH;;AACD,WAAaG,aAAb;AACI,yBAAYC,IAAZ,EAAkBnE,SAAlB,EAA6BoE,QAA7B,EAAuCC,SAAvC,EAAkDC,UAAlD,EAA4E;AAAA,QAAdlC,OAAc,uEAAJ,EAAI;;AAAA;;AACxE,SAAK+B,IAAL,GAAYA,IAAZ;AACA,SAAKG,UAAL,GAAkBA,UAAlB;AACA,SAAK7C,KAAL,GAAa,IAAI3B,GAAJ,EAAb;AACA,SAAKyE,sBAAL,GAA8B,IAAIzE,GAAJ,EAA9B;AACA,SAAK0E,eAAL,GAAuB,IAAI1E,GAAJ,EAAvB;AACA,SAAK2E,YAAL,GAAoB,IAAItH,OAAJ,EAApB;AACA,SAAKuH,yBAAL,GAAiC,IAAIvH,OAAJ,EAAjC;AACA,SAAKwC,UAAL,GAAkB,IAAI3C,UAAJ,CAAe,UAAA6B,IAAI;AAAA,aAAI,IAAIE,wBAAJ,CAA6BF,IAA7B,CAAJ;AAAA,KAAnB,CAAlB;AACA,SAAK8F,WAAL,GAAmB,IAAIzH,eAAJ,EAAnB;AACA,SAAKoF,gBAAL,GAAwBF,OAAO,CAACE,gBAAhC;AACA,SAAKsC,wBAAL,GAAgC,OAAOxC,OAAO,CAACwC,wBAAf,KAA4C,WAA5C,GAA0D,KAA1D,GAAkExC,OAAO,CAACwC,wBAA1G;AACA,SAAKjB,MAAL,GAAcvB,OAAO,CAACuB,MAAtB;AACA,SAAKtB,iBAAL,GAAyBD,OAAO,CAACC,iBAAjC;AACA,SAAKwC,IAAL,GAAY,KAAKC,UAAL,CAAgBX,IAAhB,EAAsBnE,SAAtB,EAAiCoE,QAAjC,EAA2CC,SAA3C,EAAsDjC,OAAtD,CAAZ;AACA,SAAK2C,IAAL,GAAYjH,uBAAuB,CAAC;AAChCkB,MAAAA,OAAO,EAAEZ,SADuB;AAEhCO,MAAAA,MAAM,EAAE,IAFwB;AAGhCqG,MAAAA,WAAW,EAAE;AAHmB,KAAD,CAAnC;;AAKA,QAAI,KAAK1C,gBAAT,EAA2B;AACvB,WAAKyC,IAAL,GAAY/G,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK8G,IAAvB,CAAd,EAA4C;AAAEE,QAAAA,EAAE,EAAE;AAAN,OAA5C,CAAZ;AACH;;AACD,SAAKxD,KAAL,CAAWyD,GAAX,CAAe,IAAf,EAAqB,KAAKH,IAA1B;AACA,SAAKF,IAAL,CAAUM,wBAAV,CAAmC,KAAKC,yBAAxC,EAAmE,IAAnE,EAAyE,KAAKT,WAA9E;AACH;;AA1BL;AAAA;AAAA,+BAiCeR,IAjCf,EAiCqBnE,SAjCrB,EAiCgCoE,QAjChC,EAiC0CC,SAjC1C,EAiCqDjC,OAjCrD,EAiC8D;AAAA;;AACtD,UAAMiD,kBAAkB,GAAG,IAAIzI,oBAAJ,CAAyBwH,QAAzB,CAA3B;AACA,UAAMkB,mBAAmB,GAAGjB,SAAS,CAACpF,GAAV,CAAc,UAAAsG,CAAC;AAAA,eAAI,IAAI9F,qBAAJ,CAA0B8F,CAA1B,EAA6B,MAAI,CAAC5F,UAAlC,EAA8C,MAAI,CAAC+E,yBAAL,CAA+Bc,KAA7E,CAAJ;AAAA,OAAf,CAA5B;AACA,UAAMC,iBAAiB,GAAGtD,mBAAmB,CAACC,OAAD,CAAnB,IAAgC,EAA1D;AACA,aAAO,IAAIvF,UAAJ,CAAesH,IAAf,EAAqBnE,SAArB,EAAgCqF,kBAAhC,EAAoDC,mBAApD,EAAyEG,iBAAzE,CAAP;AACH;AAtCL;AAAA;AAAA,oCAuCgC;AAAA,UAAdrD,OAAc,uEAAJ,EAAI;AACxB,WAAKyC,IAAL,CAAUa,aAAV,CAAwBtD,OAAxB;AACH,KAzCL,CA0CI;;AA1CJ;AAAA;AAAA,qCA2CqB;AACb,aAAO,KAAKyC,IAAL,CAAUc,cAAV,EAAP;AACH;AA7CL;AAAA;AAAA,+BAoDe;AACP,WAAKd,IAAL,CAAUe,QAAV;AACH;AAtDL;AAAA;AAAA,2BAuDWxF,MAvDX,EAuDmByF,KAvDnB,EAuD0B;AAClB,WAAKhB,IAAL,CAAUiB,MAAV,CAAiB1F,MAAjB,EAAyByF,KAAzB;AACH;AAzDL;AAAA;AAAA,0BA0DUE,MA1DV,EA0DkB;AACV,WAAKlB,IAAL,CAAUmB,KAAV,CAAgBD,MAAhB;AACH,KA5DL,CA6DI;;AA7DJ;AAAA;AAAA,+BA8De;AACP,aAAO,KAAKhB,IAAL,CAAU/F,OAAjB;AACH;AAhEL;AAAA;AAAA,6BAiEaiH,KAjEb,EAiEoBC,SAjEpB,EAiE+B;AACvB,aAAOzK,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AACnC,qBAAK+I,eAAL,CAAqBR,OAArB,CAA6B,UAAAmC,OAAO;AAAA,yBAAIA,OAAO,CAACC,MAAR,EAAJ;AAAA,iBAApC;AACA,qBAAK5B,eAAL,CAAqB3D,KAArB;AACA,qBAAKkE,IAAL,CAAU/F,OAAV,GAAoBiH,KAApB;AACMI,gBAAAA,gBAJ6B,GAIVH,SAAS,IAAI;AAAEA,kBAAAA,SAAS,EAATA,SAAF;AAAaI,kBAAAA,KAAK,EAAE,EAApB;AAAwBC,kBAAAA,SAAS,EAAE;AAAnC,iBAJH;AAAA;AAKnC,uBAAM,KAAKC,eAAL,CAAqBP,KAArB,EAA4B,IAA5B,EAAkC,KAAlC,EAAyCI,gBAAzC,CAAN;;AALmC;AAMnC,oBAAIA,gBAAJ,EAAsB;AAClB,uBAAKxB,IAAL,CAAU4B,QAAV,CAAmBJ,gBAAgB,CAACC,KAApC;AACA,uBAAKzB,IAAL,CAAU6B,YAAV,CAAuBL,gBAAgB,CAACE,SAAxC;AACH;;AACD,oBAAIL,SAAS,IAAI,OAAOA,SAAS,CAACS,SAAjB,KAA+B,QAAhD,EAA0D;AACtD,uBAAKA,SAAL,GAAiBT,SAAS,CAACS,SAA3B;AACH;;AAZkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB,EAAhB;AAcH;AAhFL;AAAA;AAAA,sCAiFgH;AAAA,UAA5F3H,OAA4F,uEAAlF,KAAK+F,IAAL,CAAU/F,OAAwE;AAAA,UAA/D4H,SAA+D,uEAAnD,IAAmD;AAAA,UAA7CC,QAA6C,uEAAlC,KAAkC;AAAA,UAA3BR,gBAA2B;AAAA,UAATjE,OAAS;AACxG,aAAO3G,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAC/B,OAAO,KAAKsJ,IAAL,CAAU/F,OAAjB,KAA6B,WADE;AAAA;AAAA;AAAA;;AAAA,sBAEzB,IAAIjC,SAAJ,CAAc,KAAKoH,IAAnB,EAAyB,oBAAzB,CAFyB;;AAAA;AAAA,qBAI/B,KAAKY,IAAL,CAAU5G,cAJqB;AAAA;AAAA;AAAA;;AAAA;AAK/B,uBAAM,KAAK4G,IAAL,CAAU5G,cAAhB;;AAL+B;AAAA;AAM/B,uBAAMf,KAAK,CAAC0J,SAAN,CAAgB,KAAKrC,YAAL,CAAkBe,KAAlC,CAAN;;AAN+B;AAQ7B3G,gBAAAA,IAR6B,GAQtB,KAAKkI,WAAL,CAAiB/H,OAAjB,CARsB;AAAA;AASnC,uBAAM,KAAKgI,oBAAL,CAA0BnI,IAA1B,EAAgC+H,SAAhC,EAA2CP,gBAA3C,EAA6DjE,OAA7D,CAAN;;AATmC;AAUnC,oBAAIyE,QAAJ,EAAc;AACV,sBAAI;AACA,yBAAKhC,IAAL,CAAUgC,QAAV,CAAmBhI,IAAnB;AACH,mBAFD,CAGA,OAAOoE,EAAP,EAAW,CACP;AACA;AACH;AACJ;;AAlBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB,EAAhB;AAoBH,KAtGL,CAuGI;;AAvGJ;AAAA;AAAA,6BAwGajE,OAxGb,EAwGsB;AACd,UAAIA,OAAO,KAAKZ,SAAZ,IAAyBY,OAAO,KAAK,KAAK+F,IAAL,CAAU/F,OAAnD,EAA4D;AACxD,aAAK6F,IAAL,CAAUgC,QAAV;AACA;AACH;;AACD,UAAMhI,IAAI,GAAG,KAAKkI,WAAL,CAAiB/H,OAAjB,CAAb;AACA,WAAK6F,IAAL,CAAUgC,QAAV,CAAmBhI,IAAnB;AACH;AA/GL;AAAA;AAAA,6BAgHaG,OAhHb,EAgHyC;AAAA,UAAnB4H,SAAmB,uEAAP,KAAO;AACjC,UAAM/H,IAAI,GAAG,KAAKkI,WAAL,CAAiB/H,OAAjB,CAAb;AACA,aAAO,KAAK6F,IAAL,CAAUoC,QAAV,CAAmBpI,IAAI,KAAK,KAAKkG,IAAd,GAAqB,IAArB,GAA4BlG,IAA/C,EAAqD+H,SAArD,CAAP;AACH;AAnHL;AAAA;AAAA,2BAoHW5H,OApHX,EAoHuC;AAAA,UAAnB4H,SAAmB,uEAAP,KAAO;AAC/B,aAAOnL,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAC/B,OAAO,KAAKsJ,IAAL,CAAU/F,OAAjB,KAA6B,WADE;AAAA;AAAA;AAAA;;AAAA,sBAEzB,IAAIjC,SAAJ,CAAc,KAAKoH,IAAnB,EAAyB,oBAAzB,CAFyB;;AAAA;AAAA,qBAI/B,KAAKY,IAAL,CAAU5G,cAJqB;AAAA;AAAA;AAAA;;AAAA;AAK/B,uBAAM,KAAK4G,IAAL,CAAU5G,cAAhB;;AAL+B;AAAA;AAM/B,uBAAMf,KAAK,CAAC0J,SAAN,CAAgB,KAAKrC,YAAL,CAAkBe,KAAlC,CAAN;;AAN+B;AAQ7B3G,gBAAAA,IAR6B,GAQtB,KAAKkI,WAAL,CAAiB/H,OAAjB,CARsB;;AAAA,sBAS/B,KAAK6F,IAAL,CAAUqC,UAAV,CAAqBrI,IAArB,KAA8B,CAAC,KAAKgG,IAAL,CAAUsC,aAAV,CAAwBtI,IAAxB,CATA;AAAA;AAAA;AAAA;;AAAA,kDAUxB,KAVwB;;AAAA;AAAA,qBAY/BA,IAAI,CAACV,cAZ0B;AAAA;AAAA;AAAA;;AAAA;AAa/B,uBAAM,KAAK4G,IAAL,CAAU5G,cAAhB;;AAb+B;AAAA;AAc/B,uBAAMf,KAAK,CAAC0J,SAAN,CAAgB,KAAKrC,YAAL,CAAkBe,KAAlC,CAAN;;AAd+B;AAAA,sBAgB/B3G,IAAI,KAAK,KAAKkG,IAAd,IAAsB,CAAClG,IAAI,CAACV,cAA5B,IAA8C,CAAC,KAAK0G,IAAL,CAAUuC,WAAV,CAAsBvI,IAAtB,CAhBhB;AAAA;AAAA;AAAA;;AAAA,kDAiBxB,KAjBwB;;AAAA;AAmB7BrC,gBAAAA,MAnB6B,GAmBpB,KAAKqI,IAAL,CAAUwC,MAAV,CAAiBxI,IAAI,KAAK,KAAKkG,IAAd,GAAqB,IAArB,GAA4BlG,IAA7C,EAAmD+H,SAAnD,CAnBoB;;AAAA,qBAoB/B/H,IAAI,CAACV,cApB0B;AAAA;AAAA;AAAA;;AAAA;AAqB/B,uBAAM,KAAK4G,IAAL,CAAU5G,cAAhB;;AArB+B;AAAA;AAsB/B,uBAAMf,KAAK,CAAC0J,SAAN,CAAgB,KAAKrC,YAAL,CAAkBe,KAAlC,CAAN;;AAtB+B;AAAA,kDAwB5BhJ,MAxB4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB,EAAhB;AA0BH;AA/IL;AAAA;AAAA,iCAgJiBwE,QAhJjB,EAgJ2BD,YAhJ3B,EAgJyC;AAAA;;AACjC,UAAMU,KAAK,GAAGT,QAAQ,CAAC/B,GAAT,CAAa,UAAA3C,CAAC;AAAA,eAAI,MAAI,CAACyK,WAAL,CAAiBzK,CAAjB,CAAJ;AAAA,OAAd,CAAd;AACA,WAAKuI,IAAL,CAAU6B,YAAV,CAAuBjF,KAAvB,EAA8BV,YAA9B;AACH;AAnJL;AAAA;AAAA,mCAoJmB;AACX,UAAMU,KAAK,GAAG,KAAKoD,IAAL,CAAUyC,YAAV,EAAd;AACA,aAAO7F,KAAK,CAACxC,GAAN,CAAU,UAAAsI,CAAC;AAAA,eAAIA,CAAC,CAACvI,OAAN;AAAA,OAAX,CAAP;AACH;AAvJL;AAAA;AAAA,6BAwJagC,QAxJb,EAwJuBD,YAxJvB,EAwJqC;AAAA;;AAC7B,UAAMU,KAAK,GAAGT,QAAQ,CAAC/B,GAAT,CAAa,UAAA3C,CAAC;AAAA,eAAI,MAAI,CAACyK,WAAL,CAAiBzK,CAAjB,CAAJ;AAAA,OAAd,CAAd;AACA,WAAKuI,IAAL,CAAU4B,QAAV,CAAmBhF,KAAnB,EAA0BV,YAA1B;AACH;AA3JL;AAAA;AAAA,+BA4Je;AACP,UAAMU,KAAK,GAAG,KAAKoD,IAAL,CAAU2C,QAAV,EAAd;AACA,aAAO/F,KAAK,CAACxC,GAAN,CAAU,UAAAsI,CAAC;AAAA,eAAIA,CAAC,CAACvI,OAAN;AAAA,OAAX,CAAP;AACH;AA/JL;AAAA;AAAA,2BAgKWA,OAhKX,EAgKoByI,WAhKpB,EAgKiC;AACzB,WAAK5C,IAAL,CAAU6C,MAAV,CAAiB,KAAKX,WAAL,CAAiB/H,OAAjB,CAAjB,EAA4CyI,WAA5C;AACH,KAlKL,CAmKI;;AAnKJ;AAAA;AAAA,gCAoKgBzI,OApKhB,EAoKyB;AACjB,UAAMH,IAAI,GAAG,KAAK4C,KAAL,CAAWkG,GAAX,CAAgB3I,OAAO,KAAK,KAAK+F,IAAL,CAAU/F,OAAtB,GAAgC,IAAhC,GAAuCA,OAAvD,CAAb;;AACA,UAAI,CAACH,IAAL,EAAW;AACP,cAAM,IAAI9B,SAAJ,CAAc,KAAKoH,IAAnB,sCAAsDnF,OAAtD,EAAN;AACH;;AACD,aAAOH,IAAP;AACH;AA1KL;AAAA;AAAA,yCA2KyBA,IA3KzB,EA2K+B+H,SA3K/B,EA2K0CP,gBA3K1C,EA2K4DjE,OA3K5D,EA2KqE;AAC7D,aAAO3G,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AACnC,uBAAM,KAAKmM,WAAL,CAAiB/I,IAAjB,EAAuB+H,SAAvB,EAAkCP,gBAAlC,CAAN;;AADmC;AAEnC,qBAAKwB,MAAL,CAAYhJ,IAAZ,EAAkBwH,gBAAlB,EAAoCjE,OAApC;;AAFmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB,EAAhB;AAIH;AAhLL;AAAA;AAAA,gCAiLgBvD,IAjLhB,EAiLsB+H,SAjLtB,EAiLiCP,gBAjLjC,EAiLmD;AAC3C,aAAO5K,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnC,qBAAK8I,sBAAL,CAA4BP,OAA5B,CAAoC,UAAC7F,cAAD,EAAiByJ,WAAjB,EAAiC;AACjE,sBAAI,CAACpL,MAAD,IAAWoC,UAAU,CAACgJ,WAAD,EAAc/I,IAAd,CAAzB,EAA8C;AAC1CrC,oBAAAA,MAAM,GAAG2B,cAAc,CAACzB,IAAf,CAAoB;AAAA,6BAAM,MAAI,CAACkL,WAAL,CAAiB/I,IAAjB,EAAuB+H,SAAvB,EAAkCP,gBAAlC,CAAN;AAAA,qBAApB,CAAT;AACH;AACJ,iBAJD;;AAFmC,qBAO/B7J,MAP+B;AAAA;AAAA;AAAA;;AAAA,kDAQxBA,MARwB;;AAAA;AAAA,kDAU5B,KAAKsL,gBAAL,CAAsBjJ,IAAtB,EAA4B+H,SAA5B,EAAuCP,gBAAvC,CAV4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB,EAAhB;AAYH;AA9LL;AAAA;AAAA,qCA+LqBxH,IA/LrB,EA+L2B+H,SA/L3B,EA+LsCP,gBA/LtC,EA+LwD;AAChD,aAAO5K,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnCoD,gBAAAA,IAAI,CAACV,cAAL,GAAsB,IAAIlC,OAAJ,CAAY,UAAA8L,CAAC;AAAA,yBAAItL,IAAI,GAAGsL,CAAX;AAAA,iBAAb,CAAtB;AACA,qBAAKxD,sBAAL,CAA4BW,GAA5B,CAAgCrG,IAAhC,EAAsCA,IAAI,CAACV,cAA3C;AACAU,gBAAAA,IAAI,CAACV,cAAL,YAA4B,YAAM;AAC9BU,kBAAAA,IAAI,CAACV,cAAL,GAAsBC,SAAtB;;AACA,kBAAA,MAAI,CAACmG,sBAAL,WAAmC1F,IAAnC;AACH,iBAHD;AAJmC;AAAA;AASL,uBAAM,KAAKmJ,aAAL,CAAmBnJ,IAAnB,EAAyB+H,SAAzB,EAAoCP,gBAApC,CAAN;;AATK;AASzB4B,gBAAAA,iBATyB;AAU/BpJ,gBAAAA,IAAI,CAACR,KAAL,GAAa,KAAb;AAV+B;AAW/B,uBAAMpC,OAAO,CAACiM,GAAR,CAAYD,iBAAiB,CAAChJ,GAAlB,CAAsB,UAAAgF,KAAK;AAAA,yBAAI,MAAI,CAAC6D,gBAAL,CAAsB7D,KAAtB,EAA6B2C,SAA7B,EAAwCP,gBAAxC,CAAJ;AAAA,iBAA3B,CAAZ,CAAN;;AAX+B;AAAA;AAc/B5J,gBAAAA,IAAI;AAd2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB,EAAhB;AAiBH;AAjNL;AAAA;AAAA,kCAkNkBoC,IAlNlB,EAkNwB+H,SAlNxB,EAkNmCP,gBAlNnC,EAkNqD;AAC7C,aAAO5K,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACnCoD,gBAAAA,IAAI,CAACmG,WAAL,GAAmB,CAAC,CAAC,KAAKV,UAAL,CAAgBU,WAAhB,CAA4BnG,IAAI,CAACG,OAAjC,CAArB;;AAEA,oBAAI,CAACH,IAAI,CAACmG,WAAV,EAAuB;AACnBmD,kBAAAA,eAAe,GAAGlM,OAAO,CAACD,OAAR,CAAgBuB,QAAQ,CAAC6K,KAAT,EAAhB,CAAlB;AACH,iBAFD,MAGK;AACKC,kBAAAA,WADL,GACmBhL,OAAO,CAAC,GAAD,CAD1B;AAEDgL,kBAAAA,WAAW,CAAC3L,IAAZ,CAAiB,YAAM;AACnBmC,oBAAAA,IAAI,CAACP,IAAL,GAAY,IAAZ;;AACA,oBAAA,MAAI,CAACoG,yBAAL,CAA+B4D,IAA/B,CAAoCzJ,IAApC;AACH,mBAHD,EAGG,UAAA0J,CAAC;AAAA,2BAAI,IAAJ;AAAA,mBAHJ;AAIAJ,kBAAAA,eAAe,GAAG,KAAKK,aAAL,CAAmB3J,IAAnB,aACL;AAAA,2BAAMwJ,WAAW,CAACjC,MAAZ,EAAN;AAAA,mBADK,CAAlB;AAEH;;AAdkC;AAAA;AAgBd,uBAAM+B,eAAN;;AAhBc;AAgBzBjK,gBAAAA,QAhByB;AAAA,kDAiBxB,KAAKuK,WAAL,CAAiB5J,IAAjB,EAAuBX,QAAvB,EAAiC0I,SAAjC,EAA4CP,gBAA5C,CAjBwB;;AAAA;AAAA;AAAA;;AAoB/B,oBAAIxH,IAAI,KAAK,KAAKkG,IAAd,IAAsB,KAAKF,IAAL,CAAUqC,UAAV,CAAqBrI,IAArB,CAA1B,EAAsD;AAClD,uBAAKgG,IAAL,CAAUoC,QAAV,CAAmBpI,IAAnB;AACH;;AAtB8B,qBAuB3BpB,sBAAsB,cAvBK;AAAA;AAAA;AAAA;;AAAA,kDAwBpB,EAxBoB;;AAAA;AAAA;;AAAA;AAAA;;AA6B/B,oBAAIoB,IAAI,CAACP,IAAT,EAAe;AACXO,kBAAAA,IAAI,CAACP,IAAL,GAAY,KAAZ;;AACA,uBAAKoG,yBAAL,CAA+B4D,IAA/B,CAAoCzJ,IAApC;AACH;;AAhC8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB,EAAhB;AAmCH;AAtPL;AAAA;AAAA,kCAuPkBA,IAvPlB,EAuPwB;AAAA;;AAChB,UAAIrC,MAAM,GAAG,KAAKgI,eAAL,CAAqBmD,GAArB,CAAyB9I,IAAzB,CAAb;;AACA,UAAIrC,MAAJ,EAAY;AACR,eAAOA,MAAP;AACH;;AACDA,MAAAA,MAAM,GAAGc,uBAAuB,CAAC;AAAA,eAAM7B,SAAS,CAAC,MAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAClD,yBAAM,KAAK6I,UAAL,CAAgBoE,WAAhB,CAA4B7J,IAAI,CAACG,OAAjC,CAAN;;AADkD;AAC7Dd,kBAAAA,QAD6D;AAAA,oDAE5D,KAAKyK,eAAL,CAAqBzK,QAArB,CAF4D;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvB,EAAf;AAAA,OAAD,CAAhC;AAIA,WAAKsG,eAAL,CAAqBU,GAArB,CAAyBrG,IAAzB,EAA+BrC,MAA/B;AACA,aAAOA,MAAM,WAAN,CAAe,YAAM;AAAE,QAAA,MAAI,CAACgI,eAAL,WAA4B3F,IAA5B;AAAoC,OAA3D,CAAP;AACH;AAlQL;AAAA;AAAA,oDAmQ8C;AAAA,UAAdA,IAAc,QAAdA,IAAc;AAAA,UAAR+J,IAAQ,QAARA,IAAQ;;AACtC,UAAI/J,IAAI,CAACG,OAAL,KAAiB,IAArB,EAA2B;AACvB;AACH;;AACD,UAAI,CAACH,IAAI,CAACS,SAAN,IAAmBT,IAAI,CAACG,OAAL,CAAaX,KAApC,EAA2C;AACvC,YAAIuK,IAAJ,EAAU;AACN,eAAK3B,QAAL,CAAcpI,IAAI,CAACG,OAAL,CAAaA,OAA3B;AACH,SAFD,MAGK;AACD,eAAKgI,oBAAL,CAA0BnI,IAAI,CAACG,OAA/B,EAAwC,KAAxC,WACWtB,iBADX;AAEH;AACJ;AACJ;AAhRL;AAAA;AAAA,gCAiRgBmB,IAjRhB,EAiRsBgK,wBAjRtB,EAiRgDjC,SAjRhD,EAiR2DP,gBAjR3D,EAiR6E;AAAA;AAAA;;AACrE,UAAMyC,gBAAgB,sBAAOD,wBAAP,CAAtB,CADqE,CAErE;;;AACA,UAAIhK,IAAI,CAACX,QAAL,CAAc6K,MAAd,KAAyB,CAAzB,IAA8BD,gBAAgB,CAACC,MAAjB,KAA4B,CAA9D,EAAiE;AAC7D,eAAO,EAAP;AACH;;AACD,UAAMC,aAAa,GAAG,IAAIlJ,GAAJ,EAAtB;AACA,UAAMmJ,qBAAqB,GAAG,IAAInJ,GAAJ,EAA9B;;AAPqE,iDAQjDjB,IAAI,CAACX,QAR4C;AAAA;;AAAA;AAQrE,4DAAmC;AAAA,cAAxB+F,KAAwB;AAC/B+E,UAAAA,aAAa,CAAC9D,GAAd,CAAkBjB,KAAK,CAACjF,OAAxB,EAAiCiF,KAAjC;;AACA,cAAI,KAAK3B,gBAAT,EAA2B;AACvB,gBAAMhD,SAAS,GAAG,KAAKuF,IAAL,CAAUuC,WAAV,CAAsBnD,KAAtB,CAAlB;AACAgF,YAAAA,qBAAqB,CAAC/D,GAAtB,CAA0BjB,KAAK,CAACgB,EAAhC,EAAoC;AAAEpG,cAAAA,IAAI,EAAEoF,KAAR;AAAe3E,cAAAA,SAAS,EAATA;AAAf,aAApC;AACH;AACJ;AAdoE;AAAA;AAAA;AAAA;AAAA;;AAerE,UAAM2I,iBAAiB,GAAG,EAA1B;AACA,UAAM/J,QAAQ,GAAG4K,gBAAgB,CAAC7J,GAAjB,CAAqB,UAAAD,OAAO,EAAI;AAC7C,YAAMgG,WAAW,GAAG,CAAC,CAAC,MAAI,CAACV,UAAL,CAAgBU,WAAhB,CAA4BhG,OAA5B,CAAtB;;AACA,YAAI,CAAC,MAAI,CAACsD,gBAAV,EAA4B;AACxB,cAAM4G,iBAAiB,GAAGpL,uBAAuB,CAAC;AAAEkB,YAAAA,OAAO,EAAPA,OAAF;AAAWL,YAAAA,MAAM,EAAEE,IAAnB;AAAyBmG,YAAAA,WAAW,EAAXA;AAAzB,WAAD,CAAjD;;AACA,cAAIA,WAAW,IAAI,MAAI,CAAC3C,iBAApB,IAAyC,CAAC,MAAI,CAACA,iBAAL,CAAuBrD,OAAvB,CAA9C,EAA+E;AAC3EkK,YAAAA,iBAAiB,CAAC3K,kBAAlB,GAAuC,KAAvC;AACA0J,YAAAA,iBAAiB,CAACkB,IAAlB,CAAuBD,iBAAvB;AACH;;AACD,iBAAOA,iBAAP;AACH;;AACD,YAAMjE,EAAE,GAAG,MAAI,CAAC3C,gBAAL,CAAsBC,KAAtB,CAA4BvD,OAA5B,EAAqCoK,QAArC,EAAX;;AACA,YAAM5M,MAAM,GAAGyM,qBAAqB,CAACtB,GAAtB,CAA0B1C,EAA1B,CAAf;;AACA,YAAIzI,MAAJ,EAAY;AACR,cAAM0M,kBAAiB,GAAG1M,MAAM,CAACqC,IAAjC;AACAmK,UAAAA,aAAa,UAAb,CAAqBE,kBAAiB,CAAClK,OAAvC;;AACA,UAAA,MAAI,CAACyC,KAAL,WAAkByH,kBAAiB,CAAClK,OAApC;;AACA,UAAA,MAAI,CAACyC,KAAL,CAAWyD,GAAX,CAAelG,OAAf,EAAwBkK,kBAAxB;;AACAA,UAAAA,kBAAiB,CAAClK,OAAlB,GAA4BA,OAA5B;AACAkK,UAAAA,kBAAiB,CAAClE,WAAlB,GAAgCA,WAAhC;;AACA,cAAI4B,SAAJ,EAAe;AACX,gBAAIpK,MAAM,CAAC8C,SAAX,EAAsB;AAClB4J,cAAAA,kBAAiB,CAAChL,QAAlB,CAA2B8F,OAA3B,CAAmC,UAAAnF,IAAI;AAAA,uBAAIiF,GAAG,CAACjF,IAAD,EAAO,UAAAA,IAAI;AAAA,yBAAI,MAAI,CAAC4C,KAAL,WAAkB5C,IAAI,CAACG,OAAvB,CAAJ;AAAA,iBAAX,CAAP;AAAA,eAAvC;;AACAkK,cAAAA,kBAAiB,CAAChL,QAAlB,CAA2BmL,MAA3B,CAAkC,CAAlC,EAAqCH,kBAAiB,CAAChL,QAAlB,CAA2B6K,MAAhE;;AACAG,cAAAA,kBAAiB,CAAC7K,KAAlB,GAA0B,IAA1B;AACH,aAJD,MAKK;AACD4J,cAAAA,iBAAiB,CAACkB,IAAlB,CAAuBD,kBAAvB;AACH;AACJ,WATD,MAUK,IAAIlE,WAAW,IAAI,MAAI,CAAC3C,iBAApB,IAAyC,CAAC,MAAI,CAACA,iBAAL,CAAuBrD,OAAvB,CAA9C,EAA+E;AAChFkK,YAAAA,kBAAiB,CAAC3K,kBAAlB,GAAuC,KAAvC;AACA0J,YAAAA,iBAAiB,CAACkB,IAAlB,CAAuBD,kBAAvB;AACH;;AACD,iBAAOA,kBAAP;AACH;;AACD,YAAMI,sBAAsB,GAAGxL,uBAAuB,CAAC;AAAEkB,UAAAA,OAAO,EAAPA,OAAF;AAAWL,UAAAA,MAAM,EAAEE,IAAnB;AAAyBoG,UAAAA,EAAE,EAAFA,EAAzB;AAA6BD,UAAAA,WAAW,EAAXA;AAA7B,SAAD,CAAtD;;AACA,YAAIqB,gBAAgB,IAAIA,gBAAgB,CAACH,SAAjB,CAA2BI,KAA/C,IAAwDD,gBAAgB,CAACH,SAAjB,CAA2BI,KAA3B,CAAiCiD,OAAjC,CAAyCtE,EAAzC,IAA+C,CAAC,CAA5G,EAA+G;AAC3GoB,UAAAA,gBAAgB,CAACC,KAAjB,CAAuB6C,IAAvB,CAA4BG,sBAA5B;AACH;;AACD,YAAIjD,gBAAgB,IAAIA,gBAAgB,CAACH,SAAjB,CAA2BK,SAA/C,IAA4DF,gBAAgB,CAACH,SAAjB,CAA2BK,SAA3B,CAAqCgD,OAArC,CAA6CtE,EAA7C,IAAmD,CAAC,CAApH,EAAuH;AACnHoB,UAAAA,gBAAgB,CAACE,SAAjB,CAA2B4C,IAA3B,CAAgCG,sBAAhC;AACH;;AACD,YAAIjD,gBAAgB,IAAIA,gBAAgB,CAACH,SAAjB,CAA2BsD,QAA/C,IAA2DnD,gBAAgB,CAACH,SAAjB,CAA2BsD,QAA3B,CAAoCD,OAApC,CAA4CtE,EAA5C,IAAkD,CAAC,CAAlH,EAAqH;AACjHgD,UAAAA,iBAAiB,CAACkB,IAAlB,CAAuBG,sBAAvB;AACH,SAFD,MAGK,IAAItE,WAAW,IAAI,MAAI,CAAC3C,iBAApB,IAAyC,CAAC,MAAI,CAACA,iBAAL,CAAuBrD,OAAvB,CAA9C,EAA+E;AAChFsK,UAAAA,sBAAsB,CAAC/K,kBAAvB,GAA4C,KAA5C;AACA0J,UAAAA,iBAAiB,CAACkB,IAAlB,CAAuBG,sBAAvB;AACH;;AACD,eAAOA,sBAAP;AACH,OAlDgB,CAAjB;;AAhBqE,kDAmElDN,aAAa,CAACS,MAAd,EAnEkD;AAAA;;AAAA;AAmErE,+DAA2C;AAAA,cAAhC5K,KAAgC;AACvCiF,UAAAA,GAAG,CAACjF,KAAD,EAAO,UAAAA,IAAI;AAAA,mBAAI,MAAI,CAAC4C,KAAL,WAAkB5C,IAAI,CAACG,OAAvB,CAAJ;AAAA,WAAX,CAAH;AACH;AArEoE;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAsEjDd,QAtEiD;AAAA;;AAAA;AAsErE,+DAA8B;AAAA,cAAnB+F,MAAmB;AAC1B,eAAKxC,KAAL,CAAWyD,GAAX,CAAejB,MAAK,CAACjF,OAArB,EAA8BiF,MAA9B;AACH;AAxEoE;AAAA;AAAA;AAAA;AAAA;;AAyErE,wBAAApF,IAAI,CAACX,QAAL,EAAcmL,MAAd,wBAAqB,CAArB,EAAwBxK,IAAI,CAACX,QAAL,CAAc6K,MAAtC,4BAAiD7K,QAAjD,IAzEqE,CA0ErE;;;AACA,UAAIW,IAAI,KAAK,KAAKkG,IAAd,IAAsB,KAAKH,wBAA3B,IAAuD1G,QAAQ,CAAC6K,MAAT,KAAoB,CAA3E,IAAgFd,iBAAiB,CAACc,MAAlB,KAA6B,CAAjH,EAAoH;AAChH7K,QAAAA,QAAQ,CAAC,CAAD,CAAR,CAAYK,kBAAZ,GAAiC,KAAjC;AACA0J,QAAAA,iBAAiB,CAACkB,IAAlB,CAAuBjL,QAAQ,CAAC,CAAD,CAA/B;AACH;;AACD,aAAO+J,iBAAP;AACH;AAjWL;AAAA;AAAA,2BAkWWpJ,IAlWX,EAkWiBwH,gBAlWjB,EAkWmCjE,OAlWnC,EAkW4C;AAAA;;AACpC,UAAMlE,QAAQ,GAAGW,IAAI,CAACX,QAAL,CAAce,GAAd,CAAkB,UAAAJ,IAAI;AAAA,eAAI,OAAI,CAAC6K,aAAL,CAAmB7K,IAAnB,EAAyBwH,gBAAzB,CAAJ;AAAA,OAAtB,CAAjB;AACA,UAAMZ,iBAAiB,GAAGrD,OAAO,IAAIpE,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBmE,OAAlB,CAAd,EAA0C;AAAEuH,QAAAA,oBAAoB,EAAEvH,OAAO,CAACuH,oBAAR,IAAgC;AAC/HpH,UAAAA,KAD+H,iBACzH1D,IADyH,EACnH;AACR,mBAAOuD,OAAO,CAACuH,oBAAR,CAA6BpH,KAA7B,CAAmC1D,IAAI,CAACG,OAAxC,CAAP;AACH;AAH8H;AAAxD,OAA1C,CAArC;AAKA,WAAK6F,IAAL,CAAU4D,WAAV,CAAsB5J,IAAI,KAAK,KAAKkG,IAAd,GAAqB,IAArB,GAA4BlG,IAAlD,EAAwDX,QAAxD,EAAkEuH,iBAAlE;;AACA,UAAI5G,IAAI,KAAK,KAAKkG,IAAlB,EAAwB;AACpB,aAAKF,IAAL,CAAU+E,cAAV,CAAyB/K,IAAzB,EAA+BA,IAAI,CAACmG,WAApC;AACH;;AACD,WAAKP,YAAL,CAAkB6D,IAAlB;AACH;AA9WL;AAAA;AAAA,kCA+WkBzJ,IA/WlB,EA+WwBwH,gBA/WxB,EA+W0C;AAAA;;AAClC,UAAIxH,IAAI,CAACR,KAAT,EAAgB;AACZ,eAAO;AACHW,UAAAA,OAAO,EAAEH,IADN;AAEHQ,UAAAA,WAAW,EAAER,IAAI,CAACmG,WAFf;AAGH1F,UAAAA,SAAS,EAAE;AAHR,SAAP;AAKH;;AACD,UAAIA,SAAJ;;AACA,UAAI+G,gBAAgB,IAAIA,gBAAgB,CAACH,SAAjB,CAA2BsD,QAA/C,IAA2D3K,IAAI,CAACoG,EAAhE,IAAsEoB,gBAAgB,CAACH,SAAjB,CAA2BsD,QAA3B,CAAoCD,OAApC,CAA4C1K,IAAI,CAACoG,EAAjD,IAAuD,CAAC,CAAlI,EAAqI;AACjI3F,QAAAA,SAAS,GAAG,KAAZ;AACH,OAFD,MAGK;AACDA,QAAAA,SAAS,GAAGT,IAAI,CAACN,kBAAjB;AACH;;AACDM,MAAAA,IAAI,CAACN,kBAAL,GAA0BH,SAA1B;AACA,aAAO;AACHY,QAAAA,OAAO,EAAEH,IADN;AAEHX,QAAAA,QAAQ,EAAEW,IAAI,CAACmG,WAAL,GAAmBzH,QAAQ,CAAC0B,GAAT,CAAaJ,IAAI,CAACX,QAAlB,EAA4B,UAAA+F,KAAK;AAAA,iBAAI,OAAI,CAACyF,aAAL,CAAmBzF,KAAnB,EAA0BoC,gBAA1B,CAAJ;AAAA,SAAjC,CAAnB,GAAuG,EAF9G;AAGHhH,QAAAA,WAAW,EAAER,IAAI,CAACmG,WAHf;AAIH1F,QAAAA,SAAS,EAATA;AAJG,OAAP;AAMH;AArYL;AAAA;AAAA,oCAsYoBpB,QAtYpB,EAsY8B;AACtB,UAAI,KAAKyF,MAAT,EAAiB;AACbzF,QAAAA,QAAQ,GAAG,mBAAIA,QAAJ,EAAc2L,IAAd,CAAmB,KAAKlG,MAAL,CAAYmG,OAAZ,CAAoBC,IAApB,CAAyB,KAAKpG,MAA9B,CAAnB,CAAX;AACH;;AACD,aAAOzF,QAAP;AACH;AA3YL;AAAA;AAAA,8BA4Yc;AACN,WAAKyG,WAAL,CAAiB1H,OAAjB;AACH;AA9YL;AAAA;AAAA,wBA2B2B;AAAE,aAAOG,KAAK,CAAC6B,GAAN,CAAU,KAAK4F,IAAL,CAAUmF,gBAApB,EAAsClJ,WAAtC,CAAP;AAA4D;AA3BzF;AAAA;AAAA,wBA4B+B;AAAE,aAAO1D,KAAK,CAAC6B,GAAN,CAAU,KAAK4F,IAAL,CAAUoF,oBAApB,EAA0CnJ,WAA1C,CAAP;AAAgE;AA5BjG;AAAA;AAAA,wBA6B0B;AAAE,aAAO1D,KAAK,CAAC6B,GAAN,CAAU,KAAK4F,IAAL,CAAUqF,eAApB,EAAqCjJ,gBAArC,CAAP;AAAgE;AA7B5F;AAAA;AAAA,wBA8BoB;AAAE,aAAO7D,KAAK,CAAC6B,GAAN,CAAU,KAAK4F,IAAL,CAAUsF,SAApB,EAA+BlJ,gBAA/B,CAAP;AAA0D;AA9BhF;AAAA;AAAA,wBA+BqB;AAAE,aAAO,KAAK4D,IAAL,CAAUuF,UAAjB;AAA8B;AA/BrD;AAAA;AAAA,wBAgCuB;AAAE,aAAO,KAAKvF,IAAL,CAAUwF,YAAjB;AAAgC;AAhCzD;AAAA;AAAA,wBA8CoB;AACZ,aAAO,KAAKxF,IAAL,CAAU8B,SAAjB;AACH,KAhDL;AAAA,sBAiDkBA,SAjDlB,EAiD6B;AACrB,WAAK9B,IAAL,CAAU8B,SAAV,GAAsBA,SAAtB;AACH;AAnDL;;AAAA;AAAA;;IAgZM2D,oC;AACF,gDAAYzL,IAAZ,EAAkB;AAAA;;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;;;wBACa;AACV,aAAO;AACHmC,QAAAA,QAAQ,EAAE,KAAKnC,IAAL,CAAUG,OAAV,CAAkBgC,QAAlB,CAA2B/B,GAA3B,CAA+B,UAAA3C,CAAC;AAAA,iBAAIA,CAAC,CAAC0C,OAAN;AAAA,SAAhC,CADP;AAEHuL,QAAAA,cAAc,EAAE,KAAK1L,IAAL,CAAUG,OAAV,CAAkBuL;AAF/B,OAAP;AAIH;;;wBACc;AAAE,aAAO,KAAK1L,IAAL,CAAUX,QAAV,CAAmBe,GAAnB,CAAuB,UAAAJ,IAAI;AAAA,eAAI,IAAIyL,oCAAJ,CAAyCzL,IAAzC,CAAJ;AAAA,OAA3B,CAAP;AAAwF;;;wBAC7F;AAAE,aAAO,KAAKA,IAAL,CAAUK,KAAjB;AAAyB;;;wBACZ;AAAE,aAAO,KAAKL,IAAL,CAAUM,oBAAjB;AAAwC;;;wBAC7C;AAAE,aAAO,KAAKN,IAAL,CAAUO,iBAAjB;AAAqC;;;wBAC7C;AAAE,aAAO,KAAKP,IAAL,CAAUQ,WAAjB;AAA+B;;;wBACnC;AAAE,aAAO,KAAKR,IAAL,CAAUS,SAAjB;AAA6B;;;wBACjC;AAAE,aAAO,KAAKT,IAAL,CAAUU,OAAjB;AAA2B;;;wBAC1B;AAAE,aAAO,KAAKV,IAAL,CAAUW,UAAjB;AAA8B;;;;;;IAE/CgL,iC;AACF,6CAAY9K,QAAZ,EAAsBC,UAAtB,EAAkC8K,8BAAlC,EAAkE7K,uBAAlE,EAA2F;AAAA;;AACvF,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAK8K,8BAAL,GAAsCA,8BAAtC;AACA,SAAK7K,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AACA,SAAK6E,WAAL,GAAmB,EAAnB;AACA,SAAK5E,UAAL,GAAkBL,QAAQ,CAACK,UAA3B;AACH;;;;mCACcC,S,EAAW;AACtB,UAAMC,YAAY,GAAG,KAAKP,QAAL,CAAcQ,cAAd,CAA6BF,SAA7B,CAArB;AACA,aAAO;AAAEC,QAAAA,YAAY,EAAZA;AAAF,OAAP;AACH;;;kCACapB,I,EAAMsB,K,EAAOF,Y,EAAcG,M,EAAQ;AAC7C,WAAKV,QAAL,CAAcW,aAAd,CAA4B,KAAKV,UAAL,CAAgBV,GAAhB,CAAoBJ,IAApB,CAA5B,EAAuDsB,KAAvD,EAA8DF,YAAY,CAACA,YAA3E,EAAyFG,MAAzF;AACH;;;6CACwBvB,I,EAAMsB,K,EAAOF,Y,EAAcG,M,EAAQ;AACxD,WAAKV,QAAL,CAAcgL,wBAAd,CAAuC,KAAKD,8BAAL,GAAsCxL,GAAtC,CAA0CJ,IAA1C,CAAvC,EAAwFsB,KAAxF,EAA+FF,YAAY,CAACA,YAA5G,EAA0HG,MAA1H;AACH;;;kCACapB,O,EAASsB,c,EAAgB;AACnC,UAAItB,OAAO,CAACV,IAAZ,EAAkB;AAAA;;AACd,kCAAAgC,cAAc,CAACC,SAAf,EAAyBC,GAAzB,kDAAgC3C,mBAAmB,CAAC4C,eAApD;;AACA,eAAO,IAAP;AACH,OAHD,MAIK;AAAA;;AACD,kCAAAH,cAAc,CAACC,SAAf,EAAyBG,MAAzB,kDAAmC7C,mBAAmB,CAAC4C,eAAvD;;AACA,eAAO,KAAP;AACH;AACJ;;;mCACc5B,I,EAAMsB,K,EAAOF,Y,EAAcG,M,EAAQ;AAC9C,UAAI,KAAKV,QAAL,CAAciB,cAAlB,EAAkC;AAC9B,aAAKjB,QAAL,CAAciB,cAAd,CAA6B,KAAKhB,UAAL,CAAgBV,GAAhB,CAAoBJ,IAApB,CAA7B,EAAwDsB,KAAxD,EAA+DF,YAAY,CAACA,YAA5E,EAA0FG,MAA1F;AACH;AACJ;;;8CACyBvB,I,EAAMsB,K,EAAOF,Y,EAAcG,M,EAAQ;AACzD,UAAI,KAAKV,QAAL,CAAciL,yBAAlB,EAA6C;AACzC,aAAKjL,QAAL,CAAciL,yBAAd,CAAwC,KAAKF,8BAAL,GAAsCxL,GAAtC,CAA0CJ,IAA1C,CAAxC,EAAyFsB,KAAzF,EAAgGF,YAAY,CAACA,YAA7G,EAA2HG,MAA3H;AACH;AACJ;;;oCACeH,Y,EAAc;AAC1B,WAAKP,QAAL,CAAckB,eAAd,CAA8BX,YAAY,CAACA,YAA3C;AACH;;;8BACS;AACN,WAAKJ,aAAL,CAAmBgB,KAAnB;AACA,WAAK8D,WAAL,GAAmB1H,QAAO,CAAC,KAAK0H,WAAN,CAA1B;AACH;;;;;;AAEL,SAASiG,+BAAT,CAAyCxI,OAAzC,EAAkD;AAC9C,MAAMqD,iBAAiB,GAAGrD,OAAO,IAAID,mBAAmB,CAACC,OAAD,CAAxD;AACA,SAAOqD,iBAAiB,IAAIzH,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBwH,iBAAlB,CAAd,EAAoD;AAAEhC,IAAAA,+BAA+B,EAAEgC,iBAAiB,CAAChC,+BAAlB,IAAqDzF,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBwH,iBAAiB,CAAChC,+BAApC,CAAd,EAAoF;AAAEoH,MAAAA,wCAAF,oDAA2CC,GAA3C,EAAgD;AAChS,eAAO1I,OAAO,CAACqB,+BAAR,CAAwCoH,wCAAxC,CAAiFC,GAAG,CAAC7L,GAAJ,CAAQ,UAAA3C,CAAC;AAAA,iBAAIA,CAAC,CAAC0C,OAAN;AAAA,SAAT,CAAjF,CAAP;AACH;AAFmP,KAApF;AAAxF,GAApD,CAA5B;AAGH;;AACD,WAAa+L,yBAAb;AAAA;;AAAA;;AACI,qCAAY5G,IAAZ,EAAkBnE,SAAlB,EAA6BgL,eAA7B,EAA8CC,mBAA9C,EAAmE5G,SAAnE,EAA8EC,UAA9E,EAAwG;AAAA;;AAAA,QAAdlC,OAAc,uEAAJ,EAAI;;AAAA;;AACpG,iCAAM+B,IAAN,EAAYnE,SAAZ,EAAuBgL,eAAvB,EAAwC3G,SAAxC,EAAmDC,UAAnD,EAA+DlC,OAA/D;AACA,YAAK6I,mBAAL,GAA2BA,mBAA3B;AACA,YAAKC,sBAAL,GAA8B,IAAIlO,UAAJ,CAAe,UAAA6B,IAAI;AAAA,aAAI,IAAIyL,oCAAJ,CAAyCzL,IAAzC,CAAJ;AAAA,KAAnB,CAA9B;AACA,YAAK0E,MAAL,GAAcnB,OAAO,CAACmB,MAAtB;AAJoG;AAKvG;;AANL;AAAA;AAAA,+BAOeY,IAPf,EAOqBnE,SAPrB,EAOgCoE,QAPhC,EAO0CC,SAP1C,EAOqDjC,OAPrD,EAO8D;AAAA;;AACtD,UAAMiD,kBAAkB,GAAG,IAAIzI,oBAAJ,CAAyBwH,QAAzB,CAA3B;AACA,UAAMkB,mBAAmB,GAAGjB,SAAS,CAACpF,GAAV,CAAc,UAAAsG,CAAC;AAAA,eAAI,IAAIiF,iCAAJ,CAAsCjF,CAAtC,EAAyC,OAAI,CAAC5F,UAA9C,EAA0D;AAAA,iBAAM,OAAI,CAACuL,sBAAX;AAAA,SAA1D,EAA6F,OAAI,CAACxG,yBAAL,CAA+Bc,KAA5H,CAAJ;AAAA,OAAf,CAA5B;AACA,UAAMC,iBAAiB,GAAGmF,+BAA+B,CAACxI,OAAD,CAA/B,IAA4C,EAAtE;AACA,aAAO,IAAItF,sBAAJ,CAA2BqH,IAA3B,EAAiCnE,SAAjC,EAA4CqF,kBAA5C,EAAgEC,mBAAhE,EAAqFG,iBAArF,CAAP;AACH;AAZL;AAAA;AAAA,kCAakB5G,IAblB,EAawBwH,gBAbxB,EAa0C;AAClC,aAAOrI,MAAM,CAACC,MAAP,CAAc;AAAEsM,QAAAA,cAAc,EAAE,KAAKU,mBAAL,CAAyBE,gBAAzB,CAA0CtM,IAAI,CAACG,OAA/C;AAAlB,OAAd,+FAA+GH,IAA/G,EAAqHwH,gBAArH,EAAP;AACH;AAfL;AAAA;AAAA,oCAgBgC;AAAA,UAAdjE,OAAc,uEAAJ,EAAI;AACxB,WAAKyC,IAAL,CAAUa,aAAV,CAAwBtD,OAAxB;AACH;AAlBL;AAAA;AAAA,2BAmBWvD,IAnBX,EAmBiBwH,gBAnBjB,EAmBmC;AAAA;;AAC3B,UAAI,CAAC,KAAK/D,gBAAV,EAA4B;AACxB,qGAAoBzD,IAApB,EAA0BwH,gBAA1B;AACH,OAH0B,CAI3B;AACA;AACA;;;AACA,UAAM9D,KAAK,GAAG,SAARA,KAAQ,CAACvD,OAAD;AAAA,eAAa,OAAI,CAACsD,gBAAL,CAAsBC,KAAtB,CAA4BvD,OAA5B,EAAqCoK,QAArC,EAAb;AAAA,OAAd;;AACA,UAAMgC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC3J,KAAD,EAAW;AAClC,YAAMjF,MAAM,GAAG,IAAI6O,GAAJ,EAAf;;AADkC,oDAEf5J,KAFe;AAAA;;AAAA;AAElC,iEAA0B;AAAA,gBAAf5C,MAAe;;AACtB,gBAAMyM,cAAc,GAAG,OAAI,CAACzG,IAAL,CAAU0G,qBAAV,CAAgC1M,MAAI,KAAK,OAAI,CAACkG,IAAd,GAAqB,IAArB,GAA4BlG,MAA5D,CAAvB;;AACA,gBAAI,CAACyM,cAAc,CAACtM,OAApB,EAA6B;AACzB;AACH;;AAJqB,wDAKHsM,cAAc,CAACtM,OAAf,CAAuBgC,QALpB;AAAA;;AAAA;AAKtB,qEAAoD;AAAA,oBAAzCnC,MAAyC;AAChDrC,gBAAAA,MAAM,CAACgE,GAAP,CAAW+B,KAAK,CAAC1D,MAAI,CAACG,OAAN,CAAhB;AACH;AAPqB;AAAA;AAAA;AAAA;AAAA;AAQzB;AAViC;AAAA;AAAA;AAAA;AAAA;;AAWlC,eAAOxC,MAAP;AACH,OAZD;;AAaA,UAAMgP,YAAY,GAAGJ,kBAAkB,CAAC,KAAKvG,IAAL,CAAUyC,YAAV,EAAD,CAAvC;AACA,UAAMmE,QAAQ,GAAGL,kBAAkB,CAAC,KAAKvG,IAAL,CAAU2C,QAAV,EAAD,CAAnC;;AACA,4FAAa3I,IAAb,EAAmBwH,gBAAnB;;AACA,UAAME,SAAS,GAAG,KAAKe,YAAL,EAAlB;AACA,UAAIoE,kBAAkB,GAAG,KAAzB;AACA,UAAMpF,KAAK,GAAG,KAAKkB,QAAL,EAAd;AACA,UAAImE,cAAc,GAAG,KAArB;;AACA,UAAMC,KAAK,GAAG,SAARA,KAAQ,CAAC/M,IAAD,EAAU;AACpB,YAAMyM,cAAc,GAAGzM,IAAI,CAACG,OAA5B;;AACA,YAAIsM,cAAJ,EAAoB;AAChB,eAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,cAAc,CAACtK,QAAf,CAAwB+H,MAA5C,EAAoD8C,CAAC,EAArD,EAAyD;AACrD,gBAAM5G,EAAE,GAAG1C,KAAK,CAAC+I,cAAc,CAACtK,QAAf,CAAwB6K,CAAxB,EAA2B7M,OAA5B,CAAhB;AACA,gBAAMA,OAAO,GAAGsM,cAAc,CAACtK,QAAf,CAAwBsK,cAAc,CAACtK,QAAf,CAAwB+H,MAAxB,GAAiC,CAAzD,EAA4D/J,OAA5E,CAFqD,CAGrD;;AACA,gBAAIwM,YAAY,CAACM,GAAb,CAAiB7G,EAAjB,KAAwBsB,SAAS,CAACgD,OAAV,CAAkBvK,OAAlB,MAA+B,CAAC,CAA5D,EAA+D;AAC3DuH,cAAAA,SAAS,CAAC4C,IAAV,CAAenK,OAAf;AACA0M,cAAAA,kBAAkB,GAAG,IAArB;AACH;;AACD,gBAAID,QAAQ,CAACK,GAAT,CAAa7G,EAAb,KAAoBqB,KAAK,CAACiD,OAAN,CAAcvK,OAAd,MAA2B,CAAC,CAApD,EAAuD;AACnDsH,cAAAA,KAAK,CAAC6C,IAAN,CAAWnK,OAAX;AACA2M,cAAAA,cAAc,GAAG,IAAjB;AACH;AACJ;AACJ;;AACD9M,QAAAA,IAAI,CAACX,QAAL,CAAc8F,OAAd,CAAsB4H,KAAtB;AACH,OAlBD;;AAmBAA,MAAAA,KAAK,CAAC,KAAK/G,IAAL,CAAU0G,qBAAV,CAAgC1M,IAAI,KAAK,KAAKkG,IAAd,GAAqB,IAArB,GAA4BlG,IAA5D,CAAD,CAAL;;AACA,UAAI6M,kBAAJ,EAAwB;AACpB,aAAKhF,YAAL,CAAkBH,SAAlB;AACH;;AACD,UAAIoF,cAAJ,EAAoB;AAChB,aAAKlF,QAAL,CAAcH,KAAd;AACH;AACJ,KAzEL,CA0EI;AACA;AACA;;AA5EJ;AAAA;AAAA,oCA6EoBpI,QA7EpB,EA6E8B;AAAA;;AACtB,UAAI,KAAKqF,MAAT,EAAiB;AACbrF,QAAAA,QAAQ,GAAGX,QAAQ,CAACgG,MAAT,CAAgBrF,QAAhB,EAA0B,UAAA5B,CAAC,EAAI;AACtC,cAAME,MAAM,GAAG,OAAI,CAAC+G,MAAL,CAAYA,MAAZ,CAAmBjH,CAAnB,EAAsB;AAAE;AAAxB,WAAf;;AACA,cAAMyP,UAAU,GAAGC,aAAa,CAACxP,MAAD,CAAhC;;AACA,cAAIuP,UAAU,KAAK;AAAE;AAArB,YAAoC;AAChC,oBAAM,IAAIE,KAAJ,CAAU,wEAAV,CAAN;AACH;;AACD,iBAAOF,UAAU,KAAK;AAAE;AAAxB;AACH,SAPU,CAAX;AAQH;;AACD,4GAA6B7N,QAA7B;AACH;AAzFL;;AAAA;AAAA,EAA+CgG,aAA/C;;AA2FA,SAAS8H,aAAT,CAAuBE,YAAvB,EAAqC;AACjC,MAAI,OAAOA,YAAP,KAAwB,SAA5B,EAAuC;AACnC,WAAOA,YAAY,GAAG;AAAE;AAAL,MAAqB;AAAE;AAA1C;AACH,GAFD,MAGK,IAAIvO,cAAc,CAACuO,YAAD,CAAlB,EAAkC;AACnC,WAAOtO,eAAe,CAACsO,YAAY,CAACH,UAAd,CAAtB;AACH,GAFI,MAGA;AACD,WAAOnO,eAAe,CAACsO,YAAD,CAAtB;AACH;AACJ","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { ComposedTreeDelegate } from './abstractTree.js';\r\nimport { ObjectTree, CompressibleObjectTree } from './objectTree.js';\r\nimport { TreeError, WeakMapper } from './tree.js';\r\nimport { dispose, DisposableStore } from '../../../common/lifecycle.js';\r\nimport { Emitter, Event } from '../../../common/event.js';\r\nimport { timeout, createCancelablePromise } from '../../../common/async.js';\r\nimport { Iterable } from '../../../common/iterator.js';\r\nimport { ElementsDragAndDropData } from '../list/listView.js';\r\nimport { isPromiseCanceledError, onUnexpectedError } from '../../../common/errors.js';\r\nimport { isFilterResult, getVisibleState } from './indexTreeModel.js';\r\nimport { treeItemLoadingIcon } from './treeIcons.js';\r\nfunction createAsyncDataTreeNode(props) {\r\n    return Object.assign(Object.assign({}, props), { children: [], refreshPromise: undefined, stale: true, slow: false, collapsedByDefault: undefined });\r\n}\r\nfunction isAncestor(ancestor, descendant) {\r\n    if (!descendant.parent) {\r\n        return false;\r\n    }\r\n    else if (descendant.parent === ancestor) {\r\n        return true;\r\n    }\r\n    else {\r\n        return isAncestor(ancestor, descendant.parent);\r\n    }\r\n}\r\nfunction intersects(node, other) {\r\n    return node === other || isAncestor(node, other) || isAncestor(other, node);\r\n}\r\nclass AsyncDataTreeNodeWrapper {\r\n    constructor(node) {\r\n        this.node = node;\r\n    }\r\n    get element() { return this.node.element.element; }\r\n    get children() { return this.node.children.map(node => new AsyncDataTreeNodeWrapper(node)); }\r\n    get depth() { return this.node.depth; }\r\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\r\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\r\n    get collapsible() { return this.node.collapsible; }\r\n    get collapsed() { return this.node.collapsed; }\r\n    get visible() { return this.node.visible; }\r\n    get filterData() { return this.node.filterData; }\r\n}\r\nclass AsyncDataTreeRenderer {\r\n    constructor(renderer, nodeMapper, onDidChangeTwistieState) {\r\n        this.renderer = renderer;\r\n        this.nodeMapper = nodeMapper;\r\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\r\n        this.renderedNodes = new Map();\r\n        this.templateId = renderer.templateId;\r\n    }\r\n    renderTemplate(container) {\r\n        const templateData = this.renderer.renderTemplate(container);\r\n        return { templateData };\r\n    }\r\n    renderElement(node, index, templateData, height) {\r\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\r\n    }\r\n    renderTwistie(element, twistieElement) {\r\n        if (element.slow) {\r\n            twistieElement.classList.add(...treeItemLoadingIcon.classNamesArray);\r\n            return true;\r\n        }\r\n        else {\r\n            twistieElement.classList.remove(...treeItemLoadingIcon.classNamesArray);\r\n            return false;\r\n        }\r\n    }\r\n    disposeElement(node, index, templateData, height) {\r\n        if (this.renderer.disposeElement) {\r\n            this.renderer.disposeElement(this.nodeMapper.map(node), index, templateData.templateData, height);\r\n        }\r\n    }\r\n    disposeTemplate(templateData) {\r\n        this.renderer.disposeTemplate(templateData.templateData);\r\n    }\r\n    dispose() {\r\n        this.renderedNodes.clear();\r\n    }\r\n}\r\nfunction asTreeEvent(e) {\r\n    return {\r\n        browserEvent: e.browserEvent,\r\n        elements: e.elements.map(e => e.element)\r\n    };\r\n}\r\nfunction asTreeMouseEvent(e) {\r\n    return {\r\n        browserEvent: e.browserEvent,\r\n        element: e.element && e.element.element,\r\n        target: e.target\r\n    };\r\n}\r\nclass AsyncDataTreeElementsDragAndDropData extends ElementsDragAndDropData {\r\n    constructor(data) {\r\n        super(data.elements.map(node => node.element));\r\n        this.data = data;\r\n    }\r\n}\r\nfunction asAsyncDataTreeDragAndDropData(data) {\r\n    if (data instanceof ElementsDragAndDropData) {\r\n        return new AsyncDataTreeElementsDragAndDropData(data);\r\n    }\r\n    return data;\r\n}\r\nclass AsyncDataTreeNodeListDragAndDrop {\r\n    constructor(dnd) {\r\n        this.dnd = dnd;\r\n    }\r\n    getDragURI(node) {\r\n        return this.dnd.getDragURI(node.element);\r\n    }\r\n    getDragLabel(nodes, originalEvent) {\r\n        if (this.dnd.getDragLabel) {\r\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\r\n        }\r\n        return undefined;\r\n    }\r\n    onDragStart(data, originalEvent) {\r\n        if (this.dnd.onDragStart) {\r\n            this.dnd.onDragStart(asAsyncDataTreeDragAndDropData(data), originalEvent);\r\n        }\r\n    }\r\n    onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\r\n        return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\r\n    }\r\n    drop(data, targetNode, targetIndex, originalEvent) {\r\n        this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\r\n    }\r\n    onDragEnd(originalEvent) {\r\n        if (this.dnd.onDragEnd) {\r\n            this.dnd.onDragEnd(originalEvent);\r\n        }\r\n    }\r\n}\r\nfunction asObjectTreeOptions(options) {\r\n    return options && Object.assign(Object.assign({}, options), { collapseByDefault: true, identityProvider: options.identityProvider && {\r\n            getId(el) {\r\n                return options.identityProvider.getId(el.element);\r\n            }\r\n        }, dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd), multipleSelectionController: options.multipleSelectionController && {\r\n            isSelectionSingleChangeEvent(e) {\r\n                return options.multipleSelectionController.isSelectionSingleChangeEvent(Object.assign(Object.assign({}, e), { element: e.element }));\r\n            },\r\n            isSelectionRangeChangeEvent(e) {\r\n                return options.multipleSelectionController.isSelectionRangeChangeEvent(Object.assign(Object.assign({}, e), { element: e.element }));\r\n            }\r\n        }, accessibilityProvider: options.accessibilityProvider && Object.assign(Object.assign({}, options.accessibilityProvider), { getPosInSet: undefined, getSetSize: undefined, getRole: options.accessibilityProvider.getRole ? (el) => {\r\n                return options.accessibilityProvider.getRole(el.element);\r\n            } : () => 'treeitem', isChecked: options.accessibilityProvider.isChecked ? (e) => {\r\n                var _a;\r\n                return !!((_a = options.accessibilityProvider) === null || _a === void 0 ? void 0 : _a.isChecked(e.element));\r\n            } : undefined, getAriaLabel(e) {\r\n                return options.accessibilityProvider.getAriaLabel(e.element);\r\n            },\r\n            getWidgetAriaLabel() {\r\n                return options.accessibilityProvider.getWidgetAriaLabel();\r\n            }, getWidgetRole: options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree', getAriaLevel: options.accessibilityProvider.getAriaLevel && (node => {\r\n                return options.accessibilityProvider.getAriaLevel(node.element);\r\n            }), getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\r\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\r\n            }) }), filter: options.filter && {\r\n            filter(e, parentVisibility) {\r\n                return options.filter.filter(e.element, parentVisibility);\r\n            }\r\n        }, keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, options.keyboardNavigationLabelProvider), { getKeyboardNavigationLabel(e) {\r\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\r\n            } }), sorter: undefined, expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : (typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : (e => options.expandOnlyOnTwistieClick(e.element))), additionalScrollHeight: options.additionalScrollHeight });\r\n}\r\nfunction dfs(node, fn) {\r\n    fn(node);\r\n    node.children.forEach(child => dfs(child, fn));\r\n}\r\nexport class AsyncDataTree {\r\n    constructor(user, container, delegate, renderers, dataSource, options = {}) {\r\n        this.user = user;\r\n        this.dataSource = dataSource;\r\n        this.nodes = new Map();\r\n        this.subTreeRefreshPromises = new Map();\r\n        this.refreshPromises = new Map();\r\n        this._onDidRender = new Emitter();\r\n        this._onDidChangeNodeSlowState = new Emitter();\r\n        this.nodeMapper = new WeakMapper(node => new AsyncDataTreeNodeWrapper(node));\r\n        this.disposables = new DisposableStore();\r\n        this.identityProvider = options.identityProvider;\r\n        this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\r\n        this.sorter = options.sorter;\r\n        this.collapseByDefault = options.collapseByDefault;\r\n        this.tree = this.createTree(user, container, delegate, renderers, options);\r\n        this.root = createAsyncDataTreeNode({\r\n            element: undefined,\r\n            parent: null,\r\n            hasChildren: true\r\n        });\r\n        if (this.identityProvider) {\r\n            this.root = Object.assign(Object.assign({}, this.root), { id: null });\r\n        }\r\n        this.nodes.set(null, this.root);\r\n        this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\r\n    }\r\n    get onDidChangeFocus() { return Event.map(this.tree.onDidChangeFocus, asTreeEvent); }\r\n    get onDidChangeSelection() { return Event.map(this.tree.onDidChangeSelection, asTreeEvent); }\r\n    get onMouseDblClick() { return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent); }\r\n    get onPointer() { return Event.map(this.tree.onPointer, asTreeMouseEvent); }\r\n    get onDidFocus() { return this.tree.onDidFocus; }\r\n    get onDidDispose() { return this.tree.onDidDispose; }\r\n    createTree(user, container, delegate, renderers, options) {\r\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\r\n        const objectTreeRenderers = renderers.map(r => new AsyncDataTreeRenderer(r, this.nodeMapper, this._onDidChangeNodeSlowState.event));\r\n        const objectTreeOptions = asObjectTreeOptions(options) || {};\r\n        return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\r\n    }\r\n    updateOptions(options = {}) {\r\n        this.tree.updateOptions(options);\r\n    }\r\n    // Widget\r\n    getHTMLElement() {\r\n        return this.tree.getHTMLElement();\r\n    }\r\n    get scrollTop() {\r\n        return this.tree.scrollTop;\r\n    }\r\n    set scrollTop(scrollTop) {\r\n        this.tree.scrollTop = scrollTop;\r\n    }\r\n    domFocus() {\r\n        this.tree.domFocus();\r\n    }\r\n    layout(height, width) {\r\n        this.tree.layout(height, width);\r\n    }\r\n    style(styles) {\r\n        this.tree.style(styles);\r\n    }\r\n    // Model\r\n    getInput() {\r\n        return this.root.element;\r\n    }\r\n    setInput(input, viewState) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.refreshPromises.forEach(promise => promise.cancel());\r\n            this.refreshPromises.clear();\r\n            this.root.element = input;\r\n            const viewStateContext = viewState && { viewState, focus: [], selection: [] };\r\n            yield this._updateChildren(input, true, false, viewStateContext);\r\n            if (viewStateContext) {\r\n                this.tree.setFocus(viewStateContext.focus);\r\n                this.tree.setSelection(viewStateContext.selection);\r\n            }\r\n            if (viewState && typeof viewState.scrollTop === 'number') {\r\n                this.scrollTop = viewState.scrollTop;\r\n            }\r\n        });\r\n    }\r\n    _updateChildren(element = this.root.element, recursive = true, rerender = false, viewStateContext, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (typeof this.root.element === 'undefined') {\r\n                throw new TreeError(this.user, 'Tree input not set');\r\n            }\r\n            if (this.root.refreshPromise) {\r\n                yield this.root.refreshPromise;\r\n                yield Event.toPromise(this._onDidRender.event);\r\n            }\r\n            const node = this.getDataNode(element);\r\n            yield this.refreshAndRenderNode(node, recursive, viewStateContext, options);\r\n            if (rerender) {\r\n                try {\r\n                    this.tree.rerender(node);\r\n                }\r\n                catch (_a) {\r\n                    // missing nodes are fine, this could've resulted from\r\n                    // parallel refresh calls, removing `node` altogether\r\n                }\r\n            }\r\n        });\r\n    }\r\n    // View\r\n    rerender(element) {\r\n        if (element === undefined || element === this.root.element) {\r\n            this.tree.rerender();\r\n            return;\r\n        }\r\n        const node = this.getDataNode(element);\r\n        this.tree.rerender(node);\r\n    }\r\n    collapse(element, recursive = false) {\r\n        const node = this.getDataNode(element);\r\n        return this.tree.collapse(node === this.root ? null : node, recursive);\r\n    }\r\n    expand(element, recursive = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (typeof this.root.element === 'undefined') {\r\n                throw new TreeError(this.user, 'Tree input not set');\r\n            }\r\n            if (this.root.refreshPromise) {\r\n                yield this.root.refreshPromise;\r\n                yield Event.toPromise(this._onDidRender.event);\r\n            }\r\n            const node = this.getDataNode(element);\r\n            if (this.tree.hasElement(node) && !this.tree.isCollapsible(node)) {\r\n                return false;\r\n            }\r\n            if (node.refreshPromise) {\r\n                yield this.root.refreshPromise;\r\n                yield Event.toPromise(this._onDidRender.event);\r\n            }\r\n            if (node !== this.root && !node.refreshPromise && !this.tree.isCollapsed(node)) {\r\n                return false;\r\n            }\r\n            const result = this.tree.expand(node === this.root ? null : node, recursive);\r\n            if (node.refreshPromise) {\r\n                yield this.root.refreshPromise;\r\n                yield Event.toPromise(this._onDidRender.event);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    setSelection(elements, browserEvent) {\r\n        const nodes = elements.map(e => this.getDataNode(e));\r\n        this.tree.setSelection(nodes, browserEvent);\r\n    }\r\n    getSelection() {\r\n        const nodes = this.tree.getSelection();\r\n        return nodes.map(n => n.element);\r\n    }\r\n    setFocus(elements, browserEvent) {\r\n        const nodes = elements.map(e => this.getDataNode(e));\r\n        this.tree.setFocus(nodes, browserEvent);\r\n    }\r\n    getFocus() {\r\n        const nodes = this.tree.getFocus();\r\n        return nodes.map(n => n.element);\r\n    }\r\n    reveal(element, relativeTop) {\r\n        this.tree.reveal(this.getDataNode(element), relativeTop);\r\n    }\r\n    // Implementation\r\n    getDataNode(element) {\r\n        const node = this.nodes.get((element === this.root.element ? null : element));\r\n        if (!node) {\r\n            throw new TreeError(this.user, `Data tree node not found: ${element}`);\r\n        }\r\n        return node;\r\n    }\r\n    refreshAndRenderNode(node, recursive, viewStateContext, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.refreshNode(node, recursive, viewStateContext);\r\n            this.render(node, viewStateContext, options);\r\n        });\r\n    }\r\n    refreshNode(node, recursive, viewStateContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let result;\r\n            this.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\r\n                if (!result && intersects(refreshNode, node)) {\r\n                    result = refreshPromise.then(() => this.refreshNode(node, recursive, viewStateContext));\r\n                }\r\n            });\r\n            if (result) {\r\n                return result;\r\n            }\r\n            return this.doRefreshSubTree(node, recursive, viewStateContext);\r\n        });\r\n    }\r\n    doRefreshSubTree(node, recursive, viewStateContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let done;\r\n            node.refreshPromise = new Promise(c => done = c);\r\n            this.subTreeRefreshPromises.set(node, node.refreshPromise);\r\n            node.refreshPromise.finally(() => {\r\n                node.refreshPromise = undefined;\r\n                this.subTreeRefreshPromises.delete(node);\r\n            });\r\n            try {\r\n                const childrenToRefresh = yield this.doRefreshNode(node, recursive, viewStateContext);\r\n                node.stale = false;\r\n                yield Promise.all(childrenToRefresh.map(child => this.doRefreshSubTree(child, recursive, viewStateContext)));\r\n            }\r\n            finally {\r\n                done();\r\n            }\r\n        });\r\n    }\r\n    doRefreshNode(node, recursive, viewStateContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            node.hasChildren = !!this.dataSource.hasChildren(node.element);\r\n            let childrenPromise;\r\n            if (!node.hasChildren) {\r\n                childrenPromise = Promise.resolve(Iterable.empty());\r\n            }\r\n            else {\r\n                const slowTimeout = timeout(800);\r\n                slowTimeout.then(() => {\r\n                    node.slow = true;\r\n                    this._onDidChangeNodeSlowState.fire(node);\r\n                }, _ => null);\r\n                childrenPromise = this.doGetChildren(node)\r\n                    .finally(() => slowTimeout.cancel());\r\n            }\r\n            try {\r\n                const children = yield childrenPromise;\r\n                return this.setChildren(node, children, recursive, viewStateContext);\r\n            }\r\n            catch (err) {\r\n                if (node !== this.root && this.tree.hasElement(node)) {\r\n                    this.tree.collapse(node);\r\n                }\r\n                if (isPromiseCanceledError(err)) {\r\n                    return [];\r\n                }\r\n                throw err;\r\n            }\r\n            finally {\r\n                if (node.slow) {\r\n                    node.slow = false;\r\n                    this._onDidChangeNodeSlowState.fire(node);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    doGetChildren(node) {\r\n        let result = this.refreshPromises.get(node);\r\n        if (result) {\r\n            return result;\r\n        }\r\n        result = createCancelablePromise(() => __awaiter(this, void 0, void 0, function* () {\r\n            const children = yield this.dataSource.getChildren(node.element);\r\n            return this.processChildren(children);\r\n        }));\r\n        this.refreshPromises.set(node, result);\r\n        return result.finally(() => { this.refreshPromises.delete(node); });\r\n    }\r\n    _onDidChangeCollapseState({ node, deep }) {\r\n        if (node.element === null) {\r\n            return;\r\n        }\r\n        if (!node.collapsed && node.element.stale) {\r\n            if (deep) {\r\n                this.collapse(node.element.element);\r\n            }\r\n            else {\r\n                this.refreshAndRenderNode(node.element, false)\r\n                    .catch(onUnexpectedError);\r\n            }\r\n        }\r\n    }\r\n    setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\r\n        const childrenElements = [...childrenElementsIterable];\r\n        // perf: if the node was and still is a leaf, avoid all this hassle\r\n        if (node.children.length === 0 && childrenElements.length === 0) {\r\n            return [];\r\n        }\r\n        const nodesToForget = new Map();\r\n        const childrenTreeNodesById = new Map();\r\n        for (const child of node.children) {\r\n            nodesToForget.set(child.element, child);\r\n            if (this.identityProvider) {\r\n                const collapsed = this.tree.isCollapsed(child);\r\n                childrenTreeNodesById.set(child.id, { node: child, collapsed });\r\n            }\r\n        }\r\n        const childrenToRefresh = [];\r\n        const children = childrenElements.map(element => {\r\n            const hasChildren = !!this.dataSource.hasChildren(element);\r\n            if (!this.identityProvider) {\r\n                const asyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, hasChildren });\r\n                if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\r\n                    asyncDataTreeNode.collapsedByDefault = false;\r\n                    childrenToRefresh.push(asyncDataTreeNode);\r\n                }\r\n                return asyncDataTreeNode;\r\n            }\r\n            const id = this.identityProvider.getId(element).toString();\r\n            const result = childrenTreeNodesById.get(id);\r\n            if (result) {\r\n                const asyncDataTreeNode = result.node;\r\n                nodesToForget.delete(asyncDataTreeNode.element);\r\n                this.nodes.delete(asyncDataTreeNode.element);\r\n                this.nodes.set(element, asyncDataTreeNode);\r\n                asyncDataTreeNode.element = element;\r\n                asyncDataTreeNode.hasChildren = hasChildren;\r\n                if (recursive) {\r\n                    if (result.collapsed) {\r\n                        asyncDataTreeNode.children.forEach(node => dfs(node, node => this.nodes.delete(node.element)));\r\n                        asyncDataTreeNode.children.splice(0, asyncDataTreeNode.children.length);\r\n                        asyncDataTreeNode.stale = true;\r\n                    }\r\n                    else {\r\n                        childrenToRefresh.push(asyncDataTreeNode);\r\n                    }\r\n                }\r\n                else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\r\n                    asyncDataTreeNode.collapsedByDefault = false;\r\n                    childrenToRefresh.push(asyncDataTreeNode);\r\n                }\r\n                return asyncDataTreeNode;\r\n            }\r\n            const childAsyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, id, hasChildren });\r\n            if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\r\n                viewStateContext.focus.push(childAsyncDataTreeNode);\r\n            }\r\n            if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\r\n                viewStateContext.selection.push(childAsyncDataTreeNode);\r\n            }\r\n            if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\r\n                childrenToRefresh.push(childAsyncDataTreeNode);\r\n            }\r\n            else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\r\n                childAsyncDataTreeNode.collapsedByDefault = false;\r\n                childrenToRefresh.push(childAsyncDataTreeNode);\r\n            }\r\n            return childAsyncDataTreeNode;\r\n        });\r\n        for (const node of nodesToForget.values()) {\r\n            dfs(node, node => this.nodes.delete(node.element));\r\n        }\r\n        for (const child of children) {\r\n            this.nodes.set(child.element, child);\r\n        }\r\n        node.children.splice(0, node.children.length, ...children);\r\n        // TODO@joao this doesn't take filter into account\r\n        if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\r\n            children[0].collapsedByDefault = false;\r\n            childrenToRefresh.push(children[0]);\r\n        }\r\n        return childrenToRefresh;\r\n    }\r\n    render(node, viewStateContext, options) {\r\n        const children = node.children.map(node => this.asTreeElement(node, viewStateContext));\r\n        const objectTreeOptions = options && Object.assign(Object.assign({}, options), { diffIdentityProvider: options.diffIdentityProvider && {\r\n                getId(node) {\r\n                    return options.diffIdentityProvider.getId(node.element);\r\n                }\r\n            } });\r\n        this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\r\n        if (node !== this.root) {\r\n            this.tree.setCollapsible(node, node.hasChildren);\r\n        }\r\n        this._onDidRender.fire();\r\n    }\r\n    asTreeElement(node, viewStateContext) {\r\n        if (node.stale) {\r\n            return {\r\n                element: node,\r\n                collapsible: node.hasChildren,\r\n                collapsed: true\r\n            };\r\n        }\r\n        let collapsed;\r\n        if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\r\n            collapsed = false;\r\n        }\r\n        else {\r\n            collapsed = node.collapsedByDefault;\r\n        }\r\n        node.collapsedByDefault = undefined;\r\n        return {\r\n            element: node,\r\n            children: node.hasChildren ? Iterable.map(node.children, child => this.asTreeElement(child, viewStateContext)) : [],\r\n            collapsible: node.hasChildren,\r\n            collapsed\r\n        };\r\n    }\r\n    processChildren(children) {\r\n        if (this.sorter) {\r\n            children = [...children].sort(this.sorter.compare.bind(this.sorter));\r\n        }\r\n        return children;\r\n    }\r\n    dispose() {\r\n        this.disposables.dispose();\r\n    }\r\n}\r\nclass CompressibleAsyncDataTreeNodeWrapper {\r\n    constructor(node) {\r\n        this.node = node;\r\n    }\r\n    get element() {\r\n        return {\r\n            elements: this.node.element.elements.map(e => e.element),\r\n            incompressible: this.node.element.incompressible\r\n        };\r\n    }\r\n    get children() { return this.node.children.map(node => new CompressibleAsyncDataTreeNodeWrapper(node)); }\r\n    get depth() { return this.node.depth; }\r\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\r\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\r\n    get collapsible() { return this.node.collapsible; }\r\n    get collapsed() { return this.node.collapsed; }\r\n    get visible() { return this.node.visible; }\r\n    get filterData() { return this.node.filterData; }\r\n}\r\nclass CompressibleAsyncDataTreeRenderer {\r\n    constructor(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\r\n        this.renderer = renderer;\r\n        this.nodeMapper = nodeMapper;\r\n        this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\r\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\r\n        this.renderedNodes = new Map();\r\n        this.disposables = [];\r\n        this.templateId = renderer.templateId;\r\n    }\r\n    renderTemplate(container) {\r\n        const templateData = this.renderer.renderTemplate(container);\r\n        return { templateData };\r\n    }\r\n    renderElement(node, index, templateData, height) {\r\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\r\n    }\r\n    renderCompressedElements(node, index, templateData, height) {\r\n        this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\r\n    }\r\n    renderTwistie(element, twistieElement) {\r\n        if (element.slow) {\r\n            twistieElement.classList.add(...treeItemLoadingIcon.classNamesArray);\r\n            return true;\r\n        }\r\n        else {\r\n            twistieElement.classList.remove(...treeItemLoadingIcon.classNamesArray);\r\n            return false;\r\n        }\r\n    }\r\n    disposeElement(node, index, templateData, height) {\r\n        if (this.renderer.disposeElement) {\r\n            this.renderer.disposeElement(this.nodeMapper.map(node), index, templateData.templateData, height);\r\n        }\r\n    }\r\n    disposeCompressedElements(node, index, templateData, height) {\r\n        if (this.renderer.disposeCompressedElements) {\r\n            this.renderer.disposeCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\r\n        }\r\n    }\r\n    disposeTemplate(templateData) {\r\n        this.renderer.disposeTemplate(templateData.templateData);\r\n    }\r\n    dispose() {\r\n        this.renderedNodes.clear();\r\n        this.disposables = dispose(this.disposables);\r\n    }\r\n}\r\nfunction asCompressibleObjectTreeOptions(options) {\r\n    const objectTreeOptions = options && asObjectTreeOptions(options);\r\n    return objectTreeOptions && Object.assign(Object.assign({}, objectTreeOptions), { keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, objectTreeOptions.keyboardNavigationLabelProvider), { getCompressedNodeKeyboardNavigationLabel(els) {\r\n                return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(e => e.element));\r\n            } }) });\r\n}\r\nexport class CompressibleAsyncDataTree extends AsyncDataTree {\r\n    constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options = {}) {\r\n        super(user, container, virtualDelegate, renderers, dataSource, options);\r\n        this.compressionDelegate = compressionDelegate;\r\n        this.compressibleNodeMapper = new WeakMapper(node => new CompressibleAsyncDataTreeNodeWrapper(node));\r\n        this.filter = options.filter;\r\n    }\r\n    createTree(user, container, delegate, renderers, options) {\r\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\r\n        const objectTreeRenderers = renderers.map(r => new CompressibleAsyncDataTreeRenderer(r, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event));\r\n        const objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\r\n        return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\r\n    }\r\n    asTreeElement(node, viewStateContext) {\r\n        return Object.assign({ incompressible: this.compressionDelegate.isIncompressible(node.element) }, super.asTreeElement(node, viewStateContext));\r\n    }\r\n    updateOptions(options = {}) {\r\n        this.tree.updateOptions(options);\r\n    }\r\n    render(node, viewStateContext) {\r\n        if (!this.identityProvider) {\r\n            return super.render(node, viewStateContext);\r\n        }\r\n        // Preserve traits across compressions. Hacky but does the trick.\r\n        // This is hard to fix properly since it requires rewriting the traits\r\n        // across trees and lists. Let's just keep it this way for now.\r\n        const getId = (element) => this.identityProvider.getId(element).toString();\r\n        const getUncompressedIds = (nodes) => {\r\n            const result = new Set();\r\n            for (const node of nodes) {\r\n                const compressedNode = this.tree.getCompressedTreeNode(node === this.root ? null : node);\r\n                if (!compressedNode.element) {\r\n                    continue;\r\n                }\r\n                for (const node of compressedNode.element.elements) {\r\n                    result.add(getId(node.element));\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        const oldSelection = getUncompressedIds(this.tree.getSelection());\r\n        const oldFocus = getUncompressedIds(this.tree.getFocus());\r\n        super.render(node, viewStateContext);\r\n        const selection = this.getSelection();\r\n        let didChangeSelection = false;\r\n        const focus = this.getFocus();\r\n        let didChangeFocus = false;\r\n        const visit = (node) => {\r\n            const compressedNode = node.element;\r\n            if (compressedNode) {\r\n                for (let i = 0; i < compressedNode.elements.length; i++) {\r\n                    const id = getId(compressedNode.elements[i].element);\r\n                    const element = compressedNode.elements[compressedNode.elements.length - 1].element;\r\n                    // github.com/microsoft/vscode/issues/85938\r\n                    if (oldSelection.has(id) && selection.indexOf(element) === -1) {\r\n                        selection.push(element);\r\n                        didChangeSelection = true;\r\n                    }\r\n                    if (oldFocus.has(id) && focus.indexOf(element) === -1) {\r\n                        focus.push(element);\r\n                        didChangeFocus = true;\r\n                    }\r\n                }\r\n            }\r\n            node.children.forEach(visit);\r\n        };\r\n        visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\r\n        if (didChangeSelection) {\r\n            this.setSelection(selection);\r\n        }\r\n        if (didChangeFocus) {\r\n            this.setFocus(focus);\r\n        }\r\n    }\r\n    // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\r\n    // and we have to filter everything beforehand\r\n    // Related to #85193 and #85835\r\n    processChildren(children) {\r\n        if (this.filter) {\r\n            children = Iterable.filter(children, e => {\r\n                const result = this.filter.filter(e, 1 /* Visible */);\r\n                const visibility = getVisibility(result);\r\n                if (visibility === 2 /* Recurse */) {\r\n                    throw new Error('Recursive tree visibility not supported in async data compressed trees');\r\n                }\r\n                return visibility === 1 /* Visible */;\r\n            });\r\n        }\r\n        return super.processChildren(children);\r\n    }\r\n}\r\nfunction getVisibility(filterResult) {\r\n    if (typeof filterResult === 'boolean') {\r\n        return filterResult ? 1 /* Visible */ : 0 /* Hidden */;\r\n    }\r\n    else if (isFilterResult(filterResult)) {\r\n        return getVisibleState(filterResult.visibility);\r\n    }\r\n    else {\r\n        return getVisibleState(filterResult);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}