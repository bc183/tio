{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar _a;\n\nvar LANGUAGE_DEFAULT = 'en';\nvar _isWindows = false;\nvar _isMacintosh = false;\nvar _isLinux = false;\nvar _isLinuxSnap = false;\nvar _isNative = false;\nvar _isWeb = false;\nvar _isIOS = false;\nvar _locale = undefined;\nvar _language = LANGUAGE_DEFAULT;\nvar _translationsConfigFile = undefined;\nvar _userAgent = undefined;\n\nvar _globals = typeof self === 'object' ? self : typeof global === 'object' ? global : {};\n\nvar nodeProcess = undefined;\n\nif (typeof process !== 'undefined') {\n  // Native environment (non-sandboxed)\n  nodeProcess = process;\n} else if (typeof _globals.vscode !== 'undefined') {\n  // Native environment (sandboxed)\n  nodeProcess = _globals.vscode.process;\n}\n\nvar isElectronRenderer = typeof ((_a = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _a === void 0 ? void 0 : _a.electron) === 'string' && nodeProcess.type === 'renderer';\nexport var isElectronSandboxed = isElectronRenderer && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.sandboxed);\nexport var browserCodeLoadingCacheStrategy = function () {\n  // Always enabled when sandbox is enabled\n  if (isElectronSandboxed) {\n    return 'bypassHeatCheck';\n  } // Otherwise, only enabled conditionally\n\n\n  var env = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.env['ENABLE_VSCODE_BROWSER_CODE_LOADING'];\n\n  if (typeof env === 'string') {\n    if (env === 'none' || env === 'code' || env === 'bypassHeatCheck' || env === 'bypassHeatCheckAndEagerCompile') {\n      return env;\n    }\n\n    return 'bypassHeatCheck';\n  }\n\n  return undefined;\n}();\nexport var isPreferringBrowserCodeLoad = typeof browserCodeLoadingCacheStrategy === 'string'; // Web environment\n\nif (typeof navigator === 'object' && !isElectronRenderer) {\n  _userAgent = navigator.userAgent;\n  _isWindows = _userAgent.indexOf('Windows') >= 0;\n  _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n  _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n  _isLinux = _userAgent.indexOf('Linux') >= 0;\n  _isWeb = true;\n  _locale = navigator.language;\n  _language = _locale;\n} // Native environment\nelse if (typeof nodeProcess === 'object') {\n    _isWindows = nodeProcess.platform === 'win32';\n    _isMacintosh = nodeProcess.platform === 'darwin';\n    _isLinux = nodeProcess.platform === 'linux';\n    _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\n    _locale = LANGUAGE_DEFAULT;\n    _language = LANGUAGE_DEFAULT;\n    var rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\n\n    if (rawNlsConfig) {\n      try {\n        var nlsConfig = JSON.parse(rawNlsConfig);\n        var resolved = nlsConfig.availableLanguages['*'];\n        _locale = nlsConfig.locale; // VSCode's default language is 'en'\n\n        _language = resolved ? resolved : LANGUAGE_DEFAULT;\n        _translationsConfigFile = nlsConfig._translationsConfigFile;\n      } catch (e) {}\n    }\n\n    _isNative = true;\n  } // Unknown environment\n  else {\n      console.error('Unable to resolve platform.');\n    }\n\nvar _platform = 0\n/* Web */\n;\n\nif (_isMacintosh) {\n  _platform = 1\n  /* Mac */\n  ;\n} else if (_isWindows) {\n  _platform = 3\n  /* Windows */\n  ;\n} else if (_isLinux) {\n  _platform = 2\n  /* Linux */\n  ;\n}\n\nexport var isWindows = _isWindows;\nexport var isMacintosh = _isMacintosh;\nexport var isLinux = _isLinux;\nexport var isNative = _isNative;\nexport var isWeb = _isWeb;\nexport var isIOS = _isIOS;\nexport var userAgent = _userAgent;\nexport var globals = _globals;\nexport var setImmediate = function defineSetImmediate() {\n  if (globals.setImmediate) {\n    return globals.setImmediate.bind(globals);\n  }\n\n  if (typeof globals.postMessage === 'function' && !globals.importScripts) {\n    var pending = [];\n    globals.addEventListener('message', function (e) {\n      if (e.data && e.data.vscodeSetImmediateId) {\n        for (var i = 0, len = pending.length; i < len; i++) {\n          var candidate = pending[i];\n\n          if (candidate.id === e.data.vscodeSetImmediateId) {\n            pending.splice(i, 1);\n            candidate.callback();\n            return;\n          }\n        }\n      }\n    });\n    var lastId = 0;\n    return function (callback) {\n      var myId = ++lastId;\n      pending.push({\n        id: myId,\n        callback: callback\n      });\n      globals.postMessage({\n        vscodeSetImmediateId: myId\n      }, '*');\n    };\n  }\n\n  if (nodeProcess && typeof nodeProcess.nextTick === 'function') {\n    return nodeProcess.nextTick.bind(nodeProcess);\n  }\n\n  var _promise = Promise.resolve();\n\n  return function (callback) {\n    return _promise.then(callback);\n  };\n}();\nexport var OS = _isMacintosh || _isIOS ? 2\n/* Macintosh */\n: _isWindows ? 1\n/* Windows */\n: 3\n/* Linux */\n;\nvar _isLittleEndian = true;\nvar _isLittleEndianComputed = false;\nexport function isLittleEndian() {\n  if (!_isLittleEndianComputed) {\n    _isLittleEndianComputed = true;\n    var test = new Uint8Array(2);\n    test[0] = 1;\n    test[1] = 2;\n    var view = new Uint16Array(test.buffer);\n    _isLittleEndian = view[0] === (2 << 8) + 1;\n  }\n\n  return _isLittleEndian;\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/common/platform.js"],"names":["_a","LANGUAGE_DEFAULT","_isWindows","_isMacintosh","_isLinux","_isLinuxSnap","_isNative","_isWeb","_isIOS","_locale","undefined","_language","_translationsConfigFile","_userAgent","_globals","self","global","nodeProcess","process","vscode","isElectronRenderer","versions","electron","type","isElectronSandboxed","sandboxed","browserCodeLoadingCacheStrategy","env","isPreferringBrowserCodeLoad","navigator","userAgent","indexOf","maxTouchPoints","language","platform","rawNlsConfig","nlsConfig","JSON","parse","resolved","availableLanguages","locale","e","console","error","_platform","isWindows","isMacintosh","isLinux","isNative","isWeb","isIOS","globals","setImmediate","defineSetImmediate","bind","postMessage","importScripts","pending","addEventListener","data","vscodeSetImmediateId","i","len","length","candidate","id","splice","callback","lastId","myId","push","nextTick","_promise","Promise","resolve","then","OS","_isLittleEndian","_isLittleEndianComputed","isLittleEndian","test","Uint8Array","view","Uint16Array","buffer"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _a;\r\nconst LANGUAGE_DEFAULT = 'en';\r\nlet _isWindows = false;\r\nlet _isMacintosh = false;\r\nlet _isLinux = false;\r\nlet _isLinuxSnap = false;\r\nlet _isNative = false;\r\nlet _isWeb = false;\r\nlet _isIOS = false;\r\nlet _locale = undefined;\r\nlet _language = LANGUAGE_DEFAULT;\r\nlet _translationsConfigFile = undefined;\r\nlet _userAgent = undefined;\r\nconst _globals = (typeof self === 'object' ? self : typeof global === 'object' ? global : {});\r\nlet nodeProcess = undefined;\r\nif (typeof process !== 'undefined') {\r\n    // Native environment (non-sandboxed)\r\n    nodeProcess = process;\r\n}\r\nelse if (typeof _globals.vscode !== 'undefined') {\r\n    // Native environment (sandboxed)\r\n    nodeProcess = _globals.vscode.process;\r\n}\r\nconst isElectronRenderer = typeof ((_a = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _a === void 0 ? void 0 : _a.electron) === 'string' && nodeProcess.type === 'renderer';\r\nexport const isElectronSandboxed = isElectronRenderer && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.sandboxed);\r\nexport const browserCodeLoadingCacheStrategy = (() => {\r\n    // Always enabled when sandbox is enabled\r\n    if (isElectronSandboxed) {\r\n        return 'bypassHeatCheck';\r\n    }\r\n    // Otherwise, only enabled conditionally\r\n    const env = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.env['ENABLE_VSCODE_BROWSER_CODE_LOADING'];\r\n    if (typeof env === 'string') {\r\n        if (env === 'none' || env === 'code' || env === 'bypassHeatCheck' || env === 'bypassHeatCheckAndEagerCompile') {\r\n            return env;\r\n        }\r\n        return 'bypassHeatCheck';\r\n    }\r\n    return undefined;\r\n})();\r\nexport const isPreferringBrowserCodeLoad = typeof browserCodeLoadingCacheStrategy === 'string';\r\n// Web environment\r\nif (typeof navigator === 'object' && !isElectronRenderer) {\r\n    _userAgent = navigator.userAgent;\r\n    _isWindows = _userAgent.indexOf('Windows') >= 0;\r\n    _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\r\n    _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\r\n    _isLinux = _userAgent.indexOf('Linux') >= 0;\r\n    _isWeb = true;\r\n    _locale = navigator.language;\r\n    _language = _locale;\r\n}\r\n// Native environment\r\nelse if (typeof nodeProcess === 'object') {\r\n    _isWindows = (nodeProcess.platform === 'win32');\r\n    _isMacintosh = (nodeProcess.platform === 'darwin');\r\n    _isLinux = (nodeProcess.platform === 'linux');\r\n    _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\r\n    _locale = LANGUAGE_DEFAULT;\r\n    _language = LANGUAGE_DEFAULT;\r\n    const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\r\n    if (rawNlsConfig) {\r\n        try {\r\n            const nlsConfig = JSON.parse(rawNlsConfig);\r\n            const resolved = nlsConfig.availableLanguages['*'];\r\n            _locale = nlsConfig.locale;\r\n            // VSCode's default language is 'en'\r\n            _language = resolved ? resolved : LANGUAGE_DEFAULT;\r\n            _translationsConfigFile = nlsConfig._translationsConfigFile;\r\n        }\r\n        catch (e) {\r\n        }\r\n    }\r\n    _isNative = true;\r\n}\r\n// Unknown environment\r\nelse {\r\n    console.error('Unable to resolve platform.');\r\n}\r\nlet _platform = 0 /* Web */;\r\nif (_isMacintosh) {\r\n    _platform = 1 /* Mac */;\r\n}\r\nelse if (_isWindows) {\r\n    _platform = 3 /* Windows */;\r\n}\r\nelse if (_isLinux) {\r\n    _platform = 2 /* Linux */;\r\n}\r\nexport const isWindows = _isWindows;\r\nexport const isMacintosh = _isMacintosh;\r\nexport const isLinux = _isLinux;\r\nexport const isNative = _isNative;\r\nexport const isWeb = _isWeb;\r\nexport const isIOS = _isIOS;\r\nexport const userAgent = _userAgent;\r\nexport const globals = _globals;\r\nexport const setImmediate = (function defineSetImmediate() {\r\n    if (globals.setImmediate) {\r\n        return globals.setImmediate.bind(globals);\r\n    }\r\n    if (typeof globals.postMessage === 'function' && !globals.importScripts) {\r\n        let pending = [];\r\n        globals.addEventListener('message', (e) => {\r\n            if (e.data && e.data.vscodeSetImmediateId) {\r\n                for (let i = 0, len = pending.length; i < len; i++) {\r\n                    const candidate = pending[i];\r\n                    if (candidate.id === e.data.vscodeSetImmediateId) {\r\n                        pending.splice(i, 1);\r\n                        candidate.callback();\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        let lastId = 0;\r\n        return (callback) => {\r\n            const myId = ++lastId;\r\n            pending.push({\r\n                id: myId,\r\n                callback: callback\r\n            });\r\n            globals.postMessage({ vscodeSetImmediateId: myId }, '*');\r\n        };\r\n    }\r\n    if (nodeProcess && typeof nodeProcess.nextTick === 'function') {\r\n        return nodeProcess.nextTick.bind(nodeProcess);\r\n    }\r\n    const _promise = Promise.resolve();\r\n    return (callback) => _promise.then(callback);\r\n})();\r\nexport const OS = (_isMacintosh || _isIOS ? 2 /* Macintosh */ : (_isWindows ? 1 /* Windows */ : 3 /* Linux */));\r\nlet _isLittleEndian = true;\r\nlet _isLittleEndianComputed = false;\r\nexport function isLittleEndian() {\r\n    if (!_isLittleEndianComputed) {\r\n        _isLittleEndianComputed = true;\r\n        const test = new Uint8Array(2);\r\n        test[0] = 1;\r\n        test[1] = 2;\r\n        const view = new Uint16Array(test.buffer);\r\n        _isLittleEndian = (view[0] === (2 << 8) + 1);\r\n    }\r\n    return _isLittleEndian;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}