{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from './strings.js';\n/**\r\n * Return a hash value for an object.\r\n */\n\nexport function hash(obj) {\n  return doHash(obj, 0);\n}\nexport function doHash(obj, hashVal) {\n  switch (typeof obj) {\n    case 'object':\n      if (obj === null) {\n        return numberHash(349, hashVal);\n      } else if (Array.isArray(obj)) {\n        return arrayHash(obj, hashVal);\n      }\n\n      return objectHash(obj, hashVal);\n\n    case 'string':\n      return stringHash(obj, hashVal);\n\n    case 'boolean':\n      return booleanHash(obj, hashVal);\n\n    case 'number':\n      return numberHash(obj, hashVal);\n\n    case 'undefined':\n      return numberHash(937, hashVal);\n\n    default:\n      return numberHash(617, hashVal);\n  }\n}\n\nfunction numberHash(val, initialHashVal) {\n  return (initialHashVal << 5) - initialHashVal + val | 0; // hashVal * 31 + ch, keep as int32\n}\n\nfunction booleanHash(b, initialHashVal) {\n  return numberHash(b ? 433 : 863, initialHashVal);\n}\n\nexport function stringHash(s, hashVal) {\n  hashVal = numberHash(149417, hashVal);\n\n  for (var i = 0, length = s.length; i < length; i++) {\n    hashVal = numberHash(s.charCodeAt(i), hashVal);\n  }\n\n  return hashVal;\n}\n\nfunction arrayHash(arr, initialHashVal) {\n  initialHashVal = numberHash(104579, initialHashVal);\n  return arr.reduce(function (hashVal, item) {\n    return doHash(item, hashVal);\n  }, initialHashVal);\n}\n\nfunction objectHash(obj, initialHashVal) {\n  initialHashVal = numberHash(181387, initialHashVal);\n  return Object.keys(obj).sort().reduce(function (hashVal, key) {\n    hashVal = stringHash(key, hashVal);\n    return doHash(obj[key], hashVal);\n  }, initialHashVal);\n}\n\nfunction leftRotate(value, bits) {\n  var totalBits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;\n  // delta + bits = totalBits\n  var delta = totalBits - bits; // All ones, expect `delta` zeros aligned to the right\n\n  var mask = ~((1 << delta) - 1); // Join (value left-shifted `bits` bits) with (masked value right-shifted `delta` bits)\n\n  return (value << bits | (mask & value) >>> delta) >>> 0;\n}\n\nfunction fill(dest) {\n  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : dest.byteLength;\n  var value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  for (var i = 0; i < count; i++) {\n    dest[index + i] = value;\n  }\n}\n\nfunction leftPad(value, length) {\n  var _char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';\n\n  while (value.length < length) {\n    value = _char + value;\n  }\n\n  return value;\n}\n\nexport function toHexString(bufferOrValue) {\n  var bitsize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n\n  if (bufferOrValue instanceof ArrayBuffer) {\n    return Array.from(new Uint8Array(bufferOrValue)).map(function (b) {\n      return b.toString(16).padStart(2, '0');\n    }).join('');\n  }\n\n  return leftPad((bufferOrValue >>> 0).toString(16), bitsize / 4);\n}\n/**\r\n * A SHA1 implementation that works with strings and does not allocate.\r\n */\n\nexport var StringSHA1 = /*#__PURE__*/function () {\n  function StringSHA1() {\n    _classCallCheck(this, StringSHA1);\n\n    this._h0 = 0x67452301;\n    this._h1 = 0xEFCDAB89;\n    this._h2 = 0x98BADCFE;\n    this._h3 = 0x10325476;\n    this._h4 = 0xC3D2E1F0;\n    this._buff = new Uint8Array(64\n    /* BLOCK_SIZE */\n    + 3\n    /* to fit any utf-8 */\n    );\n    this._buffDV = new DataView(this._buff.buffer);\n    this._buffLen = 0;\n    this._totalLen = 0;\n    this._leftoverHighSurrogate = 0;\n    this._finished = false;\n  }\n\n  _createClass(StringSHA1, [{\n    key: \"update\",\n    value: function update(str) {\n      var strLen = str.length;\n\n      if (strLen === 0) {\n        return;\n      }\n\n      var buff = this._buff;\n      var buffLen = this._buffLen;\n      var leftoverHighSurrogate = this._leftoverHighSurrogate;\n      var charCode;\n      var offset;\n\n      if (leftoverHighSurrogate !== 0) {\n        charCode = leftoverHighSurrogate;\n        offset = -1;\n        leftoverHighSurrogate = 0;\n      } else {\n        charCode = str.charCodeAt(0);\n        offset = 0;\n      }\n\n      while (true) {\n        var codePoint = charCode;\n\n        if (strings.isHighSurrogate(charCode)) {\n          if (offset + 1 < strLen) {\n            var nextCharCode = str.charCodeAt(offset + 1);\n\n            if (strings.isLowSurrogate(nextCharCode)) {\n              offset++;\n              codePoint = strings.computeCodePoint(charCode, nextCharCode);\n            } else {\n              // illegal => unicode replacement character\n              codePoint = 65533\n              /* UNICODE_REPLACEMENT */\n              ;\n            }\n          } else {\n            // last character is a surrogate pair\n            leftoverHighSurrogate = charCode;\n            break;\n          }\n        } else if (strings.isLowSurrogate(charCode)) {\n          // illegal => unicode replacement character\n          codePoint = 65533\n          /* UNICODE_REPLACEMENT */\n          ;\n        }\n\n        buffLen = this._push(buff, buffLen, codePoint);\n        offset++;\n\n        if (offset < strLen) {\n          charCode = str.charCodeAt(offset);\n        } else {\n          break;\n        }\n      }\n\n      this._buffLen = buffLen;\n      this._leftoverHighSurrogate = leftoverHighSurrogate;\n    }\n  }, {\n    key: \"_push\",\n    value: function _push(buff, buffLen, codePoint) {\n      if (codePoint < 0x0080) {\n        buff[buffLen++] = codePoint;\n      } else if (codePoint < 0x0800) {\n        buff[buffLen++] = 192 | (codePoint & 1984) >>> 6;\n        buff[buffLen++] = 128 | (codePoint & 63) >>> 0;\n      } else if (codePoint < 0x10000) {\n        buff[buffLen++] = 224 | (codePoint & 61440) >>> 12;\n        buff[buffLen++] = 128 | (codePoint & 4032) >>> 6;\n        buff[buffLen++] = 128 | (codePoint & 63) >>> 0;\n      } else {\n        buff[buffLen++] = 240 | (codePoint & 1835008) >>> 18;\n        buff[buffLen++] = 128 | (codePoint & 258048) >>> 12;\n        buff[buffLen++] = 128 | (codePoint & 4032) >>> 6;\n        buff[buffLen++] = 128 | (codePoint & 63) >>> 0;\n      }\n\n      if (buffLen >= 64\n      /* BLOCK_SIZE */\n      ) {\n          this._step();\n\n          buffLen -= 64\n          /* BLOCK_SIZE */\n          ;\n          this._totalLen += 64\n          /* BLOCK_SIZE */\n          ; // take last 3 in case of UTF8 overflow\n\n          buff[0] = buff[64\n          /* BLOCK_SIZE */\n          + 0];\n          buff[1] = buff[64\n          /* BLOCK_SIZE */\n          + 1];\n          buff[2] = buff[64\n          /* BLOCK_SIZE */\n          + 2];\n        }\n\n      return buffLen;\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      if (!this._finished) {\n        this._finished = true;\n\n        if (this._leftoverHighSurrogate) {\n          // illegal => unicode replacement character\n          this._leftoverHighSurrogate = 0;\n          this._buffLen = this._push(this._buff, this._buffLen, 65533\n          /* UNICODE_REPLACEMENT */\n          );\n        }\n\n        this._totalLen += this._buffLen;\n\n        this._wrapUp();\n      }\n\n      return toHexString(this._h0) + toHexString(this._h1) + toHexString(this._h2) + toHexString(this._h3) + toHexString(this._h4);\n    }\n  }, {\n    key: \"_wrapUp\",\n    value: function _wrapUp() {\n      this._buff[this._buffLen++] = 0x80;\n      fill(this._buff, this._buffLen);\n\n      if (this._buffLen > 56) {\n        this._step();\n\n        fill(this._buff);\n      } // this will fit because the mantissa can cover up to 52 bits\n\n\n      var ml = 8 * this._totalLen;\n\n      this._buffDV.setUint32(56, Math.floor(ml / 4294967296), false);\n\n      this._buffDV.setUint32(60, ml % 4294967296, false);\n\n      this._step();\n    }\n  }, {\n    key: \"_step\",\n    value: function _step() {\n      var bigBlock32 = StringSHA1._bigBlock32;\n      var data = this._buffDV;\n\n      for (var j = 0; j < 64\n      /* 16*4 */\n      ; j += 4) {\n        bigBlock32.setUint32(j, data.getUint32(j, false), false);\n      }\n\n      for (var _j = 64; _j < 320\n      /* 80*4 */\n      ; _j += 4) {\n        bigBlock32.setUint32(_j, leftRotate(bigBlock32.getUint32(_j - 12, false) ^ bigBlock32.getUint32(_j - 32, false) ^ bigBlock32.getUint32(_j - 56, false) ^ bigBlock32.getUint32(_j - 64, false), 1), false);\n      }\n\n      var a = this._h0;\n      var b = this._h1;\n      var c = this._h2;\n      var d = this._h3;\n      var e = this._h4;\n      var f, k;\n      var temp;\n\n      for (var _j2 = 0; _j2 < 80; _j2++) {\n        if (_j2 < 20) {\n          f = b & c | ~b & d;\n          k = 0x5A827999;\n        } else if (_j2 < 40) {\n          f = b ^ c ^ d;\n          k = 0x6ED9EBA1;\n        } else if (_j2 < 60) {\n          f = b & c | b & d | c & d;\n          k = 0x8F1BBCDC;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xCA62C1D6;\n        }\n\n        temp = leftRotate(a, 5) + f + e + k + bigBlock32.getUint32(_j2 * 4, false) & 0xffffffff;\n        e = d;\n        d = c;\n        c = leftRotate(b, 30);\n        b = a;\n        a = temp;\n      }\n\n      this._h0 = this._h0 + a & 0xffffffff;\n      this._h1 = this._h1 + b & 0xffffffff;\n      this._h2 = this._h2 + c & 0xffffffff;\n      this._h3 = this._h3 + d & 0xffffffff;\n      this._h4 = this._h4 + e & 0xffffffff;\n    }\n  }]);\n\n  return StringSHA1;\n}();\nStringSHA1._bigBlock32 = new DataView(new ArrayBuffer(320)); // 80 * 4 = 320","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/common/hash.js"],"names":["strings","hash","obj","doHash","hashVal","numberHash","Array","isArray","arrayHash","objectHash","stringHash","booleanHash","val","initialHashVal","b","s","i","length","charCodeAt","arr","reduce","item","Object","keys","sort","key","leftRotate","value","bits","totalBits","delta","mask","fill","dest","index","count","byteLength","leftPad","char","toHexString","bufferOrValue","bitsize","ArrayBuffer","from","Uint8Array","map","toString","padStart","join","StringSHA1","_h0","_h1","_h2","_h3","_h4","_buff","_buffDV","DataView","buffer","_buffLen","_totalLen","_leftoverHighSurrogate","_finished","str","strLen","buff","buffLen","leftoverHighSurrogate","charCode","offset","codePoint","isHighSurrogate","nextCharCode","isLowSurrogate","computeCodePoint","_push","_step","_wrapUp","ml","setUint32","Math","floor","bigBlock32","_bigBlock32","data","j","getUint32","a","c","d","e","f","k","temp"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from './strings.js';\r\n/**\r\n * Return a hash value for an object.\r\n */\r\nexport function hash(obj) {\r\n    return doHash(obj, 0);\r\n}\r\nexport function doHash(obj, hashVal) {\r\n    switch (typeof obj) {\r\n        case 'object':\r\n            if (obj === null) {\r\n                return numberHash(349, hashVal);\r\n            }\r\n            else if (Array.isArray(obj)) {\r\n                return arrayHash(obj, hashVal);\r\n            }\r\n            return objectHash(obj, hashVal);\r\n        case 'string':\r\n            return stringHash(obj, hashVal);\r\n        case 'boolean':\r\n            return booleanHash(obj, hashVal);\r\n        case 'number':\r\n            return numberHash(obj, hashVal);\r\n        case 'undefined':\r\n            return numberHash(937, hashVal);\r\n        default:\r\n            return numberHash(617, hashVal);\r\n    }\r\n}\r\nfunction numberHash(val, initialHashVal) {\r\n    return (((initialHashVal << 5) - initialHashVal) + val) | 0; // hashVal * 31 + ch, keep as int32\r\n}\r\nfunction booleanHash(b, initialHashVal) {\r\n    return numberHash(b ? 433 : 863, initialHashVal);\r\n}\r\nexport function stringHash(s, hashVal) {\r\n    hashVal = numberHash(149417, hashVal);\r\n    for (let i = 0, length = s.length; i < length; i++) {\r\n        hashVal = numberHash(s.charCodeAt(i), hashVal);\r\n    }\r\n    return hashVal;\r\n}\r\nfunction arrayHash(arr, initialHashVal) {\r\n    initialHashVal = numberHash(104579, initialHashVal);\r\n    return arr.reduce((hashVal, item) => doHash(item, hashVal), initialHashVal);\r\n}\r\nfunction objectHash(obj, initialHashVal) {\r\n    initialHashVal = numberHash(181387, initialHashVal);\r\n    return Object.keys(obj).sort().reduce((hashVal, key) => {\r\n        hashVal = stringHash(key, hashVal);\r\n        return doHash(obj[key], hashVal);\r\n    }, initialHashVal);\r\n}\r\nfunction leftRotate(value, bits, totalBits = 32) {\r\n    // delta + bits = totalBits\r\n    const delta = totalBits - bits;\r\n    // All ones, expect `delta` zeros aligned to the right\r\n    const mask = ~((1 << delta) - 1);\r\n    // Join (value left-shifted `bits` bits) with (masked value right-shifted `delta` bits)\r\n    return ((value << bits) | ((mask & value) >>> delta)) >>> 0;\r\n}\r\nfunction fill(dest, index = 0, count = dest.byteLength, value = 0) {\r\n    for (let i = 0; i < count; i++) {\r\n        dest[index + i] = value;\r\n    }\r\n}\r\nfunction leftPad(value, length, char = '0') {\r\n    while (value.length < length) {\r\n        value = char + value;\r\n    }\r\n    return value;\r\n}\r\nexport function toHexString(bufferOrValue, bitsize = 32) {\r\n    if (bufferOrValue instanceof ArrayBuffer) {\r\n        return Array.from(new Uint8Array(bufferOrValue)).map(b => b.toString(16).padStart(2, '0')).join('');\r\n    }\r\n    return leftPad((bufferOrValue >>> 0).toString(16), bitsize / 4);\r\n}\r\n/**\r\n * A SHA1 implementation that works with strings and does not allocate.\r\n */\r\nexport class StringSHA1 {\r\n    constructor() {\r\n        this._h0 = 0x67452301;\r\n        this._h1 = 0xEFCDAB89;\r\n        this._h2 = 0x98BADCFE;\r\n        this._h3 = 0x10325476;\r\n        this._h4 = 0xC3D2E1F0;\r\n        this._buff = new Uint8Array(64 /* BLOCK_SIZE */ + 3 /* to fit any utf-8 */);\r\n        this._buffDV = new DataView(this._buff.buffer);\r\n        this._buffLen = 0;\r\n        this._totalLen = 0;\r\n        this._leftoverHighSurrogate = 0;\r\n        this._finished = false;\r\n    }\r\n    update(str) {\r\n        const strLen = str.length;\r\n        if (strLen === 0) {\r\n            return;\r\n        }\r\n        const buff = this._buff;\r\n        let buffLen = this._buffLen;\r\n        let leftoverHighSurrogate = this._leftoverHighSurrogate;\r\n        let charCode;\r\n        let offset;\r\n        if (leftoverHighSurrogate !== 0) {\r\n            charCode = leftoverHighSurrogate;\r\n            offset = -1;\r\n            leftoverHighSurrogate = 0;\r\n        }\r\n        else {\r\n            charCode = str.charCodeAt(0);\r\n            offset = 0;\r\n        }\r\n        while (true) {\r\n            let codePoint = charCode;\r\n            if (strings.isHighSurrogate(charCode)) {\r\n                if (offset + 1 < strLen) {\r\n                    const nextCharCode = str.charCodeAt(offset + 1);\r\n                    if (strings.isLowSurrogate(nextCharCode)) {\r\n                        offset++;\r\n                        codePoint = strings.computeCodePoint(charCode, nextCharCode);\r\n                    }\r\n                    else {\r\n                        // illegal => unicode replacement character\r\n                        codePoint = 65533 /* UNICODE_REPLACEMENT */;\r\n                    }\r\n                }\r\n                else {\r\n                    // last character is a surrogate pair\r\n                    leftoverHighSurrogate = charCode;\r\n                    break;\r\n                }\r\n            }\r\n            else if (strings.isLowSurrogate(charCode)) {\r\n                // illegal => unicode replacement character\r\n                codePoint = 65533 /* UNICODE_REPLACEMENT */;\r\n            }\r\n            buffLen = this._push(buff, buffLen, codePoint);\r\n            offset++;\r\n            if (offset < strLen) {\r\n                charCode = str.charCodeAt(offset);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        this._buffLen = buffLen;\r\n        this._leftoverHighSurrogate = leftoverHighSurrogate;\r\n    }\r\n    _push(buff, buffLen, codePoint) {\r\n        if (codePoint < 0x0080) {\r\n            buff[buffLen++] = codePoint;\r\n        }\r\n        else if (codePoint < 0x0800) {\r\n            buff[buffLen++] = 0b11000000 | ((codePoint & 0b00000000000000000000011111000000) >>> 6);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\r\n        }\r\n        else if (codePoint < 0x10000) {\r\n            buff[buffLen++] = 0b11100000 | ((codePoint & 0b00000000000000001111000000000000) >>> 12);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\r\n        }\r\n        else {\r\n            buff[buffLen++] = 0b11110000 | ((codePoint & 0b00000000000111000000000000000000) >>> 18);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000111111000000000000) >>> 12);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\r\n        }\r\n        if (buffLen >= 64 /* BLOCK_SIZE */) {\r\n            this._step();\r\n            buffLen -= 64 /* BLOCK_SIZE */;\r\n            this._totalLen += 64 /* BLOCK_SIZE */;\r\n            // take last 3 in case of UTF8 overflow\r\n            buff[0] = buff[64 /* BLOCK_SIZE */ + 0];\r\n            buff[1] = buff[64 /* BLOCK_SIZE */ + 1];\r\n            buff[2] = buff[64 /* BLOCK_SIZE */ + 2];\r\n        }\r\n        return buffLen;\r\n    }\r\n    digest() {\r\n        if (!this._finished) {\r\n            this._finished = true;\r\n            if (this._leftoverHighSurrogate) {\r\n                // illegal => unicode replacement character\r\n                this._leftoverHighSurrogate = 0;\r\n                this._buffLen = this._push(this._buff, this._buffLen, 65533 /* UNICODE_REPLACEMENT */);\r\n            }\r\n            this._totalLen += this._buffLen;\r\n            this._wrapUp();\r\n        }\r\n        return toHexString(this._h0) + toHexString(this._h1) + toHexString(this._h2) + toHexString(this._h3) + toHexString(this._h4);\r\n    }\r\n    _wrapUp() {\r\n        this._buff[this._buffLen++] = 0x80;\r\n        fill(this._buff, this._buffLen);\r\n        if (this._buffLen > 56) {\r\n            this._step();\r\n            fill(this._buff);\r\n        }\r\n        // this will fit because the mantissa can cover up to 52 bits\r\n        const ml = 8 * this._totalLen;\r\n        this._buffDV.setUint32(56, Math.floor(ml / 4294967296), false);\r\n        this._buffDV.setUint32(60, ml % 4294967296, false);\r\n        this._step();\r\n    }\r\n    _step() {\r\n        const bigBlock32 = StringSHA1._bigBlock32;\r\n        const data = this._buffDV;\r\n        for (let j = 0; j < 64 /* 16*4 */; j += 4) {\r\n            bigBlock32.setUint32(j, data.getUint32(j, false), false);\r\n        }\r\n        for (let j = 64; j < 320 /* 80*4 */; j += 4) {\r\n            bigBlock32.setUint32(j, leftRotate((bigBlock32.getUint32(j - 12, false) ^ bigBlock32.getUint32(j - 32, false) ^ bigBlock32.getUint32(j - 56, false) ^ bigBlock32.getUint32(j - 64, false)), 1), false);\r\n        }\r\n        let a = this._h0;\r\n        let b = this._h1;\r\n        let c = this._h2;\r\n        let d = this._h3;\r\n        let e = this._h4;\r\n        let f, k;\r\n        let temp;\r\n        for (let j = 0; j < 80; j++) {\r\n            if (j < 20) {\r\n                f = (b & c) | ((~b) & d);\r\n                k = 0x5A827999;\r\n            }\r\n            else if (j < 40) {\r\n                f = b ^ c ^ d;\r\n                k = 0x6ED9EBA1;\r\n            }\r\n            else if (j < 60) {\r\n                f = (b & c) | (b & d) | (c & d);\r\n                k = 0x8F1BBCDC;\r\n            }\r\n            else {\r\n                f = b ^ c ^ d;\r\n                k = 0xCA62C1D6;\r\n            }\r\n            temp = (leftRotate(a, 5) + f + e + k + bigBlock32.getUint32(j * 4, false)) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = leftRotate(b, 30);\r\n            b = a;\r\n            a = temp;\r\n        }\r\n        this._h0 = (this._h0 + a) & 0xffffffff;\r\n        this._h1 = (this._h1 + b) & 0xffffffff;\r\n        this._h2 = (this._h2 + c) & 0xffffffff;\r\n        this._h3 = (this._h3 + d) & 0xffffffff;\r\n        this._h4 = (this._h4 + e) & 0xffffffff;\r\n    }\r\n}\r\nStringSHA1._bigBlock32 = new DataView(new ArrayBuffer(320)); // 80 * 4 = 320\r\n"]},"metadata":{},"sourceType":"module"}