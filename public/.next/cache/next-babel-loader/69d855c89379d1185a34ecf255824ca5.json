{"ast":null,"code":"import _slicedToArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { isFirefox } from '../../../base/browser/browser.js';\nimport * as types from '../../../base/common/types.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { ColumnSelection } from '../../common/controller/cursorColumnSelection.js';\nimport { CursorState } from '../../common/controller/cursorCommon.js';\nimport { DeleteOperations } from '../../common/controller/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\nimport { TypeOperations } from '../../common/controller/cursorTypeOperations.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../../platform/keybinding/common/keybindingsRegistry.js';\nvar CORE_WEIGHT = 0\n/* EditorCore */\n;\nexport var CoreEditorCommand = /*#__PURE__*/function (_EditorCommand) {\n  _inherits(CoreEditorCommand, _EditorCommand);\n\n  var _super = _createSuper(CoreEditorCommand);\n\n  function CoreEditorCommand() {\n    _classCallCheck(this, CoreEditorCommand);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CoreEditorCommand, [{\n    key: \"runEditorCommand\",\n    value: function runEditorCommand(accessor, editor, args) {\n      var viewModel = editor._getViewModel();\n\n      if (!viewModel) {\n        // the editor has no view => has no cursors\n        return;\n      }\n\n      this.runCoreEditorCommand(viewModel, args || {});\n    }\n  }]);\n\n  return CoreEditorCommand;\n}(EditorCommand);\nexport var EditorScroll_;\n\n(function (EditorScroll_) {\n  var isEditorScrollArgs = function isEditorScrollArgs(arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n\n    var scrollArg = arg;\n\n    if (!types.isString(scrollArg.to)) {\n      return false;\n    }\n\n    if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n      return false;\n    }\n\n    if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n      return false;\n    }\n\n    if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  EditorScroll_.description = {\n    description: 'Scroll editor in the given direction',\n    args: [{\n      name: 'Editor scroll argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory direction value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'up', 'down'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'page', 'halfPage'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\\n\\t\\t\\t\\t\",\n      constraint: isEditorScrollArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['up', 'down']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'page', 'halfPage']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'revealCursor': {\n            'type': 'boolean'\n          }\n        }\n      }\n    }]\n  };\n  /**\r\n   * Directions in the view for editor scroll command.\r\n   */\n\n  EditorScroll_.RawDirection = {\n    Up: 'up',\n    Down: 'down'\n  };\n  /**\r\n   * Units for editor scroll 'by' argument\r\n   */\n\n  EditorScroll_.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Page: 'page',\n    HalfPage: 'halfPage'\n  };\n\n  function parse(args) {\n    var direction;\n\n    switch (args.to) {\n      case EditorScroll_.RawDirection.Up:\n        direction = 1\n        /* Up */\n        ;\n        break;\n\n      case EditorScroll_.RawDirection.Down:\n        direction = 2\n        /* Down */\n        ;\n        break;\n\n      default:\n        // Illegal arguments\n        return null;\n    }\n\n    var unit;\n\n    switch (args.by) {\n      case EditorScroll_.RawUnit.Line:\n        unit = 1\n        /* Line */\n        ;\n        break;\n\n      case EditorScroll_.RawUnit.WrappedLine:\n        unit = 2\n        /* WrappedLine */\n        ;\n        break;\n\n      case EditorScroll_.RawUnit.Page:\n        unit = 3\n        /* Page */\n        ;\n        break;\n\n      case EditorScroll_.RawUnit.HalfPage:\n        unit = 4\n        /* HalfPage */\n        ;\n        break;\n\n      default:\n        unit = 2\n        /* WrappedLine */\n        ;\n    }\n\n    var value = Math.floor(args.value || 1);\n    var revealCursor = !!args.revealCursor;\n    return {\n      direction: direction,\n      unit: unit,\n      value: value,\n      revealCursor: revealCursor,\n      select: !!args.select\n    };\n  }\n\n  EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\n\nexport var RevealLine_;\n\n(function (RevealLine_) {\n  var isRevealLineArgs = function isRevealLineArgs(arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n\n    var reveaLineArg = arg;\n\n    if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n      return false;\n    }\n\n    if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  RevealLine_.description = {\n    description: 'Reveal the given line at the given logical position',\n    args: [{\n      name: 'Reveal line argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'lineNumber': A mandatory line number value.\\n\\t\\t\\t\\t\\t* 'at': Logical position at which line has to be revealed .\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'top', 'center', 'bottom'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\",\n      constraint: isRevealLineArgs,\n      schema: {\n        'type': 'object',\n        'required': ['lineNumber'],\n        'properties': {\n          'lineNumber': {\n            'type': ['number', 'string']\n          },\n          'at': {\n            'type': 'string',\n            'enum': ['top', 'center', 'bottom']\n          }\n        }\n      }\n    }]\n  };\n  /**\r\n   * Values for reveal line 'at' argument\r\n   */\n\n  RevealLine_.RawAtArgument = {\n    Top: 'top',\n    Center: 'center',\n    Bottom: 'bottom'\n  };\n})(RevealLine_ || (RevealLine_ = {}));\n\nvar EditorOrNativeTextInputCommand = /*#__PURE__*/function () {\n  function EditorOrNativeTextInputCommand(target) {\n    var _this = this;\n\n    _classCallCheck(this, EditorOrNativeTextInputCommand);\n\n    // 1. handle case when focus is in editor.\n    target.addImplementation(10000, function (accessor, args) {\n      // Only if editor text focus (i.e. not if editor has widget focus).\n      var focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\n      if (focusedEditor && focusedEditor.hasTextFocus()) {\n        return _this._runEditorCommand(accessor, focusedEditor, args);\n      }\n\n      return false;\n    }); // 2. handle case when focus is in some other `input` / `textarea`.\n\n    target.addImplementation(1000, function (accessor, args) {\n      // Only if focused on an element that allows for entering text\n      var activeElement = document.activeElement;\n\n      if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n        _this.runDOMCommand();\n\n        return true;\n      }\n\n      return false;\n    }); // 3. (default) handle case when focus is somewhere else.\n\n    target.addImplementation(0, function (accessor, args) {\n      // Redirecting to active editor\n      var activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n\n      if (activeEditor) {\n        activeEditor.focus();\n        return _this._runEditorCommand(accessor, activeEditor, args);\n      }\n\n      return false;\n    });\n  }\n\n  _createClass(EditorOrNativeTextInputCommand, [{\n    key: \"_runEditorCommand\",\n    value: function _runEditorCommand(accessor, editor, args) {\n      var result = this.runEditorCommand(accessor, editor, args);\n\n      if (result) {\n        return result;\n      }\n\n      return true;\n    }\n  }]);\n\n  return EditorOrNativeTextInputCommand;\n}();\n\nexport var CoreNavigationCommands;\n\n(function (CoreNavigationCommands) {\n  var BaseMoveToCommand = /*#__PURE__*/function (_CoreEditorCommand) {\n    _inherits(BaseMoveToCommand, _CoreEditorCommand);\n\n    var _super2 = _createSuper(BaseMoveToCommand);\n\n    function BaseMoveToCommand(opts) {\n      var _this2;\n\n      _classCallCheck(this, BaseMoveToCommand);\n\n      _this2 = _super2.call(this, opts);\n      _this2._inSelectionMode = opts.inSelectionMode;\n      return _this2;\n    }\n\n    _createClass(BaseMoveToCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , [CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)]);\n        viewModel.revealPrimaryCursor(args.source, true);\n      }\n    }]);\n\n    return BaseMoveToCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveTo',\n    inSelectionMode: false,\n    precondition: undefined\n  }));\n  CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveToSelect',\n    inSelectionMode: true,\n    precondition: undefined\n  }));\n\n  var ColumnSelectCommand = /*#__PURE__*/function (_CoreEditorCommand2) {\n    _inherits(ColumnSelectCommand, _CoreEditorCommand2);\n\n    var _super3 = _createSuper(ColumnSelectCommand);\n\n    function ColumnSelectCommand() {\n      _classCallCheck(this, ColumnSelectCommand);\n\n      return _super3.apply(this, arguments);\n    }\n\n    _createClass(ColumnSelectCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n\n        var result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , result.viewStates.map(function (viewState) {\n          return CursorState.fromViewState(viewState);\n        }));\n        viewModel.setCursorColumnSelectData({\n          isReal: true,\n          fromViewLineNumber: result.fromLineNumber,\n          fromViewVisualColumn: result.fromVisualColumn,\n          toViewLineNumber: result.toLineNumber,\n          toViewVisualColumn: result.toVisualColumn\n        });\n\n        if (result.reversed) {\n          viewModel.revealTopMostCursor(args.source);\n        } else {\n          viewModel.revealBottomMostCursor(args.source);\n        }\n      }\n    }]);\n\n    return ColumnSelectCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.ColumnSelect = registerEditorCommand(new ( /*#__PURE__*/function (_ColumnSelectCommand) {\n    _inherits(_class, _ColumnSelectCommand);\n\n    var _super4 = _createSuper(_class);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _super4.call(this, {\n        id: 'columnSelect',\n        precondition: undefined\n      });\n    }\n\n    _createClass(_class, [{\n      key: \"_getColumnSelectResult\",\n      value: function _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n        // validate `args`\n        var validatedPosition = viewModel.model.validatePosition(args.position);\n        var validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n        var fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n        var fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n        return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n      }\n    }]);\n\n    return _class;\n  }(ColumnSelectCommand))());\n  CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new ( /*#__PURE__*/function (_ColumnSelectCommand2) {\n    _inherits(_class2, _ColumnSelectCommand2);\n\n    var _super5 = _createSuper(_class2);\n\n    function _class2() {\n      _classCallCheck(this, _class2);\n\n      return _super5.call(this, {\n        id: 'cursorColumnSelectLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 512\n          /* Alt */\n          | 15\n          /* LeftArrow */\n          ,\n          linux: {\n            primary: 0\n          }\n        }\n      });\n    }\n\n    _createClass(_class2, [{\n      key: \"_getColumnSelectResult\",\n      value: function _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n        return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n      }\n    }]);\n\n    return _class2;\n  }(ColumnSelectCommand))());\n  CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new ( /*#__PURE__*/function (_ColumnSelectCommand3) {\n    _inherits(_class3, _ColumnSelectCommand3);\n\n    var _super6 = _createSuper(_class3);\n\n    function _class3() {\n      _classCallCheck(this, _class3);\n\n      return _super6.call(this, {\n        id: 'cursorColumnSelectRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 512\n          /* Alt */\n          | 17\n          /* RightArrow */\n          ,\n          linux: {\n            primary: 0\n          }\n        }\n      });\n    }\n\n    _createClass(_class3, [{\n      key: \"_getColumnSelectResult\",\n      value: function _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n        return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n      }\n    }]);\n\n    return _class3;\n  }(ColumnSelectCommand))());\n\n  var ColumnSelectUpCommand = /*#__PURE__*/function (_ColumnSelectCommand4) {\n    _inherits(ColumnSelectUpCommand, _ColumnSelectCommand4);\n\n    var _super7 = _createSuper(ColumnSelectUpCommand);\n\n    function ColumnSelectUpCommand(opts) {\n      var _this3;\n\n      _classCallCheck(this, ColumnSelectUpCommand);\n\n      _this3 = _super7.call(this, opts);\n      _this3._isPaged = opts.isPaged;\n      return _this3;\n    }\n\n    _createClass(ColumnSelectUpCommand, [{\n      key: \"_getColumnSelectResult\",\n      value: function _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n        return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n      }\n    }]);\n\n    return ColumnSelectUpCommand;\n  }(ColumnSelectCommand);\n\n  CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 16\n      /* UpArrow */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 11\n      /* PageUp */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n\n  var ColumnSelectDownCommand = /*#__PURE__*/function (_ColumnSelectCommand5) {\n    _inherits(ColumnSelectDownCommand, _ColumnSelectCommand5);\n\n    var _super8 = _createSuper(ColumnSelectDownCommand);\n\n    function ColumnSelectDownCommand(opts) {\n      var _this4;\n\n      _classCallCheck(this, ColumnSelectDownCommand);\n\n      _this4 = _super8.call(this, opts);\n      _this4._isPaged = opts.isPaged;\n      return _this4;\n    }\n\n    _createClass(ColumnSelectDownCommand, [{\n      key: \"_getColumnSelectResult\",\n      value: function _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n        return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n      }\n    }]);\n\n    return ColumnSelectDownCommand;\n  }(ColumnSelectCommand);\n\n  CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 18\n      /* DownArrow */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 12\n      /* PageDown */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n\n  var CursorMoveImpl = /*#__PURE__*/function (_CoreEditorCommand3) {\n    _inherits(CursorMoveImpl, _CoreEditorCommand3);\n\n    var _super9 = _createSuper(CursorMoveImpl);\n\n    function CursorMoveImpl() {\n      _classCallCheck(this, CursorMoveImpl);\n\n      return _super9.call(this, {\n        id: 'cursorMove',\n        precondition: undefined,\n        description: CursorMove_.description\n      });\n    }\n\n    _createClass(CursorMoveImpl, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        var parsed = CursorMove_.parse(args);\n\n        if (!parsed) {\n          // illegal arguments\n          return;\n        }\n\n        this._runCursorMove(viewModel, args.source, parsed);\n      }\n    }, {\n      key: \"_runCursorMove\",\n      value: function _runCursorMove(viewModel, source, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(source, 3\n        /* Explicit */\n        , CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n        viewModel.revealPrimaryCursor(source, true);\n      }\n    }], [{\n      key: \"_move\",\n      value: function _move(viewModel, cursors, args) {\n        var inSelectionMode = args.select;\n        var value = args.value;\n\n        switch (args.direction) {\n          case 0\n          /* Left */\n          :\n          case 1\n          /* Right */\n          :\n          case 2\n          /* Up */\n          :\n          case 3\n          /* Down */\n          :\n          case 4\n          /* WrappedLineStart */\n          :\n          case 5\n          /* WrappedLineFirstNonWhitespaceCharacter */\n          :\n          case 6\n          /* WrappedLineColumnCenter */\n          :\n          case 7\n          /* WrappedLineEnd */\n          :\n          case 8\n          /* WrappedLineLastNonWhitespaceCharacter */\n          :\n            return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n\n          case 9\n          /* ViewPortTop */\n          :\n          case 11\n          /* ViewPortBottom */\n          :\n          case 10\n          /* ViewPortCenter */\n          :\n          case 12\n          /* ViewPortIfOutside */\n          :\n            return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n\n          default:\n            return null;\n        }\n      }\n    }]);\n\n    return CursorMoveImpl;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n  CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n\n  var CursorMoveBasedCommand = /*#__PURE__*/function (_CoreEditorCommand4) {\n    _inherits(CursorMoveBasedCommand, _CoreEditorCommand4);\n\n    var _super10 = _createSuper(CursorMoveBasedCommand);\n\n    function CursorMoveBasedCommand(opts) {\n      var _this5;\n\n      _classCallCheck(this, CursorMoveBasedCommand);\n\n      _this5 = _super10.call(this, opts);\n      _this5._staticArgs = opts.args;\n      return _this5;\n    }\n\n    _createClass(CursorMoveBasedCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, dynamicArgs) {\n        var args = this._staticArgs;\n\n        if (this._staticArgs.value === -1\n        /* PAGE_SIZE_MARKER */\n        ) {\n            // -1 is a marker for page size\n            args = {\n              direction: this._staticArgs.direction,\n              unit: this._staticArgs.unit,\n              select: this._staticArgs.select,\n              value: viewModel.cursorConfig.pageSize\n            };\n          }\n\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(dynamicArgs.source, 3\n        /* Explicit */\n        , CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n        viewModel.revealPrimaryCursor(dynamicArgs.source, true);\n      }\n    }]);\n\n    return CursorMoveBasedCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0\n      /* Left */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorLeft',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 15\n      /* LeftArrow */\n      ,\n      mac: {\n        primary: 15\n        /* LeftArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 32\n        /* KEY_B */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0\n      /* Left */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorLeftSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 15\n      /* LeftArrow */\n\n    }\n  }));\n  CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1\n      /* Right */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorRight',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 17\n      /* RightArrow */\n      ,\n      mac: {\n        primary: 17\n        /* RightArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 36\n        /* KEY_F */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1\n      /* Right */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorRightSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 17\n      /* RightArrow */\n\n    }\n  }));\n  CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 16\n      /* UpArrow */\n      ,\n      mac: {\n        primary: 16\n        /* UpArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 46\n        /* KEY_P */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 16\n      /* UpArrow */\n      ,\n      secondary: [2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 16\n      /* UpArrow */\n      ],\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 16\n        /* UpArrow */\n\n      },\n      linux: {\n        primary: 1024\n        /* Shift */\n        | 16\n        /* UpArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 11\n      /* PageUp */\n\n    }\n  }));\n  CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 11\n      /* PageUp */\n\n    }\n  }));\n  CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 18\n      /* DownArrow */\n      ,\n      mac: {\n        primary: 18\n        /* DownArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 44\n        /* KEY_N */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 18\n      /* DownArrow */\n      ,\n      secondary: [2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 18\n      /* DownArrow */\n      ],\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 18\n        /* DownArrow */\n\n      },\n      linux: {\n        primary: 1024\n        /* Shift */\n        | 18\n        /* DownArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 12\n      /* PageDown */\n\n    }\n  }));\n  CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 12\n      /* PageDown */\n\n    }\n  }));\n  CoreNavigationCommands.CreateCursor = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand5) {\n    _inherits(_class4, _CoreEditorCommand5);\n\n    var _super11 = _createSuper(_class4);\n\n    function _class4() {\n      _classCallCheck(this, _class4);\n\n      return _super11.call(this, {\n        id: 'createCursor',\n        precondition: undefined\n      });\n    }\n\n    _createClass(_class4, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        var newState;\n\n        if (args.wholeLine) {\n          newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n        } else {\n          newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n        }\n\n        var states = viewModel.getCursorStates(); // Check if we should remove a cursor (sort of like a toggle)\n\n        if (states.length > 1) {\n          var newModelPosition = newState.modelState ? newState.modelState.position : null;\n          var newViewPosition = newState.viewState ? newState.viewState.position : null;\n\n          for (var i = 0, len = states.length; i < len; i++) {\n            var state = states[i];\n\n            if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n              continue;\n            }\n\n            if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n              continue;\n            } // => Remove the cursor\n\n\n            states.splice(i, 1);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3\n            /* Explicit */\n            , states);\n            return;\n          }\n        } // => Add the new cursor\n\n\n        states.push(newState);\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , states);\n      }\n    }]);\n\n    return _class4;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand6) {\n    _inherits(_class5, _CoreEditorCommand6);\n\n    var _super12 = _createSuper(_class5);\n\n    function _class5() {\n      _classCallCheck(this, _class5);\n\n      return _super12.call(this, {\n        id: '_lastCursorMoveToSelect',\n        precondition: undefined\n      });\n    }\n\n    _createClass(_class5, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        var lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n        var states = viewModel.getCursorStates();\n        var newStates = states.slice(0);\n        newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , newStates);\n      }\n    }]);\n\n    return _class5;\n  }(CoreEditorCommand))());\n\n  var HomeCommand = /*#__PURE__*/function (_CoreEditorCommand7) {\n    _inherits(HomeCommand, _CoreEditorCommand7);\n\n    var _super13 = _createSuper(HomeCommand);\n\n    function HomeCommand(opts) {\n      var _this6;\n\n      _classCallCheck(this, HomeCommand);\n\n      _this6 = _super13.call(this, opts);\n      _this6._inSelectionMode = opts.inSelectionMode;\n      return _this6;\n    }\n\n    _createClass(HomeCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n        viewModel.revealPrimaryCursor(args.source, true);\n      }\n    }]);\n\n    return HomeCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n    inSelectionMode: false,\n    id: 'cursorHome',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 14\n      /* Home */\n      ,\n      mac: {\n        primary: 14\n        /* Home */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 15\n        /* LeftArrow */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n    inSelectionMode: true,\n    id: 'cursorHomeSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 14\n      /* Home */\n      ,\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 14\n        /* Home */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 15\n        /* LeftArrow */\n        ]\n      }\n    }\n  }));\n\n  var LineStartCommand = /*#__PURE__*/function (_CoreEditorCommand8) {\n    _inherits(LineStartCommand, _CoreEditorCommand8);\n\n    var _super14 = _createSuper(LineStartCommand);\n\n    function LineStartCommand(opts) {\n      var _this7;\n\n      _classCallCheck(this, LineStartCommand);\n\n      _this7 = _super14.call(this, opts);\n      _this7._inSelectionMode = opts.inSelectionMode;\n      return _this7;\n    }\n\n    _createClass(LineStartCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , this._exec(viewModel.getCursorStates()));\n        viewModel.revealPrimaryCursor(args.source, true);\n      }\n    }, {\n      key: \"_exec\",\n      value: function _exec(cursors) {\n        var result = [];\n\n        for (var i = 0, len = cursors.length; i < len; i++) {\n          var cursor = cursors[i];\n          var lineNumber = cursor.modelState.position.lineNumber;\n          result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n        }\n\n        return result;\n      }\n    }]);\n\n    return LineStartCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n    inSelectionMode: false,\n    id: 'cursorLineStart',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256\n        /* WinCtrl */\n        | 31\n        /* KEY_A */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n    inSelectionMode: true,\n    id: 'cursorLineStartSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256\n        /* WinCtrl */\n        | 1024\n        /* Shift */\n        | 31\n        /* KEY_A */\n\n      }\n    }\n  }));\n\n  var EndCommand = /*#__PURE__*/function (_CoreEditorCommand9) {\n    _inherits(EndCommand, _CoreEditorCommand9);\n\n    var _super15 = _createSuper(EndCommand);\n\n    function EndCommand(opts) {\n      var _this8;\n\n      _classCallCheck(this, EndCommand);\n\n      _this8 = _super15.call(this, opts);\n      _this8._inSelectionMode = opts.inSelectionMode;\n      return _this8;\n    }\n\n    _createClass(EndCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n        viewModel.revealPrimaryCursor(args.source, true);\n      }\n    }]);\n\n    return EndCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n    inSelectionMode: false,\n    id: 'cursorEnd',\n    precondition: undefined,\n    kbOpts: {\n      args: {\n        sticky: false\n      },\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 13\n      /* End */\n      ,\n      mac: {\n        primary: 13\n        /* End */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 17\n        /* RightArrow */\n        ]\n      }\n    },\n    description: {\n      description: \"Go to End\",\n      args: [{\n        name: 'args',\n        schema: {\n          type: 'object',\n          properties: {\n            'sticky': {\n              description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n              type: 'boolean',\n              \"default\": false\n            }\n          }\n        }\n      }]\n    }\n  }));\n  CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n    inSelectionMode: true,\n    id: 'cursorEndSelect',\n    precondition: undefined,\n    kbOpts: {\n      args: {\n        sticky: false\n      },\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 13\n      /* End */\n      ,\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 13\n        /* End */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 17\n        /* RightArrow */\n        ]\n      }\n    },\n    description: {\n      description: \"Select to End\",\n      args: [{\n        name: 'args',\n        schema: {\n          type: 'object',\n          properties: {\n            'sticky': {\n              description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n              type: 'boolean',\n              \"default\": false\n            }\n          }\n        }\n      }]\n    }\n  }));\n\n  var LineEndCommand = /*#__PURE__*/function (_CoreEditorCommand10) {\n    _inherits(LineEndCommand, _CoreEditorCommand10);\n\n    var _super16 = _createSuper(LineEndCommand);\n\n    function LineEndCommand(opts) {\n      var _this9;\n\n      _classCallCheck(this, LineEndCommand);\n\n      _this9 = _super16.call(this, opts);\n      _this9._inSelectionMode = opts.inSelectionMode;\n      return _this9;\n    }\n\n    _createClass(LineEndCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , this._exec(viewModel, viewModel.getCursorStates()));\n        viewModel.revealPrimaryCursor(args.source, true);\n      }\n    }, {\n      key: \"_exec\",\n      value: function _exec(viewModel, cursors) {\n        var result = [];\n\n        for (var i = 0, len = cursors.length; i < len; i++) {\n          var cursor = cursors[i];\n          var lineNumber = cursor.modelState.position.lineNumber;\n          var maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n          result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n        }\n\n        return result;\n      }\n    }]);\n\n    return LineEndCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n    inSelectionMode: false,\n    id: 'cursorLineEnd',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256\n        /* WinCtrl */\n        | 35\n        /* KEY_E */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n    inSelectionMode: true,\n    id: 'cursorLineEndSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256\n        /* WinCtrl */\n        | 1024\n        /* Shift */\n        | 35\n        /* KEY_E */\n\n      }\n    }\n  }));\n\n  var TopCommand = /*#__PURE__*/function (_CoreEditorCommand11) {\n    _inherits(TopCommand, _CoreEditorCommand11);\n\n    var _super17 = _createSuper(TopCommand);\n\n    function TopCommand(opts) {\n      var _this10;\n\n      _classCallCheck(this, TopCommand);\n\n      _this10 = _super17.call(this, opts);\n      _this10._inSelectionMode = opts.inSelectionMode;\n      return _this10;\n    }\n\n    _createClass(TopCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n        viewModel.revealPrimaryCursor(args.source, true);\n      }\n    }]);\n\n    return TopCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n    inSelectionMode: false,\n    id: 'cursorTop',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 14\n      /* Home */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 16\n        /* UpArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n    inSelectionMode: true,\n    id: 'cursorTopSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 14\n      /* Home */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 16\n        /* UpArrow */\n\n      }\n    }\n  }));\n\n  var BottomCommand = /*#__PURE__*/function (_CoreEditorCommand12) {\n    _inherits(BottomCommand, _CoreEditorCommand12);\n\n    var _super18 = _createSuper(BottomCommand);\n\n    function BottomCommand(opts) {\n      var _this11;\n\n      _classCallCheck(this, BottomCommand);\n\n      _this11 = _super18.call(this, opts);\n      _this11._inSelectionMode = opts.inSelectionMode;\n      return _this11;\n    }\n\n    _createClass(BottomCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n        viewModel.revealPrimaryCursor(args.source, true);\n      }\n    }]);\n\n    return BottomCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n    inSelectionMode: false,\n    id: 'cursorBottom',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 13\n      /* End */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 18\n        /* DownArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n    inSelectionMode: true,\n    id: 'cursorBottomSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 13\n      /* End */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 18\n        /* DownArrow */\n\n      }\n    }\n  }));\n\n  var EditorScrollImpl = /*#__PURE__*/function (_CoreEditorCommand13) {\n    _inherits(EditorScrollImpl, _CoreEditorCommand13);\n\n    var _super19 = _createSuper(EditorScrollImpl);\n\n    function EditorScrollImpl() {\n      _classCallCheck(this, EditorScrollImpl);\n\n      return _super19.call(this, {\n        id: 'editorScroll',\n        precondition: undefined,\n        description: EditorScroll_.description\n      });\n    }\n\n    _createClass(EditorScrollImpl, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        var parsed = EditorScroll_.parse(args);\n\n        if (!parsed) {\n          // illegal arguments\n          return;\n        }\n\n        this._runEditorScroll(viewModel, args.source, parsed);\n      }\n    }, {\n      key: \"_runEditorScroll\",\n      value: function _runEditorScroll(viewModel, source, args) {\n        var desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n\n        if (args.revealCursor) {\n          // must ensure cursor is in new visible range\n          var desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n          viewModel.setCursorStates(source, 3\n          /* Explicit */\n          , [CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)]);\n        }\n\n        viewModel.setScrollTop(desiredScrollTop, 0\n        /* Smooth */\n        );\n      }\n    }, {\n      key: \"_computeDesiredScrollTop\",\n      value: function _computeDesiredScrollTop(viewModel, args) {\n        if (args.unit === 1\n        /* Line */\n        ) {\n            // scrolling by model lines\n            var visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n            var visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n            var desiredTopModelLineNumber;\n\n            if (args.direction === 1\n            /* Up */\n            ) {\n                // must go x model lines up\n                desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n              } else {\n              // must go x model lines down\n              desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n            }\n\n            var viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n            return viewModel.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n          }\n\n        var noOfLines;\n\n        if (args.unit === 3\n        /* Page */\n        ) {\n            noOfLines = viewModel.cursorConfig.pageSize * args.value;\n          } else if (args.unit === 4\n        /* HalfPage */\n        ) {\n            noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n          } else {\n          noOfLines = args.value;\n        }\n\n        var deltaLines = (args.direction === 1\n        /* Up */\n        ? -1 : 1) * noOfLines;\n        return viewModel.getScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n      }\n    }]);\n\n    return EditorScrollImpl;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n  CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n  CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand14) {\n    _inherits(_class6, _CoreEditorCommand14);\n\n    var _super20 = _createSuper(_class6);\n\n    function _class6() {\n      _classCallCheck(this, _class6);\n\n      return _super20.call(this, {\n        id: 'scrollLineUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 16\n          /* UpArrow */\n          ,\n          mac: {\n            primary: 256\n            /* WinCtrl */\n            | 11\n            /* PageUp */\n\n          }\n        }\n      });\n    }\n\n    _createClass(_class6, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n          direction: 1\n          /* Up */\n          ,\n          unit: 2\n          /* WrappedLine */\n          ,\n          value: 1,\n          revealCursor: false,\n          select: false\n        });\n      }\n    }]);\n\n    return _class6;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand15) {\n    _inherits(_class7, _CoreEditorCommand15);\n\n    var _super21 = _createSuper(_class7);\n\n    function _class7() {\n      _classCallCheck(this, _class7);\n\n      return _super21.call(this, {\n        id: 'scrollPageUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 11\n          /* PageUp */\n          ,\n          win: {\n            primary: 512\n            /* Alt */\n            | 11\n            /* PageUp */\n\n          },\n          linux: {\n            primary: 512\n            /* Alt */\n            | 11\n            /* PageUp */\n\n          }\n        }\n      });\n    }\n\n    _createClass(_class7, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n          direction: 1\n          /* Up */\n          ,\n          unit: 3\n          /* Page */\n          ,\n          value: 1,\n          revealCursor: false,\n          select: false\n        });\n      }\n    }]);\n\n    return _class7;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand16) {\n    _inherits(_class8, _CoreEditorCommand16);\n\n    var _super22 = _createSuper(_class8);\n\n    function _class8() {\n      _classCallCheck(this, _class8);\n\n      return _super22.call(this, {\n        id: 'scrollLineDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 18\n          /* DownArrow */\n          ,\n          mac: {\n            primary: 256\n            /* WinCtrl */\n            | 12\n            /* PageDown */\n\n          }\n        }\n      });\n    }\n\n    _createClass(_class8, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n          direction: 2\n          /* Down */\n          ,\n          unit: 2\n          /* WrappedLine */\n          ,\n          value: 1,\n          revealCursor: false,\n          select: false\n        });\n      }\n    }]);\n\n    return _class8;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand17) {\n    _inherits(_class9, _CoreEditorCommand17);\n\n    var _super23 = _createSuper(_class9);\n\n    function _class9() {\n      _classCallCheck(this, _class9);\n\n      return _super23.call(this, {\n        id: 'scrollPageDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 12\n          /* PageDown */\n          ,\n          win: {\n            primary: 512\n            /* Alt */\n            | 12\n            /* PageDown */\n\n          },\n          linux: {\n            primary: 512\n            /* Alt */\n            | 12\n            /* PageDown */\n\n          }\n        }\n      });\n    }\n\n    _createClass(_class9, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n          direction: 2\n          /* Down */\n          ,\n          unit: 3\n          /* Page */\n          ,\n          value: 1,\n          revealCursor: false,\n          select: false\n        });\n      }\n    }]);\n\n    return _class9;\n  }(CoreEditorCommand))());\n\n  var WordCommand = /*#__PURE__*/function (_CoreEditorCommand18) {\n    _inherits(WordCommand, _CoreEditorCommand18);\n\n    var _super24 = _createSuper(WordCommand);\n\n    function WordCommand(opts) {\n      var _this12;\n\n      _classCallCheck(this, WordCommand);\n\n      _this12 = _super24.call(this, opts);\n      _this12._inSelectionMode = opts.inSelectionMode;\n      return _this12;\n    }\n\n    _createClass(WordCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , [CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)]);\n        viewModel.revealPrimaryCursor(args.source, true);\n      }\n    }]);\n\n    return WordCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n    inSelectionMode: false,\n    id: '_wordSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n    inSelectionMode: true,\n    id: '_wordSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand19) {\n    _inherits(_class10, _CoreEditorCommand19);\n\n    var _super25 = _createSuper(_class10);\n\n    function _class10() {\n      _classCallCheck(this, _class10);\n\n      return _super25.call(this, {\n        id: 'lastCursorWordSelect',\n        precondition: undefined\n      });\n    }\n\n    _createClass(_class10, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        var lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n        var states = viewModel.getCursorStates();\n        var newStates = states.slice(0);\n        var lastAddedState = states[lastAddedCursorIndex];\n        newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , newStates);\n      }\n    }]);\n\n    return _class10;\n  }(CoreEditorCommand))());\n\n  var LineCommand = /*#__PURE__*/function (_CoreEditorCommand20) {\n    _inherits(LineCommand, _CoreEditorCommand20);\n\n    var _super26 = _createSuper(LineCommand);\n\n    function LineCommand(opts) {\n      var _this13;\n\n      _classCallCheck(this, LineCommand);\n\n      _this13 = _super26.call(this, opts);\n      _this13._inSelectionMode = opts.inSelectionMode;\n      return _this13;\n    }\n\n    _createClass(LineCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , [CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)]);\n        viewModel.revealPrimaryCursor(args.source, false);\n      }\n    }]);\n\n    return LineCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n    inSelectionMode: false,\n    id: '_lineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n    inSelectionMode: true,\n    id: '_lineSelectDrag',\n    precondition: undefined\n  }));\n\n  var LastCursorLineCommand = /*#__PURE__*/function (_CoreEditorCommand21) {\n    _inherits(LastCursorLineCommand, _CoreEditorCommand21);\n\n    var _super27 = _createSuper(LastCursorLineCommand);\n\n    function LastCursorLineCommand(opts) {\n      var _this14;\n\n      _classCallCheck(this, LastCursorLineCommand);\n\n      _this14 = _super27.call(this, opts);\n      _this14._inSelectionMode = opts.inSelectionMode;\n      return _this14;\n    }\n\n    _createClass(LastCursorLineCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        var lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n        var states = viewModel.getCursorStates();\n        var newStates = states.slice(0);\n        newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , newStates);\n      }\n    }]);\n\n    return LastCursorLineCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: false,\n    id: 'lastCursorLineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: true,\n    id: 'lastCursorLineSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.ExpandLineSelection = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand22) {\n    _inherits(_class11, _CoreEditorCommand22);\n\n    var _super28 = _createSuper(_class11);\n\n    function _class11() {\n      _classCallCheck(this, _class11);\n\n      return _super28.call(this, {\n        id: 'expandLineSelection',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 42\n          /* KEY_L */\n\n        }\n      });\n    }\n\n    _createClass(_class11, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , CursorMoveCommands.expandLineSelection(viewModel, viewModel.getCursorStates()));\n        viewModel.revealPrimaryCursor(args.source, true);\n      }\n    }]);\n\n    return _class11;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.CancelSelection = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand23) {\n    _inherits(_class12, _CoreEditorCommand23);\n\n    var _super29 = _createSuper(_class12);\n\n    function _class12() {\n      _classCallCheck(this, _class12);\n\n      return _super29.call(this, {\n        id: 'cancelSelection',\n        precondition: EditorContextKeys.hasNonEmptySelection,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9\n          /* Escape */\n          ,\n          secondary: [1024\n          /* Shift */\n          | 9\n          /* Escape */\n          ]\n        }\n      });\n    }\n\n    _createClass(_class12, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , [CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())]);\n        viewModel.revealPrimaryCursor(args.source, true);\n      }\n    }]);\n\n    return _class12;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand24) {\n    _inherits(_class13, _CoreEditorCommand24);\n\n    var _super30 = _createSuper(_class13);\n\n    function _class13() {\n      _classCallCheck(this, _class13);\n\n      return _super30.call(this, {\n        id: 'removeSecondaryCursors',\n        precondition: EditorContextKeys.hasMultipleSelections,\n        kbOpts: {\n          weight: CORE_WEIGHT + 1,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9\n          /* Escape */\n          ,\n          secondary: [1024\n          /* Shift */\n          | 9\n          /* Escape */\n          ]\n        }\n      });\n    }\n\n    _createClass(_class13, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , [viewModel.getPrimaryCursorState()]);\n        viewModel.revealPrimaryCursor(args.source, true);\n      }\n    }]);\n\n    return _class13;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.RevealLine = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand25) {\n    _inherits(_class14, _CoreEditorCommand25);\n\n    var _super31 = _createSuper(_class14);\n\n    function _class14() {\n      _classCallCheck(this, _class14);\n\n      return _super31.call(this, {\n        id: 'revealLine',\n        precondition: undefined,\n        description: RevealLine_.description\n      });\n    }\n\n    _createClass(_class14, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        var revealLineArg = args;\n        var lineNumberArg = revealLineArg.lineNumber || 0;\n        var lineNumber = typeof lineNumberArg === 'number' ? lineNumberArg + 1 : parseInt(lineNumberArg) + 1;\n\n        if (lineNumber < 1) {\n          lineNumber = 1;\n        }\n\n        var lineCount = viewModel.model.getLineCount();\n\n        if (lineNumber > lineCount) {\n          lineNumber = lineCount;\n        }\n\n        var range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n        var revealAt = 0\n        /* Simple */\n        ;\n\n        if (revealLineArg.at) {\n          switch (revealLineArg.at) {\n            case RevealLine_.RawAtArgument.Top:\n              revealAt = 3\n              /* Top */\n              ;\n              break;\n\n            case RevealLine_.RawAtArgument.Center:\n              revealAt = 1\n              /* Center */\n              ;\n              break;\n\n            case RevealLine_.RawAtArgument.Bottom:\n              revealAt = 4\n              /* Bottom */\n              ;\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        var viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n        viewModel.revealRange(args.source, false, viewRange, revealAt, 0\n        /* Smooth */\n        );\n      }\n    }]);\n\n    return _class14;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.SelectAll = new ( /*#__PURE__*/function (_EditorOrNativeTextIn) {\n    _inherits(_class15, _EditorOrNativeTextIn);\n\n    var _super32 = _createSuper(_class15);\n\n    function _class15() {\n      _classCallCheck(this, _class15);\n\n      return _super32.call(this, SelectAllCommand);\n    }\n\n    _createClass(_class15, [{\n      key: \"runDOMCommand\",\n      value: function runDOMCommand() {\n        if (isFirefox) {\n          document.activeElement.focus();\n          document.activeElement.select();\n        }\n\n        document.execCommand('selectAll');\n      }\n    }, {\n      key: \"runEditorCommand\",\n      value: function runEditorCommand(accessor, editor, args) {\n        var viewModel = editor._getViewModel();\n\n        if (!viewModel) {\n          // the editor has no view => has no cursors\n          return;\n        }\n\n        this.runCoreEditorCommand(viewModel, args);\n      }\n    }, {\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates('keyboard', 3\n        /* Explicit */\n        , [CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())]);\n      }\n    }]);\n\n    return _class15;\n  }(EditorOrNativeTextInputCommand))();\n  CoreNavigationCommands.SetSelection = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand26) {\n    _inherits(_class16, _CoreEditorCommand26);\n\n    var _super33 = _createSuper(_class16);\n\n    function _class16() {\n      _classCallCheck(this, _class16);\n\n      return _super33.call(this, {\n        id: 'setSelection',\n        precondition: undefined\n      });\n    }\n\n    _createClass(_class16, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3\n        /* Explicit */\n        , [CursorState.fromModelSelection(args.selection)]);\n      }\n    }]);\n\n    return _class16;\n  }(CoreEditorCommand))());\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\n\nvar columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\n\nfunction registerColumnSelection(id, keybinding) {\n  KeybindingsRegistry.registerKeybindingRule({\n    id: id,\n    primary: keybinding,\n    when: columnSelectionCondition,\n    weight: CORE_WEIGHT + 1\n  });\n}\n\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024\n/* Shift */\n| 15\n/* LeftArrow */\n);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024\n/* Shift */\n| 17\n/* RightArrow */\n);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024\n/* Shift */\n| 16\n/* UpArrow */\n);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024\n/* Shift */\n| 11\n/* PageUp */\n);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024\n/* Shift */\n| 18\n/* DownArrow */\n);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024\n/* Shift */\n| 12\n/* PageDown */\n);\n\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\n\nexport var CoreEditingCommands;\n\n(function (CoreEditingCommands) {\n  var CoreEditingCommand = /*#__PURE__*/function (_EditorCommand2) {\n    _inherits(CoreEditingCommand, _EditorCommand2);\n\n    var _super34 = _createSuper(CoreEditingCommand);\n\n    function CoreEditingCommand() {\n      _classCallCheck(this, CoreEditingCommand);\n\n      return _super34.apply(this, arguments);\n    }\n\n    _createClass(CoreEditingCommand, [{\n      key: \"runEditorCommand\",\n      value: function runEditorCommand(accessor, editor, args) {\n        var viewModel = editor._getViewModel();\n\n        if (!viewModel) {\n          // the editor has no view => has no cursors\n          return;\n        }\n\n        this.runCoreEditingCommand(editor, viewModel, args || {});\n      }\n    }]);\n\n    return CoreEditingCommand;\n  }(EditorCommand);\n\n  CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n  CoreEditingCommands.LineBreakInsert = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditingCommand) {\n    _inherits(_class17, _CoreEditingCommand);\n\n    var _super35 = _createSuper(_class17);\n\n    function _class17() {\n      _classCallCheck(this, _class17);\n\n      return _super35.call(this, {\n        id: 'lineBreakInsert',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 0,\n          mac: {\n            primary: 256\n            /* WinCtrl */\n            | 45\n            /* KEY_O */\n\n          }\n        }\n      });\n    }\n\n    _createClass(_class17, [{\n      key: \"runCoreEditingCommand\",\n      value: function runCoreEditingCommand(editor, viewModel, args) {\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(function (s) {\n          return s.modelState.selection;\n        })));\n      }\n    }]);\n\n    return _class17;\n  }(CoreEditingCommand))());\n  CoreEditingCommands.Outdent = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditingCommand2) {\n    _inherits(_class18, _CoreEditingCommand2);\n\n    var _super36 = _createSuper(_class18);\n\n    function _class18() {\n      _classCallCheck(this, _class18);\n\n      return _super36.call(this, {\n        id: 'outdent',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 1024\n          /* Shift */\n          | 2\n          /* Tab */\n\n        }\n      });\n    }\n\n    _createClass(_class18, [{\n      key: \"runCoreEditingCommand\",\n      value: function runCoreEditingCommand(editor, viewModel, args) {\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(function (s) {\n          return s.modelState.selection;\n        })));\n        editor.pushUndoStop();\n      }\n    }]);\n\n    return _class18;\n  }(CoreEditingCommand))());\n  CoreEditingCommands.Tab = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditingCommand3) {\n    _inherits(_class19, _CoreEditingCommand3);\n\n    var _super37 = _createSuper(_class19);\n\n    function _class19() {\n      _classCallCheck(this, _class19);\n\n      return _super37.call(this, {\n        id: 'tab',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 2\n          /* Tab */\n\n        }\n      });\n    }\n\n    _createClass(_class19, [{\n      key: \"runCoreEditingCommand\",\n      value: function runCoreEditingCommand(editor, viewModel, args) {\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(function (s) {\n          return s.modelState.selection;\n        })));\n        editor.pushUndoStop();\n      }\n    }]);\n\n    return _class19;\n  }(CoreEditingCommand))());\n  CoreEditingCommands.DeleteLeft = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditingCommand4) {\n    _inherits(_class20, _CoreEditingCommand4);\n\n    var _super38 = _createSuper(_class20);\n\n    function _class20() {\n      _classCallCheck(this, _class20);\n\n      return _super38.call(this, {\n        id: 'deleteLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 1\n          /* Backspace */\n          ,\n          secondary: [1024\n          /* Shift */\n          | 1\n          /* Backspace */\n          ],\n          mac: {\n            primary: 1\n            /* Backspace */\n            ,\n            secondary: [1024\n            /* Shift */\n            | 1\n            /* Backspace */\n            , 256\n            /* WinCtrl */\n            | 38\n            /* KEY_H */\n            , 256\n            /* WinCtrl */\n            | 1\n            /* Backspace */\n            ]\n          }\n        }\n      });\n    }\n\n    _createClass(_class20, [{\n      key: \"runCoreEditingCommand\",\n      value: function runCoreEditingCommand(editor, viewModel, args) {\n        var _DeleteOperations$del = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(function (s) {\n          return s.modelState.selection;\n        })),\n            _DeleteOperations$del2 = _slicedToArray(_DeleteOperations$del, 2),\n            shouldPushStackElementBefore = _DeleteOperations$del2[0],\n            commands = _DeleteOperations$del2[1];\n\n        if (shouldPushStackElementBefore) {\n          editor.pushUndoStop();\n        }\n\n        editor.executeCommands(this.id, commands);\n        viewModel.setPrevEditOperationType(2\n        /* DeletingLeft */\n        );\n      }\n    }]);\n\n    return _class20;\n  }(CoreEditingCommand))());\n  CoreEditingCommands.DeleteRight = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditingCommand5) {\n    _inherits(_class21, _CoreEditingCommand5);\n\n    var _super39 = _createSuper(_class21);\n\n    function _class21() {\n      _classCallCheck(this, _class21);\n\n      return _super39.call(this, {\n        id: 'deleteRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 20\n          /* Delete */\n          ,\n          mac: {\n            primary: 20\n            /* Delete */\n            ,\n            secondary: [256\n            /* WinCtrl */\n            | 34\n            /* KEY_D */\n            , 256\n            /* WinCtrl */\n            | 20\n            /* Delete */\n            ]\n          }\n        }\n      });\n    }\n\n    _createClass(_class21, [{\n      key: \"runCoreEditingCommand\",\n      value: function runCoreEditingCommand(editor, viewModel, args) {\n        var _DeleteOperations$del3 = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(function (s) {\n          return s.modelState.selection;\n        })),\n            _DeleteOperations$del4 = _slicedToArray(_DeleteOperations$del3, 2),\n            shouldPushStackElementBefore = _DeleteOperations$del4[0],\n            commands = _DeleteOperations$del4[1];\n\n        if (shouldPushStackElementBefore) {\n          editor.pushUndoStop();\n        }\n\n        editor.executeCommands(this.id, commands);\n        viewModel.setPrevEditOperationType(3\n        /* DeletingRight */\n        );\n      }\n    }]);\n\n    return _class21;\n  }(CoreEditingCommand))());\n  CoreEditingCommands.Undo = new ( /*#__PURE__*/function (_EditorOrNativeTextIn2) {\n    _inherits(_class22, _EditorOrNativeTextIn2);\n\n    var _super40 = _createSuper(_class22);\n\n    function _class22() {\n      _classCallCheck(this, _class22);\n\n      return _super40.call(this, UndoCommand);\n    }\n\n    _createClass(_class22, [{\n      key: \"runDOMCommand\",\n      value: function runDOMCommand() {\n        document.execCommand('undo');\n      }\n    }, {\n      key: \"runEditorCommand\",\n      value: function runEditorCommand(accessor, editor, args) {\n        if (!editor.hasModel() || editor.getOption(75\n        /* readOnly */\n        ) === true) {\n          return;\n        }\n\n        return editor.getModel().undo();\n      }\n    }]);\n\n    return _class22;\n  }(EditorOrNativeTextInputCommand))();\n  CoreEditingCommands.Redo = new ( /*#__PURE__*/function (_EditorOrNativeTextIn3) {\n    _inherits(_class23, _EditorOrNativeTextIn3);\n\n    var _super41 = _createSuper(_class23);\n\n    function _class23() {\n      _classCallCheck(this, _class23);\n\n      return _super41.call(this, RedoCommand);\n    }\n\n    _createClass(_class23, [{\n      key: \"runDOMCommand\",\n      value: function runDOMCommand() {\n        document.execCommand('redo');\n      }\n    }, {\n      key: \"runEditorCommand\",\n      value: function runEditorCommand(accessor, editor, args) {\n        if (!editor.hasModel() || editor.getOption(75\n        /* readOnly */\n        ) === true) {\n          return;\n        }\n\n        return editor.getModel().redo();\n      }\n    }]);\n\n    return _class23;\n  }(EditorOrNativeTextInputCommand))();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\r\n * A command that will invoke a command on the focused editor.\r\n */\n\n\nvar EditorHandlerCommand = /*#__PURE__*/function (_Command) {\n  _inherits(EditorHandlerCommand, _Command);\n\n  var _super42 = _createSuper(EditorHandlerCommand);\n\n  function EditorHandlerCommand(id, handlerId, description) {\n    var _this15;\n\n    _classCallCheck(this, EditorHandlerCommand);\n\n    _this15 = _super42.call(this, {\n      id: id,\n      precondition: undefined,\n      description: description\n    });\n    _this15._handlerId = handlerId;\n    return _this15;\n  }\n\n  _createClass(EditorHandlerCommand, [{\n    key: \"runCommand\",\n    value: function runCommand(accessor, args) {\n      var editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\n      if (!editor) {\n        return;\n      }\n\n      editor.trigger('keyboard', this._handlerId, args);\n    }\n  }]);\n\n  return EditorHandlerCommand;\n}(Command);\n\nfunction registerOverwritableCommand(handlerId, description) {\n  registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n  registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\n\nregisterOverwritableCommand(\"type\"\n/* Type */\n, {\n  description: \"Type\",\n  args: [{\n    name: 'args',\n    schema: {\n      'type': 'object',\n      'required': ['text'],\n      'properties': {\n        'text': {\n          'type': 'string'\n        }\n      }\n    }\n  }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\"\n/* ReplacePreviousChar */\n);\nregisterOverwritableCommand(\"compositionStart\"\n/* CompositionStart */\n);\nregisterOverwritableCommand(\"compositionEnd\"\n/* CompositionEnd */\n);\nregisterOverwritableCommand(\"paste\"\n/* Paste */\n);\nregisterOverwritableCommand(\"cut\"\n/* Cut */\n);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/controller/coreCommands.js"],"names":["nls","isFirefox","types","Command","EditorCommand","registerEditorCommand","UndoCommand","RedoCommand","SelectAllCommand","ICodeEditorService","ColumnSelection","CursorState","DeleteOperations","CursorMove","CursorMove_","CursorMoveCommands","TypeOperations","Position","Range","EditorContextKeys","ContextKeyExpr","KeybindingsRegistry","CORE_WEIGHT","CoreEditorCommand","accessor","editor","args","viewModel","_getViewModel","runCoreEditorCommand","EditorScroll_","isEditorScrollArgs","arg","isObject","scrollArg","isString","to","isUndefined","by","value","isNumber","revealCursor","isBoolean","description","name","constraint","schema","RawDirection","Up","Down","RawUnit","Line","WrappedLine","Page","HalfPage","parse","direction","unit","Math","floor","select","RevealLine_","isRevealLineArgs","reveaLineArg","lineNumber","at","RawAtArgument","Top","Center","Bottom","EditorOrNativeTextInputCommand","target","addImplementation","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","_runEditorCommand","activeElement","document","indexOf","tagName","toLowerCase","runDOMCommand","activeEditor","getActiveCodeEditor","focus","result","runEditorCommand","CoreNavigationCommands","BaseMoveToCommand","opts","_inSelectionMode","inSelectionMode","model","pushStackElement","setCursorStates","source","moveTo","getPrimaryCursorState","position","viewPosition","revealPrimaryCursor","MoveTo","id","precondition","undefined","MoveToSelect","ColumnSelectCommand","_getColumnSelectResult","getCursorColumnSelectData","viewStates","map","viewState","fromViewState","setCursorColumnSelectData","isReal","fromViewLineNumber","fromLineNumber","fromViewVisualColumn","fromVisualColumn","toViewLineNumber","toLineNumber","toViewVisualColumn","toVisualColumn","reversed","revealTopMostCursor","revealBottomMostCursor","ColumnSelect","primary","prevColumnSelectData","validatedPosition","validatePosition","validatedViewPosition","coordinatesConverter","validateViewPosition","column","doColumnSelect","mouseColumn","columnSelect","cursorConfig","CursorColumnSelectLeft","kbOpts","weight","kbExpr","textInputFocus","linux","columnSelectLeft","CursorColumnSelectRight","columnSelectRight","ColumnSelectUpCommand","_isPaged","isPaged","columnSelectUp","CursorColumnSelectUp","CursorColumnSelectPageUp","ColumnSelectDownCommand","columnSelectDown","CursorColumnSelectDown","CursorColumnSelectPageDown","CursorMoveImpl","parsed","_runCursorMove","_move","getCursorStates","cursors","simpleMove","viewportMove","CursorMoveBasedCommand","_staticArgs","dynamicArgs","pageSize","CursorLeft","mac","secondary","CursorLeftSelect","CursorRight","CursorRightSelect","CursorUp","CursorUpSelect","CursorPageUp","CursorPageUpSelect","CursorDown","CursorDownSelect","CursorPageDown","CursorPageDownSelect","CreateCursor","newState","wholeLine","line","states","length","newModelPosition","modelState","newViewPosition","i","len","state","selection","containsPosition","splice","push","LastCursorMoveToSelect","lastAddedCursorIndex","getLastAddedCursorIndex","newStates","slice","HomeCommand","moveToBeginningOfLine","CursorHome","CursorHomeSelect","LineStartCommand","_exec","cursor","fromModelState","move","CursorLineStart","CursorLineStartSelect","EndCommand","moveToEndOfLine","sticky","CursorEnd","type","properties","localize","CursorEndSelect","LineEndCommand","maxColumn","getLineMaxColumn","CursorLineEnd","CursorLineEndSelect","TopCommand","moveToBeginningOfBuffer","CursorTop","CursorTopSelect","BottomCommand","moveToEndOfBuffer","CursorBottom","CursorBottomSelect","EditorScrollImpl","_runEditorScroll","desiredScrollTop","_computeDesiredScrollTop","desiredVisibleViewRange","getCompletelyVisibleViewRangeAtScrollTop","findPositionInViewportIfOutside","setScrollTop","visibleViewRange","getCompletelyVisibleViewRange","visibleModelRange","convertViewRangeToModelRange","desiredTopModelLineNumber","max","startLineNumber","min","getLineCount","convertModelPositionToViewPosition","getVerticalOffsetForLineNumber","noOfLines","round","deltaLines","getScrollTop","lineHeight","EditorScroll","ScrollLineUp","ScrollPageUp","win","ScrollLineDown","ScrollPageDown","WordCommand","word","WordSelect","WordSelectDrag","LastCursorWordSelect","lastAddedState","hasSelection","LineCommand","LineSelect","LineSelectDrag","LastCursorLineCommand","LastCursorLineSelect","LastCursorLineSelectDrag","ExpandLineSelection","expandLineSelection","CancelSelection","hasNonEmptySelection","cancelSelection","RemoveSecondaryCursors","hasMultipleSelections","RevealLine","revealLineArg","lineNumberArg","parseInt","lineCount","range","revealAt","viewRange","convertModelRangeToViewRange","revealRange","SelectAll","execCommand","selectAll","SetSelection","fromModelSelection","columnSelectionCondition","and","columnSelection","registerColumnSelection","keybinding","registerKeybindingRule","when","registerCommand","command","register","CoreEditingCommands","CoreEditingCommand","runCoreEditingCommand","LineBreakInsert","writable","pushUndoStop","executeCommands","lineBreakInsert","s","Outdent","editorTextFocus","tabDoesNotMoveFocus","outdent","Tab","tab","DeleteLeft","deleteLeft","getPrevEditOperationType","shouldPushStackElementBefore","commands","setPrevEditOperationType","DeleteRight","deleteRight","Undo","hasModel","getOption","getModel","undo","Redo","redo","EditorHandlerCommand","handlerId","_handlerId","trigger","registerOverwritableCommand"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { isFirefox } from '../../../base/browser/browser.js';\r\nimport * as types from '../../../base/common/types.js';\r\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from '../editorExtensions.js';\r\nimport { ICodeEditorService } from '../services/codeEditorService.js';\r\nimport { ColumnSelection } from '../../common/controller/cursorColumnSelection.js';\r\nimport { CursorState } from '../../common/controller/cursorCommon.js';\r\nimport { DeleteOperations } from '../../common/controller/cursorDeleteOperations.js';\r\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\r\nimport { TypeOperations } from '../../common/controller/cursorTypeOperations.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\r\nimport { KeybindingsRegistry } from '../../../platform/keybinding/common/keybindingsRegistry.js';\r\nconst CORE_WEIGHT = 0 /* EditorCore */;\r\nexport class CoreEditorCommand extends EditorCommand {\r\n    runEditorCommand(accessor, editor, args) {\r\n        const viewModel = editor._getViewModel();\r\n        if (!viewModel) {\r\n            // the editor has no view => has no cursors\r\n            return;\r\n        }\r\n        this.runCoreEditorCommand(viewModel, args || {});\r\n    }\r\n}\r\nexport var EditorScroll_;\r\n(function (EditorScroll_) {\r\n    const isEditorScrollArgs = function (arg) {\r\n        if (!types.isObject(arg)) {\r\n            return false;\r\n        }\r\n        const scrollArg = arg;\r\n        if (!types.isString(scrollArg.to)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    EditorScroll_.description = {\r\n        description: 'Scroll editor in the given direction',\r\n        args: [\r\n            {\r\n                name: 'Editor scroll argument object',\r\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\r\n                constraint: isEditorScrollArgs,\r\n                schema: {\r\n                    'type': 'object',\r\n                    'required': ['to'],\r\n                    'properties': {\r\n                        'to': {\r\n                            'type': 'string',\r\n                            'enum': ['up', 'down']\r\n                        },\r\n                        'by': {\r\n                            'type': 'string',\r\n                            'enum': ['line', 'wrappedLine', 'page', 'halfPage']\r\n                        },\r\n                        'value': {\r\n                            'type': 'number',\r\n                            'default': 1\r\n                        },\r\n                        'revealCursor': {\r\n                            'type': 'boolean',\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    /**\r\n     * Directions in the view for editor scroll command.\r\n     */\r\n    EditorScroll_.RawDirection = {\r\n        Up: 'up',\r\n        Down: 'down',\r\n    };\r\n    /**\r\n     * Units for editor scroll 'by' argument\r\n     */\r\n    EditorScroll_.RawUnit = {\r\n        Line: 'line',\r\n        WrappedLine: 'wrappedLine',\r\n        Page: 'page',\r\n        HalfPage: 'halfPage'\r\n    };\r\n    function parse(args) {\r\n        let direction;\r\n        switch (args.to) {\r\n            case EditorScroll_.RawDirection.Up:\r\n                direction = 1 /* Up */;\r\n                break;\r\n            case EditorScroll_.RawDirection.Down:\r\n                direction = 2 /* Down */;\r\n                break;\r\n            default:\r\n                // Illegal arguments\r\n                return null;\r\n        }\r\n        let unit;\r\n        switch (args.by) {\r\n            case EditorScroll_.RawUnit.Line:\r\n                unit = 1 /* Line */;\r\n                break;\r\n            case EditorScroll_.RawUnit.WrappedLine:\r\n                unit = 2 /* WrappedLine */;\r\n                break;\r\n            case EditorScroll_.RawUnit.Page:\r\n                unit = 3 /* Page */;\r\n                break;\r\n            case EditorScroll_.RawUnit.HalfPage:\r\n                unit = 4 /* HalfPage */;\r\n                break;\r\n            default:\r\n                unit = 2 /* WrappedLine */;\r\n        }\r\n        const value = Math.floor(args.value || 1);\r\n        const revealCursor = !!args.revealCursor;\r\n        return {\r\n            direction: direction,\r\n            unit: unit,\r\n            value: value,\r\n            revealCursor: revealCursor,\r\n            select: (!!args.select)\r\n        };\r\n    }\r\n    EditorScroll_.parse = parse;\r\n})(EditorScroll_ || (EditorScroll_ = {}));\r\nexport var RevealLine_;\r\n(function (RevealLine_) {\r\n    const isRevealLineArgs = function (arg) {\r\n        if (!types.isObject(arg)) {\r\n            return false;\r\n        }\r\n        const reveaLineArg = arg;\r\n        if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    RevealLine_.description = {\r\n        description: 'Reveal the given line at the given logical position',\r\n        args: [\r\n            {\r\n                name: 'Reveal line argument object',\r\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed .\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\r\n                constraint: isRevealLineArgs,\r\n                schema: {\r\n                    'type': 'object',\r\n                    'required': ['lineNumber'],\r\n                    'properties': {\r\n                        'lineNumber': {\r\n                            'type': ['number', 'string'],\r\n                        },\r\n                        'at': {\r\n                            'type': 'string',\r\n                            'enum': ['top', 'center', 'bottom']\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    /**\r\n     * Values for reveal line 'at' argument\r\n     */\r\n    RevealLine_.RawAtArgument = {\r\n        Top: 'top',\r\n        Center: 'center',\r\n        Bottom: 'bottom'\r\n    };\r\n})(RevealLine_ || (RevealLine_ = {}));\r\nclass EditorOrNativeTextInputCommand {\r\n    constructor(target) {\r\n        // 1. handle case when focus is in editor.\r\n        target.addImplementation(10000, (accessor, args) => {\r\n            // Only if editor text focus (i.e. not if editor has widget focus).\r\n            const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\r\n            if (focusedEditor && focusedEditor.hasTextFocus()) {\r\n                return this._runEditorCommand(accessor, focusedEditor, args);\r\n            }\r\n            return false;\r\n        });\r\n        // 2. handle case when focus is in some other `input` / `textarea`.\r\n        target.addImplementation(1000, (accessor, args) => {\r\n            // Only if focused on an element that allows for entering text\r\n            const activeElement = document.activeElement;\r\n            if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\r\n                this.runDOMCommand();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        // 3. (default) handle case when focus is somewhere else.\r\n        target.addImplementation(0, (accessor, args) => {\r\n            // Redirecting to active editor\r\n            const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\r\n            if (activeEditor) {\r\n                activeEditor.focus();\r\n                return this._runEditorCommand(accessor, activeEditor, args);\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n    _runEditorCommand(accessor, editor, args) {\r\n        const result = this.runEditorCommand(accessor, editor, args);\r\n        if (result) {\r\n            return result;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport var CoreNavigationCommands;\r\n(function (CoreNavigationCommands) {\r\n    class BaseMoveToCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\r\n            ]);\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\r\n        id: '_moveTo',\r\n        inSelectionMode: false,\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\r\n        id: '_moveToSelect',\r\n        inSelectionMode: true,\r\n        precondition: undefined\r\n    }));\r\n    class ColumnSelectCommand extends CoreEditorCommand {\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\r\n            viewModel.setCursorColumnSelectData({\r\n                isReal: true,\r\n                fromViewLineNumber: result.fromLineNumber,\r\n                fromViewVisualColumn: result.fromVisualColumn,\r\n                toViewLineNumber: result.toLineNumber,\r\n                toViewVisualColumn: result.toVisualColumn\r\n            });\r\n            if (result.reversed) {\r\n                viewModel.revealTopMostCursor(args.source);\r\n            }\r\n            else {\r\n                viewModel.revealBottomMostCursor(args.source);\r\n            }\r\n        }\r\n    }\r\n    CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'columnSelect',\r\n                precondition: undefined\r\n            });\r\n        }\r\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\r\n            // validate `args`\r\n            const validatedPosition = viewModel.model.validatePosition(args.position);\r\n            const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\r\n            let fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\r\n            let fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\r\n            return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\r\n        }\r\n    });\r\n    CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'cursorColumnSelectLeft',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 15 /* LeftArrow */,\r\n                    linux: { primary: 0 }\r\n                }\r\n            });\r\n        }\r\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\r\n            return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\r\n        }\r\n    });\r\n    CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'cursorColumnSelectRight',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 17 /* RightArrow */,\r\n                    linux: { primary: 0 }\r\n                }\r\n            });\r\n        }\r\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\r\n            return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\r\n        }\r\n    });\r\n    class ColumnSelectUpCommand extends ColumnSelectCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._isPaged = opts.isPaged;\r\n        }\r\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\r\n            return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\r\n        isPaged: false,\r\n        id: 'cursorColumnSelectUp',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 16 /* UpArrow */,\r\n            linux: { primary: 0 }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\r\n        isPaged: true,\r\n        id: 'cursorColumnSelectPageUp',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 11 /* PageUp */,\r\n            linux: { primary: 0 }\r\n        }\r\n    }));\r\n    class ColumnSelectDownCommand extends ColumnSelectCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._isPaged = opts.isPaged;\r\n        }\r\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\r\n            return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\r\n        isPaged: false,\r\n        id: 'cursorColumnSelectDown',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 18 /* DownArrow */,\r\n            linux: { primary: 0 }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\r\n        isPaged: true,\r\n        id: 'cursorColumnSelectPageDown',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 12 /* PageDown */,\r\n            linux: { primary: 0 }\r\n        }\r\n    }));\r\n    class CursorMoveImpl extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'cursorMove',\r\n                precondition: undefined,\r\n                description: CursorMove_.description\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const parsed = CursorMove_.parse(args);\r\n            if (!parsed) {\r\n                // illegal arguments\r\n                return;\r\n            }\r\n            this._runCursorMove(viewModel, args.source, parsed);\r\n        }\r\n        _runCursorMove(viewModel, source, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(source, 3 /* Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\r\n            viewModel.revealPrimaryCursor(source, true);\r\n        }\r\n        static _move(viewModel, cursors, args) {\r\n            const inSelectionMode = args.select;\r\n            const value = args.value;\r\n            switch (args.direction) {\r\n                case 0 /* Left */:\r\n                case 1 /* Right */:\r\n                case 2 /* Up */:\r\n                case 3 /* Down */:\r\n                case 4 /* WrappedLineStart */:\r\n                case 5 /* WrappedLineFirstNonWhitespaceCharacter */:\r\n                case 6 /* WrappedLineColumnCenter */:\r\n                case 7 /* WrappedLineEnd */:\r\n                case 8 /* WrappedLineLastNonWhitespaceCharacter */:\r\n                    return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\r\n                case 9 /* ViewPortTop */:\r\n                case 11 /* ViewPortBottom */:\r\n                case 10 /* ViewPortCenter */:\r\n                case 12 /* ViewPortIfOutside */:\r\n                    return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\r\n    CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\r\n    class CursorMoveBasedCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._staticArgs = opts.args;\r\n        }\r\n        runCoreEditorCommand(viewModel, dynamicArgs) {\r\n            let args = this._staticArgs;\r\n            if (this._staticArgs.value === -1 /* PAGE_SIZE_MARKER */) {\r\n                // -1 is a marker for page size\r\n                args = {\r\n                    direction: this._staticArgs.direction,\r\n                    unit: this._staticArgs.unit,\r\n                    select: this._staticArgs.select,\r\n                    value: viewModel.cursorConfig.pageSize\r\n                };\r\n            }\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(dynamicArgs.source, 3 /* Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\r\n            viewModel.revealPrimaryCursor(dynamicArgs.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 0 /* Left */,\r\n            unit: 0 /* None */,\r\n            select: false,\r\n            value: 1\r\n        },\r\n        id: 'cursorLeft',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 15 /* LeftArrow */,\r\n            mac: { primary: 15 /* LeftArrow */, secondary: [256 /* WinCtrl */ | 32 /* KEY_B */] }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 0 /* Left */,\r\n            unit: 0 /* None */,\r\n            select: true,\r\n            value: 1\r\n        },\r\n        id: 'cursorLeftSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 15 /* LeftArrow */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 1 /* Right */,\r\n            unit: 0 /* None */,\r\n            select: false,\r\n            value: 1\r\n        },\r\n        id: 'cursorRight',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 17 /* RightArrow */,\r\n            mac: { primary: 17 /* RightArrow */, secondary: [256 /* WinCtrl */ | 36 /* KEY_F */] }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 1 /* Right */,\r\n            unit: 0 /* None */,\r\n            select: true,\r\n            value: 1\r\n        },\r\n        id: 'cursorRightSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 17 /* RightArrow */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 2 /* Up */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: false,\r\n            value: 1\r\n        },\r\n        id: 'cursorUp',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 16 /* UpArrow */,\r\n            mac: { primary: 16 /* UpArrow */, secondary: [256 /* WinCtrl */ | 46 /* KEY_P */] }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 2 /* Up */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: true,\r\n            value: 1\r\n        },\r\n        id: 'cursorUpSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 16 /* UpArrow */,\r\n            secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 16 /* UpArrow */],\r\n            mac: { primary: 1024 /* Shift */ | 16 /* UpArrow */ },\r\n            linux: { primary: 1024 /* Shift */ | 16 /* UpArrow */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 2 /* Up */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: false,\r\n            value: -1 /* PAGE_SIZE_MARKER */\r\n        },\r\n        id: 'cursorPageUp',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 11 /* PageUp */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 2 /* Up */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: true,\r\n            value: -1 /* PAGE_SIZE_MARKER */\r\n        },\r\n        id: 'cursorPageUpSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 11 /* PageUp */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 3 /* Down */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: false,\r\n            value: 1\r\n        },\r\n        id: 'cursorDown',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 18 /* DownArrow */,\r\n            mac: { primary: 18 /* DownArrow */, secondary: [256 /* WinCtrl */ | 44 /* KEY_N */] }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 3 /* Down */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: true,\r\n            value: 1\r\n        },\r\n        id: 'cursorDownSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 18 /* DownArrow */,\r\n            secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 18 /* DownArrow */],\r\n            mac: { primary: 1024 /* Shift */ | 18 /* DownArrow */ },\r\n            linux: { primary: 1024 /* Shift */ | 18 /* DownArrow */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 3 /* Down */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: false,\r\n            value: -1 /* PAGE_SIZE_MARKER */\r\n        },\r\n        id: 'cursorPageDown',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 12 /* PageDown */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 3 /* Down */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: true,\r\n            value: -1 /* PAGE_SIZE_MARKER */\r\n        },\r\n        id: 'cursorPageDownSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 12 /* PageDown */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'createCursor',\r\n                precondition: undefined\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            let newState;\r\n            if (args.wholeLine) {\r\n                newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\r\n            }\r\n            else {\r\n                newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\r\n            }\r\n            const states = viewModel.getCursorStates();\r\n            // Check if we should remove a cursor (sort of like a toggle)\r\n            if (states.length > 1) {\r\n                const newModelPosition = (newState.modelState ? newState.modelState.position : null);\r\n                const newViewPosition = (newState.viewState ? newState.viewState.position : null);\r\n                for (let i = 0, len = states.length; i < len; i++) {\r\n                    const state = states[i];\r\n                    if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\r\n                        continue;\r\n                    }\r\n                    if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\r\n                        continue;\r\n                    }\r\n                    // => Remove the cursor\r\n                    states.splice(i, 1);\r\n                    viewModel.model.pushStackElement();\r\n                    viewModel.setCursorStates(args.source, 3 /* Explicit */, states);\r\n                    return;\r\n                }\r\n            }\r\n            // => Add the new cursor\r\n            states.push(newState);\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, states);\r\n        }\r\n    });\r\n    CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: '_lastCursorMoveToSelect',\r\n                precondition: undefined\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\r\n            const states = viewModel.getCursorStates();\r\n            const newStates = states.slice(0);\r\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\r\n        }\r\n    });\r\n    class HomeCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorHome',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 14 /* Home */,\r\n            mac: { primary: 14 /* Home */, secondary: [2048 /* CtrlCmd */ | 15 /* LeftArrow */] }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorHomeSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 14 /* Home */,\r\n            mac: { primary: 1024 /* Shift */ | 14 /* Home */, secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 15 /* LeftArrow */] }\r\n        }\r\n    }));\r\n    class LineStartCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, this._exec(viewModel.getCursorStates()));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n        _exec(cursors) {\r\n            const result = [];\r\n            for (let i = 0, len = cursors.length; i < len; i++) {\r\n                const cursor = cursors[i];\r\n                const lineNumber = cursor.modelState.position.lineNumber;\r\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorLineStart',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 0,\r\n            mac: { primary: 256 /* WinCtrl */ | 31 /* KEY_A */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorLineStartSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 0,\r\n            mac: { primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 31 /* KEY_A */ }\r\n        }\r\n    }));\r\n    class EndCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorEnd',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            args: { sticky: false },\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 13 /* End */,\r\n            mac: { primary: 13 /* End */, secondary: [2048 /* CtrlCmd */ | 17 /* RightArrow */] }\r\n        },\r\n        description: {\r\n            description: `Go to End`,\r\n            args: [{\r\n                    name: 'args',\r\n                    schema: {\r\n                        type: 'object',\r\n                        properties: {\r\n                            'sticky': {\r\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\r\n                                type: 'boolean',\r\n                                default: false\r\n                            }\r\n                        }\r\n                    }\r\n                }]\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorEndSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            args: { sticky: false },\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 13 /* End */,\r\n            mac: { primary: 1024 /* Shift */ | 13 /* End */, secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 17 /* RightArrow */] }\r\n        },\r\n        description: {\r\n            description: `Select to End`,\r\n            args: [{\r\n                    name: 'args',\r\n                    schema: {\r\n                        type: 'object',\r\n                        properties: {\r\n                            'sticky': {\r\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\r\n                                type: 'boolean',\r\n                                default: false\r\n                            }\r\n                        }\r\n                    }\r\n                }]\r\n        }\r\n    }));\r\n    class LineEndCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n        _exec(viewModel, cursors) {\r\n            const result = [];\r\n            for (let i = 0, len = cursors.length; i < len; i++) {\r\n                const cursor = cursors[i];\r\n                const lineNumber = cursor.modelState.position.lineNumber;\r\n                const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\r\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorLineEnd',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 0,\r\n            mac: { primary: 256 /* WinCtrl */ | 35 /* KEY_E */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorLineEndSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 0,\r\n            mac: { primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 35 /* KEY_E */ }\r\n        }\r\n    }));\r\n    class TopCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorTop',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 14 /* Home */,\r\n            mac: { primary: 2048 /* CtrlCmd */ | 16 /* UpArrow */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorTopSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 14 /* Home */,\r\n            mac: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 16 /* UpArrow */ }\r\n        }\r\n    }));\r\n    class BottomCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorBottom',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 13 /* End */,\r\n            mac: { primary: 2048 /* CtrlCmd */ | 18 /* DownArrow */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorBottomSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 13 /* End */,\r\n            mac: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 18 /* DownArrow */ }\r\n        }\r\n    }));\r\n    class EditorScrollImpl extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'editorScroll',\r\n                precondition: undefined,\r\n                description: EditorScroll_.description\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const parsed = EditorScroll_.parse(args);\r\n            if (!parsed) {\r\n                // illegal arguments\r\n                return;\r\n            }\r\n            this._runEditorScroll(viewModel, args.source, parsed);\r\n        }\r\n        _runEditorScroll(viewModel, source, args) {\r\n            const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\r\n            if (args.revealCursor) {\r\n                // must ensure cursor is in new visible range\r\n                const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\r\n                viewModel.setCursorStates(source, 3 /* Explicit */, [\r\n                    CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)\r\n                ]);\r\n            }\r\n            viewModel.setScrollTop(desiredScrollTop, 0 /* Smooth */);\r\n        }\r\n        _computeDesiredScrollTop(viewModel, args) {\r\n            if (args.unit === 1 /* Line */) {\r\n                // scrolling by model lines\r\n                const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\r\n                const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\r\n                let desiredTopModelLineNumber;\r\n                if (args.direction === 1 /* Up */) {\r\n                    // must go x model lines up\r\n                    desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\r\n                }\r\n                else {\r\n                    // must go x model lines down\r\n                    desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\r\n                }\r\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\r\n                return viewModel.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\r\n            }\r\n            let noOfLines;\r\n            if (args.unit === 3 /* Page */) {\r\n                noOfLines = viewModel.cursorConfig.pageSize * args.value;\r\n            }\r\n            else if (args.unit === 4 /* HalfPage */) {\r\n                noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\r\n            }\r\n            else {\r\n                noOfLines = args.value;\r\n            }\r\n            const deltaLines = (args.direction === 1 /* Up */ ? -1 : 1) * noOfLines;\r\n            return viewModel.getScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\r\n        }\r\n    }\r\n    CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\r\n    CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\r\n    CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'scrollLineUp',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 16 /* UpArrow */,\r\n                    mac: { primary: 256 /* WinCtrl */ | 11 /* PageUp */ }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\r\n                direction: 1 /* Up */,\r\n                unit: 2 /* WrappedLine */,\r\n                value: 1,\r\n                revealCursor: false,\r\n                select: false\r\n            });\r\n        }\r\n    });\r\n    CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'scrollPageUp',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 11 /* PageUp */,\r\n                    win: { primary: 512 /* Alt */ | 11 /* PageUp */ },\r\n                    linux: { primary: 512 /* Alt */ | 11 /* PageUp */ }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\r\n                direction: 1 /* Up */,\r\n                unit: 3 /* Page */,\r\n                value: 1,\r\n                revealCursor: false,\r\n                select: false\r\n            });\r\n        }\r\n    });\r\n    CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'scrollLineDown',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 18 /* DownArrow */,\r\n                    mac: { primary: 256 /* WinCtrl */ | 12 /* PageDown */ }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\r\n                direction: 2 /* Down */,\r\n                unit: 2 /* WrappedLine */,\r\n                value: 1,\r\n                revealCursor: false,\r\n                select: false\r\n            });\r\n        }\r\n    });\r\n    CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'scrollPageDown',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 12 /* PageDown */,\r\n                    win: { primary: 512 /* Alt */ | 12 /* PageDown */ },\r\n                    linux: { primary: 512 /* Alt */ | 12 /* PageDown */ }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\r\n                direction: 2 /* Down */,\r\n                unit: 3 /* Page */,\r\n                value: 1,\r\n                revealCursor: false,\r\n                select: false\r\n            });\r\n        }\r\n    });\r\n    class WordCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)\r\n            ]);\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\r\n        inSelectionMode: false,\r\n        id: '_wordSelect',\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\r\n        inSelectionMode: true,\r\n        id: '_wordSelectDrag',\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'lastCursorWordSelect',\r\n                precondition: undefined\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\r\n            const states = viewModel.getCursorStates();\r\n            const newStates = states.slice(0);\r\n            const lastAddedState = states[lastAddedCursorIndex];\r\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\r\n        }\r\n    });\r\n    class LineCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\r\n            ]);\r\n            viewModel.revealPrimaryCursor(args.source, false);\r\n        }\r\n    }\r\n    CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\r\n        inSelectionMode: false,\r\n        id: '_lineSelect',\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\r\n        inSelectionMode: true,\r\n        id: '_lineSelectDrag',\r\n        precondition: undefined\r\n    }));\r\n    class LastCursorLineCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\r\n            const states = viewModel.getCursorStates();\r\n            const newStates = states.slice(0);\r\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\r\n        }\r\n    }\r\n    CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\r\n        inSelectionMode: false,\r\n        id: 'lastCursorLineSelect',\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\r\n        inSelectionMode: true,\r\n        id: 'lastCursorLineSelectDrag',\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.ExpandLineSelection = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'expandLineSelection',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 42 /* KEY_L */\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.expandLineSelection(viewModel, viewModel.getCursorStates()));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    });\r\n    CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'cancelSelection',\r\n                precondition: EditorContextKeys.hasNonEmptySelection,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 9 /* Escape */,\r\n                    secondary: [1024 /* Shift */ | 9 /* Escape */]\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())\r\n            ]);\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    });\r\n    CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'removeSecondaryCursors',\r\n                precondition: EditorContextKeys.hasMultipleSelections,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT + 1,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 9 /* Escape */,\r\n                    secondary: [1024 /* Shift */ | 9 /* Escape */]\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                viewModel.getPrimaryCursorState()\r\n            ]);\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    });\r\n    CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'revealLine',\r\n                precondition: undefined,\r\n                description: RevealLine_.description\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const revealLineArg = args;\r\n            const lineNumberArg = revealLineArg.lineNumber || 0;\r\n            let lineNumber = typeof lineNumberArg === 'number' ? (lineNumberArg + 1) : (parseInt(lineNumberArg) + 1);\r\n            if (lineNumber < 1) {\r\n                lineNumber = 1;\r\n            }\r\n            const lineCount = viewModel.model.getLineCount();\r\n            if (lineNumber > lineCount) {\r\n                lineNumber = lineCount;\r\n            }\r\n            const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\r\n            let revealAt = 0 /* Simple */;\r\n            if (revealLineArg.at) {\r\n                switch (revealLineArg.at) {\r\n                    case RevealLine_.RawAtArgument.Top:\r\n                        revealAt = 3 /* Top */;\r\n                        break;\r\n                    case RevealLine_.RawAtArgument.Center:\r\n                        revealAt = 1 /* Center */;\r\n                        break;\r\n                    case RevealLine_.RawAtArgument.Bottom:\r\n                        revealAt = 4 /* Bottom */;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\r\n            viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* Smooth */);\r\n        }\r\n    });\r\n    CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\r\n        constructor() {\r\n            super(SelectAllCommand);\r\n        }\r\n        runDOMCommand() {\r\n            if (isFirefox) {\r\n                document.activeElement.focus();\r\n                document.activeElement.select();\r\n            }\r\n            document.execCommand('selectAll');\r\n        }\r\n        runEditorCommand(accessor, editor, args) {\r\n            const viewModel = editor._getViewModel();\r\n            if (!viewModel) {\r\n                // the editor has no view => has no cursors\r\n                return;\r\n            }\r\n            this.runCoreEditorCommand(viewModel, args);\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates('keyboard', 3 /* Explicit */, [\r\n                CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())\r\n            ]);\r\n        }\r\n    }();\r\n    CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'setSelection',\r\n                precondition: undefined\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                CursorState.fromModelSelection(args.selection)\r\n            ]);\r\n        }\r\n    });\r\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\r\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\r\nfunction registerColumnSelection(id, keybinding) {\r\n    KeybindingsRegistry.registerKeybindingRule({\r\n        id: id,\r\n        primary: keybinding,\r\n        when: columnSelectionCondition,\r\n        weight: CORE_WEIGHT + 1\r\n    });\r\n}\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* Shift */ | 15 /* LeftArrow */);\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* Shift */ | 17 /* RightArrow */);\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* Shift */ | 16 /* UpArrow */);\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* Shift */ | 11 /* PageUp */);\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* Shift */ | 18 /* DownArrow */);\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* Shift */ | 12 /* PageDown */);\r\nfunction registerCommand(command) {\r\n    command.register();\r\n    return command;\r\n}\r\nexport var CoreEditingCommands;\r\n(function (CoreEditingCommands) {\r\n    class CoreEditingCommand extends EditorCommand {\r\n        runEditorCommand(accessor, editor, args) {\r\n            const viewModel = editor._getViewModel();\r\n            if (!viewModel) {\r\n                // the editor has no view => has no cursors\r\n                return;\r\n            }\r\n            this.runCoreEditingCommand(editor, viewModel, args || {});\r\n        }\r\n    }\r\n    CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\r\n    CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'lineBreakInsert',\r\n                precondition: EditorContextKeys.writable,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 0,\r\n                    mac: { primary: 256 /* WinCtrl */ | 45 /* KEY_O */ }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditingCommand(editor, viewModel, args) {\r\n            editor.pushUndoStop();\r\n            editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\r\n        }\r\n    });\r\n    CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'outdent',\r\n                precondition: EditorContextKeys.writable,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\r\n                    primary: 1024 /* Shift */ | 2 /* Tab */\r\n                }\r\n            });\r\n        }\r\n        runCoreEditingCommand(editor, viewModel, args) {\r\n            editor.pushUndoStop();\r\n            editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\r\n            editor.pushUndoStop();\r\n        }\r\n    });\r\n    CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'tab',\r\n                precondition: EditorContextKeys.writable,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\r\n                    primary: 2 /* Tab */\r\n                }\r\n            });\r\n        }\r\n        runCoreEditingCommand(editor, viewModel, args) {\r\n            editor.pushUndoStop();\r\n            editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\r\n            editor.pushUndoStop();\r\n        }\r\n    });\r\n    CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'deleteLeft',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 1 /* Backspace */,\r\n                    secondary: [1024 /* Shift */ | 1 /* Backspace */],\r\n                    mac: { primary: 1 /* Backspace */, secondary: [1024 /* Shift */ | 1 /* Backspace */, 256 /* WinCtrl */ | 38 /* KEY_H */, 256 /* WinCtrl */ | 1 /* Backspace */] }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditingCommand(editor, viewModel, args) {\r\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\r\n            if (shouldPushStackElementBefore) {\r\n                editor.pushUndoStop();\r\n            }\r\n            editor.executeCommands(this.id, commands);\r\n            viewModel.setPrevEditOperationType(2 /* DeletingLeft */);\r\n        }\r\n    });\r\n    CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'deleteRight',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 20 /* Delete */,\r\n                    mac: { primary: 20 /* Delete */, secondary: [256 /* WinCtrl */ | 34 /* KEY_D */, 256 /* WinCtrl */ | 20 /* Delete */] }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditingCommand(editor, viewModel, args) {\r\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\r\n            if (shouldPushStackElementBefore) {\r\n                editor.pushUndoStop();\r\n            }\r\n            editor.executeCommands(this.id, commands);\r\n            viewModel.setPrevEditOperationType(3 /* DeletingRight */);\r\n        }\r\n    });\r\n    CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\r\n        constructor() {\r\n            super(UndoCommand);\r\n        }\r\n        runDOMCommand() {\r\n            document.execCommand('undo');\r\n        }\r\n        runEditorCommand(accessor, editor, args) {\r\n            if (!editor.hasModel() || editor.getOption(75 /* readOnly */) === true) {\r\n                return;\r\n            }\r\n            return editor.getModel().undo();\r\n        }\r\n    }();\r\n    CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\r\n        constructor() {\r\n            super(RedoCommand);\r\n        }\r\n        runDOMCommand() {\r\n            document.execCommand('redo');\r\n        }\r\n        runEditorCommand(accessor, editor, args) {\r\n            if (!editor.hasModel() || editor.getOption(75 /* readOnly */) === true) {\r\n                return;\r\n            }\r\n            return editor.getModel().redo();\r\n        }\r\n    }();\r\n})(CoreEditingCommands || (CoreEditingCommands = {}));\r\n/**\r\n * A command that will invoke a command on the focused editor.\r\n */\r\nclass EditorHandlerCommand extends Command {\r\n    constructor(id, handlerId, description) {\r\n        super({\r\n            id: id,\r\n            precondition: undefined,\r\n            description: description\r\n        });\r\n        this._handlerId = handlerId;\r\n    }\r\n    runCommand(accessor, args) {\r\n        const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\r\n        if (!editor) {\r\n            return;\r\n        }\r\n        editor.trigger('keyboard', this._handlerId, args);\r\n    }\r\n}\r\nfunction registerOverwritableCommand(handlerId, description) {\r\n    registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\r\n    registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\r\n}\r\nregisterOverwritableCommand(\"type\" /* Type */, {\r\n    description: `Type`,\r\n    args: [{\r\n            name: 'args',\r\n            schema: {\r\n                'type': 'object',\r\n                'required': ['text'],\r\n                'properties': {\r\n                    'text': {\r\n                        'type': 'string'\r\n                    }\r\n                },\r\n            }\r\n        }]\r\n});\r\nregisterOverwritableCommand(\"replacePreviousChar\" /* ReplacePreviousChar */);\r\nregisterOverwritableCommand(\"compositionStart\" /* CompositionStart */);\r\nregisterOverwritableCommand(\"compositionEnd\" /* CompositionEnd */);\r\nregisterOverwritableCommand(\"paste\" /* Paste */);\r\nregisterOverwritableCommand(\"cut\" /* Cut */);\r\n"]},"metadata":{},"sourceType":"module"}