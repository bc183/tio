{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\r\n * Iterates over each entry in the provided dictionary. The iterator allows\r\n * to remove elements and will stop when the callback returns {{false}}.\r\n */\n\nexport function forEach(from, callback) {\n  var _loop = function _loop(key) {\n    if (hasOwnProperty.call(from, key)) {\n      var result = callback({\n        key: key,\n        value: from[key]\n      }, function () {\n        delete from[key];\n      });\n\n      if (result === false) {\n        return {\n          v: void 0\n        };\n      }\n    }\n  };\n\n  for (var key in from) {\n    var _ret = _loop(key);\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n}\nexport var SetMap = /*#__PURE__*/function () {\n  function SetMap() {\n    _classCallCheck(this, SetMap);\n\n    this.map = new Map();\n  }\n\n  _createClass(SetMap, [{\n    key: \"add\",\n    value: function add(key, value) {\n      var values = this.map.get(key);\n\n      if (!values) {\n        values = new Set();\n        this.map.set(key, values);\n      }\n\n      values.add(value);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key, value) {\n      var values = this.map.get(key);\n\n      if (!values) {\n        return;\n      }\n\n      values[\"delete\"](value);\n\n      if (values.size === 0) {\n        this.map[\"delete\"](key);\n      }\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(key, fn) {\n      var values = this.map.get(key);\n\n      if (!values) {\n        return;\n      }\n\n      values.forEach(fn);\n    }\n  }]);\n\n  return SetMap;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/common/collections.js"],"names":["hasOwnProperty","Object","prototype","forEach","from","callback","key","call","result","value","SetMap","map","Map","values","get","Set","set","add","size","fn"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,IAAMA,cAAc,GAAGC,MAAM,CAACC,SAAP,CAAiBF,cAAxC;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,OAAT,CAAiBC,IAAjB,EAAuBC,QAAvB,EAAiC;AAAA,6BAC3BC,GAD2B;AAEhC,QAAIN,cAAc,CAACO,IAAf,CAAoBH,IAApB,EAA0BE,GAA1B,CAAJ,EAAoC;AAChC,UAAME,MAAM,GAAGH,QAAQ,CAAC;AAAEC,QAAAA,GAAG,EAAEA,GAAP;AAAYG,QAAAA,KAAK,EAAEL,IAAI,CAACE,GAAD;AAAvB,OAAD,EAAiC,YAAY;AAChE,eAAOF,IAAI,CAACE,GAAD,CAAX;AACH,OAFsB,CAAvB;;AAGA,UAAIE,MAAM,KAAK,KAAf,EAAsB;AAClB;AAAA;AAAA;AACH;AACJ;AAT+B;;AACpC,OAAK,IAAIF,GAAT,IAAgBF,IAAhB,EAAsB;AAAA,qBAAbE,GAAa;;AAAA;AASrB;AACJ;AACD,WAAaI,MAAb;AACI,oBAAc;AAAA;;AACV,SAAKC,GAAL,GAAW,IAAIC,GAAJ,EAAX;AACH;;AAHL;AAAA;AAAA,wBAIQN,GAJR,EAIaG,KAJb,EAIoB;AACZ,UAAII,MAAM,GAAG,KAAKF,GAAL,CAASG,GAAT,CAAaR,GAAb,CAAb;;AACA,UAAI,CAACO,MAAL,EAAa;AACTA,QAAAA,MAAM,GAAG,IAAIE,GAAJ,EAAT;AACA,aAAKJ,GAAL,CAASK,GAAT,CAAaV,GAAb,EAAkBO,MAAlB;AACH;;AACDA,MAAAA,MAAM,CAACI,GAAP,CAAWR,KAAX;AACH;AAXL;AAAA;AAAA,4BAYWH,GAZX,EAYgBG,KAZhB,EAYuB;AACf,UAAMI,MAAM,GAAG,KAAKF,GAAL,CAASG,GAAT,CAAaR,GAAb,CAAf;;AACA,UAAI,CAACO,MAAL,EAAa;AACT;AACH;;AACDA,MAAAA,MAAM,UAAN,CAAcJ,KAAd;;AACA,UAAII,MAAM,CAACK,IAAP,KAAgB,CAApB,EAAuB;AACnB,aAAKP,GAAL,WAAgBL,GAAhB;AACH;AACJ;AArBL;AAAA;AAAA,4BAsBYA,GAtBZ,EAsBiBa,EAtBjB,EAsBqB;AACb,UAAMN,MAAM,GAAG,KAAKF,GAAL,CAASG,GAAT,CAAaR,GAAb,CAAf;;AACA,UAAI,CAACO,MAAL,EAAa;AACT;AACH;;AACDA,MAAAA,MAAM,CAACV,OAAP,CAAegB,EAAf;AACH;AA5BL;;AAAA;AAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\n/**\r\n * Iterates over each entry in the provided dictionary. The iterator allows\r\n * to remove elements and will stop when the callback returns {{false}}.\r\n */\r\nexport function forEach(from, callback) {\r\n    for (let key in from) {\r\n        if (hasOwnProperty.call(from, key)) {\r\n            const result = callback({ key: key, value: from[key] }, function () {\r\n                delete from[key];\r\n            });\r\n            if (result === false) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class SetMap {\r\n    constructor() {\r\n        this.map = new Map();\r\n    }\r\n    add(key, value) {\r\n        let values = this.map.get(key);\r\n        if (!values) {\r\n            values = new Set();\r\n            this.map.set(key, values);\r\n        }\r\n        values.add(value);\r\n    }\r\n    delete(key, value) {\r\n        const values = this.map.get(key);\r\n        if (!values) {\r\n            return;\r\n        }\r\n        values.delete(value);\r\n        if (values.size === 0) {\r\n            this.map.delete(key);\r\n        }\r\n    }\r\n    forEach(key, fn) {\r\n        const values = this.map.get(key);\r\n        if (!values) {\r\n            return;\r\n        }\r\n        values.forEach(fn);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}