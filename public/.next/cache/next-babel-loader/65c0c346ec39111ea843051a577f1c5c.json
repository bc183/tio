{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './progressbar.css';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { Color } from '../../../common/color.js';\nimport { mixin } from '../../../common/objects.js';\nimport { show } from '../../dom.js';\nimport { RunOnceScheduler } from '../../../common/async.js';\nvar CSS_DONE = 'done';\nvar CSS_ACTIVE = 'active';\nvar CSS_INFINITE = 'infinite';\nvar CSS_DISCRETE = 'discrete';\nvar defaultOpts = {\n  progressBarBackground: Color.fromHex('#0E70C0')\n};\n/**\r\n * A progress bar with support for infinite or discrete progress.\r\n */\n\nexport var ProgressBar = /*#__PURE__*/function (_Disposable) {\n  _inherits(ProgressBar, _Disposable);\n\n  var _super = _createSuper(ProgressBar);\n\n  function ProgressBar(container, options) {\n    var _this;\n\n    _classCallCheck(this, ProgressBar);\n\n    _this = _super.call(this);\n    _this.options = options || Object.create(null);\n    mixin(_this.options, defaultOpts, false);\n    _this.workedVal = 0;\n    _this.progressBarBackground = _this.options.progressBarBackground;\n\n    _this._register(_this.showDelayedScheduler = new RunOnceScheduler(function () {\n      return show(_this.element);\n    }, 0));\n\n    _this.create(container);\n\n    return _this;\n  }\n\n  _createClass(ProgressBar, [{\n    key: \"create\",\n    value: function create(container) {\n      this.element = document.createElement('div');\n      this.element.classList.add('monaco-progress-container');\n      this.element.setAttribute('role', 'progressbar');\n      this.element.setAttribute('aria-valuemin', '0');\n      container.appendChild(this.element);\n      this.bit = document.createElement('div');\n      this.bit.classList.add('progress-bit');\n      this.element.appendChild(this.bit);\n      this.applyStyles();\n    }\n  }, {\n    key: \"off\",\n    value: function off() {\n      this.bit.style.width = 'inherit';\n      this.bit.style.opacity = '1';\n      this.element.classList.remove(CSS_ACTIVE, CSS_INFINITE, CSS_DISCRETE);\n      this.workedVal = 0;\n      this.totalWork = undefined;\n    }\n    /**\r\n     * Stops the progressbar from showing any progress instantly without fading out.\r\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      return this.doDone(false);\n    }\n  }, {\n    key: \"doDone\",\n    value: function doDone(delayed) {\n      var _this2 = this;\n\n      this.element.classList.add(CSS_DONE); // let it grow to 100% width and hide afterwards\n\n      if (!this.element.classList.contains(CSS_INFINITE)) {\n        this.bit.style.width = 'inherit';\n\n        if (delayed) {\n          setTimeout(function () {\n            return _this2.off();\n          }, 200);\n        } else {\n          this.off();\n        }\n      } // let it fade out and hide afterwards\n      else {\n          this.bit.style.opacity = '0';\n\n          if (delayed) {\n            setTimeout(function () {\n              return _this2.off();\n            }, 200);\n          } else {\n            this.off();\n          }\n        }\n\n      return this;\n    }\n    /**\r\n     * Use this mode to indicate progress that has no total number of work units.\r\n     */\n\n  }, {\n    key: \"infinite\",\n    value: function infinite() {\n      this.bit.style.width = '2%';\n      this.bit.style.opacity = '1';\n      this.element.classList.remove(CSS_DISCRETE, CSS_DONE);\n      this.element.classList.add(CSS_ACTIVE, CSS_INFINITE);\n      return this;\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this.element;\n    }\n  }, {\n    key: \"style\",\n    value: function style(styles) {\n      this.progressBarBackground = styles.progressBarBackground;\n      this.applyStyles();\n    }\n  }, {\n    key: \"applyStyles\",\n    value: function applyStyles() {\n      if (this.bit) {\n        var background = this.progressBarBackground ? this.progressBarBackground.toString() : '';\n        this.bit.style.backgroundColor = background;\n      }\n    }\n  }]);\n\n  return ProgressBar;\n}(Disposable);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/browser/ui/progressbar/progressbar.js"],"names":["Disposable","Color","mixin","show","RunOnceScheduler","CSS_DONE","CSS_ACTIVE","CSS_INFINITE","CSS_DISCRETE","defaultOpts","progressBarBackground","fromHex","ProgressBar","container","options","Object","create","workedVal","_register","showDelayedScheduler","element","document","createElement","classList","add","setAttribute","appendChild","bit","applyStyles","style","width","opacity","remove","totalWork","undefined","doDone","delayed","contains","setTimeout","off","styles","background","toString","backgroundColor"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './progressbar.css';\r\nimport { Disposable } from '../../../common/lifecycle.js';\r\nimport { Color } from '../../../common/color.js';\r\nimport { mixin } from '../../../common/objects.js';\r\nimport { show } from '../../dom.js';\r\nimport { RunOnceScheduler } from '../../../common/async.js';\r\nconst CSS_DONE = 'done';\r\nconst CSS_ACTIVE = 'active';\r\nconst CSS_INFINITE = 'infinite';\r\nconst CSS_DISCRETE = 'discrete';\r\nconst defaultOpts = {\r\n    progressBarBackground: Color.fromHex('#0E70C0')\r\n};\r\n/**\r\n * A progress bar with support for infinite or discrete progress.\r\n */\r\nexport class ProgressBar extends Disposable {\r\n    constructor(container, options) {\r\n        super();\r\n        this.options = options || Object.create(null);\r\n        mixin(this.options, defaultOpts, false);\r\n        this.workedVal = 0;\r\n        this.progressBarBackground = this.options.progressBarBackground;\r\n        this._register(this.showDelayedScheduler = new RunOnceScheduler(() => show(this.element), 0));\r\n        this.create(container);\r\n    }\r\n    create(container) {\r\n        this.element = document.createElement('div');\r\n        this.element.classList.add('monaco-progress-container');\r\n        this.element.setAttribute('role', 'progressbar');\r\n        this.element.setAttribute('aria-valuemin', '0');\r\n        container.appendChild(this.element);\r\n        this.bit = document.createElement('div');\r\n        this.bit.classList.add('progress-bit');\r\n        this.element.appendChild(this.bit);\r\n        this.applyStyles();\r\n    }\r\n    off() {\r\n        this.bit.style.width = 'inherit';\r\n        this.bit.style.opacity = '1';\r\n        this.element.classList.remove(CSS_ACTIVE, CSS_INFINITE, CSS_DISCRETE);\r\n        this.workedVal = 0;\r\n        this.totalWork = undefined;\r\n    }\r\n    /**\r\n     * Stops the progressbar from showing any progress instantly without fading out.\r\n     */\r\n    stop() {\r\n        return this.doDone(false);\r\n    }\r\n    doDone(delayed) {\r\n        this.element.classList.add(CSS_DONE);\r\n        // let it grow to 100% width and hide afterwards\r\n        if (!this.element.classList.contains(CSS_INFINITE)) {\r\n            this.bit.style.width = 'inherit';\r\n            if (delayed) {\r\n                setTimeout(() => this.off(), 200);\r\n            }\r\n            else {\r\n                this.off();\r\n            }\r\n        }\r\n        // let it fade out and hide afterwards\r\n        else {\r\n            this.bit.style.opacity = '0';\r\n            if (delayed) {\r\n                setTimeout(() => this.off(), 200);\r\n            }\r\n            else {\r\n                this.off();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Use this mode to indicate progress that has no total number of work units.\r\n     */\r\n    infinite() {\r\n        this.bit.style.width = '2%';\r\n        this.bit.style.opacity = '1';\r\n        this.element.classList.remove(CSS_DISCRETE, CSS_DONE);\r\n        this.element.classList.add(CSS_ACTIVE, CSS_INFINITE);\r\n        return this;\r\n    }\r\n    getContainer() {\r\n        return this.element;\r\n    }\r\n    style(styles) {\r\n        this.progressBarBackground = styles.progressBarBackground;\r\n        this.applyStyles();\r\n    }\r\n    applyStyles() {\r\n        if (this.bit) {\r\n            const background = this.progressBarBackground ? this.progressBarBackground.toString() : '';\r\n            this.bit.style.backgroundColor = background;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}