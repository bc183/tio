{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/view/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nvar isRenderedUsingBorder = true;\nexport var AbstractLineHighlightOverlay = /*#__PURE__*/function (_DynamicViewOverlay) {\n  _inherits(AbstractLineHighlightOverlay, _DynamicViewOverlay);\n\n  var _super = _createSuper(AbstractLineHighlightOverlay);\n\n  function AbstractLineHighlightOverlay(context) {\n    var _this;\n\n    _classCallCheck(this, AbstractLineHighlightOverlay);\n\n    _this = _super.call(this);\n    _this._context = context;\n    var options = _this._context.configuration.options;\n    var layoutInfo = options.get(124\n    /* layoutInfo */\n    );\n    _this._lineHeight = options.get(53\n    /* lineHeight */\n    );\n    _this._renderLineHighlight = options.get(80\n    /* renderLineHighlight */\n    );\n    _this._renderLineHighlightOnlyWhenFocus = options.get(81\n    /* renderLineHighlightOnlyWhenFocus */\n    );\n    _this._contentLeft = layoutInfo.contentLeft;\n    _this._contentWidth = layoutInfo.contentWidth;\n    _this._selectionIsEmpty = true;\n    _this._focused = false;\n    _this._cursorLineNumbers = [1];\n    _this._selections = [new Selection(1, 1, 1, 1)];\n    _this._renderData = null;\n\n    _this._context.addEventHandler(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(AbstractLineHighlightOverlay, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._context.removeEventHandler(this);\n\n      _get(_getPrototypeOf(AbstractLineHighlightOverlay.prototype), \"dispose\", this).call(this);\n    }\n  }, {\n    key: \"_readFromSelections\",\n    value: function _readFromSelections() {\n      var hasChanged = false; // Only render the first selection when using border\n\n      var renderSelections = isRenderedUsingBorder ? this._selections.slice(0, 1) : this._selections;\n      var cursorsLineNumbers = renderSelections.map(function (s) {\n        return s.positionLineNumber;\n      });\n      cursorsLineNumbers.sort(function (a, b) {\n        return a - b;\n      });\n\n      if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n        this._cursorLineNumbers = cursorsLineNumbers;\n        hasChanged = true;\n      }\n\n      var selectionIsEmpty = renderSelections.every(function (s) {\n        return s.isEmpty();\n      });\n\n      if (this._selectionIsEmpty !== selectionIsEmpty) {\n        this._selectionIsEmpty = selectionIsEmpty;\n        hasChanged = true;\n      }\n\n      return hasChanged;\n    } // --- begin event handlers\n\n  }, {\n    key: \"onThemeChanged\",\n    value: function onThemeChanged(e) {\n      return this._readFromSelections();\n    }\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n      var layoutInfo = options.get(124\n      /* layoutInfo */\n      );\n      this._lineHeight = options.get(53\n      /* lineHeight */\n      );\n      this._renderLineHighlight = options.get(80\n      /* renderLineHighlight */\n      );\n      this._renderLineHighlightOnlyWhenFocus = options.get(81\n      /* renderLineHighlightOnlyWhenFocus */\n      );\n      this._contentLeft = layoutInfo.contentLeft;\n      this._contentWidth = layoutInfo.contentWidth;\n      return true;\n    }\n  }, {\n    key: \"onCursorStateChanged\",\n    value: function onCursorStateChanged(e) {\n      this._selections = e.selections;\n      return this._readFromSelections();\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return e.scrollWidthChanged || e.scrollTopChanged;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onFocusChanged\",\n    value: function onFocusChanged(e) {\n      if (!this._renderLineHighlightOnlyWhenFocus) {\n        return false;\n      }\n\n      this._focused = e.isFocused;\n      return true;\n    } // --- end event handlers\n\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      if (!this._shouldRenderThis()) {\n        this._renderData = null;\n        return;\n      }\n\n      var renderedLine = this._renderOne(ctx);\n\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n      var len = this._cursorLineNumbers.length;\n      var index = 0;\n      var renderData = [];\n\n      for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n        var lineIndex = lineNumber - visibleStartLineNumber;\n\n        while (index < len && this._cursorLineNumbers[index] < lineNumber) {\n          index++;\n        }\n\n        if (index < len && this._cursorLineNumbers[index] === lineNumber) {\n          renderData[lineIndex] = renderedLine;\n        } else {\n          renderData[lineIndex] = '';\n        }\n      }\n\n      this._renderData = renderData;\n    }\n  }, {\n    key: \"render\",\n    value: function render(startLineNumber, lineNumber) {\n      if (!this._renderData) {\n        return '';\n      }\n\n      var lineIndex = lineNumber - startLineNumber;\n\n      if (lineIndex >= this._renderData.length) {\n        return '';\n      }\n\n      return this._renderData[lineIndex];\n    }\n  }]);\n\n  return AbstractLineHighlightOverlay;\n}(DynamicViewOverlay);\nexport var CurrentLineHighlightOverlay = /*#__PURE__*/function (_AbstractLineHighligh) {\n  _inherits(CurrentLineHighlightOverlay, _AbstractLineHighligh);\n\n  var _super2 = _createSuper(CurrentLineHighlightOverlay);\n\n  function CurrentLineHighlightOverlay() {\n    _classCallCheck(this, CurrentLineHighlightOverlay);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(CurrentLineHighlightOverlay, [{\n    key: \"_renderOne\",\n    value: function _renderOne(ctx) {\n      var className = 'current-line' + (this._shouldRenderOther() ? ' current-line-both' : '');\n      return \"<div class=\\\"\".concat(className, \"\\\" style=\\\"width:\").concat(Math.max(ctx.scrollWidth, this._contentWidth), \"px; height:\").concat(this._lineHeight, \"px;\\\"></div>\");\n    }\n  }, {\n    key: \"_shouldRenderThis\",\n    value: function _shouldRenderThis() {\n      return (this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all') && this._selectionIsEmpty && (!this._renderLineHighlightOnlyWhenFocus || this._focused);\n    }\n  }, {\n    key: \"_shouldRenderOther\",\n    value: function _shouldRenderOther() {\n      return (this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all') && (!this._renderLineHighlightOnlyWhenFocus || this._focused);\n    }\n  }]);\n\n  return CurrentLineHighlightOverlay;\n}(AbstractLineHighlightOverlay);\nexport var CurrentLineMarginHighlightOverlay = /*#__PURE__*/function (_AbstractLineHighligh2) {\n  _inherits(CurrentLineMarginHighlightOverlay, _AbstractLineHighligh2);\n\n  var _super3 = _createSuper(CurrentLineMarginHighlightOverlay);\n\n  function CurrentLineMarginHighlightOverlay() {\n    _classCallCheck(this, CurrentLineMarginHighlightOverlay);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(CurrentLineMarginHighlightOverlay, [{\n    key: \"_renderOne\",\n    value: function _renderOne(ctx) {\n      var className = 'current-line' + (this._shouldRenderMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '');\n      return \"<div class=\\\"\".concat(className, \"\\\" style=\\\"width:\").concat(this._contentLeft, \"px; height:\").concat(this._lineHeight, \"px;\\\"></div>\");\n    }\n  }, {\n    key: \"_shouldRenderMargin\",\n    value: function _shouldRenderMargin() {\n      return (this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all') && (!this._renderLineHighlightOnlyWhenFocus || this._focused);\n    }\n  }, {\n    key: \"_shouldRenderThis\",\n    value: function _shouldRenderThis() {\n      return true;\n    }\n  }, {\n    key: \"_shouldRenderOther\",\n    value: function _shouldRenderOther() {\n      return (this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all') && this._selectionIsEmpty && (!this._renderLineHighlightOnlyWhenFocus || this._focused);\n    }\n  }]);\n\n  return CurrentLineMarginHighlightOverlay;\n}(AbstractLineHighlightOverlay);\nregisterThemingParticipant(function (theme, collector) {\n  isRenderedUsingBorder = false;\n  var lineHighlight = theme.getColor(editorLineHighlight);\n\n  if (lineHighlight) {\n    collector.addRule(\".monaco-editor .view-overlays .current-line { background-color: \".concat(lineHighlight, \"; }\"));\n    collector.addRule(\".monaco-editor .margin-view-overlays .current-line-margin { background-color: \".concat(lineHighlight, \"; border: none; }\"));\n  }\n\n  if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n    var lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n\n    if (lineHighlightBorder) {\n      isRenderedUsingBorder = true;\n      collector.addRule(\".monaco-editor .view-overlays .current-line { border: 2px solid \".concat(lineHighlightBorder, \"; }\"));\n      collector.addRule(\".monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid \".concat(lineHighlightBorder, \"; }\"));\n\n      if (theme.type === 'hc') {\n        collector.addRule(\".monaco-editor .view-overlays .current-line { border-width: 1px; }\");\n        collector.addRule(\".monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }\");\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.js"],"names":["DynamicViewOverlay","editorLineHighlight","editorLineHighlightBorder","arrays","registerThemingParticipant","Selection","isRenderedUsingBorder","AbstractLineHighlightOverlay","context","_context","options","configuration","layoutInfo","get","_lineHeight","_renderLineHighlight","_renderLineHighlightOnlyWhenFocus","_contentLeft","contentLeft","_contentWidth","contentWidth","_selectionIsEmpty","_focused","_cursorLineNumbers","_selections","_renderData","addEventHandler","removeEventHandler","hasChanged","renderSelections","slice","cursorsLineNumbers","map","s","positionLineNumber","sort","a","b","equals","selectionIsEmpty","every","isEmpty","e","_readFromSelections","selections","scrollWidthChanged","scrollTopChanged","isFocused","ctx","_shouldRenderThis","renderedLine","_renderOne","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","len","length","index","renderData","lineNumber","lineIndex","CurrentLineHighlightOverlay","className","_shouldRenderOther","Math","max","scrollWidth","CurrentLineMarginHighlightOverlay","_shouldRenderMargin","theme","collector","lineHighlight","getColor","addRule","isTransparent","defines","lineHighlightBorder","type"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './currentLineHighlight.css';\r\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\r\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/view/editorColorRegistry.js';\r\nimport * as arrays from '../../../../base/common/arrays.js';\r\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\r\nimport { Selection } from '../../../common/core/selection.js';\r\nlet isRenderedUsingBorder = true;\r\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\r\n    constructor(context) {\r\n        super();\r\n        this._context = context;\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._renderLineHighlight = options.get(80 /* renderLineHighlight */);\r\n        this._renderLineHighlightOnlyWhenFocus = options.get(81 /* renderLineHighlightOnlyWhenFocus */);\r\n        this._contentLeft = layoutInfo.contentLeft;\r\n        this._contentWidth = layoutInfo.contentWidth;\r\n        this._selectionIsEmpty = true;\r\n        this._focused = false;\r\n        this._cursorLineNumbers = [1];\r\n        this._selections = [new Selection(1, 1, 1, 1)];\r\n        this._renderData = null;\r\n        this._context.addEventHandler(this);\r\n    }\r\n    dispose() {\r\n        this._context.removeEventHandler(this);\r\n        super.dispose();\r\n    }\r\n    _readFromSelections() {\r\n        let hasChanged = false;\r\n        // Only render the first selection when using border\r\n        const renderSelections = isRenderedUsingBorder ? this._selections.slice(0, 1) : this._selections;\r\n        const cursorsLineNumbers = renderSelections.map(s => s.positionLineNumber);\r\n        cursorsLineNumbers.sort((a, b) => a - b);\r\n        if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\r\n            this._cursorLineNumbers = cursorsLineNumbers;\r\n            hasChanged = true;\r\n        }\r\n        const selectionIsEmpty = renderSelections.every(s => s.isEmpty());\r\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\r\n            this._selectionIsEmpty = selectionIsEmpty;\r\n            hasChanged = true;\r\n        }\r\n        return hasChanged;\r\n    }\r\n    // --- begin event handlers\r\n    onThemeChanged(e) {\r\n        return this._readFromSelections();\r\n    }\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._renderLineHighlight = options.get(80 /* renderLineHighlight */);\r\n        this._renderLineHighlightOnlyWhenFocus = options.get(81 /* renderLineHighlightOnlyWhenFocus */);\r\n        this._contentLeft = layoutInfo.contentLeft;\r\n        this._contentWidth = layoutInfo.contentWidth;\r\n        return true;\r\n    }\r\n    onCursorStateChanged(e) {\r\n        this._selections = e.selections;\r\n        return this._readFromSelections();\r\n    }\r\n    onFlushed(e) {\r\n        return true;\r\n    }\r\n    onLinesDeleted(e) {\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return e.scrollWidthChanged || e.scrollTopChanged;\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    onFocusChanged(e) {\r\n        if (!this._renderLineHighlightOnlyWhenFocus) {\r\n            return false;\r\n        }\r\n        this._focused = e.isFocused;\r\n        return true;\r\n    }\r\n    // --- end event handlers\r\n    prepareRender(ctx) {\r\n        if (!this._shouldRenderThis()) {\r\n            this._renderData = null;\r\n            return;\r\n        }\r\n        const renderedLine = this._renderOne(ctx);\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\r\n        const len = this._cursorLineNumbers.length;\r\n        let index = 0;\r\n        const renderData = [];\r\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\r\n            const lineIndex = lineNumber - visibleStartLineNumber;\r\n            while (index < len && this._cursorLineNumbers[index] < lineNumber) {\r\n                index++;\r\n            }\r\n            if (index < len && this._cursorLineNumbers[index] === lineNumber) {\r\n                renderData[lineIndex] = renderedLine;\r\n            }\r\n            else {\r\n                renderData[lineIndex] = '';\r\n            }\r\n        }\r\n        this._renderData = renderData;\r\n    }\r\n    render(startLineNumber, lineNumber) {\r\n        if (!this._renderData) {\r\n            return '';\r\n        }\r\n        const lineIndex = lineNumber - startLineNumber;\r\n        if (lineIndex >= this._renderData.length) {\r\n            return '';\r\n        }\r\n        return this._renderData[lineIndex];\r\n    }\r\n}\r\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\r\n    _renderOne(ctx) {\r\n        const className = 'current-line' + (this._shouldRenderOther() ? ' current-line-both' : '');\r\n        return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\r\n    }\r\n    _shouldRenderThis() {\r\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\r\n            && this._selectionIsEmpty\r\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\r\n    }\r\n    _shouldRenderOther() {\r\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\r\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\r\n    }\r\n}\r\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\r\n    _renderOne(ctx) {\r\n        const className = 'current-line' + (this._shouldRenderMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '');\r\n        return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\r\n    }\r\n    _shouldRenderMargin() {\r\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\r\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\r\n    }\r\n    _shouldRenderThis() {\r\n        return true;\r\n    }\r\n    _shouldRenderOther() {\r\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\r\n            && this._selectionIsEmpty\r\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\r\n    }\r\n}\r\nregisterThemingParticipant((theme, collector) => {\r\n    isRenderedUsingBorder = false;\r\n    const lineHighlight = theme.getColor(editorLineHighlight);\r\n    if (lineHighlight) {\r\n        collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\r\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\r\n    }\r\n    if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\r\n        const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\r\n        if (lineHighlightBorder) {\r\n            isRenderedUsingBorder = true;\r\n            collector.addRule(`.monaco-editor .view-overlays .current-line { border: 2px solid ${lineHighlightBorder}; }`);\r\n            collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid ${lineHighlightBorder}; }`);\r\n            if (theme.type === 'hc') {\r\n                collector.addRule(`.monaco-editor .view-overlays .current-line { border-width: 1px; }`);\r\n                collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }`);\r\n            }\r\n        }\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}