{"ast":null,"code":"import _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { USUAL_WORD_SEPARATORS } from '../model/wordHelper.js';\n/**\r\n * @internal\r\n * The width of the minimap gutter, in pixels.\r\n */\n\nexport var MINIMAP_GUTTER_WIDTH = 8; //#endregion\n\n/**\r\n * An event describing that the configuration of the editor has changed.\r\n */\n\nexport var ConfigurationChangedEvent = /*#__PURE__*/function () {\n  /**\r\n   * @internal\r\n   */\n  function ConfigurationChangedEvent(values) {\n    _classCallCheck(this, ConfigurationChangedEvent);\n\n    this._values = values;\n  }\n\n  _createClass(ConfigurationChangedEvent, [{\n    key: \"hasChanged\",\n    value: function hasChanged(id) {\n      return this._values[id];\n    }\n  }]);\n\n  return ConfigurationChangedEvent;\n}();\n/**\r\n * @internal\r\n */\n\nexport var ValidatedEditorOptions = /*#__PURE__*/function () {\n  function ValidatedEditorOptions() {\n    _classCallCheck(this, ValidatedEditorOptions);\n\n    this._values = [];\n  }\n\n  _createClass(ValidatedEditorOptions, [{\n    key: \"_read\",\n    value: function _read(option) {\n      return this._values[option];\n    }\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      return this._values[id];\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(option, value) {\n      this._values[option] = value;\n    }\n  }]);\n\n  return ValidatedEditorOptions;\n}();\n/**\r\n * @internal\r\n */\n\nexport var ComputeOptionsMemory = function ComputeOptionsMemory() {\n  _classCallCheck(this, ComputeOptionsMemory);\n\n  this.stableMinimapLayoutInput = null;\n  this.stableFitMaxMinimapScale = 0;\n  this.stableFitRemainingWidth = 0;\n};\n/**\r\n * @internal\r\n */\n\nvar BaseEditorOption = /*#__PURE__*/function () {\n  function BaseEditorOption(id, name, defaultValue, schema) {\n    _classCallCheck(this, BaseEditorOption);\n\n    this.id = id;\n    this.name = name;\n    this.defaultValue = defaultValue;\n    this.schema = schema;\n  }\n\n  _createClass(BaseEditorOption, [{\n    key: \"compute\",\n    value: function compute(env, options, value) {\n      return value;\n    }\n  }]);\n\n  return BaseEditorOption;\n}();\n/**\r\n * @internal\r\n */\n\n\nvar ComputedEditorOption = /*#__PURE__*/function () {\n  function ComputedEditorOption(id) {\n    var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, ComputedEditorOption);\n\n    this.schema = undefined;\n    this.id = id;\n    this.name = '_never_';\n    this.defaultValue = undefined;\n    this.deps = deps;\n  }\n\n  _createClass(ComputedEditorOption, [{\n    key: \"validate\",\n    value: function validate(input) {\n      return this.defaultValue;\n    }\n  }]);\n\n  return ComputedEditorOption;\n}();\n\nvar SimpleEditorOption = /*#__PURE__*/function () {\n  function SimpleEditorOption(id, name, defaultValue, schema) {\n    _classCallCheck(this, SimpleEditorOption);\n\n    this.id = id;\n    this.name = name;\n    this.defaultValue = defaultValue;\n    this.schema = schema;\n  }\n\n  _createClass(SimpleEditorOption, [{\n    key: \"validate\",\n    value: function validate(input) {\n      if (typeof input === 'undefined') {\n        return this.defaultValue;\n      }\n\n      return input;\n    }\n  }, {\n    key: \"compute\",\n    value: function compute(env, options, value) {\n      return value;\n    }\n  }]);\n\n  return SimpleEditorOption;\n}();\n/**\r\n * @internal\r\n */\n\n\nfunction _boolean(value, defaultValue) {\n  if (typeof value === 'undefined') {\n    return defaultValue;\n  }\n\n  if (value === 'false') {\n    // treat the string 'false' as false\n    return false;\n  }\n\n  return Boolean(value);\n}\n\nexport { _boolean as boolean };\n\nvar EditorBooleanOption = /*#__PURE__*/function (_SimpleEditorOption) {\n  _inherits(EditorBooleanOption, _SimpleEditorOption);\n\n  var _super = _createSuper(EditorBooleanOption);\n\n  function EditorBooleanOption(id, name, defaultValue) {\n    var schema = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n\n    _classCallCheck(this, EditorBooleanOption);\n\n    if (typeof schema !== 'undefined') {\n      schema.type = 'boolean';\n      schema[\"default\"] = defaultValue;\n    }\n\n    return _super.call(this, id, name, defaultValue, schema);\n  }\n\n  _createClass(EditorBooleanOption, [{\n    key: \"validate\",\n    value: function validate(input) {\n      return _boolean(input, this.defaultValue);\n    }\n  }]);\n\n  return EditorBooleanOption;\n}(SimpleEditorOption);\n\nvar EditorIntOption = /*#__PURE__*/function (_SimpleEditorOption2) {\n  _inherits(EditorIntOption, _SimpleEditorOption2);\n\n  var _super2 = _createSuper(EditorIntOption);\n\n  function EditorIntOption(id, name, defaultValue, minimum, maximum) {\n    var _this;\n\n    var schema = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;\n\n    _classCallCheck(this, EditorIntOption);\n\n    if (typeof schema !== 'undefined') {\n      schema.type = 'integer';\n      schema[\"default\"] = defaultValue;\n      schema.minimum = minimum;\n      schema.maximum = maximum;\n    }\n\n    _this = _super2.call(this, id, name, defaultValue, schema);\n    _this.minimum = minimum;\n    _this.maximum = maximum;\n    return _this;\n  }\n\n  _createClass(EditorIntOption, [{\n    key: \"validate\",\n    value: function validate(input) {\n      return EditorIntOption.clampedInt(input, this.defaultValue, this.minimum, this.maximum);\n    }\n  }], [{\n    key: \"clampedInt\",\n    value: function clampedInt(value, defaultValue, minimum, maximum) {\n      if (typeof value === 'undefined') {\n        return defaultValue;\n      }\n\n      var r = parseInt(value, 10);\n\n      if (isNaN(r)) {\n        return defaultValue;\n      }\n\n      r = Math.max(minimum, r);\n      r = Math.min(maximum, r);\n      return r | 0;\n    }\n  }]);\n\n  return EditorIntOption;\n}(SimpleEditorOption);\n\nvar EditorFloatOption = /*#__PURE__*/function (_SimpleEditorOption3) {\n  _inherits(EditorFloatOption, _SimpleEditorOption3);\n\n  var _super3 = _createSuper(EditorFloatOption);\n\n  function EditorFloatOption(id, name, defaultValue, validationFn, schema) {\n    var _this2;\n\n    _classCallCheck(this, EditorFloatOption);\n\n    if (typeof schema !== 'undefined') {\n      schema.type = 'number';\n      schema[\"default\"] = defaultValue;\n    }\n\n    _this2 = _super3.call(this, id, name, defaultValue, schema);\n    _this2.validationFn = validationFn;\n    return _this2;\n  }\n\n  _createClass(EditorFloatOption, [{\n    key: \"validate\",\n    value: function validate(input) {\n      return this.validationFn(EditorFloatOption[\"float\"](input, this.defaultValue));\n    }\n  }], [{\n    key: \"clamp\",\n    value: function clamp(n, min, max) {\n      if (n < min) {\n        return min;\n      }\n\n      if (n > max) {\n        return max;\n      }\n\n      return n;\n    }\n  }, {\n    key: \"float\",\n    value: function float(value, defaultValue) {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      if (typeof value === 'undefined') {\n        return defaultValue;\n      }\n\n      var r = parseFloat(value);\n      return isNaN(r) ? defaultValue : r;\n    }\n  }]);\n\n  return EditorFloatOption;\n}(SimpleEditorOption);\n\nvar EditorStringOption = /*#__PURE__*/function (_SimpleEditorOption4) {\n  _inherits(EditorStringOption, _SimpleEditorOption4);\n\n  var _super4 = _createSuper(EditorStringOption);\n\n  _createClass(EditorStringOption, null, [{\n    key: \"string\",\n    value: function string(value, defaultValue) {\n      if (typeof value !== 'string') {\n        return defaultValue;\n      }\n\n      return value;\n    }\n  }]);\n\n  function EditorStringOption(id, name, defaultValue) {\n    var schema = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n\n    _classCallCheck(this, EditorStringOption);\n\n    if (typeof schema !== 'undefined') {\n      schema.type = 'string';\n      schema[\"default\"] = defaultValue;\n    }\n\n    return _super4.call(this, id, name, defaultValue, schema);\n  }\n\n  _createClass(EditorStringOption, [{\n    key: \"validate\",\n    value: function validate(input) {\n      return EditorStringOption.string(input, this.defaultValue);\n    }\n  }]);\n\n  return EditorStringOption;\n}(SimpleEditorOption);\n/**\r\n * @internal\r\n */\n\n\nexport function stringSet(value, defaultValue, allowedValues) {\n  if (typeof value !== 'string') {\n    return defaultValue;\n  }\n\n  if (allowedValues.indexOf(value) === -1) {\n    return defaultValue;\n  }\n\n  return value;\n}\n\nvar EditorStringEnumOption = /*#__PURE__*/function (_SimpleEditorOption5) {\n  _inherits(EditorStringEnumOption, _SimpleEditorOption5);\n\n  var _super5 = _createSuper(EditorStringEnumOption);\n\n  function EditorStringEnumOption(id, name, defaultValue, allowedValues) {\n    var _this3;\n\n    var schema = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n\n    _classCallCheck(this, EditorStringEnumOption);\n\n    if (typeof schema !== 'undefined') {\n      schema.type = 'string';\n      schema[\"enum\"] = allowedValues;\n      schema[\"default\"] = defaultValue;\n    }\n\n    _this3 = _super5.call(this, id, name, defaultValue, schema);\n    _this3._allowedValues = allowedValues;\n    return _this3;\n  }\n\n  _createClass(EditorStringEnumOption, [{\n    key: \"validate\",\n    value: function validate(input) {\n      return stringSet(input, this.defaultValue, this._allowedValues);\n    }\n  }]);\n\n  return EditorStringEnumOption;\n}(SimpleEditorOption);\n\nvar EditorEnumOption = /*#__PURE__*/function (_BaseEditorOption) {\n  _inherits(EditorEnumOption, _BaseEditorOption);\n\n  var _super6 = _createSuper(EditorEnumOption);\n\n  function EditorEnumOption(id, name, defaultValue, defaultStringValue, allowedValues, convert) {\n    var _this4;\n\n    var schema = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : undefined;\n\n    _classCallCheck(this, EditorEnumOption);\n\n    if (typeof schema !== 'undefined') {\n      schema.type = 'string';\n      schema[\"enum\"] = allowedValues;\n      schema[\"default\"] = defaultStringValue;\n    }\n\n    _this4 = _super6.call(this, id, name, defaultValue, schema);\n    _this4._allowedValues = allowedValues;\n    _this4._convert = convert;\n    return _this4;\n  }\n\n  _createClass(EditorEnumOption, [{\n    key: \"validate\",\n    value: function validate(input) {\n      if (typeof input !== 'string') {\n        return this.defaultValue;\n      }\n\n      if (this._allowedValues.indexOf(input) === -1) {\n        return this.defaultValue;\n      }\n\n      return this._convert(input);\n    }\n  }]);\n\n  return EditorEnumOption;\n}(BaseEditorOption); //#endregion\n//#region autoIndent\n\n\nfunction _autoIndentFromString(autoIndent) {\n  switch (autoIndent) {\n    case 'none':\n      return 0\n      /* None */\n      ;\n\n    case 'keep':\n      return 1\n      /* Keep */\n      ;\n\n    case 'brackets':\n      return 2\n      /* Brackets */\n      ;\n\n    case 'advanced':\n      return 3\n      /* Advanced */\n      ;\n\n    case 'full':\n      return 4\n      /* Full */\n      ;\n  }\n} //#endregion\n//#region accessibilitySupport\n\n\nvar EditorAccessibilitySupport = /*#__PURE__*/function (_BaseEditorOption2) {\n  _inherits(EditorAccessibilitySupport, _BaseEditorOption2);\n\n  var _super7 = _createSuper(EditorAccessibilitySupport);\n\n  function EditorAccessibilitySupport() {\n    _classCallCheck(this, EditorAccessibilitySupport);\n\n    return _super7.call(this, 2\n    /* accessibilitySupport */\n    , 'accessibilitySupport', 0\n    /* Unknown */\n    , {\n      type: 'string',\n      \"enum\": ['auto', 'on', 'off'],\n      enumDescriptions: [nls.localize('accessibilitySupport.auto', \"The editor will use platform APIs to detect when a Screen Reader is attached.\"), nls.localize('accessibilitySupport.on', \"The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled.\"), nls.localize('accessibilitySupport.off', \"The editor will never be optimized for usage with a Screen Reader.\")],\n      \"default\": 'auto',\n      description: nls.localize('accessibilitySupport', \"Controls whether the editor should run in a mode where it is optimized for screen readers. Setting to on will disable word wrapping.\")\n    });\n  }\n\n  _createClass(EditorAccessibilitySupport, [{\n    key: \"validate\",\n    value: function validate(input) {\n      switch (input) {\n        case 'auto':\n          return 0\n          /* Unknown */\n          ;\n\n        case 'off':\n          return 1\n          /* Disabled */\n          ;\n\n        case 'on':\n          return 2\n          /* Enabled */\n          ;\n      }\n\n      return this.defaultValue;\n    }\n  }, {\n    key: \"compute\",\n    value: function compute(env, options, value) {\n      if (value === 0\n      /* Unknown */\n      ) {\n          // The editor reads the `accessibilitySupport` from the environment\n          return env.accessibilitySupport;\n        }\n\n      return value;\n    }\n  }]);\n\n  return EditorAccessibilitySupport;\n}(BaseEditorOption);\n\nvar EditorComments = /*#__PURE__*/function (_BaseEditorOption3) {\n  _inherits(EditorComments, _BaseEditorOption3);\n\n  var _super8 = _createSuper(EditorComments);\n\n  function EditorComments() {\n    _classCallCheck(this, EditorComments);\n\n    var defaults = {\n      insertSpace: true,\n      ignoreEmptyLines: true\n    };\n    return _super8.call(this, 16\n    /* comments */\n    , 'comments', defaults, {\n      'editor.comments.insertSpace': {\n        type: 'boolean',\n        \"default\": defaults.insertSpace,\n        description: nls.localize('comments.insertSpace', \"Controls whether a space character is inserted when commenting.\")\n      },\n      'editor.comments.ignoreEmptyLines': {\n        type: 'boolean',\n        \"default\": defaults.ignoreEmptyLines,\n        description: nls.localize('comments.ignoreEmptyLines', 'Controls if empty lines should be ignored with toggle, add or remove actions for line comments.')\n      }\n    });\n  }\n\n  _createClass(EditorComments, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      if (!_input || typeof _input !== 'object') {\n        return this.defaultValue;\n      }\n\n      var input = _input;\n      return {\n        insertSpace: _boolean(input.insertSpace, this.defaultValue.insertSpace),\n        ignoreEmptyLines: _boolean(input.ignoreEmptyLines, this.defaultValue.ignoreEmptyLines)\n      };\n    }\n  }]);\n\n  return EditorComments;\n}(BaseEditorOption);\n\nfunction _cursorBlinkingStyleFromString(cursorBlinkingStyle) {\n  switch (cursorBlinkingStyle) {\n    case 'blink':\n      return 1\n      /* Blink */\n      ;\n\n    case 'smooth':\n      return 2\n      /* Smooth */\n      ;\n\n    case 'phase':\n      return 3\n      /* Phase */\n      ;\n\n    case 'expand':\n      return 4\n      /* Expand */\n      ;\n\n    case 'solid':\n      return 5\n      /* Solid */\n      ;\n  }\n} //#endregion\n//#region cursorStyle\n\n/**\r\n * The style in which the editor's cursor should be rendered.\r\n */\n\n\nexport var TextEditorCursorStyle;\n\n(function (TextEditorCursorStyle) {\n  /**\r\n   * As a vertical line (sitting between two characters).\r\n   */\n  TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\n  /**\r\n   * As a block (sitting on top of a character).\r\n   */\n\n  TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\n  /**\r\n   * As a horizontal line (sitting under a character).\r\n   */\n\n  TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\n  /**\r\n   * As a thin vertical line (sitting between two characters).\r\n   */\n\n  TextEditorCursorStyle[TextEditorCursorStyle[\"LineThin\"] = 4] = \"LineThin\";\n  /**\r\n   * As an outlined block (sitting on top of a character).\r\n   */\n\n  TextEditorCursorStyle[TextEditorCursorStyle[\"BlockOutline\"] = 5] = \"BlockOutline\";\n  /**\r\n   * As a thin horizontal line (sitting under a character).\r\n   */\n\n  TextEditorCursorStyle[TextEditorCursorStyle[\"UnderlineThin\"] = 6] = \"UnderlineThin\";\n})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));\n\nfunction _cursorStyleFromString(cursorStyle) {\n  switch (cursorStyle) {\n    case 'line':\n      return TextEditorCursorStyle.Line;\n\n    case 'block':\n      return TextEditorCursorStyle.Block;\n\n    case 'underline':\n      return TextEditorCursorStyle.Underline;\n\n    case 'line-thin':\n      return TextEditorCursorStyle.LineThin;\n\n    case 'block-outline':\n      return TextEditorCursorStyle.BlockOutline;\n\n    case 'underline-thin':\n      return TextEditorCursorStyle.UnderlineThin;\n  }\n} //#endregion\n//#region editorClassName\n\n\nvar EditorClassName = /*#__PURE__*/function (_ComputedEditorOption) {\n  _inherits(EditorClassName, _ComputedEditorOption);\n\n  var _super9 = _createSuper(EditorClassName);\n\n  function EditorClassName() {\n    _classCallCheck(this, EditorClassName);\n\n    return _super9.call(this, 121\n    /* editorClassName */\n    , [60\n    /* mouseStyle */\n    , 29\n    /* extraEditorClassName */\n    ]);\n  }\n\n  _createClass(EditorClassName, [{\n    key: \"compute\",\n    value: function compute(env, options, _) {\n      var classNames = ['monaco-editor'];\n\n      if (options.get(29\n      /* extraEditorClassName */\n      )) {\n        classNames.push(options.get(29\n        /* extraEditorClassName */\n        ));\n      }\n\n      if (env.extraEditorClassName) {\n        classNames.push(env.extraEditorClassName);\n      }\n\n      if (options.get(60\n      /* mouseStyle */\n      ) === 'default') {\n        classNames.push('mouse-default');\n      } else if (options.get(60\n      /* mouseStyle */\n      ) === 'copy') {\n        classNames.push('mouse-copy');\n      }\n\n      if (options.get(95\n      /* showUnused */\n      )) {\n        classNames.push('showUnused');\n      }\n\n      if (options.get(119\n      /* showDeprecated */\n      )) {\n        classNames.push('showDeprecated');\n      }\n\n      return classNames.join(' ');\n    }\n  }]);\n\n  return EditorClassName;\n}(ComputedEditorOption); //#endregion\n//#region emptySelectionClipboard\n\n\nvar EditorEmptySelectionClipboard = /*#__PURE__*/function (_EditorBooleanOption) {\n  _inherits(EditorEmptySelectionClipboard, _EditorBooleanOption);\n\n  var _super10 = _createSuper(EditorEmptySelectionClipboard);\n\n  function EditorEmptySelectionClipboard() {\n    _classCallCheck(this, EditorEmptySelectionClipboard);\n\n    return _super10.call(this, 28\n    /* emptySelectionClipboard */\n    , 'emptySelectionClipboard', true, {\n      description: nls.localize('emptySelectionClipboard', \"Controls whether copying without a selection copies the current line.\")\n    });\n  }\n\n  _createClass(EditorEmptySelectionClipboard, [{\n    key: \"compute\",\n    value: function compute(env, options, value) {\n      return value && env.emptySelectionClipboard;\n    }\n  }]);\n\n  return EditorEmptySelectionClipboard;\n}(EditorBooleanOption);\n\nvar EditorFind = /*#__PURE__*/function (_BaseEditorOption4) {\n  _inherits(EditorFind, _BaseEditorOption4);\n\n  var _super11 = _createSuper(EditorFind);\n\n  function EditorFind() {\n    _classCallCheck(this, EditorFind);\n\n    var defaults = {\n      cursorMoveOnType: true,\n      seedSearchStringFromSelection: true,\n      autoFindInSelection: 'never',\n      globalFindClipboard: false,\n      addExtraSpaceOnTop: true,\n      loop: true\n    };\n    return _super11.call(this, 31\n    /* find */\n    , 'find', defaults, {\n      'editor.find.cursorMoveOnType': {\n        type: 'boolean',\n        \"default\": defaults.cursorMoveOnType,\n        description: nls.localize('find.cursorMoveOnType', \"Controls whether the cursor should jump to find matches while typing.\")\n      },\n      'editor.find.seedSearchStringFromSelection': {\n        type: 'boolean',\n        \"default\": defaults.seedSearchStringFromSelection,\n        description: nls.localize('find.seedSearchStringFromSelection', \"Controls whether the search string in the Find Widget is seeded from the editor selection.\")\n      },\n      'editor.find.autoFindInSelection': {\n        type: 'string',\n        \"enum\": ['never', 'always', 'multiline'],\n        \"default\": defaults.autoFindInSelection,\n        enumDescriptions: [nls.localize('editor.find.autoFindInSelection.never', 'Never turn on Find in selection automatically (default)'), nls.localize('editor.find.autoFindInSelection.always', 'Always turn on Find in selection automatically'), nls.localize('editor.find.autoFindInSelection.multiline', 'Turn on Find in selection automatically when multiple lines of content are selected.')],\n        description: nls.localize('find.autoFindInSelection', \"Controls the condition for turning on find in selection automatically.\")\n      },\n      'editor.find.globalFindClipboard': {\n        type: 'boolean',\n        \"default\": defaults.globalFindClipboard,\n        description: nls.localize('find.globalFindClipboard', \"Controls whether the Find Widget should read or modify the shared find clipboard on macOS.\"),\n        included: platform.isMacintosh\n      },\n      'editor.find.addExtraSpaceOnTop': {\n        type: 'boolean',\n        \"default\": defaults.addExtraSpaceOnTop,\n        description: nls.localize('find.addExtraSpaceOnTop', \"Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.\")\n      },\n      'editor.find.loop': {\n        type: 'boolean',\n        \"default\": defaults.loop,\n        description: nls.localize('find.loop', \"Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.\")\n      }\n    });\n  }\n\n  _createClass(EditorFind, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      if (!_input || typeof _input !== 'object') {\n        return this.defaultValue;\n      }\n\n      var input = _input;\n      return {\n        cursorMoveOnType: _boolean(input.cursorMoveOnType, this.defaultValue.cursorMoveOnType),\n        seedSearchStringFromSelection: _boolean(input.seedSearchStringFromSelection, this.defaultValue.seedSearchStringFromSelection),\n        autoFindInSelection: typeof _input.autoFindInSelection === 'boolean' ? _input.autoFindInSelection ? 'always' : 'never' : stringSet(input.autoFindInSelection, this.defaultValue.autoFindInSelection, ['never', 'always', 'multiline']),\n        globalFindClipboard: _boolean(input.globalFindClipboard, this.defaultValue.globalFindClipboard),\n        addExtraSpaceOnTop: _boolean(input.addExtraSpaceOnTop, this.defaultValue.addExtraSpaceOnTop),\n        loop: _boolean(input.loop, this.defaultValue.loop)\n      };\n    }\n  }]);\n\n  return EditorFind;\n}(BaseEditorOption); //#endregion\n//#region fontLigatures\n\n/**\r\n * @internal\r\n */\n\n\nexport var EditorFontLigatures = /*#__PURE__*/function (_BaseEditorOption5) {\n  _inherits(EditorFontLigatures, _BaseEditorOption5);\n\n  var _super12 = _createSuper(EditorFontLigatures);\n\n  function EditorFontLigatures() {\n    _classCallCheck(this, EditorFontLigatures);\n\n    return _super12.call(this, 39\n    /* fontLigatures */\n    , 'fontLigatures', EditorFontLigatures.OFF, {\n      anyOf: [{\n        type: 'boolean',\n        description: nls.localize('fontLigatures', \"Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property.\")\n      }, {\n        type: 'string',\n        description: nls.localize('fontFeatureSettings', \"Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.\")\n      }],\n      description: nls.localize('fontLigaturesGeneral', \"Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.\"),\n      \"default\": false\n    });\n  }\n\n  _createClass(EditorFontLigatures, [{\n    key: \"validate\",\n    value: function validate(input) {\n      if (typeof input === 'undefined') {\n        return this.defaultValue;\n      }\n\n      if (typeof input === 'string') {\n        if (input === 'false') {\n          return EditorFontLigatures.OFF;\n        }\n\n        if (input === 'true') {\n          return EditorFontLigatures.ON;\n        }\n\n        return input;\n      }\n\n      if (Boolean(input)) {\n        return EditorFontLigatures.ON;\n      }\n\n      return EditorFontLigatures.OFF;\n    }\n  }]);\n\n  return EditorFontLigatures;\n}(BaseEditorOption);\nEditorFontLigatures.OFF = '\"liga\" off, \"calt\" off';\nEditorFontLigatures.ON = '\"liga\" on, \"calt\" on'; //#endregion\n//#region fontInfo\n\nvar EditorFontInfo = /*#__PURE__*/function (_ComputedEditorOption2) {\n  _inherits(EditorFontInfo, _ComputedEditorOption2);\n\n  var _super13 = _createSuper(EditorFontInfo);\n\n  function EditorFontInfo() {\n    _classCallCheck(this, EditorFontInfo);\n\n    return _super13.call(this, 38\n    /* fontInfo */\n    );\n  }\n\n  _createClass(EditorFontInfo, [{\n    key: \"compute\",\n    value: function compute(env, options, _) {\n      return env.fontInfo;\n    }\n  }]);\n\n  return EditorFontInfo;\n}(ComputedEditorOption); //#endregion\n//#region fontSize\n\n\nvar EditorFontSize = /*#__PURE__*/function (_SimpleEditorOption6) {\n  _inherits(EditorFontSize, _SimpleEditorOption6);\n\n  var _super14 = _createSuper(EditorFontSize);\n\n  function EditorFontSize() {\n    _classCallCheck(this, EditorFontSize);\n\n    return _super14.call(this, 40\n    /* fontSize */\n    , 'fontSize', EDITOR_FONT_DEFAULTS.fontSize, {\n      type: 'number',\n      minimum: 6,\n      maximum: 100,\n      \"default\": EDITOR_FONT_DEFAULTS.fontSize,\n      description: nls.localize('fontSize', \"Controls the font size in pixels.\")\n    });\n  }\n\n  _createClass(EditorFontSize, [{\n    key: \"validate\",\n    value: function validate(input) {\n      var r = EditorFloatOption[\"float\"](input, this.defaultValue);\n\n      if (r === 0) {\n        return EDITOR_FONT_DEFAULTS.fontSize;\n      }\n\n      return EditorFloatOption.clamp(r, 6, 100);\n    }\n  }, {\n    key: \"compute\",\n    value: function compute(env, options, value) {\n      // The final fontSize respects the editor zoom level.\n      // So take the result from env.fontInfo\n      return env.fontInfo.fontSize;\n    }\n  }]);\n\n  return EditorFontSize;\n}(SimpleEditorOption); //#endregion\n//#region fontWeight\n\n\nvar EditorFontWeight = /*#__PURE__*/function (_BaseEditorOption6) {\n  _inherits(EditorFontWeight, _BaseEditorOption6);\n\n  var _super15 = _createSuper(EditorFontWeight);\n\n  function EditorFontWeight() {\n    _classCallCheck(this, EditorFontWeight);\n\n    return _super15.call(this, 41\n    /* fontWeight */\n    , 'fontWeight', EDITOR_FONT_DEFAULTS.fontWeight, {\n      anyOf: [{\n        type: 'number',\n        minimum: EditorFontWeight.MINIMUM_VALUE,\n        maximum: EditorFontWeight.MAXIMUM_VALUE,\n        errorMessage: nls.localize('fontWeightErrorMessage', \"Only \\\"normal\\\" and \\\"bold\\\" keywords or numbers between 1 and 1000 are allowed.\")\n      }, {\n        type: 'string',\n        pattern: '^(normal|bold|1000|[1-9][0-9]{0,2})$'\n      }, {\n        \"enum\": EditorFontWeight.SUGGESTION_VALUES\n      }],\n      \"default\": EDITOR_FONT_DEFAULTS.fontWeight,\n      description: nls.localize('fontWeight', \"Controls the font weight. Accepts \\\"normal\\\" and \\\"bold\\\" keywords or numbers between 1 and 1000.\")\n    });\n  }\n\n  _createClass(EditorFontWeight, [{\n    key: \"validate\",\n    value: function validate(input) {\n      if (input === 'normal' || input === 'bold') {\n        return input;\n      }\n\n      return String(EditorIntOption.clampedInt(input, EDITOR_FONT_DEFAULTS.fontWeight, EditorFontWeight.MINIMUM_VALUE, EditorFontWeight.MAXIMUM_VALUE));\n    }\n  }]);\n\n  return EditorFontWeight;\n}(BaseEditorOption);\n\nEditorFontWeight.SUGGESTION_VALUES = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\nEditorFontWeight.MINIMUM_VALUE = 1;\nEditorFontWeight.MAXIMUM_VALUE = 1000;\n\nvar EditorGoToLocation = /*#__PURE__*/function (_BaseEditorOption7) {\n  _inherits(EditorGoToLocation, _BaseEditorOption7);\n\n  var _super16 = _createSuper(EditorGoToLocation);\n\n  function EditorGoToLocation() {\n    _classCallCheck(this, EditorGoToLocation);\n\n    var defaults = {\n      multiple: 'peek',\n      multipleDefinitions: 'peek',\n      multipleTypeDefinitions: 'peek',\n      multipleDeclarations: 'peek',\n      multipleImplementations: 'peek',\n      multipleReferences: 'peek',\n      alternativeDefinitionCommand: 'editor.action.goToReferences',\n      alternativeTypeDefinitionCommand: 'editor.action.goToReferences',\n      alternativeDeclarationCommand: 'editor.action.goToReferences',\n      alternativeImplementationCommand: '',\n      alternativeReferenceCommand: ''\n    };\n    var jsonSubset = {\n      type: 'string',\n      \"enum\": ['peek', 'gotoAndPeek', 'goto'],\n      \"default\": defaults.multiple,\n      enumDescriptions: [nls.localize('editor.gotoLocation.multiple.peek', 'Show peek view of the results (default)'), nls.localize('editor.gotoLocation.multiple.gotoAndPeek', 'Go to the primary result and show a peek view'), nls.localize('editor.gotoLocation.multiple.goto', 'Go to the primary result and enable peek-less navigation to others')]\n    };\n    return _super16.call(this, 45\n    /* gotoLocation */\n    , 'gotoLocation', defaults, {\n      'editor.gotoLocation.multiple': {\n        deprecationMessage: nls.localize('editor.gotoLocation.multiple.deprecated', \"This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.\")\n      },\n      'editor.gotoLocation.multipleDefinitions': Object.assign({\n        description: nls.localize('editor.editor.gotoLocation.multipleDefinitions', \"Controls the behavior the 'Go to Definition'-command when multiple target locations exist.\")\n      }, jsonSubset),\n      'editor.gotoLocation.multipleTypeDefinitions': Object.assign({\n        description: nls.localize('editor.editor.gotoLocation.multipleTypeDefinitions', \"Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.\")\n      }, jsonSubset),\n      'editor.gotoLocation.multipleDeclarations': Object.assign({\n        description: nls.localize('editor.editor.gotoLocation.multipleDeclarations', \"Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.\")\n      }, jsonSubset),\n      'editor.gotoLocation.multipleImplementations': Object.assign({\n        description: nls.localize('editor.editor.gotoLocation.multipleImplemenattions', \"Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.\")\n      }, jsonSubset),\n      'editor.gotoLocation.multipleReferences': Object.assign({\n        description: nls.localize('editor.editor.gotoLocation.multipleReferences', \"Controls the behavior the 'Go to References'-command when multiple target locations exist.\")\n      }, jsonSubset),\n      'editor.gotoLocation.alternativeDefinitionCommand': {\n        type: 'string',\n        \"default\": defaults.alternativeDefinitionCommand,\n        description: nls.localize('alternativeDefinitionCommand', \"Alternative command id that is being executed when the result of 'Go to Definition' is the current location.\")\n      },\n      'editor.gotoLocation.alternativeTypeDefinitionCommand': {\n        type: 'string',\n        \"default\": defaults.alternativeTypeDefinitionCommand,\n        description: nls.localize('alternativeTypeDefinitionCommand', \"Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.\")\n      },\n      'editor.gotoLocation.alternativeDeclarationCommand': {\n        type: 'string',\n        \"default\": defaults.alternativeDeclarationCommand,\n        description: nls.localize('alternativeDeclarationCommand', \"Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.\")\n      },\n      'editor.gotoLocation.alternativeImplementationCommand': {\n        type: 'string',\n        \"default\": defaults.alternativeImplementationCommand,\n        description: nls.localize('alternativeImplementationCommand', \"Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.\")\n      },\n      'editor.gotoLocation.alternativeReferenceCommand': {\n        type: 'string',\n        \"default\": defaults.alternativeReferenceCommand,\n        description: nls.localize('alternativeReferenceCommand', \"Alternative command id that is being executed when the result of 'Go to Reference' is the current location.\")\n      }\n    });\n  }\n\n  _createClass(EditorGoToLocation, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      var _a, _b, _c, _d, _e;\n\n      if (!_input || typeof _input !== 'object') {\n        return this.defaultValue;\n      }\n\n      var input = _input;\n      return {\n        multiple: stringSet(input.multiple, this.defaultValue.multiple, ['peek', 'gotoAndPeek', 'goto']),\n        multipleDefinitions: (_a = input.multipleDefinitions) !== null && _a !== void 0 ? _a : stringSet(input.multipleDefinitions, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n        multipleTypeDefinitions: (_b = input.multipleTypeDefinitions) !== null && _b !== void 0 ? _b : stringSet(input.multipleTypeDefinitions, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n        multipleDeclarations: (_c = input.multipleDeclarations) !== null && _c !== void 0 ? _c : stringSet(input.multipleDeclarations, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n        multipleImplementations: (_d = input.multipleImplementations) !== null && _d !== void 0 ? _d : stringSet(input.multipleImplementations, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n        multipleReferences: (_e = input.multipleReferences) !== null && _e !== void 0 ? _e : stringSet(input.multipleReferences, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n        alternativeDefinitionCommand: EditorStringOption.string(input.alternativeDefinitionCommand, this.defaultValue.alternativeDefinitionCommand),\n        alternativeTypeDefinitionCommand: EditorStringOption.string(input.alternativeTypeDefinitionCommand, this.defaultValue.alternativeTypeDefinitionCommand),\n        alternativeDeclarationCommand: EditorStringOption.string(input.alternativeDeclarationCommand, this.defaultValue.alternativeDeclarationCommand),\n        alternativeImplementationCommand: EditorStringOption.string(input.alternativeImplementationCommand, this.defaultValue.alternativeImplementationCommand),\n        alternativeReferenceCommand: EditorStringOption.string(input.alternativeReferenceCommand, this.defaultValue.alternativeReferenceCommand)\n      };\n    }\n  }]);\n\n  return EditorGoToLocation;\n}(BaseEditorOption);\n\nvar EditorHover = /*#__PURE__*/function (_BaseEditorOption8) {\n  _inherits(EditorHover, _BaseEditorOption8);\n\n  var _super17 = _createSuper(EditorHover);\n\n  function EditorHover() {\n    _classCallCheck(this, EditorHover);\n\n    var defaults = {\n      enabled: true,\n      delay: 300,\n      sticky: true\n    };\n    return _super17.call(this, 48\n    /* hover */\n    , 'hover', defaults, {\n      'editor.hover.enabled': {\n        type: 'boolean',\n        \"default\": defaults.enabled,\n        description: nls.localize('hover.enabled', \"Controls whether the hover is shown.\")\n      },\n      'editor.hover.delay': {\n        type: 'number',\n        \"default\": defaults.delay,\n        description: nls.localize('hover.delay', \"Controls the delay in milliseconds after which the hover is shown.\")\n      },\n      'editor.hover.sticky': {\n        type: 'boolean',\n        \"default\": defaults.sticky,\n        description: nls.localize('hover.sticky', \"Controls whether the hover should remain visible when mouse is moved over it.\")\n      }\n    });\n  }\n\n  _createClass(EditorHover, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      if (!_input || typeof _input !== 'object') {\n        return this.defaultValue;\n      }\n\n      var input = _input;\n      return {\n        enabled: _boolean(input.enabled, this.defaultValue.enabled),\n        delay: EditorIntOption.clampedInt(input.delay, this.defaultValue.delay, 0, 10000),\n        sticky: _boolean(input.sticky, this.defaultValue.sticky)\n      };\n    }\n  }]);\n\n  return EditorHover;\n}(BaseEditorOption);\n/**\r\n * @internal\r\n */\n\n\nexport var EditorLayoutInfoComputer = /*#__PURE__*/function (_ComputedEditorOption3) {\n  _inherits(EditorLayoutInfoComputer, _ComputedEditorOption3);\n\n  var _super18 = _createSuper(EditorLayoutInfoComputer);\n\n  function EditorLayoutInfoComputer() {\n    _classCallCheck(this, EditorLayoutInfoComputer);\n\n    return _super18.call(this, 124\n    /* layoutInfo */\n    , [44\n    /* glyphMargin */\n    , 52\n    /* lineDecorationsWidth */\n    , 33\n    /* folding */\n    , 59\n    /* minimap */\n    , 87\n    /* scrollbar */\n    , 54\n    /* lineNumbers */\n    , 55\n    /* lineNumbersMinChars */\n    , 89\n    /* scrollBeyondLastLine */\n    , 111\n    /* wordWrap */\n    , 114\n    /* wordWrapColumn */\n    , 115\n    /* wordWrapOverride1 */\n    , 116\n    /* wordWrapOverride2 */\n    , 2\n    /* accessibilitySupport */\n    ]);\n  }\n\n  _createClass(EditorLayoutInfoComputer, [{\n    key: \"compute\",\n    value: function compute(env, options, _) {\n      return EditorLayoutInfoComputer.computeLayout(options, {\n        memory: env.memory,\n        outerWidth: env.outerWidth,\n        outerHeight: env.outerHeight,\n        isDominatedByLongLines: env.isDominatedByLongLines,\n        lineHeight: env.fontInfo.lineHeight,\n        viewLineCount: env.viewLineCount,\n        lineNumbersDigitCount: env.lineNumbersDigitCount,\n        typicalHalfwidthCharacterWidth: env.fontInfo.typicalHalfwidthCharacterWidth,\n        maxDigitWidth: env.fontInfo.maxDigitWidth,\n        pixelRatio: env.pixelRatio\n      });\n    }\n  }], [{\n    key: \"computeContainedMinimapLineCount\",\n    value: function computeContainedMinimapLineCount(input) {\n      var typicalViewportLineCount = input.height / input.lineHeight;\n      var extraLinesBeyondLastLine = input.scrollBeyondLastLine ? typicalViewportLineCount - 1 : 0;\n      var desiredRatio = (input.viewLineCount + extraLinesBeyondLastLine) / (input.pixelRatio * input.height);\n      var minimapLineCount = Math.floor(input.viewLineCount / desiredRatio);\n      return {\n        typicalViewportLineCount: typicalViewportLineCount,\n        extraLinesBeyondLastLine: extraLinesBeyondLastLine,\n        desiredRatio: desiredRatio,\n        minimapLineCount: minimapLineCount\n      };\n    }\n  }, {\n    key: \"_computeMinimapLayout\",\n    value: function _computeMinimapLayout(input, memory) {\n      var outerWidth = input.outerWidth;\n      var outerHeight = input.outerHeight;\n      var pixelRatio = input.pixelRatio;\n\n      if (!input.minimap.enabled) {\n        return {\n          renderMinimap: 0\n          /* None */\n          ,\n          minimapLeft: 0,\n          minimapWidth: 0,\n          minimapHeightIsEditorHeight: false,\n          minimapIsSampling: false,\n          minimapScale: 1,\n          minimapLineHeight: 1,\n          minimapCanvasInnerWidth: 0,\n          minimapCanvasInnerHeight: Math.floor(pixelRatio * outerHeight),\n          minimapCanvasOuterWidth: 0,\n          minimapCanvasOuterHeight: outerHeight\n        };\n      } // Can use memory if only the `viewLineCount` and `remainingWidth` have changed\n\n\n      var stableMinimapLayoutInput = memory.stableMinimapLayoutInput;\n      var couldUseMemory = stableMinimapLayoutInput // && input.outerWidth === lastMinimapLayoutInput.outerWidth !!! INTENTIONAL OMITTED\n      && input.outerHeight === stableMinimapLayoutInput.outerHeight && input.lineHeight === stableMinimapLayoutInput.lineHeight && input.typicalHalfwidthCharacterWidth === stableMinimapLayoutInput.typicalHalfwidthCharacterWidth && input.pixelRatio === stableMinimapLayoutInput.pixelRatio && input.scrollBeyondLastLine === stableMinimapLayoutInput.scrollBeyondLastLine && input.minimap.enabled === stableMinimapLayoutInput.minimap.enabled && input.minimap.side === stableMinimapLayoutInput.minimap.side && input.minimap.size === stableMinimapLayoutInput.minimap.size && input.minimap.showSlider === stableMinimapLayoutInput.minimap.showSlider && input.minimap.renderCharacters === stableMinimapLayoutInput.minimap.renderCharacters && input.minimap.maxColumn === stableMinimapLayoutInput.minimap.maxColumn && input.minimap.scale === stableMinimapLayoutInput.minimap.scale && input.verticalScrollbarWidth === stableMinimapLayoutInput.verticalScrollbarWidth // && input.viewLineCount === lastMinimapLayoutInput.viewLineCount !!! INTENTIONAL OMITTED\n      // && input.remainingWidth === lastMinimapLayoutInput.remainingWidth !!! INTENTIONAL OMITTED\n      && input.isViewportWrapping === stableMinimapLayoutInput.isViewportWrapping;\n      var lineHeight = input.lineHeight;\n      var typicalHalfwidthCharacterWidth = input.typicalHalfwidthCharacterWidth;\n      var scrollBeyondLastLine = input.scrollBeyondLastLine;\n      var minimapRenderCharacters = input.minimap.renderCharacters;\n      var minimapScale = pixelRatio >= 2 ? Math.round(input.minimap.scale * 2) : input.minimap.scale;\n      var minimapMaxColumn = input.minimap.maxColumn;\n      var minimapSize = input.minimap.size;\n      var minimapSide = input.minimap.side;\n      var verticalScrollbarWidth = input.verticalScrollbarWidth;\n      var viewLineCount = input.viewLineCount;\n      var remainingWidth = input.remainingWidth;\n      var isViewportWrapping = input.isViewportWrapping;\n      var baseCharHeight = minimapRenderCharacters ? 2 : 3;\n      var minimapCanvasInnerHeight = Math.floor(pixelRatio * outerHeight);\n      var minimapCanvasOuterHeight = minimapCanvasInnerHeight / pixelRatio;\n      var minimapHeightIsEditorHeight = false;\n      var minimapIsSampling = false;\n      var minimapLineHeight = baseCharHeight * minimapScale;\n      var minimapCharWidth = minimapScale / pixelRatio;\n      var minimapWidthMultiplier = 1;\n\n      if (minimapSize === 'fill' || minimapSize === 'fit') {\n        var _EditorLayoutInfoComp = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n          viewLineCount: viewLineCount,\n          scrollBeyondLastLine: scrollBeyondLastLine,\n          height: outerHeight,\n          lineHeight: lineHeight,\n          pixelRatio: pixelRatio\n        }),\n            typicalViewportLineCount = _EditorLayoutInfoComp.typicalViewportLineCount,\n            extraLinesBeyondLastLine = _EditorLayoutInfoComp.extraLinesBeyondLastLine,\n            desiredRatio = _EditorLayoutInfoComp.desiredRatio,\n            minimapLineCount = _EditorLayoutInfoComp.minimapLineCount; // ratio is intentionally not part of the layout to avoid the layout changing all the time\n        // when doing sampling\n\n\n        var ratio = viewLineCount / minimapLineCount;\n\n        if (ratio > 1) {\n          minimapHeightIsEditorHeight = true;\n          minimapIsSampling = true;\n          minimapScale = 1;\n          minimapLineHeight = 1;\n          minimapCharWidth = minimapScale / pixelRatio;\n        } else {\n          var fitBecomesFill = false;\n          var maxMinimapScale = minimapScale + 1;\n\n          if (minimapSize === 'fit') {\n            var effectiveMinimapHeight = Math.ceil((viewLineCount + extraLinesBeyondLastLine) * minimapLineHeight);\n\n            if (isViewportWrapping && couldUseMemory && remainingWidth <= memory.stableFitRemainingWidth) {\n              // There is a loop when using `fit` and viewport wrapping:\n              // - view line count impacts minimap layout\n              // - minimap layout impacts viewport width\n              // - viewport width impacts view line count\n              // To break the loop, once we go to a smaller minimap scale, we try to stick with it.\n              fitBecomesFill = true;\n              maxMinimapScale = memory.stableFitMaxMinimapScale;\n            } else {\n              fitBecomesFill = effectiveMinimapHeight > minimapCanvasInnerHeight;\n\n              if (isViewportWrapping && fitBecomesFill) {\n                // remember for next time\n                memory.stableMinimapLayoutInput = input;\n                memory.stableFitRemainingWidth = remainingWidth;\n              } else {\n                memory.stableMinimapLayoutInput = null;\n                memory.stableFitRemainingWidth = 0;\n              }\n            }\n          }\n\n          if (minimapSize === 'fill' || fitBecomesFill) {\n            minimapHeightIsEditorHeight = true;\n            var configuredMinimapScale = minimapScale;\n            minimapLineHeight = Math.min(lineHeight * pixelRatio, Math.max(1, Math.floor(1 / desiredRatio)));\n            minimapScale = Math.min(maxMinimapScale, Math.max(1, Math.floor(minimapLineHeight / baseCharHeight)));\n\n            if (minimapScale > configuredMinimapScale) {\n              minimapWidthMultiplier = Math.min(2, minimapScale / configuredMinimapScale);\n            }\n\n            minimapCharWidth = minimapScale / pixelRatio / minimapWidthMultiplier;\n            minimapCanvasInnerHeight = Math.ceil(Math.max(typicalViewportLineCount, viewLineCount + extraLinesBeyondLastLine) * minimapLineHeight);\n\n            if (isViewportWrapping && fitBecomesFill) {\n              memory.stableFitMaxMinimapScale = minimapScale;\n            }\n          }\n        }\n      } // Given:\n      // (leaving 2px for the cursor to have space after the last character)\n      // viewportColumn = (contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth\n      // minimapWidth = viewportColumn * minimapCharWidth\n      // contentWidth = remainingWidth - minimapWidth\n      // What are good values for contentWidth and minimapWidth ?\n      // minimapWidth = ((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth) * minimapCharWidth\n      // typicalHalfwidthCharacterWidth * minimapWidth = (contentWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n      // typicalHalfwidthCharacterWidth * minimapWidth = (remainingWidth - minimapWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n      // (typicalHalfwidthCharacterWidth + minimapCharWidth) * minimapWidth = (remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n      // minimapWidth = ((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth)\n\n\n      var minimapMaxWidth = Math.floor(minimapMaxColumn * minimapCharWidth);\n      var minimapWidth = Math.min(minimapMaxWidth, Math.max(0, Math.floor((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth / (typicalHalfwidthCharacterWidth + minimapCharWidth))) + MINIMAP_GUTTER_WIDTH);\n      var minimapCanvasInnerWidth = Math.floor(pixelRatio * minimapWidth);\n      var minimapCanvasOuterWidth = minimapCanvasInnerWidth / pixelRatio;\n      minimapCanvasInnerWidth = Math.floor(minimapCanvasInnerWidth * minimapWidthMultiplier);\n      var renderMinimap = minimapRenderCharacters ? 1\n      /* Text */\n      : 2\n      /* Blocks */\n      ;\n      var minimapLeft = minimapSide === 'left' ? 0 : outerWidth - minimapWidth - verticalScrollbarWidth;\n      return {\n        renderMinimap: renderMinimap,\n        minimapLeft: minimapLeft,\n        minimapWidth: minimapWidth,\n        minimapHeightIsEditorHeight: minimapHeightIsEditorHeight,\n        minimapIsSampling: minimapIsSampling,\n        minimapScale: minimapScale,\n        minimapLineHeight: minimapLineHeight,\n        minimapCanvasInnerWidth: minimapCanvasInnerWidth,\n        minimapCanvasInnerHeight: minimapCanvasInnerHeight,\n        minimapCanvasOuterWidth: minimapCanvasOuterWidth,\n        minimapCanvasOuterHeight: minimapCanvasOuterHeight\n      };\n    }\n  }, {\n    key: \"computeLayout\",\n    value: function computeLayout(options, env) {\n      var outerWidth = env.outerWidth | 0;\n      var outerHeight = env.outerHeight | 0;\n      var lineHeight = env.lineHeight | 0;\n      var lineNumbersDigitCount = env.lineNumbersDigitCount | 0;\n      var typicalHalfwidthCharacterWidth = env.typicalHalfwidthCharacterWidth;\n      var maxDigitWidth = env.maxDigitWidth;\n      var pixelRatio = env.pixelRatio;\n      var viewLineCount = env.viewLineCount;\n      var wordWrapOverride2 = options.get(116\n      /* wordWrapOverride2 */\n      );\n      var wordWrapOverride1 = wordWrapOverride2 === 'inherit' ? options.get(115\n      /* wordWrapOverride1 */\n      ) : wordWrapOverride2;\n      var wordWrap = wordWrapOverride1 === 'inherit' ? options.get(111\n      /* wordWrap */\n      ) : wordWrapOverride1;\n      var wordWrapColumn = options.get(114\n      /* wordWrapColumn */\n      );\n      var accessibilitySupport = options.get(2\n      /* accessibilitySupport */\n      );\n      var isDominatedByLongLines = env.isDominatedByLongLines;\n      var showGlyphMargin = options.get(44\n      /* glyphMargin */\n      );\n      var showLineNumbers = options.get(54\n      /* lineNumbers */\n      ).renderType !== 0\n      /* Off */\n      ;\n      var lineNumbersMinChars = options.get(55\n      /* lineNumbersMinChars */\n      );\n      var scrollBeyondLastLine = options.get(89\n      /* scrollBeyondLastLine */\n      );\n      var minimap = options.get(59\n      /* minimap */\n      );\n      var scrollbar = options.get(87\n      /* scrollbar */\n      );\n      var verticalScrollbarWidth = scrollbar.verticalScrollbarSize;\n      var verticalScrollbarHasArrows = scrollbar.verticalHasArrows;\n      var scrollbarArrowSize = scrollbar.arrowSize;\n      var horizontalScrollbarHeight = scrollbar.horizontalScrollbarSize;\n      var rawLineDecorationsWidth = options.get(52\n      /* lineDecorationsWidth */\n      );\n      var folding = options.get(33\n      /* folding */\n      );\n      var lineDecorationsWidth;\n\n      if (typeof rawLineDecorationsWidth === 'string' && /^\\d+(\\.\\d+)?ch$/.test(rawLineDecorationsWidth)) {\n        var multiple = parseFloat(rawLineDecorationsWidth.substr(0, rawLineDecorationsWidth.length - 2));\n        lineDecorationsWidth = EditorIntOption.clampedInt(multiple * typicalHalfwidthCharacterWidth, 0, 0, 1000);\n      } else {\n        lineDecorationsWidth = EditorIntOption.clampedInt(rawLineDecorationsWidth, 0, 0, 1000);\n      }\n\n      if (folding) {\n        lineDecorationsWidth += 16;\n      }\n\n      var lineNumbersWidth = 0;\n\n      if (showLineNumbers) {\n        var digitCount = Math.max(lineNumbersDigitCount, lineNumbersMinChars);\n        lineNumbersWidth = Math.round(digitCount * maxDigitWidth);\n      }\n\n      var glyphMarginWidth = 0;\n\n      if (showGlyphMargin) {\n        glyphMarginWidth = lineHeight;\n      }\n\n      var glyphMarginLeft = 0;\n      var lineNumbersLeft = glyphMarginLeft + glyphMarginWidth;\n      var decorationsLeft = lineNumbersLeft + lineNumbersWidth;\n      var contentLeft = decorationsLeft + lineDecorationsWidth;\n      var remainingWidth = outerWidth - glyphMarginWidth - lineNumbersWidth - lineDecorationsWidth;\n      var isWordWrapMinified = false;\n      var isViewportWrapping = false;\n      var wrappingColumn = -1;\n\n      if (accessibilitySupport !== 2\n      /* Enabled */\n      ) {\n          // See https://github.com/microsoft/vscode/issues/27766\n          // Never enable wrapping when a screen reader is attached\n          // because arrow down etc. will not move the cursor in the way\n          // a screen reader expects.\n          if (wordWrapOverride1 === 'inherit' && isDominatedByLongLines) {\n            // Force viewport width wrapping if model is dominated by long lines\n            isWordWrapMinified = true;\n            isViewportWrapping = true;\n          } else if (wordWrap === 'on' || wordWrap === 'bounded') {\n            isViewportWrapping = true;\n          } else if (wordWrap === 'wordWrapColumn') {\n            wrappingColumn = wordWrapColumn;\n          }\n        }\n\n      var minimapLayout = EditorLayoutInfoComputer._computeMinimapLayout({\n        outerWidth: outerWidth,\n        outerHeight: outerHeight,\n        lineHeight: lineHeight,\n        typicalHalfwidthCharacterWidth: typicalHalfwidthCharacterWidth,\n        pixelRatio: pixelRatio,\n        scrollBeyondLastLine: scrollBeyondLastLine,\n        minimap: minimap,\n        verticalScrollbarWidth: verticalScrollbarWidth,\n        viewLineCount: viewLineCount,\n        remainingWidth: remainingWidth,\n        isViewportWrapping: isViewportWrapping\n      }, env.memory || new ComputeOptionsMemory());\n\n      if (minimapLayout.renderMinimap !== 0\n      /* None */\n      && minimapLayout.minimapLeft === 0) {\n        // the minimap is rendered to the left, so move everything to the right\n        glyphMarginLeft += minimapLayout.minimapWidth;\n        lineNumbersLeft += minimapLayout.minimapWidth;\n        decorationsLeft += minimapLayout.minimapWidth;\n        contentLeft += minimapLayout.minimapWidth;\n      }\n\n      var contentWidth = remainingWidth - minimapLayout.minimapWidth; // (leaving 2px for the cursor to have space after the last character)\n\n      var viewportColumn = Math.max(1, Math.floor((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth));\n      var verticalArrowSize = verticalScrollbarHasArrows ? scrollbarArrowSize : 0;\n\n      if (isViewportWrapping) {\n        // compute the actual wrappingColumn\n        wrappingColumn = Math.max(1, viewportColumn);\n\n        if (wordWrap === 'bounded') {\n          wrappingColumn = Math.min(wrappingColumn, wordWrapColumn);\n        }\n      }\n\n      return {\n        width: outerWidth,\n        height: outerHeight,\n        glyphMarginLeft: glyphMarginLeft,\n        glyphMarginWidth: glyphMarginWidth,\n        lineNumbersLeft: lineNumbersLeft,\n        lineNumbersWidth: lineNumbersWidth,\n        decorationsLeft: decorationsLeft,\n        decorationsWidth: lineDecorationsWidth,\n        contentLeft: contentLeft,\n        contentWidth: contentWidth,\n        minimap: minimapLayout,\n        viewportColumn: viewportColumn,\n        isWordWrapMinified: isWordWrapMinified,\n        isViewportWrapping: isViewportWrapping,\n        wrappingColumn: wrappingColumn,\n        verticalScrollbarWidth: verticalScrollbarWidth,\n        horizontalScrollbarHeight: horizontalScrollbarHeight,\n        overviewRuler: {\n          top: verticalArrowSize,\n          width: verticalScrollbarWidth,\n          height: outerHeight - 2 * verticalArrowSize,\n          right: 0\n        }\n      };\n    }\n  }]);\n\n  return EditorLayoutInfoComputer;\n}(ComputedEditorOption);\n\nvar EditorLightbulb = /*#__PURE__*/function (_BaseEditorOption9) {\n  _inherits(EditorLightbulb, _BaseEditorOption9);\n\n  var _super19 = _createSuper(EditorLightbulb);\n\n  function EditorLightbulb() {\n    _classCallCheck(this, EditorLightbulb);\n\n    var defaults = {\n      enabled: true\n    };\n    return _super19.call(this, 51\n    /* lightbulb */\n    , 'lightbulb', defaults, {\n      'editor.lightbulb.enabled': {\n        type: 'boolean',\n        \"default\": defaults.enabled,\n        description: nls.localize('codeActions', \"Enables the code action lightbulb in the editor.\")\n      }\n    });\n  }\n\n  _createClass(EditorLightbulb, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      if (!_input || typeof _input !== 'object') {\n        return this.defaultValue;\n      }\n\n      var input = _input;\n      return {\n        enabled: _boolean(input.enabled, this.defaultValue.enabled)\n      };\n    }\n  }]);\n\n  return EditorLightbulb;\n}(BaseEditorOption);\n\nvar EditorInlineHints = /*#__PURE__*/function (_BaseEditorOption10) {\n  _inherits(EditorInlineHints, _BaseEditorOption10);\n\n  var _super20 = _createSuper(EditorInlineHints);\n\n  function EditorInlineHints() {\n    _classCallCheck(this, EditorInlineHints);\n\n    var defaults = {\n      enabled: true,\n      fontSize: 0,\n      fontFamily: EDITOR_FONT_DEFAULTS.fontFamily\n    };\n    return _super20.call(this, 120\n    /* inlineHints */\n    , 'inlineHints', defaults, {\n      'editor.inlineHints.enabled': {\n        type: 'boolean',\n        \"default\": defaults.enabled,\n        description: nls.localize('inlineHints.enable', \"Enables the inline hints in the editor.\")\n      },\n      'editor.inlineHints.fontSize': {\n        type: 'number',\n        \"default\": defaults.fontSize,\n        description: nls.localize('inlineHints.fontSize', \"Controls font size of inline hints in the editor. When set to `0`, the 90% of `#editor.fontSize#` is used.\")\n      },\n      'editor.inlineHints.fontFamily': {\n        type: 'string',\n        \"default\": defaults.fontFamily,\n        description: nls.localize('inlineHints.fontFamily', \"Controls font family of inline hints in the editor.\")\n      }\n    });\n  }\n\n  _createClass(EditorInlineHints, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      if (!_input || typeof _input !== 'object') {\n        return this.defaultValue;\n      }\n\n      var input = _input;\n      return {\n        enabled: _boolean(input.enabled, this.defaultValue.enabled),\n        fontSize: EditorIntOption.clampedInt(input.fontSize, this.defaultValue.fontSize, 0, 100),\n        fontFamily: EditorStringOption.string(input.fontFamily, this.defaultValue.fontFamily)\n      };\n    }\n  }]);\n\n  return EditorInlineHints;\n}(BaseEditorOption); //#endregion\n//#region lineHeight\n\n\nvar EditorLineHeight = /*#__PURE__*/function (_EditorIntOption) {\n  _inherits(EditorLineHeight, _EditorIntOption);\n\n  var _super21 = _createSuper(EditorLineHeight);\n\n  function EditorLineHeight() {\n    _classCallCheck(this, EditorLineHeight);\n\n    return _super21.call(this, 53\n    /* lineHeight */\n    , 'lineHeight', EDITOR_FONT_DEFAULTS.lineHeight, 0, 150, {\n      description: nls.localize('lineHeight', \"Controls the line height. Use 0 to compute the line height from the font size.\")\n    });\n  }\n\n  _createClass(EditorLineHeight, [{\n    key: \"compute\",\n    value: function compute(env, options, value) {\n      // The lineHeight is computed from the fontSize if it is 0.\n      // Moreover, the final lineHeight respects the editor zoom level.\n      // So take the result from env.fontInfo\n      return env.fontInfo.lineHeight;\n    }\n  }]);\n\n  return EditorLineHeight;\n}(EditorIntOption);\n\nvar EditorMinimap = /*#__PURE__*/function (_BaseEditorOption11) {\n  _inherits(EditorMinimap, _BaseEditorOption11);\n\n  var _super22 = _createSuper(EditorMinimap);\n\n  function EditorMinimap() {\n    _classCallCheck(this, EditorMinimap);\n\n    var defaults = {\n      enabled: true,\n      size: 'proportional',\n      side: 'right',\n      showSlider: 'mouseover',\n      renderCharacters: true,\n      maxColumn: 120,\n      scale: 1\n    };\n    return _super22.call(this, 59\n    /* minimap */\n    , 'minimap', defaults, {\n      'editor.minimap.enabled': {\n        type: 'boolean',\n        \"default\": defaults.enabled,\n        description: nls.localize('minimap.enabled', \"Controls whether the minimap is shown.\")\n      },\n      'editor.minimap.size': {\n        type: 'string',\n        \"enum\": ['proportional', 'fill', 'fit'],\n        enumDescriptions: [nls.localize('minimap.size.proportional', \"The minimap has the same size as the editor contents (and might scroll).\"), nls.localize('minimap.size.fill', \"The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).\"), nls.localize('minimap.size.fit', \"The minimap will shrink as necessary to never be larger than the editor (no scrolling).\")],\n        \"default\": defaults.size,\n        description: nls.localize('minimap.size', \"Controls the size of the minimap.\")\n      },\n      'editor.minimap.side': {\n        type: 'string',\n        \"enum\": ['left', 'right'],\n        \"default\": defaults.side,\n        description: nls.localize('minimap.side', \"Controls the side where to render the minimap.\")\n      },\n      'editor.minimap.showSlider': {\n        type: 'string',\n        \"enum\": ['always', 'mouseover'],\n        \"default\": defaults.showSlider,\n        description: nls.localize('minimap.showSlider', \"Controls when the minimap slider is shown.\")\n      },\n      'editor.minimap.scale': {\n        type: 'number',\n        \"default\": defaults.scale,\n        minimum: 1,\n        maximum: 3,\n        \"enum\": [1, 2, 3],\n        description: nls.localize('minimap.scale', \"Scale of content drawn in the minimap: 1, 2 or 3.\")\n      },\n      'editor.minimap.renderCharacters': {\n        type: 'boolean',\n        \"default\": defaults.renderCharacters,\n        description: nls.localize('minimap.renderCharacters', \"Render the actual characters on a line as opposed to color blocks.\")\n      },\n      'editor.minimap.maxColumn': {\n        type: 'number',\n        \"default\": defaults.maxColumn,\n        description: nls.localize('minimap.maxColumn', \"Limit the width of the minimap to render at most a certain number of columns.\")\n      }\n    });\n  }\n\n  _createClass(EditorMinimap, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      if (!_input || typeof _input !== 'object') {\n        return this.defaultValue;\n      }\n\n      var input = _input;\n      return {\n        enabled: _boolean(input.enabled, this.defaultValue.enabled),\n        size: stringSet(input.size, this.defaultValue.size, ['proportional', 'fill', 'fit']),\n        side: stringSet(input.side, this.defaultValue.side, ['right', 'left']),\n        showSlider: stringSet(input.showSlider, this.defaultValue.showSlider, ['always', 'mouseover']),\n        renderCharacters: _boolean(input.renderCharacters, this.defaultValue.renderCharacters),\n        scale: EditorIntOption.clampedInt(input.scale, 1, 1, 3),\n        maxColumn: EditorIntOption.clampedInt(input.maxColumn, this.defaultValue.maxColumn, 1, 10000)\n      };\n    }\n  }]);\n\n  return EditorMinimap;\n}(BaseEditorOption); //#endregion\n//#region multiCursorModifier\n\n\nfunction _multiCursorModifierFromString(multiCursorModifier) {\n  if (multiCursorModifier === 'ctrlCmd') {\n    return platform.isMacintosh ? 'metaKey' : 'ctrlKey';\n  }\n\n  return 'altKey';\n}\n\nvar EditorPadding = /*#__PURE__*/function (_BaseEditorOption12) {\n  _inherits(EditorPadding, _BaseEditorOption12);\n\n  var _super23 = _createSuper(EditorPadding);\n\n  function EditorPadding() {\n    _classCallCheck(this, EditorPadding);\n\n    return _super23.call(this, 69\n    /* padding */\n    , 'padding', {\n      top: 0,\n      bottom: 0\n    }, {\n      'editor.padding.top': {\n        type: 'number',\n        \"default\": 0,\n        minimum: 0,\n        maximum: 1000,\n        description: nls.localize('padding.top', \"Controls the amount of space between the top edge of the editor and the first line.\")\n      },\n      'editor.padding.bottom': {\n        type: 'number',\n        \"default\": 0,\n        minimum: 0,\n        maximum: 1000,\n        description: nls.localize('padding.bottom', \"Controls the amount of space between the bottom edge of the editor and the last line.\")\n      }\n    });\n  }\n\n  _createClass(EditorPadding, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      if (!_input || typeof _input !== 'object') {\n        return this.defaultValue;\n      }\n\n      var input = _input;\n      return {\n        top: EditorIntOption.clampedInt(input.top, 0, 0, 1000),\n        bottom: EditorIntOption.clampedInt(input.bottom, 0, 0, 1000)\n      };\n    }\n  }]);\n\n  return EditorPadding;\n}(BaseEditorOption);\n\nvar EditorParameterHints = /*#__PURE__*/function (_BaseEditorOption13) {\n  _inherits(EditorParameterHints, _BaseEditorOption13);\n\n  var _super24 = _createSuper(EditorParameterHints);\n\n  function EditorParameterHints() {\n    _classCallCheck(this, EditorParameterHints);\n\n    var defaults = {\n      enabled: true,\n      cycle: false\n    };\n    return _super24.call(this, 70\n    /* parameterHints */\n    , 'parameterHints', defaults, {\n      'editor.parameterHints.enabled': {\n        type: 'boolean',\n        \"default\": defaults.enabled,\n        description: nls.localize('parameterHints.enabled', \"Enables a pop-up that shows parameter documentation and type information as you type.\")\n      },\n      'editor.parameterHints.cycle': {\n        type: 'boolean',\n        \"default\": defaults.cycle,\n        description: nls.localize('parameterHints.cycle', \"Controls whether the parameter hints menu cycles or closes when reaching the end of the list.\")\n      }\n    });\n  }\n\n  _createClass(EditorParameterHints, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      if (!_input || typeof _input !== 'object') {\n        return this.defaultValue;\n      }\n\n      var input = _input;\n      return {\n        enabled: _boolean(input.enabled, this.defaultValue.enabled),\n        cycle: _boolean(input.cycle, this.defaultValue.cycle)\n      };\n    }\n  }]);\n\n  return EditorParameterHints;\n}(BaseEditorOption); //#endregion\n//#region pixelRatio\n\n\nvar EditorPixelRatio = /*#__PURE__*/function (_ComputedEditorOption4) {\n  _inherits(EditorPixelRatio, _ComputedEditorOption4);\n\n  var _super25 = _createSuper(EditorPixelRatio);\n\n  function EditorPixelRatio() {\n    _classCallCheck(this, EditorPixelRatio);\n\n    return _super25.call(this, 122\n    /* pixelRatio */\n    );\n  }\n\n  _createClass(EditorPixelRatio, [{\n    key: \"compute\",\n    value: function compute(env, options, _) {\n      return env.pixelRatio;\n    }\n  }]);\n\n  return EditorPixelRatio;\n}(ComputedEditorOption);\n\nvar EditorQuickSuggestions = /*#__PURE__*/function (_BaseEditorOption14) {\n  _inherits(EditorQuickSuggestions, _BaseEditorOption14);\n\n  var _super26 = _createSuper(EditorQuickSuggestions);\n\n  function EditorQuickSuggestions() {\n    var _this5;\n\n    _classCallCheck(this, EditorQuickSuggestions);\n\n    var defaults = {\n      other: true,\n      comments: false,\n      strings: false\n    };\n    _this5 = _super26.call(this, 73\n    /* quickSuggestions */\n    , 'quickSuggestions', defaults, {\n      anyOf: [{\n        type: 'boolean'\n      }, {\n        type: 'object',\n        properties: {\n          strings: {\n            type: 'boolean',\n            \"default\": defaults.strings,\n            description: nls.localize('quickSuggestions.strings', \"Enable quick suggestions inside strings.\")\n          },\n          comments: {\n            type: 'boolean',\n            \"default\": defaults.comments,\n            description: nls.localize('quickSuggestions.comments', \"Enable quick suggestions inside comments.\")\n          },\n          other: {\n            type: 'boolean',\n            \"default\": defaults.other,\n            description: nls.localize('quickSuggestions.other', \"Enable quick suggestions outside of strings and comments.\")\n          }\n        }\n      }],\n      \"default\": defaults,\n      description: nls.localize('quickSuggestions', \"Controls whether suggestions should automatically show up while typing.\")\n    });\n    _this5.defaultValue = defaults;\n    return _this5;\n  }\n\n  _createClass(EditorQuickSuggestions, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      if (typeof _input === 'boolean') {\n        return _input;\n      }\n\n      if (_input && typeof _input === 'object') {\n        var input = _input;\n        var opts = {\n          other: _boolean(input.other, this.defaultValue.other),\n          comments: _boolean(input.comments, this.defaultValue.comments),\n          strings: _boolean(input.strings, this.defaultValue.strings)\n        };\n\n        if (opts.other && opts.comments && opts.strings) {\n          return true; // all on\n        } else if (!opts.other && !opts.comments && !opts.strings) {\n          return false; // all off\n        } else {\n          return opts;\n        }\n      }\n\n      return this.defaultValue;\n    }\n  }]);\n\n  return EditorQuickSuggestions;\n}(BaseEditorOption);\n\nvar EditorRenderLineNumbersOption = /*#__PURE__*/function (_BaseEditorOption15) {\n  _inherits(EditorRenderLineNumbersOption, _BaseEditorOption15);\n\n  var _super27 = _createSuper(EditorRenderLineNumbersOption);\n\n  function EditorRenderLineNumbersOption() {\n    _classCallCheck(this, EditorRenderLineNumbersOption);\n\n    return _super27.call(this, 54\n    /* lineNumbers */\n    , 'lineNumbers', {\n      renderType: 1\n      /* On */\n      ,\n      renderFn: null\n    }, {\n      type: 'string',\n      \"enum\": ['off', 'on', 'relative', 'interval'],\n      enumDescriptions: [nls.localize('lineNumbers.off', \"Line numbers are not rendered.\"), nls.localize('lineNumbers.on', \"Line numbers are rendered as absolute number.\"), nls.localize('lineNumbers.relative', \"Line numbers are rendered as distance in lines to cursor position.\"), nls.localize('lineNumbers.interval', \"Line numbers are rendered every 10 lines.\")],\n      \"default\": 'on',\n      description: nls.localize('lineNumbers', \"Controls the display of line numbers.\")\n    });\n  }\n\n  _createClass(EditorRenderLineNumbersOption, [{\n    key: \"validate\",\n    value: function validate(lineNumbers) {\n      var renderType = this.defaultValue.renderType;\n      var renderFn = this.defaultValue.renderFn;\n\n      if (typeof lineNumbers !== 'undefined') {\n        if (typeof lineNumbers === 'function') {\n          renderType = 4\n          /* Custom */\n          ;\n          renderFn = lineNumbers;\n        } else if (lineNumbers === 'interval') {\n          renderType = 3\n          /* Interval */\n          ;\n        } else if (lineNumbers === 'relative') {\n          renderType = 2\n          /* Relative */\n          ;\n        } else if (lineNumbers === 'on') {\n          renderType = 1\n          /* On */\n          ;\n        } else {\n          renderType = 0\n          /* Off */\n          ;\n        }\n      }\n\n      return {\n        renderType: renderType,\n        renderFn: renderFn\n      };\n    }\n  }]);\n\n  return EditorRenderLineNumbersOption;\n}(BaseEditorOption); //#endregion\n//#region renderValidationDecorations\n\n/**\r\n * @internal\r\n */\n\n\nexport function filterValidationDecorations(options) {\n  var renderValidationDecorations = options.get(82\n  /* renderValidationDecorations */\n  );\n\n  if (renderValidationDecorations === 'editable') {\n    return options.get(75\n    /* readOnly */\n    );\n  }\n\n  return renderValidationDecorations === 'on' ? false : true;\n}\n\nvar EditorRulers = /*#__PURE__*/function (_BaseEditorOption16) {\n  _inherits(EditorRulers, _BaseEditorOption16);\n\n  var _super28 = _createSuper(EditorRulers);\n\n  function EditorRulers() {\n    _classCallCheck(this, EditorRulers);\n\n    var defaults = [];\n    var columnSchema = {\n      type: 'number',\n      description: nls.localize('rulers.size', \"Number of monospace characters at which this editor ruler will render.\")\n    };\n    return _super28.call(this, 86\n    /* rulers */\n    , 'rulers', defaults, {\n      type: 'array',\n      items: {\n        anyOf: [columnSchema, {\n          type: ['object'],\n          properties: {\n            column: columnSchema,\n            color: {\n              type: 'string',\n              description: nls.localize('rulers.color', \"Color of this editor ruler.\"),\n              format: 'color-hex'\n            }\n          }\n        }]\n      },\n      \"default\": defaults,\n      description: nls.localize('rulers', \"Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.\")\n    });\n  }\n\n  _createClass(EditorRulers, [{\n    key: \"validate\",\n    value: function validate(input) {\n      if (Array.isArray(input)) {\n        var rulers = [];\n\n        var _iterator = _createForOfIteratorHelper(input),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _element = _step.value;\n\n            if (typeof _element === 'number') {\n              rulers.push({\n                column: EditorIntOption.clampedInt(_element, 0, 0, 10000),\n                color: null\n              });\n            } else if (_element && typeof _element === 'object') {\n              var element = _element;\n              rulers.push({\n                column: EditorIntOption.clampedInt(element.column, 0, 0, 10000),\n                color: element.color\n              });\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        rulers.sort(function (a, b) {\n          return a.column - b.column;\n        });\n        return rulers;\n      }\n\n      return this.defaultValue;\n    }\n  }]);\n\n  return EditorRulers;\n}(BaseEditorOption);\n\nfunction _scrollbarVisibilityFromString(visibility, defaultValue) {\n  if (typeof visibility !== 'string') {\n    return defaultValue;\n  }\n\n  switch (visibility) {\n    case 'hidden':\n      return 2\n      /* Hidden */\n      ;\n\n    case 'visible':\n      return 3\n      /* Visible */\n      ;\n\n    default:\n      return 1\n      /* Auto */\n      ;\n  }\n}\n\nvar EditorScrollbar = /*#__PURE__*/function (_BaseEditorOption17) {\n  _inherits(EditorScrollbar, _BaseEditorOption17);\n\n  var _super29 = _createSuper(EditorScrollbar);\n\n  function EditorScrollbar() {\n    _classCallCheck(this, EditorScrollbar);\n\n    return _super29.call(this, 87\n    /* scrollbar */\n    , 'scrollbar', {\n      vertical: 1\n      /* Auto */\n      ,\n      horizontal: 1\n      /* Auto */\n      ,\n      arrowSize: 11,\n      useShadows: true,\n      verticalHasArrows: false,\n      horizontalHasArrows: false,\n      horizontalScrollbarSize: 12,\n      horizontalSliderSize: 12,\n      verticalScrollbarSize: 14,\n      verticalSliderSize: 14,\n      handleMouseWheel: true,\n      alwaysConsumeMouseWheel: true,\n      scrollByPage: false\n    });\n  }\n\n  _createClass(EditorScrollbar, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      if (!_input || typeof _input !== 'object') {\n        return this.defaultValue;\n      }\n\n      var input = _input;\n      var horizontalScrollbarSize = EditorIntOption.clampedInt(input.horizontalScrollbarSize, this.defaultValue.horizontalScrollbarSize, 0, 1000);\n      var verticalScrollbarSize = EditorIntOption.clampedInt(input.verticalScrollbarSize, this.defaultValue.verticalScrollbarSize, 0, 1000);\n      return {\n        arrowSize: EditorIntOption.clampedInt(input.arrowSize, this.defaultValue.arrowSize, 0, 1000),\n        vertical: _scrollbarVisibilityFromString(input.vertical, this.defaultValue.vertical),\n        horizontal: _scrollbarVisibilityFromString(input.horizontal, this.defaultValue.horizontal),\n        useShadows: _boolean(input.useShadows, this.defaultValue.useShadows),\n        verticalHasArrows: _boolean(input.verticalHasArrows, this.defaultValue.verticalHasArrows),\n        horizontalHasArrows: _boolean(input.horizontalHasArrows, this.defaultValue.horizontalHasArrows),\n        handleMouseWheel: _boolean(input.handleMouseWheel, this.defaultValue.handleMouseWheel),\n        alwaysConsumeMouseWheel: _boolean(input.alwaysConsumeMouseWheel, this.defaultValue.alwaysConsumeMouseWheel),\n        horizontalScrollbarSize: horizontalScrollbarSize,\n        horizontalSliderSize: EditorIntOption.clampedInt(input.horizontalSliderSize, horizontalScrollbarSize, 0, 1000),\n        verticalScrollbarSize: verticalScrollbarSize,\n        verticalSliderSize: EditorIntOption.clampedInt(input.verticalSliderSize, verticalScrollbarSize, 0, 1000),\n        scrollByPage: _boolean(input.scrollByPage, this.defaultValue.scrollByPage)\n      };\n    }\n  }]);\n\n  return EditorScrollbar;\n}(BaseEditorOption);\n\nvar EditorSuggest = /*#__PURE__*/function (_BaseEditorOption18) {\n  _inherits(EditorSuggest, _BaseEditorOption18);\n\n  var _super30 = _createSuper(EditorSuggest);\n\n  function EditorSuggest() {\n    _classCallCheck(this, EditorSuggest);\n\n    var defaults = {\n      insertMode: 'insert',\n      filterGraceful: true,\n      snippetsPreventQuickSuggestions: true,\n      localityBonus: false,\n      shareSuggestSelections: false,\n      showIcons: true,\n      showStatusBar: false,\n      showInlineDetails: true,\n      showMethods: true,\n      showFunctions: true,\n      showConstructors: true,\n      showFields: true,\n      showVariables: true,\n      showClasses: true,\n      showStructs: true,\n      showInterfaces: true,\n      showModules: true,\n      showProperties: true,\n      showEvents: true,\n      showOperators: true,\n      showUnits: true,\n      showValues: true,\n      showConstants: true,\n      showEnums: true,\n      showEnumMembers: true,\n      showKeywords: true,\n      showWords: true,\n      showColors: true,\n      showFiles: true,\n      showReferences: true,\n      showFolders: true,\n      showTypeParameters: true,\n      showSnippets: true,\n      showUsers: true,\n      showIssues: true\n    };\n    return _super30.call(this, 101\n    /* suggest */\n    , 'suggest', defaults, {\n      'editor.suggest.insertMode': {\n        type: 'string',\n        \"enum\": ['insert', 'replace'],\n        enumDescriptions: [nls.localize('suggest.insertMode.insert', \"Insert suggestion without overwriting text right of the cursor.\"), nls.localize('suggest.insertMode.replace', \"Insert suggestion and overwrite text right of the cursor.\")],\n        \"default\": defaults.insertMode,\n        description: nls.localize('suggest.insertMode', \"Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.\")\n      },\n      'editor.suggest.filterGraceful': {\n        type: 'boolean',\n        \"default\": defaults.filterGraceful,\n        description: nls.localize('suggest.filterGraceful', \"Controls whether filtering and sorting suggestions accounts for small typos.\")\n      },\n      'editor.suggest.localityBonus': {\n        type: 'boolean',\n        \"default\": defaults.localityBonus,\n        description: nls.localize('suggest.localityBonus', \"Controls whether sorting favours words that appear close to the cursor.\")\n      },\n      'editor.suggest.shareSuggestSelections': {\n        type: 'boolean',\n        \"default\": defaults.shareSuggestSelections,\n        markdownDescription: nls.localize('suggest.shareSuggestSelections', \"Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).\")\n      },\n      'editor.suggest.snippetsPreventQuickSuggestions': {\n        type: 'boolean',\n        \"default\": defaults.snippetsPreventQuickSuggestions,\n        description: nls.localize('suggest.snippetsPreventQuickSuggestions', \"Controls whether an active snippet prevents quick suggestions.\")\n      },\n      'editor.suggest.showIcons': {\n        type: 'boolean',\n        \"default\": defaults.showIcons,\n        description: nls.localize('suggest.showIcons', \"Controls whether to show or hide icons in suggestions.\")\n      },\n      'editor.suggest.showStatusBar': {\n        type: 'boolean',\n        \"default\": defaults.showStatusBar,\n        description: nls.localize('suggest.showStatusBar', \"Controls the visibility of the status bar at the bottom of the suggest widget.\")\n      },\n      'editor.suggest.showInlineDetails': {\n        type: 'boolean',\n        \"default\": defaults.showInlineDetails,\n        description: nls.localize('suggest.showInlineDetails', \"Controls whether suggest details show inline with the label or only in the details widget\")\n      },\n      'editor.suggest.maxVisibleSuggestions': {\n        type: 'number',\n        deprecationMessage: nls.localize('suggest.maxVisibleSuggestions.dep', \"This setting is deprecated. The suggest widget can now be resized.\")\n      },\n      'editor.suggest.filteredTypes': {\n        type: 'object',\n        deprecationMessage: nls.localize('deprecated', \"This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.\")\n      },\n      'editor.suggest.showMethods': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showMethods', \"When enabled IntelliSense shows `method`-suggestions.\")\n      },\n      'editor.suggest.showFunctions': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showFunctions', \"When enabled IntelliSense shows `function`-suggestions.\")\n      },\n      'editor.suggest.showConstructors': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showConstructors', \"When enabled IntelliSense shows `constructor`-suggestions.\")\n      },\n      'editor.suggest.showFields': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showFields', \"When enabled IntelliSense shows `field`-suggestions.\")\n      },\n      'editor.suggest.showVariables': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showVariables', \"When enabled IntelliSense shows `variable`-suggestions.\")\n      },\n      'editor.suggest.showClasses': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showClasss', \"When enabled IntelliSense shows `class`-suggestions.\")\n      },\n      'editor.suggest.showStructs': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showStructs', \"When enabled IntelliSense shows `struct`-suggestions.\")\n      },\n      'editor.suggest.showInterfaces': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showInterfaces', \"When enabled IntelliSense shows `interface`-suggestions.\")\n      },\n      'editor.suggest.showModules': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showModules', \"When enabled IntelliSense shows `module`-suggestions.\")\n      },\n      'editor.suggest.showProperties': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showPropertys', \"When enabled IntelliSense shows `property`-suggestions.\")\n      },\n      'editor.suggest.showEvents': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showEvents', \"When enabled IntelliSense shows `event`-suggestions.\")\n      },\n      'editor.suggest.showOperators': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showOperators', \"When enabled IntelliSense shows `operator`-suggestions.\")\n      },\n      'editor.suggest.showUnits': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showUnits', \"When enabled IntelliSense shows `unit`-suggestions.\")\n      },\n      'editor.suggest.showValues': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showValues', \"When enabled IntelliSense shows `value`-suggestions.\")\n      },\n      'editor.suggest.showConstants': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showConstants', \"When enabled IntelliSense shows `constant`-suggestions.\")\n      },\n      'editor.suggest.showEnums': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showEnums', \"When enabled IntelliSense shows `enum`-suggestions.\")\n      },\n      'editor.suggest.showEnumMembers': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showEnumMembers', \"When enabled IntelliSense shows `enumMember`-suggestions.\")\n      },\n      'editor.suggest.showKeywords': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showKeywords', \"When enabled IntelliSense shows `keyword`-suggestions.\")\n      },\n      'editor.suggest.showWords': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showTexts', \"When enabled IntelliSense shows `text`-suggestions.\")\n      },\n      'editor.suggest.showColors': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showColors', \"When enabled IntelliSense shows `color`-suggestions.\")\n      },\n      'editor.suggest.showFiles': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showFiles', \"When enabled IntelliSense shows `file`-suggestions.\")\n      },\n      'editor.suggest.showReferences': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showReferences', \"When enabled IntelliSense shows `reference`-suggestions.\")\n      },\n      'editor.suggest.showCustomcolors': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showCustomcolors', \"When enabled IntelliSense shows `customcolor`-suggestions.\")\n      },\n      'editor.suggest.showFolders': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showFolders', \"When enabled IntelliSense shows `folder`-suggestions.\")\n      },\n      'editor.suggest.showTypeParameters': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showTypeParameters', \"When enabled IntelliSense shows `typeParameter`-suggestions.\")\n      },\n      'editor.suggest.showSnippets': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showSnippets', \"When enabled IntelliSense shows `snippet`-suggestions.\")\n      },\n      'editor.suggest.showUsers': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showUsers', \"When enabled IntelliSense shows `user`-suggestions.\")\n      },\n      'editor.suggest.showIssues': {\n        type: 'boolean',\n        \"default\": true,\n        markdownDescription: nls.localize('editor.suggest.showIssues', \"When enabled IntelliSense shows `issues`-suggestions.\")\n      }\n    });\n  }\n\n  _createClass(EditorSuggest, [{\n    key: \"validate\",\n    value: function validate(_input) {\n      if (!_input || typeof _input !== 'object') {\n        return this.defaultValue;\n      }\n\n      var input = _input;\n      return {\n        insertMode: stringSet(input.insertMode, this.defaultValue.insertMode, ['insert', 'replace']),\n        filterGraceful: _boolean(input.filterGraceful, this.defaultValue.filterGraceful),\n        snippetsPreventQuickSuggestions: _boolean(input.snippetsPreventQuickSuggestions, this.defaultValue.filterGraceful),\n        localityBonus: _boolean(input.localityBonus, this.defaultValue.localityBonus),\n        shareSuggestSelections: _boolean(input.shareSuggestSelections, this.defaultValue.shareSuggestSelections),\n        showIcons: _boolean(input.showIcons, this.defaultValue.showIcons),\n        showStatusBar: _boolean(input.showStatusBar, this.defaultValue.showStatusBar),\n        showInlineDetails: _boolean(input.showInlineDetails, this.defaultValue.showInlineDetails),\n        showMethods: _boolean(input.showMethods, this.defaultValue.showMethods),\n        showFunctions: _boolean(input.showFunctions, this.defaultValue.showFunctions),\n        showConstructors: _boolean(input.showConstructors, this.defaultValue.showConstructors),\n        showFields: _boolean(input.showFields, this.defaultValue.showFields),\n        showVariables: _boolean(input.showVariables, this.defaultValue.showVariables),\n        showClasses: _boolean(input.showClasses, this.defaultValue.showClasses),\n        showStructs: _boolean(input.showStructs, this.defaultValue.showStructs),\n        showInterfaces: _boolean(input.showInterfaces, this.defaultValue.showInterfaces),\n        showModules: _boolean(input.showModules, this.defaultValue.showModules),\n        showProperties: _boolean(input.showProperties, this.defaultValue.showProperties),\n        showEvents: _boolean(input.showEvents, this.defaultValue.showEvents),\n        showOperators: _boolean(input.showOperators, this.defaultValue.showOperators),\n        showUnits: _boolean(input.showUnits, this.defaultValue.showUnits),\n        showValues: _boolean(input.showValues, this.defaultValue.showValues),\n        showConstants: _boolean(input.showConstants, this.defaultValue.showConstants),\n        showEnums: _boolean(input.showEnums, this.defaultValue.showEnums),\n        showEnumMembers: _boolean(input.showEnumMembers, this.defaultValue.showEnumMembers),\n        showKeywords: _boolean(input.showKeywords, this.defaultValue.showKeywords),\n        showWords: _boolean(input.showWords, this.defaultValue.showWords),\n        showColors: _boolean(input.showColors, this.defaultValue.showColors),\n        showFiles: _boolean(input.showFiles, this.defaultValue.showFiles),\n        showReferences: _boolean(input.showReferences, this.defaultValue.showReferences),\n        showFolders: _boolean(input.showFolders, this.defaultValue.showFolders),\n        showTypeParameters: _boolean(input.showTypeParameters, this.defaultValue.showTypeParameters),\n        showSnippets: _boolean(input.showSnippets, this.defaultValue.showSnippets),\n        showUsers: _boolean(input.showUsers, this.defaultValue.showUsers),\n        showIssues: _boolean(input.showIssues, this.defaultValue.showIssues)\n      };\n    }\n  }]);\n\n  return EditorSuggest;\n}(BaseEditorOption);\n\nvar SmartSelect = /*#__PURE__*/function (_BaseEditorOption19) {\n  _inherits(SmartSelect, _BaseEditorOption19);\n\n  var _super31 = _createSuper(SmartSelect);\n\n  function SmartSelect() {\n    _classCallCheck(this, SmartSelect);\n\n    return _super31.call(this, 97\n    /* smartSelect */\n    , 'smartSelect', {\n      selectLeadingAndTrailingWhitespace: true\n    }, {\n      'editor.smartSelect.selectLeadingAndTrailingWhitespace': {\n        description: nls.localize('selectLeadingAndTrailingWhitespace', \"Whether leading and trailing whitespace should always be selected.\"),\n        \"default\": true,\n        type: 'boolean'\n      }\n    });\n  }\n\n  _createClass(SmartSelect, [{\n    key: \"validate\",\n    value: function validate(input) {\n      if (!input || typeof input !== 'object') {\n        return this.defaultValue;\n      }\n\n      return {\n        selectLeadingAndTrailingWhitespace: _boolean(input.selectLeadingAndTrailingWhitespace, this.defaultValue.selectLeadingAndTrailingWhitespace)\n      };\n    }\n  }]);\n\n  return SmartSelect;\n}(BaseEditorOption); //#endregion\n//#region tabFocusMode\n\n\nvar EditorTabFocusMode = /*#__PURE__*/function (_ComputedEditorOption5) {\n  _inherits(EditorTabFocusMode, _ComputedEditorOption5);\n\n  var _super32 = _createSuper(EditorTabFocusMode);\n\n  function EditorTabFocusMode() {\n    _classCallCheck(this, EditorTabFocusMode);\n\n    return _super32.call(this, 123\n    /* tabFocusMode */\n    , [75\n    /* readOnly */\n    ]);\n  }\n\n  _createClass(EditorTabFocusMode, [{\n    key: \"compute\",\n    value: function compute(env, options, _) {\n      var readOnly = options.get(75\n      /* readOnly */\n      );\n      return readOnly ? true : env.tabFocusMode;\n    }\n  }]);\n\n  return EditorTabFocusMode;\n}(ComputedEditorOption);\n\nfunction _wrappingIndentFromString(wrappingIndent) {\n  switch (wrappingIndent) {\n    case 'none':\n      return 0\n      /* None */\n      ;\n\n    case 'same':\n      return 1\n      /* Same */\n      ;\n\n    case 'indent':\n      return 2\n      /* Indent */\n      ;\n\n    case 'deepIndent':\n      return 3\n      /* DeepIndent */\n      ;\n  }\n}\n\nvar EditorWrappingInfoComputer = /*#__PURE__*/function (_ComputedEditorOption6) {\n  _inherits(EditorWrappingInfoComputer, _ComputedEditorOption6);\n\n  var _super33 = _createSuper(EditorWrappingInfoComputer);\n\n  function EditorWrappingInfoComputer() {\n    _classCallCheck(this, EditorWrappingInfoComputer);\n\n    return _super33.call(this, 125\n    /* wrappingInfo */\n    , [124\n    /* layoutInfo */\n    ]);\n  }\n\n  _createClass(EditorWrappingInfoComputer, [{\n    key: \"compute\",\n    value: function compute(env, options, _) {\n      var layoutInfo = options.get(124\n      /* layoutInfo */\n      );\n      return {\n        isDominatedByLongLines: env.isDominatedByLongLines,\n        isWordWrapMinified: layoutInfo.isWordWrapMinified,\n        isViewportWrapping: layoutInfo.isViewportWrapping,\n        wrappingColumn: layoutInfo.wrappingColumn\n      };\n    }\n  }]);\n\n  return EditorWrappingInfoComputer;\n}(ComputedEditorOption); //#endregion\n\n\nvar DEFAULT_WINDOWS_FONT_FAMILY = 'Consolas, \\'Courier New\\', monospace';\nvar DEFAULT_MAC_FONT_FAMILY = 'Menlo, Monaco, \\'Courier New\\', monospace';\nvar DEFAULT_LINUX_FONT_FAMILY = '\\'Droid Sans Mono\\', \\'monospace\\', monospace, \\'Droid Sans Fallback\\'';\n/**\r\n * @internal\r\n */\n\nexport var EDITOR_FONT_DEFAULTS = {\n  fontFamily: platform.isMacintosh ? DEFAULT_MAC_FONT_FAMILY : platform.isLinux ? DEFAULT_LINUX_FONT_FAMILY : DEFAULT_WINDOWS_FONT_FAMILY,\n  fontWeight: 'normal',\n  fontSize: platform.isMacintosh ? 12 : 14,\n  lineHeight: 0,\n  letterSpacing: 0\n};\n/**\r\n * @internal\r\n */\n\nexport var EDITOR_MODEL_DEFAULTS = {\n  tabSize: 4,\n  indentSize: 4,\n  insertSpaces: true,\n  detectIndentation: true,\n  trimAutoWhitespace: true,\n  largeFileOptimizations: true\n};\n/**\r\n * @internal\r\n */\n\nexport var editorOptionsRegistry = [];\n\nfunction register(option) {\n  editorOptionsRegistry[option.id] = option;\n  return option;\n}\n/**\r\n * WORKAROUND: TS emits \"any\" for complex editor options values (anything except string, bool, enum, etc. ends up being \"any\")\r\n * @monacodtsreplace\r\n * /accessibilitySupport, any/accessibilitySupport, AccessibilitySupport/\r\n * /comments, any/comments, EditorCommentsOptions/\r\n * /find, any/find, EditorFindOptions/\r\n * /fontInfo, any/fontInfo, FontInfo/\r\n * /gotoLocation, any/gotoLocation, GoToLocationOptions/\r\n * /hover, any/hover, EditorHoverOptions/\r\n * /lightbulb, any/lightbulb, EditorLightbulbOptions/\r\n * /minimap, any/minimap, EditorMinimapOptions/\r\n * /parameterHints, any/parameterHints, InternalParameterHintOptions/\r\n * /quickSuggestions, any/quickSuggestions, ValidQuickSuggestionsOptions/\r\n * /suggest, any/suggest, InternalSuggestOptions/\r\n */\n\n\nexport var EditorOptions = {\n  acceptSuggestionOnCommitCharacter: register(new EditorBooleanOption(0\n  /* acceptSuggestionOnCommitCharacter */\n  , 'acceptSuggestionOnCommitCharacter', true, {\n    markdownDescription: nls.localize('acceptSuggestionOnCommitCharacter', \"Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.\")\n  })),\n  acceptSuggestionOnEnter: register(new EditorStringEnumOption(1\n  /* acceptSuggestionOnEnter */\n  , 'acceptSuggestionOnEnter', 'on', ['on', 'smart', 'off'], {\n    markdownEnumDescriptions: ['', nls.localize('acceptSuggestionOnEnterSmart', \"Only accept a suggestion with `Enter` when it makes a textual change.\"), ''],\n    markdownDescription: nls.localize('acceptSuggestionOnEnter', \"Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.\")\n  })),\n  accessibilitySupport: register(new EditorAccessibilitySupport()),\n  accessibilityPageSize: register(new EditorIntOption(3\n  /* accessibilityPageSize */\n  , 'accessibilityPageSize', 10, 1, 1073741824\n  /* MAX_SAFE_SMALL_INTEGER */\n  , {\n    description: nls.localize('accessibilityPageSize', \"Controls the number of lines in the editor that can be read out by a screen reader. Warning: this has a performance implication for numbers larger than the default.\")\n  })),\n  ariaLabel: register(new EditorStringOption(4\n  /* ariaLabel */\n  , 'ariaLabel', nls.localize('editorViewAccessibleLabel', \"Editor content\"))),\n  autoClosingBrackets: register(new EditorStringEnumOption(5\n  /* autoClosingBrackets */\n  , 'autoClosingBrackets', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {\n    enumDescriptions: ['', nls.localize('editor.autoClosingBrackets.languageDefined', \"Use language configurations to determine when to autoclose brackets.\"), nls.localize('editor.autoClosingBrackets.beforeWhitespace', \"Autoclose brackets only when the cursor is to the left of whitespace.\"), ''],\n    description: nls.localize('autoClosingBrackets', \"Controls whether the editor should automatically close brackets after the user adds an opening bracket.\")\n  })),\n  autoClosingOvertype: register(new EditorStringEnumOption(6\n  /* autoClosingOvertype */\n  , 'autoClosingOvertype', 'auto', ['always', 'auto', 'never'], {\n    enumDescriptions: ['', nls.localize('editor.autoClosingOvertype.auto', \"Type over closing quotes or brackets only if they were automatically inserted.\"), ''],\n    description: nls.localize('autoClosingOvertype', \"Controls whether the editor should type over closing quotes or brackets.\")\n  })),\n  autoClosingQuotes: register(new EditorStringEnumOption(7\n  /* autoClosingQuotes */\n  , 'autoClosingQuotes', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {\n    enumDescriptions: ['', nls.localize('editor.autoClosingQuotes.languageDefined', \"Use language configurations to determine when to autoclose quotes.\"), nls.localize('editor.autoClosingQuotes.beforeWhitespace', \"Autoclose quotes only when the cursor is to the left of whitespace.\"), ''],\n    description: nls.localize('autoClosingQuotes', \"Controls whether the editor should automatically close quotes after the user adds an opening quote.\")\n  })),\n  autoIndent: register(new EditorEnumOption(8\n  /* autoIndent */\n  , 'autoIndent', 4\n  /* Full */\n  , 'full', ['none', 'keep', 'brackets', 'advanced', 'full'], _autoIndentFromString, {\n    enumDescriptions: [nls.localize('editor.autoIndent.none', \"The editor will not insert indentation automatically.\"), nls.localize('editor.autoIndent.keep', \"The editor will keep the current line's indentation.\"), nls.localize('editor.autoIndent.brackets', \"The editor will keep the current line's indentation and honor language defined brackets.\"), nls.localize('editor.autoIndent.advanced', \"The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.\"), nls.localize('editor.autoIndent.full', \"The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.\")],\n    description: nls.localize('autoIndent', \"Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.\")\n  })),\n  automaticLayout: register(new EditorBooleanOption(9\n  /* automaticLayout */\n  , 'automaticLayout', false)),\n  autoSurround: register(new EditorStringEnumOption(10\n  /* autoSurround */\n  , 'autoSurround', 'languageDefined', ['languageDefined', 'quotes', 'brackets', 'never'], {\n    enumDescriptions: [nls.localize('editor.autoSurround.languageDefined', \"Use language configurations to determine when to automatically surround selections.\"), nls.localize('editor.autoSurround.quotes', \"Surround with quotes but not brackets.\"), nls.localize('editor.autoSurround.brackets', \"Surround with brackets but not quotes.\"), ''],\n    description: nls.localize('autoSurround', \"Controls whether the editor should automatically surround selections when typing quotes or brackets.\")\n  })),\n  stickyTabStops: register(new EditorBooleanOption(99\n  /* stickyTabStops */\n  , 'stickyTabStops', false, {\n    description: nls.localize('stickyTabStops', \"Emulate selection behaviour of tab characters when using spaces for indentation. Selection will stick to tab stops.\")\n  })),\n  codeLens: register(new EditorBooleanOption(11\n  /* codeLens */\n  , 'codeLens', true, {\n    description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\n  })),\n  codeLensFontFamily: register(new EditorStringOption(12\n  /* codeLensFontFamily */\n  , 'codeLensFontFamily', '', {\n    description: nls.localize('codeLensFontFamily', \"Controls the font family for CodeLens.\")\n  })),\n  codeLensFontSize: register(new EditorIntOption(13\n  /* codeLensFontSize */\n  , 'codeLensFontSize', 0, 0, 100, {\n    type: 'number',\n    \"default\": 0,\n    minimum: 0,\n    maximum: 100,\n    description: nls.localize('codeLensFontSize', \"Controls the font size in pixels for CodeLens. When set to `0`, the 90% of `#editor.fontSize#` is used.\")\n  })),\n  colorDecorators: register(new EditorBooleanOption(14\n  /* colorDecorators */\n  , 'colorDecorators', true, {\n    description: nls.localize('colorDecorators', \"Controls whether the editor should render the inline color decorators and color picker.\")\n  })),\n  columnSelection: register(new EditorBooleanOption(15\n  /* columnSelection */\n  , 'columnSelection', false, {\n    description: nls.localize('columnSelection', \"Enable that the selection with the mouse and keys is doing column selection.\")\n  })),\n  comments: register(new EditorComments()),\n  contextmenu: register(new EditorBooleanOption(17\n  /* contextmenu */\n  , 'contextmenu', true)),\n  copyWithSyntaxHighlighting: register(new EditorBooleanOption(18\n  /* copyWithSyntaxHighlighting */\n  , 'copyWithSyntaxHighlighting', true, {\n    description: nls.localize('copyWithSyntaxHighlighting', \"Controls whether syntax highlighting should be copied into the clipboard.\")\n  })),\n  cursorBlinking: register(new EditorEnumOption(19\n  /* cursorBlinking */\n  , 'cursorBlinking', 1\n  /* Blink */\n  , 'blink', ['blink', 'smooth', 'phase', 'expand', 'solid'], _cursorBlinkingStyleFromString, {\n    description: nls.localize('cursorBlinking', \"Control the cursor animation style.\")\n  })),\n  cursorSmoothCaretAnimation: register(new EditorBooleanOption(20\n  /* cursorSmoothCaretAnimation */\n  , 'cursorSmoothCaretAnimation', false, {\n    description: nls.localize('cursorSmoothCaretAnimation', \"Controls whether the smooth caret animation should be enabled.\")\n  })),\n  cursorStyle: register(new EditorEnumOption(21\n  /* cursorStyle */\n  , 'cursorStyle', TextEditorCursorStyle.Line, 'line', ['line', 'block', 'underline', 'line-thin', 'block-outline', 'underline-thin'], _cursorStyleFromString, {\n    description: nls.localize('cursorStyle', \"Controls the cursor style.\")\n  })),\n  cursorSurroundingLines: register(new EditorIntOption(22\n  /* cursorSurroundingLines */\n  , 'cursorSurroundingLines', 0, 0, 1073741824\n  /* MAX_SAFE_SMALL_INTEGER */\n  , {\n    description: nls.localize('cursorSurroundingLines', \"Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.\")\n  })),\n  cursorSurroundingLinesStyle: register(new EditorStringEnumOption(23\n  /* cursorSurroundingLinesStyle */\n  , 'cursorSurroundingLinesStyle', 'default', ['default', 'all'], {\n    enumDescriptions: [nls.localize('cursorSurroundingLinesStyle.default', \"`cursorSurroundingLines` is enforced only when triggered via the keyboard or API.\"), nls.localize('cursorSurroundingLinesStyle.all', \"`cursorSurroundingLines` is enforced always.\")],\n    description: nls.localize('cursorSurroundingLinesStyle', \"Controls when `cursorSurroundingLines` should be enforced.\")\n  })),\n  cursorWidth: register(new EditorIntOption(24\n  /* cursorWidth */\n  , 'cursorWidth', 0, 0, 1073741824\n  /* MAX_SAFE_SMALL_INTEGER */\n  , {\n    markdownDescription: nls.localize('cursorWidth', \"Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.\")\n  })),\n  disableLayerHinting: register(new EditorBooleanOption(25\n  /* disableLayerHinting */\n  , 'disableLayerHinting', false)),\n  disableMonospaceOptimizations: register(new EditorBooleanOption(26\n  /* disableMonospaceOptimizations */\n  , 'disableMonospaceOptimizations', false)),\n  dragAndDrop: register(new EditorBooleanOption(27\n  /* dragAndDrop */\n  , 'dragAndDrop', true, {\n    description: nls.localize('dragAndDrop', \"Controls whether the editor should allow moving selections via drag and drop.\")\n  })),\n  emptySelectionClipboard: register(new EditorEmptySelectionClipboard()),\n  extraEditorClassName: register(new EditorStringOption(29\n  /* extraEditorClassName */\n  , 'extraEditorClassName', '')),\n  fastScrollSensitivity: register(new EditorFloatOption(30\n  /* fastScrollSensitivity */\n  , 'fastScrollSensitivity', 5, function (x) {\n    return x <= 0 ? 5 : x;\n  }, {\n    markdownDescription: nls.localize('fastScrollSensitivity', \"Scrolling speed multiplier when pressing `Alt`.\")\n  })),\n  find: register(new EditorFind()),\n  fixedOverflowWidgets: register(new EditorBooleanOption(32\n  /* fixedOverflowWidgets */\n  , 'fixedOverflowWidgets', false)),\n  folding: register(new EditorBooleanOption(33\n  /* folding */\n  , 'folding', true, {\n    description: nls.localize('folding', \"Controls whether the editor has code folding enabled.\")\n  })),\n  foldingStrategy: register(new EditorStringEnumOption(34\n  /* foldingStrategy */\n  , 'foldingStrategy', 'auto', ['auto', 'indentation'], {\n    enumDescriptions: [nls.localize('foldingStrategy.auto', \"Use a language-specific folding strategy if available, else the indentation-based one.\"), nls.localize('foldingStrategy.indentation', \"Use the indentation-based folding strategy.\")],\n    description: nls.localize('foldingStrategy', \"Controls the strategy for computing folding ranges.\")\n  })),\n  foldingHighlight: register(new EditorBooleanOption(35\n  /* foldingHighlight */\n  , 'foldingHighlight', true, {\n    description: nls.localize('foldingHighlight', \"Controls whether the editor should highlight folded ranges.\")\n  })),\n  unfoldOnClickAfterEndOfLine: register(new EditorBooleanOption(36\n  /* unfoldOnClickAfterEndOfLine */\n  , 'unfoldOnClickAfterEndOfLine', false, {\n    description: nls.localize('unfoldOnClickAfterEndOfLine', \"Controls whether clicking on the empty content after a folded line will unfold the line.\")\n  })),\n  fontFamily: register(new EditorStringOption(37\n  /* fontFamily */\n  , 'fontFamily', EDITOR_FONT_DEFAULTS.fontFamily, {\n    description: nls.localize('fontFamily', \"Controls the font family.\")\n  })),\n  fontInfo: register(new EditorFontInfo()),\n  fontLigatures2: register(new EditorFontLigatures()),\n  fontSize: register(new EditorFontSize()),\n  fontWeight: register(new EditorFontWeight()),\n  formatOnPaste: register(new EditorBooleanOption(42\n  /* formatOnPaste */\n  , 'formatOnPaste', false, {\n    description: nls.localize('formatOnPaste', \"Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.\")\n  })),\n  formatOnType: register(new EditorBooleanOption(43\n  /* formatOnType */\n  , 'formatOnType', false, {\n    description: nls.localize('formatOnType', \"Controls whether the editor should automatically format the line after typing.\")\n  })),\n  glyphMargin: register(new EditorBooleanOption(44\n  /* glyphMargin */\n  , 'glyphMargin', true, {\n    description: nls.localize('glyphMargin', \"Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.\")\n  })),\n  gotoLocation: register(new EditorGoToLocation()),\n  hideCursorInOverviewRuler: register(new EditorBooleanOption(46\n  /* hideCursorInOverviewRuler */\n  , 'hideCursorInOverviewRuler', false, {\n    description: nls.localize('hideCursorInOverviewRuler', \"Controls whether the cursor should be hidden in the overview ruler.\")\n  })),\n  highlightActiveIndentGuide: register(new EditorBooleanOption(47\n  /* highlightActiveIndentGuide */\n  , 'highlightActiveIndentGuide', true, {\n    description: nls.localize('highlightActiveIndentGuide', \"Controls whether the editor should highlight the active indent guide.\")\n  })),\n  hover: register(new EditorHover()),\n  inDiffEditor: register(new EditorBooleanOption(49\n  /* inDiffEditor */\n  , 'inDiffEditor', false)),\n  letterSpacing: register(new EditorFloatOption(50\n  /* letterSpacing */\n  , 'letterSpacing', EDITOR_FONT_DEFAULTS.letterSpacing, function (x) {\n    return EditorFloatOption.clamp(x, -5, 20);\n  }, {\n    description: nls.localize('letterSpacing', \"Controls the letter spacing in pixels.\")\n  })),\n  lightbulb: register(new EditorLightbulb()),\n  lineDecorationsWidth: register(new SimpleEditorOption(52\n  /* lineDecorationsWidth */\n  , 'lineDecorationsWidth', 10)),\n  lineHeight: register(new EditorLineHeight()),\n  lineNumbers: register(new EditorRenderLineNumbersOption()),\n  lineNumbersMinChars: register(new EditorIntOption(55\n  /* lineNumbersMinChars */\n  , 'lineNumbersMinChars', 5, 1, 300)),\n  linkedEditing: register(new EditorBooleanOption(56\n  /* linkedEditing */\n  , 'linkedEditing', false, {\n    description: nls.localize('linkedEditing', \"Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.\")\n  })),\n  links: register(new EditorBooleanOption(57\n  /* links */\n  , 'links', true, {\n    description: nls.localize('links', \"Controls whether the editor should detect links and make them clickable.\")\n  })),\n  matchBrackets: register(new EditorStringEnumOption(58\n  /* matchBrackets */\n  , 'matchBrackets', 'always', ['always', 'near', 'never'], {\n    description: nls.localize('matchBrackets', \"Highlight matching brackets.\")\n  })),\n  minimap: register(new EditorMinimap()),\n  mouseStyle: register(new EditorStringEnumOption(60\n  /* mouseStyle */\n  , 'mouseStyle', 'text', ['text', 'default', 'copy'])),\n  mouseWheelScrollSensitivity: register(new EditorFloatOption(61\n  /* mouseWheelScrollSensitivity */\n  , 'mouseWheelScrollSensitivity', 1, function (x) {\n    return x === 0 ? 1 : x;\n  }, {\n    markdownDescription: nls.localize('mouseWheelScrollSensitivity', \"A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\")\n  })),\n  mouseWheelZoom: register(new EditorBooleanOption(62\n  /* mouseWheelZoom */\n  , 'mouseWheelZoom', false, {\n    markdownDescription: nls.localize('mouseWheelZoom', \"Zoom the font of the editor when using mouse wheel and holding `Ctrl`.\")\n  })),\n  multiCursorMergeOverlapping: register(new EditorBooleanOption(63\n  /* multiCursorMergeOverlapping */\n  , 'multiCursorMergeOverlapping', true, {\n    description: nls.localize('multiCursorMergeOverlapping', \"Merge multiple cursors when they are overlapping.\")\n  })),\n  multiCursorModifier: register(new EditorEnumOption(64\n  /* multiCursorModifier */\n  , 'multiCursorModifier', 'altKey', 'alt', ['ctrlCmd', 'alt'], _multiCursorModifierFromString, {\n    markdownEnumDescriptions: [nls.localize('multiCursorModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"), nls.localize('multiCursorModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")],\n    markdownDescription: nls.localize({\n      key: 'multiCursorModifier',\n      comment: ['- `ctrlCmd` refers to a value the setting can take and should not be localized.', '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.']\n    }, \"The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).\")\n  })),\n  multiCursorPaste: register(new EditorStringEnumOption(65\n  /* multiCursorPaste */\n  , 'multiCursorPaste', 'spread', ['spread', 'full'], {\n    markdownEnumDescriptions: [nls.localize('multiCursorPaste.spread', \"Each cursor pastes a single line of the text.\"), nls.localize('multiCursorPaste.full', \"Each cursor pastes the full text.\")],\n    markdownDescription: nls.localize('multiCursorPaste', \"Controls pasting when the line count of the pasted text matches the cursor count.\")\n  })),\n  occurrencesHighlight: register(new EditorBooleanOption(66\n  /* occurrencesHighlight */\n  , 'occurrencesHighlight', true, {\n    description: nls.localize('occurrencesHighlight', \"Controls whether the editor should highlight semantic symbol occurrences.\")\n  })),\n  overviewRulerBorder: register(new EditorBooleanOption(67\n  /* overviewRulerBorder */\n  , 'overviewRulerBorder', true, {\n    description: nls.localize('overviewRulerBorder', \"Controls whether a border should be drawn around the overview ruler.\")\n  })),\n  overviewRulerLanes: register(new EditorIntOption(68\n  /* overviewRulerLanes */\n  , 'overviewRulerLanes', 3, 0, 3)),\n  padding: register(new EditorPadding()),\n  parameterHints: register(new EditorParameterHints()),\n  peekWidgetDefaultFocus: register(new EditorStringEnumOption(71\n  /* peekWidgetDefaultFocus */\n  , 'peekWidgetDefaultFocus', 'tree', ['tree', 'editor'], {\n    enumDescriptions: [nls.localize('peekWidgetDefaultFocus.tree', \"Focus the tree when opening peek\"), nls.localize('peekWidgetDefaultFocus.editor', \"Focus the editor when opening peek\")],\n    description: nls.localize('peekWidgetDefaultFocus', \"Controls whether to focus the inline editor or the tree in the peek widget.\")\n  })),\n  definitionLinkOpensInPeek: register(new EditorBooleanOption(72\n  /* definitionLinkOpensInPeek */\n  , 'definitionLinkOpensInPeek', false, {\n    description: nls.localize('definitionLinkOpensInPeek', \"Controls whether the Go to Definition mouse gesture always opens the peek widget.\")\n  })),\n  quickSuggestions: register(new EditorQuickSuggestions()),\n  quickSuggestionsDelay: register(new EditorIntOption(74\n  /* quickSuggestionsDelay */\n  , 'quickSuggestionsDelay', 10, 0, 1073741824\n  /* MAX_SAFE_SMALL_INTEGER */\n  , {\n    description: nls.localize('quickSuggestionsDelay', \"Controls the delay in milliseconds after which quick suggestions will show up.\")\n  })),\n  readOnly: register(new EditorBooleanOption(75\n  /* readOnly */\n  , 'readOnly', false)),\n  renameOnType: register(new EditorBooleanOption(76\n  /* renameOnType */\n  , 'renameOnType', false, {\n    description: nls.localize('renameOnType', \"Controls whether the editor auto renames on type.\"),\n    markdownDeprecationMessage: nls.localize('renameOnTypeDeprecate', \"Deprecated, use `editor.linkedEditing` instead.\")\n  })),\n  renderControlCharacters: register(new EditorBooleanOption(77\n  /* renderControlCharacters */\n  , 'renderControlCharacters', false, {\n    description: nls.localize('renderControlCharacters', \"Controls whether the editor should render control characters.\")\n  })),\n  renderIndentGuides: register(new EditorBooleanOption(78\n  /* renderIndentGuides */\n  , 'renderIndentGuides', true, {\n    description: nls.localize('renderIndentGuides', \"Controls whether the editor should render indent guides.\")\n  })),\n  renderFinalNewline: register(new EditorBooleanOption(79\n  /* renderFinalNewline */\n  , 'renderFinalNewline', true, {\n    description: nls.localize('renderFinalNewline', \"Render last line number when the file ends with a newline.\")\n  })),\n  renderLineHighlight: register(new EditorStringEnumOption(80\n  /* renderLineHighlight */\n  , 'renderLineHighlight', 'line', ['none', 'gutter', 'line', 'all'], {\n    enumDescriptions: ['', '', '', nls.localize('renderLineHighlight.all', \"Highlights both the gutter and the current line.\")],\n    description: nls.localize('renderLineHighlight', \"Controls how the editor should render the current line highlight.\")\n  })),\n  renderLineHighlightOnlyWhenFocus: register(new EditorBooleanOption(81\n  /* renderLineHighlightOnlyWhenFocus */\n  , 'renderLineHighlightOnlyWhenFocus', false, {\n    description: nls.localize('renderLineHighlightOnlyWhenFocus', \"Controls if the editor should render the current line highlight only when the editor is focused\")\n  })),\n  renderValidationDecorations: register(new EditorStringEnumOption(82\n  /* renderValidationDecorations */\n  , 'renderValidationDecorations', 'editable', ['editable', 'on', 'off'])),\n  renderWhitespace: register(new EditorStringEnumOption(83\n  /* renderWhitespace */\n  , 'renderWhitespace', 'selection', ['none', 'boundary', 'selection', 'trailing', 'all'], {\n    enumDescriptions: ['', nls.localize('renderWhitespace.boundary', \"Render whitespace characters except for single spaces between words.\"), nls.localize('renderWhitespace.selection', \"Render whitespace characters only on selected text.\"), nls.localize('renderWhitespace.trailing', \"Render only trailing whitespace characters\"), ''],\n    description: nls.localize('renderWhitespace', \"Controls how the editor should render whitespace characters.\")\n  })),\n  revealHorizontalRightPadding: register(new EditorIntOption(84\n  /* revealHorizontalRightPadding */\n  , 'revealHorizontalRightPadding', 30, 0, 1000)),\n  roundedSelection: register(new EditorBooleanOption(85\n  /* roundedSelection */\n  , 'roundedSelection', true, {\n    description: nls.localize('roundedSelection', \"Controls whether selections should have rounded corners.\")\n  })),\n  rulers: register(new EditorRulers()),\n  scrollbar: register(new EditorScrollbar()),\n  scrollBeyondLastColumn: register(new EditorIntOption(88\n  /* scrollBeyondLastColumn */\n  , 'scrollBeyondLastColumn', 5, 0, 1073741824\n  /* MAX_SAFE_SMALL_INTEGER */\n  , {\n    description: nls.localize('scrollBeyondLastColumn', \"Controls the number of extra characters beyond which the editor will scroll horizontally.\")\n  })),\n  scrollBeyondLastLine: register(new EditorBooleanOption(89\n  /* scrollBeyondLastLine */\n  , 'scrollBeyondLastLine', true, {\n    description: nls.localize('scrollBeyondLastLine', \"Controls whether the editor will scroll beyond the last line.\")\n  })),\n  scrollPredominantAxis: register(new EditorBooleanOption(90\n  /* scrollPredominantAxis */\n  , 'scrollPredominantAxis', true, {\n    description: nls.localize('scrollPredominantAxis', \"Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.\")\n  })),\n  selectionClipboard: register(new EditorBooleanOption(91\n  /* selectionClipboard */\n  , 'selectionClipboard', true, {\n    description: nls.localize('selectionClipboard', \"Controls whether the Linux primary clipboard should be supported.\"),\n    included: platform.isLinux\n  })),\n  selectionHighlight: register(new EditorBooleanOption(92\n  /* selectionHighlight */\n  , 'selectionHighlight', true, {\n    description: nls.localize('selectionHighlight', \"Controls whether the editor should highlight matches similar to the selection.\")\n  })),\n  selectOnLineNumbers: register(new EditorBooleanOption(93\n  /* selectOnLineNumbers */\n  , 'selectOnLineNumbers', true)),\n  showFoldingControls: register(new EditorStringEnumOption(94\n  /* showFoldingControls */\n  , 'showFoldingControls', 'mouseover', ['always', 'mouseover'], {\n    enumDescriptions: [nls.localize('showFoldingControls.always', \"Always show the folding controls.\"), nls.localize('showFoldingControls.mouseover', \"Only show the folding controls when the mouse is over the gutter.\")],\n    description: nls.localize('showFoldingControls', \"Controls when the folding controls on the gutter are shown.\")\n  })),\n  showUnused: register(new EditorBooleanOption(95\n  /* showUnused */\n  , 'showUnused', true, {\n    description: nls.localize('showUnused', \"Controls fading out of unused code.\")\n  })),\n  showDeprecated: register(new EditorBooleanOption(119\n  /* showDeprecated */\n  , 'showDeprecated', true, {\n    description: nls.localize('showDeprecated', \"Controls strikethrough deprecated variables.\")\n  })),\n  inlineHints: register(new EditorInlineHints()),\n  snippetSuggestions: register(new EditorStringEnumOption(96\n  /* snippetSuggestions */\n  , 'snippetSuggestions', 'inline', ['top', 'bottom', 'inline', 'none'], {\n    enumDescriptions: [nls.localize('snippetSuggestions.top', \"Show snippet suggestions on top of other suggestions.\"), nls.localize('snippetSuggestions.bottom', \"Show snippet suggestions below other suggestions.\"), nls.localize('snippetSuggestions.inline', \"Show snippets suggestions with other suggestions.\"), nls.localize('snippetSuggestions.none', \"Do not show snippet suggestions.\")],\n    description: nls.localize('snippetSuggestions', \"Controls whether snippets are shown with other suggestions and how they are sorted.\")\n  })),\n  smartSelect: register(new SmartSelect()),\n  smoothScrolling: register(new EditorBooleanOption(98\n  /* smoothScrolling */\n  , 'smoothScrolling', false, {\n    description: nls.localize('smoothScrolling', \"Controls whether the editor will scroll using an animation.\")\n  })),\n  stopRenderingLineAfter: register(new EditorIntOption(100\n  /* stopRenderingLineAfter */\n  , 'stopRenderingLineAfter', 10000, -1, 1073741824\n  /* MAX_SAFE_SMALL_INTEGER */\n  )),\n  suggest: register(new EditorSuggest()),\n  suggestFontSize: register(new EditorIntOption(102\n  /* suggestFontSize */\n  , 'suggestFontSize', 0, 0, 1000, {\n    markdownDescription: nls.localize('suggestFontSize', \"Font size for the suggest widget. When set to `0`, the value of `#editor.fontSize#` is used.\")\n  })),\n  suggestLineHeight: register(new EditorIntOption(103\n  /* suggestLineHeight */\n  , 'suggestLineHeight', 0, 0, 1000, {\n    markdownDescription: nls.localize('suggestLineHeight', \"Line height for the suggest widget. When set to `0`, the value of `#editor.lineHeight#` is used. The minimum value is 8.\")\n  })),\n  suggestOnTriggerCharacters: register(new EditorBooleanOption(104\n  /* suggestOnTriggerCharacters */\n  , 'suggestOnTriggerCharacters', true, {\n    description: nls.localize('suggestOnTriggerCharacters', \"Controls whether suggestions should automatically show up when typing trigger characters.\")\n  })),\n  suggestSelection: register(new EditorStringEnumOption(105\n  /* suggestSelection */\n  , 'suggestSelection', 'recentlyUsed', ['first', 'recentlyUsed', 'recentlyUsedByPrefix'], {\n    markdownEnumDescriptions: [nls.localize('suggestSelection.first', \"Always select the first suggestion.\"), nls.localize('suggestSelection.recentlyUsed', \"Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.\"), nls.localize('suggestSelection.recentlyUsedByPrefix', \"Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.\")],\n    description: nls.localize('suggestSelection', \"Controls how suggestions are pre-selected when showing the suggest list.\")\n  })),\n  tabCompletion: register(new EditorStringEnumOption(106\n  /* tabCompletion */\n  , 'tabCompletion', 'off', ['on', 'off', 'onlySnippets'], {\n    enumDescriptions: [nls.localize('tabCompletion.on', \"Tab complete will insert the best matching suggestion when pressing tab.\"), nls.localize('tabCompletion.off', \"Disable tab completions.\"), nls.localize('tabCompletion.onlySnippets', \"Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.\")],\n    description: nls.localize('tabCompletion', \"Enables tab completions.\")\n  })),\n  tabIndex: register(new EditorIntOption(107\n  /* tabIndex */\n  , 'tabIndex', 0, -1, 1073741824\n  /* MAX_SAFE_SMALL_INTEGER */\n  )),\n  unusualLineTerminators: register(new EditorStringEnumOption(108\n  /* unusualLineTerminators */\n  , 'unusualLineTerminators', 'prompt', ['auto', 'off', 'prompt'], {\n    enumDescriptions: [nls.localize('unusualLineTerminators.auto', \"Unusual line terminators are automatically removed.\"), nls.localize('unusualLineTerminators.off', \"Unusual line terminators are ignored.\"), nls.localize('unusualLineTerminators.prompt', \"Unusual line terminators prompt to be removed.\")],\n    description: nls.localize('unusualLineTerminators', \"Remove unusual line terminators that might cause problems.\")\n  })),\n  useTabStops: register(new EditorBooleanOption(109\n  /* useTabStops */\n  , 'useTabStops', true, {\n    description: nls.localize('useTabStops', \"Inserting and deleting whitespace follows tab stops.\")\n  })),\n  wordSeparators: register(new EditorStringOption(110\n  /* wordSeparators */\n  , 'wordSeparators', USUAL_WORD_SEPARATORS, {\n    description: nls.localize('wordSeparators', \"Characters that will be used as word separators when doing word related navigations or operations.\")\n  })),\n  wordWrap: register(new EditorStringEnumOption(111\n  /* wordWrap */\n  , 'wordWrap', 'off', ['off', 'on', 'wordWrapColumn', 'bounded'], {\n    markdownEnumDescriptions: [nls.localize('wordWrap.off', \"Lines will never wrap.\"), nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"), nls.localize({\n      key: 'wordWrap.wordWrapColumn',\n      comment: ['- `editor.wordWrapColumn` refers to a different setting and should not be localized.']\n    }, \"Lines will wrap at `#editor.wordWrapColumn#`.\"), nls.localize({\n      key: 'wordWrap.bounded',\n      comment: ['- viewport means the edge of the visible window size.', '- `editor.wordWrapColumn` refers to a different setting and should not be localized.']\n    }, \"Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`.\")],\n    description: nls.localize({\n      key: 'wordWrap',\n      comment: ['- \\'off\\', \\'on\\', \\'wordWrapColumn\\' and \\'bounded\\' refer to values the setting can take and should not be localized.', '- `editor.wordWrapColumn` refers to a different setting and should not be localized.']\n    }, \"Controls how lines should wrap.\")\n  })),\n  wordWrapBreakAfterCharacters: register(new EditorStringOption(112\n  /* wordWrapBreakAfterCharacters */\n  , 'wordWrapBreakAfterCharacters', ' \\t})]?|/&.,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣')),\n  wordWrapBreakBeforeCharacters: register(new EditorStringOption(113\n  /* wordWrapBreakBeforeCharacters */\n  , 'wordWrapBreakBeforeCharacters', '([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋')),\n  wordWrapColumn: register(new EditorIntOption(114\n  /* wordWrapColumn */\n  , 'wordWrapColumn', 80, 1, 1073741824\n  /* MAX_SAFE_SMALL_INTEGER */\n  , {\n    markdownDescription: nls.localize({\n      key: 'wordWrapColumn',\n      comment: ['- `editor.wordWrap` refers to a different setting and should not be localized.', '- \\'wordWrapColumn\\' and \\'bounded\\' refer to values the different setting can take and should not be localized.']\n    }, \"Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.\")\n  })),\n  wordWrapOverride1: register(new EditorStringEnumOption(115\n  /* wordWrapOverride1 */\n  , 'wordWrapOverride1', 'inherit', ['off', 'on', 'inherit'])),\n  wordWrapOverride2: register(new EditorStringEnumOption(116\n  /* wordWrapOverride2 */\n  , 'wordWrapOverride2', 'inherit', ['off', 'on', 'inherit'])),\n  wrappingIndent: register(new EditorEnumOption(117\n  /* wrappingIndent */\n  , 'wrappingIndent', 1\n  /* Same */\n  , 'same', ['none', 'same', 'indent', 'deepIndent'], _wrappingIndentFromString, {\n    enumDescriptions: [nls.localize('wrappingIndent.none', \"No indentation. Wrapped lines begin at column 1.\"), nls.localize('wrappingIndent.same', \"Wrapped lines get the same indentation as the parent.\"), nls.localize('wrappingIndent.indent', \"Wrapped lines get +1 indentation toward the parent.\"), nls.localize('wrappingIndent.deepIndent', \"Wrapped lines get +2 indentation toward the parent.\")],\n    description: nls.localize('wrappingIndent', \"Controls the indentation of wrapped lines.\")\n  })),\n  wrappingStrategy: register(new EditorStringEnumOption(118\n  /* wrappingStrategy */\n  , 'wrappingStrategy', 'simple', ['simple', 'advanced'], {\n    enumDescriptions: [nls.localize('wrappingStrategy.simple', \"Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.\"), nls.localize('wrappingStrategy.advanced', \"Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.\")],\n    description: nls.localize('wrappingStrategy', \"Controls the algorithm that computes wrapping points.\")\n  })),\n  // Leave these at the end (because they have dependencies!)\n  editorClassName: register(new EditorClassName()),\n  pixelRatio: register(new EditorPixelRatio()),\n  tabFocusMode: register(new EditorTabFocusMode()),\n  layoutInfo: register(new EditorLayoutInfoComputer()),\n  wrappingInfo: register(new EditorWrappingInfoComputer())\n};","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/config/editorOptions.js"],"names":["nls","platform","USUAL_WORD_SEPARATORS","MINIMAP_GUTTER_WIDTH","ConfigurationChangedEvent","values","_values","id","ValidatedEditorOptions","option","value","ComputeOptionsMemory","stableMinimapLayoutInput","stableFitMaxMinimapScale","stableFitRemainingWidth","BaseEditorOption","name","defaultValue","schema","env","options","ComputedEditorOption","deps","undefined","input","SimpleEditorOption","boolean","Boolean","EditorBooleanOption","type","EditorIntOption","minimum","maximum","clampedInt","r","parseInt","isNaN","Math","max","min","EditorFloatOption","validationFn","n","parseFloat","EditorStringOption","string","stringSet","allowedValues","indexOf","EditorStringEnumOption","_allowedValues","EditorEnumOption","defaultStringValue","convert","_convert","_autoIndentFromString","autoIndent","EditorAccessibilitySupport","enumDescriptions","localize","description","accessibilitySupport","EditorComments","defaults","insertSpace","ignoreEmptyLines","_input","_cursorBlinkingStyleFromString","cursorBlinkingStyle","TextEditorCursorStyle","_cursorStyleFromString","cursorStyle","Line","Block","Underline","LineThin","BlockOutline","UnderlineThin","EditorClassName","_","classNames","get","push","extraEditorClassName","join","EditorEmptySelectionClipboard","emptySelectionClipboard","EditorFind","cursorMoveOnType","seedSearchStringFromSelection","autoFindInSelection","globalFindClipboard","addExtraSpaceOnTop","loop","included","isMacintosh","EditorFontLigatures","OFF","anyOf","ON","EditorFontInfo","fontInfo","EditorFontSize","EDITOR_FONT_DEFAULTS","fontSize","clamp","EditorFontWeight","fontWeight","MINIMUM_VALUE","MAXIMUM_VALUE","errorMessage","pattern","SUGGESTION_VALUES","String","EditorGoToLocation","multiple","multipleDefinitions","multipleTypeDefinitions","multipleDeclarations","multipleImplementations","multipleReferences","alternativeDefinitionCommand","alternativeTypeDefinitionCommand","alternativeDeclarationCommand","alternativeImplementationCommand","alternativeReferenceCommand","jsonSubset","deprecationMessage","Object","assign","_a","_b","_c","_d","_e","EditorHover","enabled","delay","sticky","EditorLayoutInfoComputer","computeLayout","memory","outerWidth","outerHeight","isDominatedByLongLines","lineHeight","viewLineCount","lineNumbersDigitCount","typicalHalfwidthCharacterWidth","maxDigitWidth","pixelRatio","typicalViewportLineCount","height","extraLinesBeyondLastLine","scrollBeyondLastLine","desiredRatio","minimapLineCount","floor","minimap","renderMinimap","minimapLeft","minimapWidth","minimapHeightIsEditorHeight","minimapIsSampling","minimapScale","minimapLineHeight","minimapCanvasInnerWidth","minimapCanvasInnerHeight","minimapCanvasOuterWidth","minimapCanvasOuterHeight","couldUseMemory","side","size","showSlider","renderCharacters","maxColumn","scale","verticalScrollbarWidth","isViewportWrapping","minimapRenderCharacters","round","minimapMaxColumn","minimapSize","minimapSide","remainingWidth","baseCharHeight","minimapCharWidth","minimapWidthMultiplier","computeContainedMinimapLineCount","ratio","fitBecomesFill","maxMinimapScale","effectiveMinimapHeight","ceil","configuredMinimapScale","minimapMaxWidth","wordWrapOverride2","wordWrapOverride1","wordWrap","wordWrapColumn","showGlyphMargin","showLineNumbers","renderType","lineNumbersMinChars","scrollbar","verticalScrollbarSize","verticalScrollbarHasArrows","verticalHasArrows","scrollbarArrowSize","arrowSize","horizontalScrollbarHeight","horizontalScrollbarSize","rawLineDecorationsWidth","folding","lineDecorationsWidth","test","substr","length","lineNumbersWidth","digitCount","glyphMarginWidth","glyphMarginLeft","lineNumbersLeft","decorationsLeft","contentLeft","isWordWrapMinified","wrappingColumn","minimapLayout","_computeMinimapLayout","contentWidth","viewportColumn","verticalArrowSize","width","decorationsWidth","overviewRuler","top","right","EditorLightbulb","EditorInlineHints","fontFamily","EditorLineHeight","EditorMinimap","_multiCursorModifierFromString","multiCursorModifier","EditorPadding","bottom","EditorParameterHints","cycle","EditorPixelRatio","EditorQuickSuggestions","other","comments","strings","properties","opts","EditorRenderLineNumbersOption","renderFn","lineNumbers","filterValidationDecorations","renderValidationDecorations","EditorRulers","columnSchema","items","column","color","format","Array","isArray","rulers","_element","element","sort","a","b","_scrollbarVisibilityFromString","visibility","EditorScrollbar","vertical","horizontal","useShadows","horizontalHasArrows","horizontalSliderSize","verticalSliderSize","handleMouseWheel","alwaysConsumeMouseWheel","scrollByPage","EditorSuggest","insertMode","filterGraceful","snippetsPreventQuickSuggestions","localityBonus","shareSuggestSelections","showIcons","showStatusBar","showInlineDetails","showMethods","showFunctions","showConstructors","showFields","showVariables","showClasses","showStructs","showInterfaces","showModules","showProperties","showEvents","showOperators","showUnits","showValues","showConstants","showEnums","showEnumMembers","showKeywords","showWords","showColors","showFiles","showReferences","showFolders","showTypeParameters","showSnippets","showUsers","showIssues","markdownDescription","SmartSelect","selectLeadingAndTrailingWhitespace","EditorTabFocusMode","readOnly","tabFocusMode","_wrappingIndentFromString","wrappingIndent","EditorWrappingInfoComputer","layoutInfo","DEFAULT_WINDOWS_FONT_FAMILY","DEFAULT_MAC_FONT_FAMILY","DEFAULT_LINUX_FONT_FAMILY","isLinux","letterSpacing","EDITOR_MODEL_DEFAULTS","tabSize","indentSize","insertSpaces","detectIndentation","trimAutoWhitespace","largeFileOptimizations","editorOptionsRegistry","register","EditorOptions","acceptSuggestionOnCommitCharacter","acceptSuggestionOnEnter","markdownEnumDescriptions","accessibilityPageSize","ariaLabel","autoClosingBrackets","autoClosingOvertype","autoClosingQuotes","automaticLayout","autoSurround","stickyTabStops","codeLens","codeLensFontFamily","codeLensFontSize","colorDecorators","columnSelection","contextmenu","copyWithSyntaxHighlighting","cursorBlinking","cursorSmoothCaretAnimation","cursorSurroundingLines","cursorSurroundingLinesStyle","cursorWidth","disableLayerHinting","disableMonospaceOptimizations","dragAndDrop","fastScrollSensitivity","x","find","fixedOverflowWidgets","foldingStrategy","foldingHighlight","unfoldOnClickAfterEndOfLine","fontLigatures2","formatOnPaste","formatOnType","glyphMargin","gotoLocation","hideCursorInOverviewRuler","highlightActiveIndentGuide","hover","inDiffEditor","lightbulb","linkedEditing","links","matchBrackets","mouseStyle","mouseWheelScrollSensitivity","mouseWheelZoom","multiCursorMergeOverlapping","key","comment","multiCursorPaste","occurrencesHighlight","overviewRulerBorder","overviewRulerLanes","padding","parameterHints","peekWidgetDefaultFocus","definitionLinkOpensInPeek","quickSuggestions","quickSuggestionsDelay","renameOnType","markdownDeprecationMessage","renderControlCharacters","renderIndentGuides","renderFinalNewline","renderLineHighlight","renderLineHighlightOnlyWhenFocus","renderWhitespace","revealHorizontalRightPadding","roundedSelection","scrollBeyondLastColumn","scrollPredominantAxis","selectionClipboard","selectionHighlight","selectOnLineNumbers","showFoldingControls","showUnused","showDeprecated","inlineHints","snippetSuggestions","smartSelect","smoothScrolling","stopRenderingLineAfter","suggest","suggestFontSize","suggestLineHeight","suggestOnTriggerCharacters","suggestSelection","tabCompletion","tabIndex","unusualLineTerminators","useTabStops","wordSeparators","wordWrapBreakAfterCharacters","wordWrapBreakBeforeCharacters","wrappingStrategy","editorClassName","wrappingInfo"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport { USUAL_WORD_SEPARATORS } from '../model/wordHelper.js';\r\n/**\r\n * @internal\r\n * The width of the minimap gutter, in pixels.\r\n */\r\nexport const MINIMAP_GUTTER_WIDTH = 8;\r\n//#endregion\r\n/**\r\n * An event describing that the configuration of the editor has changed.\r\n */\r\nexport class ConfigurationChangedEvent {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(values) {\r\n        this._values = values;\r\n    }\r\n    hasChanged(id) {\r\n        return this._values[id];\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport class ValidatedEditorOptions {\r\n    constructor() {\r\n        this._values = [];\r\n    }\r\n    _read(option) {\r\n        return this._values[option];\r\n    }\r\n    get(id) {\r\n        return this._values[id];\r\n    }\r\n    _write(option, value) {\r\n        this._values[option] = value;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport class ComputeOptionsMemory {\r\n    constructor() {\r\n        this.stableMinimapLayoutInput = null;\r\n        this.stableFitMaxMinimapScale = 0;\r\n        this.stableFitRemainingWidth = 0;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass BaseEditorOption {\r\n    constructor(id, name, defaultValue, schema) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.defaultValue = defaultValue;\r\n        this.schema = schema;\r\n    }\r\n    compute(env, options, value) {\r\n        return value;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ComputedEditorOption {\r\n    constructor(id, deps = null) {\r\n        this.schema = undefined;\r\n        this.id = id;\r\n        this.name = '_never_';\r\n        this.defaultValue = undefined;\r\n        this.deps = deps;\r\n    }\r\n    validate(input) {\r\n        return this.defaultValue;\r\n    }\r\n}\r\nclass SimpleEditorOption {\r\n    constructor(id, name, defaultValue, schema) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.defaultValue = defaultValue;\r\n        this.schema = schema;\r\n    }\r\n    validate(input) {\r\n        if (typeof input === 'undefined') {\r\n            return this.defaultValue;\r\n        }\r\n        return input;\r\n    }\r\n    compute(env, options, value) {\r\n        return value;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport function boolean(value, defaultValue) {\r\n    if (typeof value === 'undefined') {\r\n        return defaultValue;\r\n    }\r\n    if (value === 'false') {\r\n        // treat the string 'false' as false\r\n        return false;\r\n    }\r\n    return Boolean(value);\r\n}\r\nclass EditorBooleanOption extends SimpleEditorOption {\r\n    constructor(id, name, defaultValue, schema = undefined) {\r\n        if (typeof schema !== 'undefined') {\r\n            schema.type = 'boolean';\r\n            schema.default = defaultValue;\r\n        }\r\n        super(id, name, defaultValue, schema);\r\n    }\r\n    validate(input) {\r\n        return boolean(input, this.defaultValue);\r\n    }\r\n}\r\nclass EditorIntOption extends SimpleEditorOption {\r\n    constructor(id, name, defaultValue, minimum, maximum, schema = undefined) {\r\n        if (typeof schema !== 'undefined') {\r\n            schema.type = 'integer';\r\n            schema.default = defaultValue;\r\n            schema.minimum = minimum;\r\n            schema.maximum = maximum;\r\n        }\r\n        super(id, name, defaultValue, schema);\r\n        this.minimum = minimum;\r\n        this.maximum = maximum;\r\n    }\r\n    static clampedInt(value, defaultValue, minimum, maximum) {\r\n        if (typeof value === 'undefined') {\r\n            return defaultValue;\r\n        }\r\n        let r = parseInt(value, 10);\r\n        if (isNaN(r)) {\r\n            return defaultValue;\r\n        }\r\n        r = Math.max(minimum, r);\r\n        r = Math.min(maximum, r);\r\n        return r | 0;\r\n    }\r\n    validate(input) {\r\n        return EditorIntOption.clampedInt(input, this.defaultValue, this.minimum, this.maximum);\r\n    }\r\n}\r\nclass EditorFloatOption extends SimpleEditorOption {\r\n    constructor(id, name, defaultValue, validationFn, schema) {\r\n        if (typeof schema !== 'undefined') {\r\n            schema.type = 'number';\r\n            schema.default = defaultValue;\r\n        }\r\n        super(id, name, defaultValue, schema);\r\n        this.validationFn = validationFn;\r\n    }\r\n    static clamp(n, min, max) {\r\n        if (n < min) {\r\n            return min;\r\n        }\r\n        if (n > max) {\r\n            return max;\r\n        }\r\n        return n;\r\n    }\r\n    static float(value, defaultValue) {\r\n        if (typeof value === 'number') {\r\n            return value;\r\n        }\r\n        if (typeof value === 'undefined') {\r\n            return defaultValue;\r\n        }\r\n        const r = parseFloat(value);\r\n        return (isNaN(r) ? defaultValue : r);\r\n    }\r\n    validate(input) {\r\n        return this.validationFn(EditorFloatOption.float(input, this.defaultValue));\r\n    }\r\n}\r\nclass EditorStringOption extends SimpleEditorOption {\r\n    static string(value, defaultValue) {\r\n        if (typeof value !== 'string') {\r\n            return defaultValue;\r\n        }\r\n        return value;\r\n    }\r\n    constructor(id, name, defaultValue, schema = undefined) {\r\n        if (typeof schema !== 'undefined') {\r\n            schema.type = 'string';\r\n            schema.default = defaultValue;\r\n        }\r\n        super(id, name, defaultValue, schema);\r\n    }\r\n    validate(input) {\r\n        return EditorStringOption.string(input, this.defaultValue);\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport function stringSet(value, defaultValue, allowedValues) {\r\n    if (typeof value !== 'string') {\r\n        return defaultValue;\r\n    }\r\n    if (allowedValues.indexOf(value) === -1) {\r\n        return defaultValue;\r\n    }\r\n    return value;\r\n}\r\nclass EditorStringEnumOption extends SimpleEditorOption {\r\n    constructor(id, name, defaultValue, allowedValues, schema = undefined) {\r\n        if (typeof schema !== 'undefined') {\r\n            schema.type = 'string';\r\n            schema.enum = allowedValues;\r\n            schema.default = defaultValue;\r\n        }\r\n        super(id, name, defaultValue, schema);\r\n        this._allowedValues = allowedValues;\r\n    }\r\n    validate(input) {\r\n        return stringSet(input, this.defaultValue, this._allowedValues);\r\n    }\r\n}\r\nclass EditorEnumOption extends BaseEditorOption {\r\n    constructor(id, name, defaultValue, defaultStringValue, allowedValues, convert, schema = undefined) {\r\n        if (typeof schema !== 'undefined') {\r\n            schema.type = 'string';\r\n            schema.enum = allowedValues;\r\n            schema.default = defaultStringValue;\r\n        }\r\n        super(id, name, defaultValue, schema);\r\n        this._allowedValues = allowedValues;\r\n        this._convert = convert;\r\n    }\r\n    validate(input) {\r\n        if (typeof input !== 'string') {\r\n            return this.defaultValue;\r\n        }\r\n        if (this._allowedValues.indexOf(input) === -1) {\r\n            return this.defaultValue;\r\n        }\r\n        return this._convert(input);\r\n    }\r\n}\r\n//#endregion\r\n//#region autoIndent\r\nfunction _autoIndentFromString(autoIndent) {\r\n    switch (autoIndent) {\r\n        case 'none': return 0 /* None */;\r\n        case 'keep': return 1 /* Keep */;\r\n        case 'brackets': return 2 /* Brackets */;\r\n        case 'advanced': return 3 /* Advanced */;\r\n        case 'full': return 4 /* Full */;\r\n    }\r\n}\r\n//#endregion\r\n//#region accessibilitySupport\r\nclass EditorAccessibilitySupport extends BaseEditorOption {\r\n    constructor() {\r\n        super(2 /* accessibilitySupport */, 'accessibilitySupport', 0 /* Unknown */, {\r\n            type: 'string',\r\n            enum: ['auto', 'on', 'off'],\r\n            enumDescriptions: [\r\n                nls.localize('accessibilitySupport.auto', \"The editor will use platform APIs to detect when a Screen Reader is attached.\"),\r\n                nls.localize('accessibilitySupport.on', \"The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled.\"),\r\n                nls.localize('accessibilitySupport.off', \"The editor will never be optimized for usage with a Screen Reader.\"),\r\n            ],\r\n            default: 'auto',\r\n            description: nls.localize('accessibilitySupport', \"Controls whether the editor should run in a mode where it is optimized for screen readers. Setting to on will disable word wrapping.\")\r\n        });\r\n    }\r\n    validate(input) {\r\n        switch (input) {\r\n            case 'auto': return 0 /* Unknown */;\r\n            case 'off': return 1 /* Disabled */;\r\n            case 'on': return 2 /* Enabled */;\r\n        }\r\n        return this.defaultValue;\r\n    }\r\n    compute(env, options, value) {\r\n        if (value === 0 /* Unknown */) {\r\n            // The editor reads the `accessibilitySupport` from the environment\r\n            return env.accessibilitySupport;\r\n        }\r\n        return value;\r\n    }\r\n}\r\nclass EditorComments extends BaseEditorOption {\r\n    constructor() {\r\n        const defaults = {\r\n            insertSpace: true,\r\n            ignoreEmptyLines: true,\r\n        };\r\n        super(16 /* comments */, 'comments', defaults, {\r\n            'editor.comments.insertSpace': {\r\n                type: 'boolean',\r\n                default: defaults.insertSpace,\r\n                description: nls.localize('comments.insertSpace', \"Controls whether a space character is inserted when commenting.\")\r\n            },\r\n            'editor.comments.ignoreEmptyLines': {\r\n                type: 'boolean',\r\n                default: defaults.ignoreEmptyLines,\r\n                description: nls.localize('comments.ignoreEmptyLines', 'Controls if empty lines should be ignored with toggle, add or remove actions for line comments.')\r\n            },\r\n        });\r\n    }\r\n    validate(_input) {\r\n        if (!_input || typeof _input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        const input = _input;\r\n        return {\r\n            insertSpace: boolean(input.insertSpace, this.defaultValue.insertSpace),\r\n            ignoreEmptyLines: boolean(input.ignoreEmptyLines, this.defaultValue.ignoreEmptyLines),\r\n        };\r\n    }\r\n}\r\nfunction _cursorBlinkingStyleFromString(cursorBlinkingStyle) {\r\n    switch (cursorBlinkingStyle) {\r\n        case 'blink': return 1 /* Blink */;\r\n        case 'smooth': return 2 /* Smooth */;\r\n        case 'phase': return 3 /* Phase */;\r\n        case 'expand': return 4 /* Expand */;\r\n        case 'solid': return 5 /* Solid */;\r\n    }\r\n}\r\n//#endregion\r\n//#region cursorStyle\r\n/**\r\n * The style in which the editor's cursor should be rendered.\r\n */\r\nexport var TextEditorCursorStyle;\r\n(function (TextEditorCursorStyle) {\r\n    /**\r\n     * As a vertical line (sitting between two characters).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\r\n    /**\r\n     * As a block (sitting on top of a character).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\r\n    /**\r\n     * As a horizontal line (sitting under a character).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\r\n    /**\r\n     * As a thin vertical line (sitting between two characters).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"LineThin\"] = 4] = \"LineThin\";\r\n    /**\r\n     * As an outlined block (sitting on top of a character).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"BlockOutline\"] = 5] = \"BlockOutline\";\r\n    /**\r\n     * As a thin horizontal line (sitting under a character).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"UnderlineThin\"] = 6] = \"UnderlineThin\";\r\n})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));\r\nfunction _cursorStyleFromString(cursorStyle) {\r\n    switch (cursorStyle) {\r\n        case 'line': return TextEditorCursorStyle.Line;\r\n        case 'block': return TextEditorCursorStyle.Block;\r\n        case 'underline': return TextEditorCursorStyle.Underline;\r\n        case 'line-thin': return TextEditorCursorStyle.LineThin;\r\n        case 'block-outline': return TextEditorCursorStyle.BlockOutline;\r\n        case 'underline-thin': return TextEditorCursorStyle.UnderlineThin;\r\n    }\r\n}\r\n//#endregion\r\n//#region editorClassName\r\nclass EditorClassName extends ComputedEditorOption {\r\n    constructor() {\r\n        super(121 /* editorClassName */, [60 /* mouseStyle */, 29 /* extraEditorClassName */]);\r\n    }\r\n    compute(env, options, _) {\r\n        const classNames = ['monaco-editor'];\r\n        if (options.get(29 /* extraEditorClassName */)) {\r\n            classNames.push(options.get(29 /* extraEditorClassName */));\r\n        }\r\n        if (env.extraEditorClassName) {\r\n            classNames.push(env.extraEditorClassName);\r\n        }\r\n        if (options.get(60 /* mouseStyle */) === 'default') {\r\n            classNames.push('mouse-default');\r\n        }\r\n        else if (options.get(60 /* mouseStyle */) === 'copy') {\r\n            classNames.push('mouse-copy');\r\n        }\r\n        if (options.get(95 /* showUnused */)) {\r\n            classNames.push('showUnused');\r\n        }\r\n        if (options.get(119 /* showDeprecated */)) {\r\n            classNames.push('showDeprecated');\r\n        }\r\n        return classNames.join(' ');\r\n    }\r\n}\r\n//#endregion\r\n//#region emptySelectionClipboard\r\nclass EditorEmptySelectionClipboard extends EditorBooleanOption {\r\n    constructor() {\r\n        super(28 /* emptySelectionClipboard */, 'emptySelectionClipboard', true, { description: nls.localize('emptySelectionClipboard', \"Controls whether copying without a selection copies the current line.\") });\r\n    }\r\n    compute(env, options, value) {\r\n        return value && env.emptySelectionClipboard;\r\n    }\r\n}\r\nclass EditorFind extends BaseEditorOption {\r\n    constructor() {\r\n        const defaults = {\r\n            cursorMoveOnType: true,\r\n            seedSearchStringFromSelection: true,\r\n            autoFindInSelection: 'never',\r\n            globalFindClipboard: false,\r\n            addExtraSpaceOnTop: true,\r\n            loop: true\r\n        };\r\n        super(31 /* find */, 'find', defaults, {\r\n            'editor.find.cursorMoveOnType': {\r\n                type: 'boolean',\r\n                default: defaults.cursorMoveOnType,\r\n                description: nls.localize('find.cursorMoveOnType', \"Controls whether the cursor should jump to find matches while typing.\")\r\n            },\r\n            'editor.find.seedSearchStringFromSelection': {\r\n                type: 'boolean',\r\n                default: defaults.seedSearchStringFromSelection,\r\n                description: nls.localize('find.seedSearchStringFromSelection', \"Controls whether the search string in the Find Widget is seeded from the editor selection.\")\r\n            },\r\n            'editor.find.autoFindInSelection': {\r\n                type: 'string',\r\n                enum: ['never', 'always', 'multiline'],\r\n                default: defaults.autoFindInSelection,\r\n                enumDescriptions: [\r\n                    nls.localize('editor.find.autoFindInSelection.never', 'Never turn on Find in selection automatically (default)'),\r\n                    nls.localize('editor.find.autoFindInSelection.always', 'Always turn on Find in selection automatically'),\r\n                    nls.localize('editor.find.autoFindInSelection.multiline', 'Turn on Find in selection automatically when multiple lines of content are selected.')\r\n                ],\r\n                description: nls.localize('find.autoFindInSelection', \"Controls the condition for turning on find in selection automatically.\")\r\n            },\r\n            'editor.find.globalFindClipboard': {\r\n                type: 'boolean',\r\n                default: defaults.globalFindClipboard,\r\n                description: nls.localize('find.globalFindClipboard', \"Controls whether the Find Widget should read or modify the shared find clipboard on macOS.\"),\r\n                included: platform.isMacintosh\r\n            },\r\n            'editor.find.addExtraSpaceOnTop': {\r\n                type: 'boolean',\r\n                default: defaults.addExtraSpaceOnTop,\r\n                description: nls.localize('find.addExtraSpaceOnTop', \"Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.\")\r\n            },\r\n            'editor.find.loop': {\r\n                type: 'boolean',\r\n                default: defaults.loop,\r\n                description: nls.localize('find.loop', \"Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.\")\r\n            },\r\n        });\r\n    }\r\n    validate(_input) {\r\n        if (!_input || typeof _input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        const input = _input;\r\n        return {\r\n            cursorMoveOnType: boolean(input.cursorMoveOnType, this.defaultValue.cursorMoveOnType),\r\n            seedSearchStringFromSelection: boolean(input.seedSearchStringFromSelection, this.defaultValue.seedSearchStringFromSelection),\r\n            autoFindInSelection: typeof _input.autoFindInSelection === 'boolean'\r\n                ? (_input.autoFindInSelection ? 'always' : 'never')\r\n                : stringSet(input.autoFindInSelection, this.defaultValue.autoFindInSelection, ['never', 'always', 'multiline']),\r\n            globalFindClipboard: boolean(input.globalFindClipboard, this.defaultValue.globalFindClipboard),\r\n            addExtraSpaceOnTop: boolean(input.addExtraSpaceOnTop, this.defaultValue.addExtraSpaceOnTop),\r\n            loop: boolean(input.loop, this.defaultValue.loop),\r\n        };\r\n    }\r\n}\r\n//#endregion\r\n//#region fontLigatures\r\n/**\r\n * @internal\r\n */\r\nexport class EditorFontLigatures extends BaseEditorOption {\r\n    constructor() {\r\n        super(39 /* fontLigatures */, 'fontLigatures', EditorFontLigatures.OFF, {\r\n            anyOf: [\r\n                {\r\n                    type: 'boolean',\r\n                    description: nls.localize('fontLigatures', \"Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property.\"),\r\n                },\r\n                {\r\n                    type: 'string',\r\n                    description: nls.localize('fontFeatureSettings', \"Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.\")\r\n                }\r\n            ],\r\n            description: nls.localize('fontLigaturesGeneral', \"Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.\"),\r\n            default: false\r\n        });\r\n    }\r\n    validate(input) {\r\n        if (typeof input === 'undefined') {\r\n            return this.defaultValue;\r\n        }\r\n        if (typeof input === 'string') {\r\n            if (input === 'false') {\r\n                return EditorFontLigatures.OFF;\r\n            }\r\n            if (input === 'true') {\r\n                return EditorFontLigatures.ON;\r\n            }\r\n            return input;\r\n        }\r\n        if (Boolean(input)) {\r\n            return EditorFontLigatures.ON;\r\n        }\r\n        return EditorFontLigatures.OFF;\r\n    }\r\n}\r\nEditorFontLigatures.OFF = '\"liga\" off, \"calt\" off';\r\nEditorFontLigatures.ON = '\"liga\" on, \"calt\" on';\r\n//#endregion\r\n//#region fontInfo\r\nclass EditorFontInfo extends ComputedEditorOption {\r\n    constructor() {\r\n        super(38 /* fontInfo */);\r\n    }\r\n    compute(env, options, _) {\r\n        return env.fontInfo;\r\n    }\r\n}\r\n//#endregion\r\n//#region fontSize\r\nclass EditorFontSize extends SimpleEditorOption {\r\n    constructor() {\r\n        super(40 /* fontSize */, 'fontSize', EDITOR_FONT_DEFAULTS.fontSize, {\r\n            type: 'number',\r\n            minimum: 6,\r\n            maximum: 100,\r\n            default: EDITOR_FONT_DEFAULTS.fontSize,\r\n            description: nls.localize('fontSize', \"Controls the font size in pixels.\")\r\n        });\r\n    }\r\n    validate(input) {\r\n        let r = EditorFloatOption.float(input, this.defaultValue);\r\n        if (r === 0) {\r\n            return EDITOR_FONT_DEFAULTS.fontSize;\r\n        }\r\n        return EditorFloatOption.clamp(r, 6, 100);\r\n    }\r\n    compute(env, options, value) {\r\n        // The final fontSize respects the editor zoom level.\r\n        // So take the result from env.fontInfo\r\n        return env.fontInfo.fontSize;\r\n    }\r\n}\r\n//#endregion\r\n//#region fontWeight\r\nclass EditorFontWeight extends BaseEditorOption {\r\n    constructor() {\r\n        super(41 /* fontWeight */, 'fontWeight', EDITOR_FONT_DEFAULTS.fontWeight, {\r\n            anyOf: [\r\n                {\r\n                    type: 'number',\r\n                    minimum: EditorFontWeight.MINIMUM_VALUE,\r\n                    maximum: EditorFontWeight.MAXIMUM_VALUE,\r\n                    errorMessage: nls.localize('fontWeightErrorMessage', \"Only \\\"normal\\\" and \\\"bold\\\" keywords or numbers between 1 and 1000 are allowed.\")\r\n                },\r\n                {\r\n                    type: 'string',\r\n                    pattern: '^(normal|bold|1000|[1-9][0-9]{0,2})$'\r\n                },\r\n                {\r\n                    enum: EditorFontWeight.SUGGESTION_VALUES\r\n                }\r\n            ],\r\n            default: EDITOR_FONT_DEFAULTS.fontWeight,\r\n            description: nls.localize('fontWeight', \"Controls the font weight. Accepts \\\"normal\\\" and \\\"bold\\\" keywords or numbers between 1 and 1000.\")\r\n        });\r\n    }\r\n    validate(input) {\r\n        if (input === 'normal' || input === 'bold') {\r\n            return input;\r\n        }\r\n        return String(EditorIntOption.clampedInt(input, EDITOR_FONT_DEFAULTS.fontWeight, EditorFontWeight.MINIMUM_VALUE, EditorFontWeight.MAXIMUM_VALUE));\r\n    }\r\n}\r\nEditorFontWeight.SUGGESTION_VALUES = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\r\nEditorFontWeight.MINIMUM_VALUE = 1;\r\nEditorFontWeight.MAXIMUM_VALUE = 1000;\r\nclass EditorGoToLocation extends BaseEditorOption {\r\n    constructor() {\r\n        const defaults = {\r\n            multiple: 'peek',\r\n            multipleDefinitions: 'peek',\r\n            multipleTypeDefinitions: 'peek',\r\n            multipleDeclarations: 'peek',\r\n            multipleImplementations: 'peek',\r\n            multipleReferences: 'peek',\r\n            alternativeDefinitionCommand: 'editor.action.goToReferences',\r\n            alternativeTypeDefinitionCommand: 'editor.action.goToReferences',\r\n            alternativeDeclarationCommand: 'editor.action.goToReferences',\r\n            alternativeImplementationCommand: '',\r\n            alternativeReferenceCommand: '',\r\n        };\r\n        const jsonSubset = {\r\n            type: 'string',\r\n            enum: ['peek', 'gotoAndPeek', 'goto'],\r\n            default: defaults.multiple,\r\n            enumDescriptions: [\r\n                nls.localize('editor.gotoLocation.multiple.peek', 'Show peek view of the results (default)'),\r\n                nls.localize('editor.gotoLocation.multiple.gotoAndPeek', 'Go to the primary result and show a peek view'),\r\n                nls.localize('editor.gotoLocation.multiple.goto', 'Go to the primary result and enable peek-less navigation to others')\r\n            ]\r\n        };\r\n        super(45 /* gotoLocation */, 'gotoLocation', defaults, {\r\n            'editor.gotoLocation.multiple': {\r\n                deprecationMessage: nls.localize('editor.gotoLocation.multiple.deprecated', \"This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.\"),\r\n            },\r\n            'editor.gotoLocation.multipleDefinitions': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleDefinitions', \"Controls the behavior the 'Go to Definition'-command when multiple target locations exist.\") }, jsonSubset),\r\n            'editor.gotoLocation.multipleTypeDefinitions': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleTypeDefinitions', \"Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.\") }, jsonSubset),\r\n            'editor.gotoLocation.multipleDeclarations': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleDeclarations', \"Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.\") }, jsonSubset),\r\n            'editor.gotoLocation.multipleImplementations': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleImplemenattions', \"Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.\") }, jsonSubset),\r\n            'editor.gotoLocation.multipleReferences': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleReferences', \"Controls the behavior the 'Go to References'-command when multiple target locations exist.\") }, jsonSubset),\r\n            'editor.gotoLocation.alternativeDefinitionCommand': {\r\n                type: 'string',\r\n                default: defaults.alternativeDefinitionCommand,\r\n                description: nls.localize('alternativeDefinitionCommand', \"Alternative command id that is being executed when the result of 'Go to Definition' is the current location.\")\r\n            },\r\n            'editor.gotoLocation.alternativeTypeDefinitionCommand': {\r\n                type: 'string',\r\n                default: defaults.alternativeTypeDefinitionCommand,\r\n                description: nls.localize('alternativeTypeDefinitionCommand', \"Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.\")\r\n            },\r\n            'editor.gotoLocation.alternativeDeclarationCommand': {\r\n                type: 'string',\r\n                default: defaults.alternativeDeclarationCommand,\r\n                description: nls.localize('alternativeDeclarationCommand', \"Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.\")\r\n            },\r\n            'editor.gotoLocation.alternativeImplementationCommand': {\r\n                type: 'string',\r\n                default: defaults.alternativeImplementationCommand,\r\n                description: nls.localize('alternativeImplementationCommand', \"Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.\")\r\n            },\r\n            'editor.gotoLocation.alternativeReferenceCommand': {\r\n                type: 'string',\r\n                default: defaults.alternativeReferenceCommand,\r\n                description: nls.localize('alternativeReferenceCommand', \"Alternative command id that is being executed when the result of 'Go to Reference' is the current location.\")\r\n            },\r\n        });\r\n    }\r\n    validate(_input) {\r\n        var _a, _b, _c, _d, _e;\r\n        if (!_input || typeof _input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        const input = _input;\r\n        return {\r\n            multiple: stringSet(input.multiple, this.defaultValue.multiple, ['peek', 'gotoAndPeek', 'goto']),\r\n            multipleDefinitions: (_a = input.multipleDefinitions) !== null && _a !== void 0 ? _a : stringSet(input.multipleDefinitions, 'peek', ['peek', 'gotoAndPeek', 'goto']),\r\n            multipleTypeDefinitions: (_b = input.multipleTypeDefinitions) !== null && _b !== void 0 ? _b : stringSet(input.multipleTypeDefinitions, 'peek', ['peek', 'gotoAndPeek', 'goto']),\r\n            multipleDeclarations: (_c = input.multipleDeclarations) !== null && _c !== void 0 ? _c : stringSet(input.multipleDeclarations, 'peek', ['peek', 'gotoAndPeek', 'goto']),\r\n            multipleImplementations: (_d = input.multipleImplementations) !== null && _d !== void 0 ? _d : stringSet(input.multipleImplementations, 'peek', ['peek', 'gotoAndPeek', 'goto']),\r\n            multipleReferences: (_e = input.multipleReferences) !== null && _e !== void 0 ? _e : stringSet(input.multipleReferences, 'peek', ['peek', 'gotoAndPeek', 'goto']),\r\n            alternativeDefinitionCommand: EditorStringOption.string(input.alternativeDefinitionCommand, this.defaultValue.alternativeDefinitionCommand),\r\n            alternativeTypeDefinitionCommand: EditorStringOption.string(input.alternativeTypeDefinitionCommand, this.defaultValue.alternativeTypeDefinitionCommand),\r\n            alternativeDeclarationCommand: EditorStringOption.string(input.alternativeDeclarationCommand, this.defaultValue.alternativeDeclarationCommand),\r\n            alternativeImplementationCommand: EditorStringOption.string(input.alternativeImplementationCommand, this.defaultValue.alternativeImplementationCommand),\r\n            alternativeReferenceCommand: EditorStringOption.string(input.alternativeReferenceCommand, this.defaultValue.alternativeReferenceCommand),\r\n        };\r\n    }\r\n}\r\nclass EditorHover extends BaseEditorOption {\r\n    constructor() {\r\n        const defaults = {\r\n            enabled: true,\r\n            delay: 300,\r\n            sticky: true\r\n        };\r\n        super(48 /* hover */, 'hover', defaults, {\r\n            'editor.hover.enabled': {\r\n                type: 'boolean',\r\n                default: defaults.enabled,\r\n                description: nls.localize('hover.enabled', \"Controls whether the hover is shown.\")\r\n            },\r\n            'editor.hover.delay': {\r\n                type: 'number',\r\n                default: defaults.delay,\r\n                description: nls.localize('hover.delay', \"Controls the delay in milliseconds after which the hover is shown.\")\r\n            },\r\n            'editor.hover.sticky': {\r\n                type: 'boolean',\r\n                default: defaults.sticky,\r\n                description: nls.localize('hover.sticky', \"Controls whether the hover should remain visible when mouse is moved over it.\")\r\n            },\r\n        });\r\n    }\r\n    validate(_input) {\r\n        if (!_input || typeof _input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        const input = _input;\r\n        return {\r\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\r\n            delay: EditorIntOption.clampedInt(input.delay, this.defaultValue.delay, 0, 10000),\r\n            sticky: boolean(input.sticky, this.defaultValue.sticky)\r\n        };\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport class EditorLayoutInfoComputer extends ComputedEditorOption {\r\n    constructor() {\r\n        super(124 /* layoutInfo */, [\r\n            44 /* glyphMargin */, 52 /* lineDecorationsWidth */, 33 /* folding */,\r\n            59 /* minimap */, 87 /* scrollbar */, 54 /* lineNumbers */,\r\n            55 /* lineNumbersMinChars */, 89 /* scrollBeyondLastLine */,\r\n            111 /* wordWrap */, 114 /* wordWrapColumn */, 115 /* wordWrapOverride1 */, 116 /* wordWrapOverride2 */,\r\n            2 /* accessibilitySupport */\r\n        ]);\r\n    }\r\n    compute(env, options, _) {\r\n        return EditorLayoutInfoComputer.computeLayout(options, {\r\n            memory: env.memory,\r\n            outerWidth: env.outerWidth,\r\n            outerHeight: env.outerHeight,\r\n            isDominatedByLongLines: env.isDominatedByLongLines,\r\n            lineHeight: env.fontInfo.lineHeight,\r\n            viewLineCount: env.viewLineCount,\r\n            lineNumbersDigitCount: env.lineNumbersDigitCount,\r\n            typicalHalfwidthCharacterWidth: env.fontInfo.typicalHalfwidthCharacterWidth,\r\n            maxDigitWidth: env.fontInfo.maxDigitWidth,\r\n            pixelRatio: env.pixelRatio\r\n        });\r\n    }\r\n    static computeContainedMinimapLineCount(input) {\r\n        const typicalViewportLineCount = input.height / input.lineHeight;\r\n        const extraLinesBeyondLastLine = input.scrollBeyondLastLine ? (typicalViewportLineCount - 1) : 0;\r\n        const desiredRatio = (input.viewLineCount + extraLinesBeyondLastLine) / (input.pixelRatio * input.height);\r\n        const minimapLineCount = Math.floor(input.viewLineCount / desiredRatio);\r\n        return { typicalViewportLineCount, extraLinesBeyondLastLine, desiredRatio, minimapLineCount };\r\n    }\r\n    static _computeMinimapLayout(input, memory) {\r\n        const outerWidth = input.outerWidth;\r\n        const outerHeight = input.outerHeight;\r\n        const pixelRatio = input.pixelRatio;\r\n        if (!input.minimap.enabled) {\r\n            return {\r\n                renderMinimap: 0 /* None */,\r\n                minimapLeft: 0,\r\n                minimapWidth: 0,\r\n                minimapHeightIsEditorHeight: false,\r\n                minimapIsSampling: false,\r\n                minimapScale: 1,\r\n                minimapLineHeight: 1,\r\n                minimapCanvasInnerWidth: 0,\r\n                minimapCanvasInnerHeight: Math.floor(pixelRatio * outerHeight),\r\n                minimapCanvasOuterWidth: 0,\r\n                minimapCanvasOuterHeight: outerHeight,\r\n            };\r\n        }\r\n        // Can use memory if only the `viewLineCount` and `remainingWidth` have changed\r\n        const stableMinimapLayoutInput = memory.stableMinimapLayoutInput;\r\n        const couldUseMemory = (stableMinimapLayoutInput\r\n            // && input.outerWidth === lastMinimapLayoutInput.outerWidth !!! INTENTIONAL OMITTED\r\n            && input.outerHeight === stableMinimapLayoutInput.outerHeight\r\n            && input.lineHeight === stableMinimapLayoutInput.lineHeight\r\n            && input.typicalHalfwidthCharacterWidth === stableMinimapLayoutInput.typicalHalfwidthCharacterWidth\r\n            && input.pixelRatio === stableMinimapLayoutInput.pixelRatio\r\n            && input.scrollBeyondLastLine === stableMinimapLayoutInput.scrollBeyondLastLine\r\n            && input.minimap.enabled === stableMinimapLayoutInput.minimap.enabled\r\n            && input.minimap.side === stableMinimapLayoutInput.minimap.side\r\n            && input.minimap.size === stableMinimapLayoutInput.minimap.size\r\n            && input.minimap.showSlider === stableMinimapLayoutInput.minimap.showSlider\r\n            && input.minimap.renderCharacters === stableMinimapLayoutInput.minimap.renderCharacters\r\n            && input.minimap.maxColumn === stableMinimapLayoutInput.minimap.maxColumn\r\n            && input.minimap.scale === stableMinimapLayoutInput.minimap.scale\r\n            && input.verticalScrollbarWidth === stableMinimapLayoutInput.verticalScrollbarWidth\r\n            // && input.viewLineCount === lastMinimapLayoutInput.viewLineCount !!! INTENTIONAL OMITTED\r\n            // && input.remainingWidth === lastMinimapLayoutInput.remainingWidth !!! INTENTIONAL OMITTED\r\n            && input.isViewportWrapping === stableMinimapLayoutInput.isViewportWrapping);\r\n        const lineHeight = input.lineHeight;\r\n        const typicalHalfwidthCharacterWidth = input.typicalHalfwidthCharacterWidth;\r\n        const scrollBeyondLastLine = input.scrollBeyondLastLine;\r\n        const minimapRenderCharacters = input.minimap.renderCharacters;\r\n        let minimapScale = (pixelRatio >= 2 ? Math.round(input.minimap.scale * 2) : input.minimap.scale);\r\n        const minimapMaxColumn = input.minimap.maxColumn;\r\n        const minimapSize = input.minimap.size;\r\n        const minimapSide = input.minimap.side;\r\n        const verticalScrollbarWidth = input.verticalScrollbarWidth;\r\n        const viewLineCount = input.viewLineCount;\r\n        const remainingWidth = input.remainingWidth;\r\n        const isViewportWrapping = input.isViewportWrapping;\r\n        const baseCharHeight = minimapRenderCharacters ? 2 : 3;\r\n        let minimapCanvasInnerHeight = Math.floor(pixelRatio * outerHeight);\r\n        const minimapCanvasOuterHeight = minimapCanvasInnerHeight / pixelRatio;\r\n        let minimapHeightIsEditorHeight = false;\r\n        let minimapIsSampling = false;\r\n        let minimapLineHeight = baseCharHeight * minimapScale;\r\n        let minimapCharWidth = minimapScale / pixelRatio;\r\n        let minimapWidthMultiplier = 1;\r\n        if (minimapSize === 'fill' || minimapSize === 'fit') {\r\n            const { typicalViewportLineCount, extraLinesBeyondLastLine, desiredRatio, minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\r\n                viewLineCount: viewLineCount,\r\n                scrollBeyondLastLine: scrollBeyondLastLine,\r\n                height: outerHeight,\r\n                lineHeight: lineHeight,\r\n                pixelRatio: pixelRatio\r\n            });\r\n            // ratio is intentionally not part of the layout to avoid the layout changing all the time\r\n            // when doing sampling\r\n            const ratio = viewLineCount / minimapLineCount;\r\n            if (ratio > 1) {\r\n                minimapHeightIsEditorHeight = true;\r\n                minimapIsSampling = true;\r\n                minimapScale = 1;\r\n                minimapLineHeight = 1;\r\n                minimapCharWidth = minimapScale / pixelRatio;\r\n            }\r\n            else {\r\n                let fitBecomesFill = false;\r\n                let maxMinimapScale = minimapScale + 1;\r\n                if (minimapSize === 'fit') {\r\n                    const effectiveMinimapHeight = Math.ceil((viewLineCount + extraLinesBeyondLastLine) * minimapLineHeight);\r\n                    if (isViewportWrapping && couldUseMemory && remainingWidth <= memory.stableFitRemainingWidth) {\r\n                        // There is a loop when using `fit` and viewport wrapping:\r\n                        // - view line count impacts minimap layout\r\n                        // - minimap layout impacts viewport width\r\n                        // - viewport width impacts view line count\r\n                        // To break the loop, once we go to a smaller minimap scale, we try to stick with it.\r\n                        fitBecomesFill = true;\r\n                        maxMinimapScale = memory.stableFitMaxMinimapScale;\r\n                    }\r\n                    else {\r\n                        fitBecomesFill = (effectiveMinimapHeight > minimapCanvasInnerHeight);\r\n                        if (isViewportWrapping && fitBecomesFill) {\r\n                            // remember for next time\r\n                            memory.stableMinimapLayoutInput = input;\r\n                            memory.stableFitRemainingWidth = remainingWidth;\r\n                        }\r\n                        else {\r\n                            memory.stableMinimapLayoutInput = null;\r\n                            memory.stableFitRemainingWidth = 0;\r\n                        }\r\n                    }\r\n                }\r\n                if (minimapSize === 'fill' || fitBecomesFill) {\r\n                    minimapHeightIsEditorHeight = true;\r\n                    const configuredMinimapScale = minimapScale;\r\n                    minimapLineHeight = Math.min(lineHeight * pixelRatio, Math.max(1, Math.floor(1 / desiredRatio)));\r\n                    minimapScale = Math.min(maxMinimapScale, Math.max(1, Math.floor(minimapLineHeight / baseCharHeight)));\r\n                    if (minimapScale > configuredMinimapScale) {\r\n                        minimapWidthMultiplier = Math.min(2, minimapScale / configuredMinimapScale);\r\n                    }\r\n                    minimapCharWidth = minimapScale / pixelRatio / minimapWidthMultiplier;\r\n                    minimapCanvasInnerHeight = Math.ceil((Math.max(typicalViewportLineCount, viewLineCount + extraLinesBeyondLastLine)) * minimapLineHeight);\r\n                    if (isViewportWrapping && fitBecomesFill) {\r\n                        memory.stableFitMaxMinimapScale = minimapScale;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Given:\r\n        // (leaving 2px for the cursor to have space after the last character)\r\n        // viewportColumn = (contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth\r\n        // minimapWidth = viewportColumn * minimapCharWidth\r\n        // contentWidth = remainingWidth - minimapWidth\r\n        // What are good values for contentWidth and minimapWidth ?\r\n        // minimapWidth = ((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth) * minimapCharWidth\r\n        // typicalHalfwidthCharacterWidth * minimapWidth = (contentWidth - verticalScrollbarWidth - 2) * minimapCharWidth\r\n        // typicalHalfwidthCharacterWidth * minimapWidth = (remainingWidth - minimapWidth - verticalScrollbarWidth - 2) * minimapCharWidth\r\n        // (typicalHalfwidthCharacterWidth + minimapCharWidth) * minimapWidth = (remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth\r\n        // minimapWidth = ((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth)\r\n        const minimapMaxWidth = Math.floor(minimapMaxColumn * minimapCharWidth);\r\n        const minimapWidth = Math.min(minimapMaxWidth, Math.max(0, Math.floor(((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth))) + MINIMAP_GUTTER_WIDTH);\r\n        let minimapCanvasInnerWidth = Math.floor(pixelRatio * minimapWidth);\r\n        const minimapCanvasOuterWidth = minimapCanvasInnerWidth / pixelRatio;\r\n        minimapCanvasInnerWidth = Math.floor(minimapCanvasInnerWidth * minimapWidthMultiplier);\r\n        const renderMinimap = (minimapRenderCharacters ? 1 /* Text */ : 2 /* Blocks */);\r\n        const minimapLeft = (minimapSide === 'left' ? 0 : (outerWidth - minimapWidth - verticalScrollbarWidth));\r\n        return {\r\n            renderMinimap,\r\n            minimapLeft,\r\n            minimapWidth,\r\n            minimapHeightIsEditorHeight,\r\n            minimapIsSampling,\r\n            minimapScale,\r\n            minimapLineHeight,\r\n            minimapCanvasInnerWidth,\r\n            minimapCanvasInnerHeight,\r\n            minimapCanvasOuterWidth,\r\n            minimapCanvasOuterHeight,\r\n        };\r\n    }\r\n    static computeLayout(options, env) {\r\n        const outerWidth = env.outerWidth | 0;\r\n        const outerHeight = env.outerHeight | 0;\r\n        const lineHeight = env.lineHeight | 0;\r\n        const lineNumbersDigitCount = env.lineNumbersDigitCount | 0;\r\n        const typicalHalfwidthCharacterWidth = env.typicalHalfwidthCharacterWidth;\r\n        const maxDigitWidth = env.maxDigitWidth;\r\n        const pixelRatio = env.pixelRatio;\r\n        const viewLineCount = env.viewLineCount;\r\n        const wordWrapOverride2 = options.get(116 /* wordWrapOverride2 */);\r\n        const wordWrapOverride1 = (wordWrapOverride2 === 'inherit' ? options.get(115 /* wordWrapOverride1 */) : wordWrapOverride2);\r\n        const wordWrap = (wordWrapOverride1 === 'inherit' ? options.get(111 /* wordWrap */) : wordWrapOverride1);\r\n        const wordWrapColumn = options.get(114 /* wordWrapColumn */);\r\n        const accessibilitySupport = options.get(2 /* accessibilitySupport */);\r\n        const isDominatedByLongLines = env.isDominatedByLongLines;\r\n        const showGlyphMargin = options.get(44 /* glyphMargin */);\r\n        const showLineNumbers = (options.get(54 /* lineNumbers */).renderType !== 0 /* Off */);\r\n        const lineNumbersMinChars = options.get(55 /* lineNumbersMinChars */);\r\n        const scrollBeyondLastLine = options.get(89 /* scrollBeyondLastLine */);\r\n        const minimap = options.get(59 /* minimap */);\r\n        const scrollbar = options.get(87 /* scrollbar */);\r\n        const verticalScrollbarWidth = scrollbar.verticalScrollbarSize;\r\n        const verticalScrollbarHasArrows = scrollbar.verticalHasArrows;\r\n        const scrollbarArrowSize = scrollbar.arrowSize;\r\n        const horizontalScrollbarHeight = scrollbar.horizontalScrollbarSize;\r\n        const rawLineDecorationsWidth = options.get(52 /* lineDecorationsWidth */);\r\n        const folding = options.get(33 /* folding */);\r\n        let lineDecorationsWidth;\r\n        if (typeof rawLineDecorationsWidth === 'string' && /^\\d+(\\.\\d+)?ch$/.test(rawLineDecorationsWidth)) {\r\n            const multiple = parseFloat(rawLineDecorationsWidth.substr(0, rawLineDecorationsWidth.length - 2));\r\n            lineDecorationsWidth = EditorIntOption.clampedInt(multiple * typicalHalfwidthCharacterWidth, 0, 0, 1000);\r\n        }\r\n        else {\r\n            lineDecorationsWidth = EditorIntOption.clampedInt(rawLineDecorationsWidth, 0, 0, 1000);\r\n        }\r\n        if (folding) {\r\n            lineDecorationsWidth += 16;\r\n        }\r\n        let lineNumbersWidth = 0;\r\n        if (showLineNumbers) {\r\n            const digitCount = Math.max(lineNumbersDigitCount, lineNumbersMinChars);\r\n            lineNumbersWidth = Math.round(digitCount * maxDigitWidth);\r\n        }\r\n        let glyphMarginWidth = 0;\r\n        if (showGlyphMargin) {\r\n            glyphMarginWidth = lineHeight;\r\n        }\r\n        let glyphMarginLeft = 0;\r\n        let lineNumbersLeft = glyphMarginLeft + glyphMarginWidth;\r\n        let decorationsLeft = lineNumbersLeft + lineNumbersWidth;\r\n        let contentLeft = decorationsLeft + lineDecorationsWidth;\r\n        const remainingWidth = outerWidth - glyphMarginWidth - lineNumbersWidth - lineDecorationsWidth;\r\n        let isWordWrapMinified = false;\r\n        let isViewportWrapping = false;\r\n        let wrappingColumn = -1;\r\n        if (accessibilitySupport !== 2 /* Enabled */) {\r\n            // See https://github.com/microsoft/vscode/issues/27766\r\n            // Never enable wrapping when a screen reader is attached\r\n            // because arrow down etc. will not move the cursor in the way\r\n            // a screen reader expects.\r\n            if (wordWrapOverride1 === 'inherit' && isDominatedByLongLines) {\r\n                // Force viewport width wrapping if model is dominated by long lines\r\n                isWordWrapMinified = true;\r\n                isViewportWrapping = true;\r\n            }\r\n            else if (wordWrap === 'on' || wordWrap === 'bounded') {\r\n                isViewportWrapping = true;\r\n            }\r\n            else if (wordWrap === 'wordWrapColumn') {\r\n                wrappingColumn = wordWrapColumn;\r\n            }\r\n        }\r\n        const minimapLayout = EditorLayoutInfoComputer._computeMinimapLayout({\r\n            outerWidth: outerWidth,\r\n            outerHeight: outerHeight,\r\n            lineHeight: lineHeight,\r\n            typicalHalfwidthCharacterWidth: typicalHalfwidthCharacterWidth,\r\n            pixelRatio: pixelRatio,\r\n            scrollBeyondLastLine: scrollBeyondLastLine,\r\n            minimap: minimap,\r\n            verticalScrollbarWidth: verticalScrollbarWidth,\r\n            viewLineCount: viewLineCount,\r\n            remainingWidth: remainingWidth,\r\n            isViewportWrapping: isViewportWrapping,\r\n        }, env.memory || new ComputeOptionsMemory());\r\n        if (minimapLayout.renderMinimap !== 0 /* None */ && minimapLayout.minimapLeft === 0) {\r\n            // the minimap is rendered to the left, so move everything to the right\r\n            glyphMarginLeft += minimapLayout.minimapWidth;\r\n            lineNumbersLeft += minimapLayout.minimapWidth;\r\n            decorationsLeft += minimapLayout.minimapWidth;\r\n            contentLeft += minimapLayout.minimapWidth;\r\n        }\r\n        const contentWidth = remainingWidth - minimapLayout.minimapWidth;\r\n        // (leaving 2px for the cursor to have space after the last character)\r\n        const viewportColumn = Math.max(1, Math.floor((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth));\r\n        const verticalArrowSize = (verticalScrollbarHasArrows ? scrollbarArrowSize : 0);\r\n        if (isViewportWrapping) {\r\n            // compute the actual wrappingColumn\r\n            wrappingColumn = Math.max(1, viewportColumn);\r\n            if (wordWrap === 'bounded') {\r\n                wrappingColumn = Math.min(wrappingColumn, wordWrapColumn);\r\n            }\r\n        }\r\n        return {\r\n            width: outerWidth,\r\n            height: outerHeight,\r\n            glyphMarginLeft: glyphMarginLeft,\r\n            glyphMarginWidth: glyphMarginWidth,\r\n            lineNumbersLeft: lineNumbersLeft,\r\n            lineNumbersWidth: lineNumbersWidth,\r\n            decorationsLeft: decorationsLeft,\r\n            decorationsWidth: lineDecorationsWidth,\r\n            contentLeft: contentLeft,\r\n            contentWidth: contentWidth,\r\n            minimap: minimapLayout,\r\n            viewportColumn: viewportColumn,\r\n            isWordWrapMinified: isWordWrapMinified,\r\n            isViewportWrapping: isViewportWrapping,\r\n            wrappingColumn: wrappingColumn,\r\n            verticalScrollbarWidth: verticalScrollbarWidth,\r\n            horizontalScrollbarHeight: horizontalScrollbarHeight,\r\n            overviewRuler: {\r\n                top: verticalArrowSize,\r\n                width: verticalScrollbarWidth,\r\n                height: (outerHeight - 2 * verticalArrowSize),\r\n                right: 0\r\n            }\r\n        };\r\n    }\r\n}\r\nclass EditorLightbulb extends BaseEditorOption {\r\n    constructor() {\r\n        const defaults = { enabled: true };\r\n        super(51 /* lightbulb */, 'lightbulb', defaults, {\r\n            'editor.lightbulb.enabled': {\r\n                type: 'boolean',\r\n                default: defaults.enabled,\r\n                description: nls.localize('codeActions', \"Enables the code action lightbulb in the editor.\")\r\n            },\r\n        });\r\n    }\r\n    validate(_input) {\r\n        if (!_input || typeof _input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        const input = _input;\r\n        return {\r\n            enabled: boolean(input.enabled, this.defaultValue.enabled)\r\n        };\r\n    }\r\n}\r\nclass EditorInlineHints extends BaseEditorOption {\r\n    constructor() {\r\n        const defaults = { enabled: true, fontSize: 0, fontFamily: EDITOR_FONT_DEFAULTS.fontFamily };\r\n        super(120 /* inlineHints */, 'inlineHints', defaults, {\r\n            'editor.inlineHints.enabled': {\r\n                type: 'boolean',\r\n                default: defaults.enabled,\r\n                description: nls.localize('inlineHints.enable', \"Enables the inline hints in the editor.\")\r\n            },\r\n            'editor.inlineHints.fontSize': {\r\n                type: 'number',\r\n                default: defaults.fontSize,\r\n                description: nls.localize('inlineHints.fontSize', \"Controls font size of inline hints in the editor. When set to `0`, the 90% of `#editor.fontSize#` is used.\")\r\n            },\r\n            'editor.inlineHints.fontFamily': {\r\n                type: 'string',\r\n                default: defaults.fontFamily,\r\n                description: nls.localize('inlineHints.fontFamily', \"Controls font family of inline hints in the editor.\")\r\n            },\r\n        });\r\n    }\r\n    validate(_input) {\r\n        if (!_input || typeof _input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        const input = _input;\r\n        return {\r\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\r\n            fontSize: EditorIntOption.clampedInt(input.fontSize, this.defaultValue.fontSize, 0, 100),\r\n            fontFamily: EditorStringOption.string(input.fontFamily, this.defaultValue.fontFamily)\r\n        };\r\n    }\r\n}\r\n//#endregion\r\n//#region lineHeight\r\nclass EditorLineHeight extends EditorIntOption {\r\n    constructor() {\r\n        super(53 /* lineHeight */, 'lineHeight', EDITOR_FONT_DEFAULTS.lineHeight, 0, 150, { description: nls.localize('lineHeight', \"Controls the line height. Use 0 to compute the line height from the font size.\") });\r\n    }\r\n    compute(env, options, value) {\r\n        // The lineHeight is computed from the fontSize if it is 0.\r\n        // Moreover, the final lineHeight respects the editor zoom level.\r\n        // So take the result from env.fontInfo\r\n        return env.fontInfo.lineHeight;\r\n    }\r\n}\r\nclass EditorMinimap extends BaseEditorOption {\r\n    constructor() {\r\n        const defaults = {\r\n            enabled: true,\r\n            size: 'proportional',\r\n            side: 'right',\r\n            showSlider: 'mouseover',\r\n            renderCharacters: true,\r\n            maxColumn: 120,\r\n            scale: 1,\r\n        };\r\n        super(59 /* minimap */, 'minimap', defaults, {\r\n            'editor.minimap.enabled': {\r\n                type: 'boolean',\r\n                default: defaults.enabled,\r\n                description: nls.localize('minimap.enabled', \"Controls whether the minimap is shown.\")\r\n            },\r\n            'editor.minimap.size': {\r\n                type: 'string',\r\n                enum: ['proportional', 'fill', 'fit'],\r\n                enumDescriptions: [\r\n                    nls.localize('minimap.size.proportional', \"The minimap has the same size as the editor contents (and might scroll).\"),\r\n                    nls.localize('minimap.size.fill', \"The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).\"),\r\n                    nls.localize('minimap.size.fit', \"The minimap will shrink as necessary to never be larger than the editor (no scrolling).\"),\r\n                ],\r\n                default: defaults.size,\r\n                description: nls.localize('minimap.size', \"Controls the size of the minimap.\")\r\n            },\r\n            'editor.minimap.side': {\r\n                type: 'string',\r\n                enum: ['left', 'right'],\r\n                default: defaults.side,\r\n                description: nls.localize('minimap.side', \"Controls the side where to render the minimap.\")\r\n            },\r\n            'editor.minimap.showSlider': {\r\n                type: 'string',\r\n                enum: ['always', 'mouseover'],\r\n                default: defaults.showSlider,\r\n                description: nls.localize('minimap.showSlider', \"Controls when the minimap slider is shown.\")\r\n            },\r\n            'editor.minimap.scale': {\r\n                type: 'number',\r\n                default: defaults.scale,\r\n                minimum: 1,\r\n                maximum: 3,\r\n                enum: [1, 2, 3],\r\n                description: nls.localize('minimap.scale', \"Scale of content drawn in the minimap: 1, 2 or 3.\")\r\n            },\r\n            'editor.minimap.renderCharacters': {\r\n                type: 'boolean',\r\n                default: defaults.renderCharacters,\r\n                description: nls.localize('minimap.renderCharacters', \"Render the actual characters on a line as opposed to color blocks.\")\r\n            },\r\n            'editor.minimap.maxColumn': {\r\n                type: 'number',\r\n                default: defaults.maxColumn,\r\n                description: nls.localize('minimap.maxColumn', \"Limit the width of the minimap to render at most a certain number of columns.\")\r\n            }\r\n        });\r\n    }\r\n    validate(_input) {\r\n        if (!_input || typeof _input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        const input = _input;\r\n        return {\r\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\r\n            size: stringSet(input.size, this.defaultValue.size, ['proportional', 'fill', 'fit']),\r\n            side: stringSet(input.side, this.defaultValue.side, ['right', 'left']),\r\n            showSlider: stringSet(input.showSlider, this.defaultValue.showSlider, ['always', 'mouseover']),\r\n            renderCharacters: boolean(input.renderCharacters, this.defaultValue.renderCharacters),\r\n            scale: EditorIntOption.clampedInt(input.scale, 1, 1, 3),\r\n            maxColumn: EditorIntOption.clampedInt(input.maxColumn, this.defaultValue.maxColumn, 1, 10000),\r\n        };\r\n    }\r\n}\r\n//#endregion\r\n//#region multiCursorModifier\r\nfunction _multiCursorModifierFromString(multiCursorModifier) {\r\n    if (multiCursorModifier === 'ctrlCmd') {\r\n        return (platform.isMacintosh ? 'metaKey' : 'ctrlKey');\r\n    }\r\n    return 'altKey';\r\n}\r\nclass EditorPadding extends BaseEditorOption {\r\n    constructor() {\r\n        super(69 /* padding */, 'padding', { top: 0, bottom: 0 }, {\r\n            'editor.padding.top': {\r\n                type: 'number',\r\n                default: 0,\r\n                minimum: 0,\r\n                maximum: 1000,\r\n                description: nls.localize('padding.top', \"Controls the amount of space between the top edge of the editor and the first line.\")\r\n            },\r\n            'editor.padding.bottom': {\r\n                type: 'number',\r\n                default: 0,\r\n                minimum: 0,\r\n                maximum: 1000,\r\n                description: nls.localize('padding.bottom', \"Controls the amount of space between the bottom edge of the editor and the last line.\")\r\n            }\r\n        });\r\n    }\r\n    validate(_input) {\r\n        if (!_input || typeof _input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        const input = _input;\r\n        return {\r\n            top: EditorIntOption.clampedInt(input.top, 0, 0, 1000),\r\n            bottom: EditorIntOption.clampedInt(input.bottom, 0, 0, 1000)\r\n        };\r\n    }\r\n}\r\nclass EditorParameterHints extends BaseEditorOption {\r\n    constructor() {\r\n        const defaults = {\r\n            enabled: true,\r\n            cycle: false\r\n        };\r\n        super(70 /* parameterHints */, 'parameterHints', defaults, {\r\n            'editor.parameterHints.enabled': {\r\n                type: 'boolean',\r\n                default: defaults.enabled,\r\n                description: nls.localize('parameterHints.enabled', \"Enables a pop-up that shows parameter documentation and type information as you type.\")\r\n            },\r\n            'editor.parameterHints.cycle': {\r\n                type: 'boolean',\r\n                default: defaults.cycle,\r\n                description: nls.localize('parameterHints.cycle', \"Controls whether the parameter hints menu cycles or closes when reaching the end of the list.\")\r\n            },\r\n        });\r\n    }\r\n    validate(_input) {\r\n        if (!_input || typeof _input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        const input = _input;\r\n        return {\r\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\r\n            cycle: boolean(input.cycle, this.defaultValue.cycle)\r\n        };\r\n    }\r\n}\r\n//#endregion\r\n//#region pixelRatio\r\nclass EditorPixelRatio extends ComputedEditorOption {\r\n    constructor() {\r\n        super(122 /* pixelRatio */);\r\n    }\r\n    compute(env, options, _) {\r\n        return env.pixelRatio;\r\n    }\r\n}\r\nclass EditorQuickSuggestions extends BaseEditorOption {\r\n    constructor() {\r\n        const defaults = {\r\n            other: true,\r\n            comments: false,\r\n            strings: false\r\n        };\r\n        super(73 /* quickSuggestions */, 'quickSuggestions', defaults, {\r\n            anyOf: [\r\n                {\r\n                    type: 'boolean',\r\n                },\r\n                {\r\n                    type: 'object',\r\n                    properties: {\r\n                        strings: {\r\n                            type: 'boolean',\r\n                            default: defaults.strings,\r\n                            description: nls.localize('quickSuggestions.strings', \"Enable quick suggestions inside strings.\")\r\n                        },\r\n                        comments: {\r\n                            type: 'boolean',\r\n                            default: defaults.comments,\r\n                            description: nls.localize('quickSuggestions.comments', \"Enable quick suggestions inside comments.\")\r\n                        },\r\n                        other: {\r\n                            type: 'boolean',\r\n                            default: defaults.other,\r\n                            description: nls.localize('quickSuggestions.other', \"Enable quick suggestions outside of strings and comments.\")\r\n                        },\r\n                    }\r\n                }\r\n            ],\r\n            default: defaults,\r\n            description: nls.localize('quickSuggestions', \"Controls whether suggestions should automatically show up while typing.\")\r\n        });\r\n        this.defaultValue = defaults;\r\n    }\r\n    validate(_input) {\r\n        if (typeof _input === 'boolean') {\r\n            return _input;\r\n        }\r\n        if (_input && typeof _input === 'object') {\r\n            const input = _input;\r\n            const opts = {\r\n                other: boolean(input.other, this.defaultValue.other),\r\n                comments: boolean(input.comments, this.defaultValue.comments),\r\n                strings: boolean(input.strings, this.defaultValue.strings),\r\n            };\r\n            if (opts.other && opts.comments && opts.strings) {\r\n                return true; // all on\r\n            }\r\n            else if (!opts.other && !opts.comments && !opts.strings) {\r\n                return false; // all off\r\n            }\r\n            else {\r\n                return opts;\r\n            }\r\n        }\r\n        return this.defaultValue;\r\n    }\r\n}\r\nclass EditorRenderLineNumbersOption extends BaseEditorOption {\r\n    constructor() {\r\n        super(54 /* lineNumbers */, 'lineNumbers', { renderType: 1 /* On */, renderFn: null }, {\r\n            type: 'string',\r\n            enum: ['off', 'on', 'relative', 'interval'],\r\n            enumDescriptions: [\r\n                nls.localize('lineNumbers.off', \"Line numbers are not rendered.\"),\r\n                nls.localize('lineNumbers.on', \"Line numbers are rendered as absolute number.\"),\r\n                nls.localize('lineNumbers.relative', \"Line numbers are rendered as distance in lines to cursor position.\"),\r\n                nls.localize('lineNumbers.interval', \"Line numbers are rendered every 10 lines.\")\r\n            ],\r\n            default: 'on',\r\n            description: nls.localize('lineNumbers', \"Controls the display of line numbers.\")\r\n        });\r\n    }\r\n    validate(lineNumbers) {\r\n        let renderType = this.defaultValue.renderType;\r\n        let renderFn = this.defaultValue.renderFn;\r\n        if (typeof lineNumbers !== 'undefined') {\r\n            if (typeof lineNumbers === 'function') {\r\n                renderType = 4 /* Custom */;\r\n                renderFn = lineNumbers;\r\n            }\r\n            else if (lineNumbers === 'interval') {\r\n                renderType = 3 /* Interval */;\r\n            }\r\n            else if (lineNumbers === 'relative') {\r\n                renderType = 2 /* Relative */;\r\n            }\r\n            else if (lineNumbers === 'on') {\r\n                renderType = 1 /* On */;\r\n            }\r\n            else {\r\n                renderType = 0 /* Off */;\r\n            }\r\n        }\r\n        return {\r\n            renderType,\r\n            renderFn\r\n        };\r\n    }\r\n}\r\n//#endregion\r\n//#region renderValidationDecorations\r\n/**\r\n * @internal\r\n */\r\nexport function filterValidationDecorations(options) {\r\n    const renderValidationDecorations = options.get(82 /* renderValidationDecorations */);\r\n    if (renderValidationDecorations === 'editable') {\r\n        return options.get(75 /* readOnly */);\r\n    }\r\n    return renderValidationDecorations === 'on' ? false : true;\r\n}\r\nclass EditorRulers extends BaseEditorOption {\r\n    constructor() {\r\n        const defaults = [];\r\n        const columnSchema = { type: 'number', description: nls.localize('rulers.size', \"Number of monospace characters at which this editor ruler will render.\") };\r\n        super(86 /* rulers */, 'rulers', defaults, {\r\n            type: 'array',\r\n            items: {\r\n                anyOf: [\r\n                    columnSchema,\r\n                    {\r\n                        type: [\r\n                            'object'\r\n                        ],\r\n                        properties: {\r\n                            column: columnSchema,\r\n                            color: {\r\n                                type: 'string',\r\n                                description: nls.localize('rulers.color', \"Color of this editor ruler.\"),\r\n                                format: 'color-hex'\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            default: defaults,\r\n            description: nls.localize('rulers', \"Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.\")\r\n        });\r\n    }\r\n    validate(input) {\r\n        if (Array.isArray(input)) {\r\n            let rulers = [];\r\n            for (let _element of input) {\r\n                if (typeof _element === 'number') {\r\n                    rulers.push({\r\n                        column: EditorIntOption.clampedInt(_element, 0, 0, 10000),\r\n                        color: null\r\n                    });\r\n                }\r\n                else if (_element && typeof _element === 'object') {\r\n                    const element = _element;\r\n                    rulers.push({\r\n                        column: EditorIntOption.clampedInt(element.column, 0, 0, 10000),\r\n                        color: element.color\r\n                    });\r\n                }\r\n            }\r\n            rulers.sort((a, b) => a.column - b.column);\r\n            return rulers;\r\n        }\r\n        return this.defaultValue;\r\n    }\r\n}\r\nfunction _scrollbarVisibilityFromString(visibility, defaultValue) {\r\n    if (typeof visibility !== 'string') {\r\n        return defaultValue;\r\n    }\r\n    switch (visibility) {\r\n        case 'hidden': return 2 /* Hidden */;\r\n        case 'visible': return 3 /* Visible */;\r\n        default: return 1 /* Auto */;\r\n    }\r\n}\r\nclass EditorScrollbar extends BaseEditorOption {\r\n    constructor() {\r\n        super(87 /* scrollbar */, 'scrollbar', {\r\n            vertical: 1 /* Auto */,\r\n            horizontal: 1 /* Auto */,\r\n            arrowSize: 11,\r\n            useShadows: true,\r\n            verticalHasArrows: false,\r\n            horizontalHasArrows: false,\r\n            horizontalScrollbarSize: 12,\r\n            horizontalSliderSize: 12,\r\n            verticalScrollbarSize: 14,\r\n            verticalSliderSize: 14,\r\n            handleMouseWheel: true,\r\n            alwaysConsumeMouseWheel: true,\r\n            scrollByPage: false\r\n        });\r\n    }\r\n    validate(_input) {\r\n        if (!_input || typeof _input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        const input = _input;\r\n        const horizontalScrollbarSize = EditorIntOption.clampedInt(input.horizontalScrollbarSize, this.defaultValue.horizontalScrollbarSize, 0, 1000);\r\n        const verticalScrollbarSize = EditorIntOption.clampedInt(input.verticalScrollbarSize, this.defaultValue.verticalScrollbarSize, 0, 1000);\r\n        return {\r\n            arrowSize: EditorIntOption.clampedInt(input.arrowSize, this.defaultValue.arrowSize, 0, 1000),\r\n            vertical: _scrollbarVisibilityFromString(input.vertical, this.defaultValue.vertical),\r\n            horizontal: _scrollbarVisibilityFromString(input.horizontal, this.defaultValue.horizontal),\r\n            useShadows: boolean(input.useShadows, this.defaultValue.useShadows),\r\n            verticalHasArrows: boolean(input.verticalHasArrows, this.defaultValue.verticalHasArrows),\r\n            horizontalHasArrows: boolean(input.horizontalHasArrows, this.defaultValue.horizontalHasArrows),\r\n            handleMouseWheel: boolean(input.handleMouseWheel, this.defaultValue.handleMouseWheel),\r\n            alwaysConsumeMouseWheel: boolean(input.alwaysConsumeMouseWheel, this.defaultValue.alwaysConsumeMouseWheel),\r\n            horizontalScrollbarSize: horizontalScrollbarSize,\r\n            horizontalSliderSize: EditorIntOption.clampedInt(input.horizontalSliderSize, horizontalScrollbarSize, 0, 1000),\r\n            verticalScrollbarSize: verticalScrollbarSize,\r\n            verticalSliderSize: EditorIntOption.clampedInt(input.verticalSliderSize, verticalScrollbarSize, 0, 1000),\r\n            scrollByPage: boolean(input.scrollByPage, this.defaultValue.scrollByPage),\r\n        };\r\n    }\r\n}\r\nclass EditorSuggest extends BaseEditorOption {\r\n    constructor() {\r\n        const defaults = {\r\n            insertMode: 'insert',\r\n            filterGraceful: true,\r\n            snippetsPreventQuickSuggestions: true,\r\n            localityBonus: false,\r\n            shareSuggestSelections: false,\r\n            showIcons: true,\r\n            showStatusBar: false,\r\n            showInlineDetails: true,\r\n            showMethods: true,\r\n            showFunctions: true,\r\n            showConstructors: true,\r\n            showFields: true,\r\n            showVariables: true,\r\n            showClasses: true,\r\n            showStructs: true,\r\n            showInterfaces: true,\r\n            showModules: true,\r\n            showProperties: true,\r\n            showEvents: true,\r\n            showOperators: true,\r\n            showUnits: true,\r\n            showValues: true,\r\n            showConstants: true,\r\n            showEnums: true,\r\n            showEnumMembers: true,\r\n            showKeywords: true,\r\n            showWords: true,\r\n            showColors: true,\r\n            showFiles: true,\r\n            showReferences: true,\r\n            showFolders: true,\r\n            showTypeParameters: true,\r\n            showSnippets: true,\r\n            showUsers: true,\r\n            showIssues: true,\r\n        };\r\n        super(101 /* suggest */, 'suggest', defaults, {\r\n            'editor.suggest.insertMode': {\r\n                type: 'string',\r\n                enum: ['insert', 'replace'],\r\n                enumDescriptions: [\r\n                    nls.localize('suggest.insertMode.insert', \"Insert suggestion without overwriting text right of the cursor.\"),\r\n                    nls.localize('suggest.insertMode.replace', \"Insert suggestion and overwrite text right of the cursor.\"),\r\n                ],\r\n                default: defaults.insertMode,\r\n                description: nls.localize('suggest.insertMode', \"Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.\")\r\n            },\r\n            'editor.suggest.filterGraceful': {\r\n                type: 'boolean',\r\n                default: defaults.filterGraceful,\r\n                description: nls.localize('suggest.filterGraceful', \"Controls whether filtering and sorting suggestions accounts for small typos.\")\r\n            },\r\n            'editor.suggest.localityBonus': {\r\n                type: 'boolean',\r\n                default: defaults.localityBonus,\r\n                description: nls.localize('suggest.localityBonus', \"Controls whether sorting favours words that appear close to the cursor.\")\r\n            },\r\n            'editor.suggest.shareSuggestSelections': {\r\n                type: 'boolean',\r\n                default: defaults.shareSuggestSelections,\r\n                markdownDescription: nls.localize('suggest.shareSuggestSelections', \"Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).\")\r\n            },\r\n            'editor.suggest.snippetsPreventQuickSuggestions': {\r\n                type: 'boolean',\r\n                default: defaults.snippetsPreventQuickSuggestions,\r\n                description: nls.localize('suggest.snippetsPreventQuickSuggestions', \"Controls whether an active snippet prevents quick suggestions.\")\r\n            },\r\n            'editor.suggest.showIcons': {\r\n                type: 'boolean',\r\n                default: defaults.showIcons,\r\n                description: nls.localize('suggest.showIcons', \"Controls whether to show or hide icons in suggestions.\")\r\n            },\r\n            'editor.suggest.showStatusBar': {\r\n                type: 'boolean',\r\n                default: defaults.showStatusBar,\r\n                description: nls.localize('suggest.showStatusBar', \"Controls the visibility of the status bar at the bottom of the suggest widget.\")\r\n            },\r\n            'editor.suggest.showInlineDetails': {\r\n                type: 'boolean',\r\n                default: defaults.showInlineDetails,\r\n                description: nls.localize('suggest.showInlineDetails', \"Controls whether suggest details show inline with the label or only in the details widget\")\r\n            },\r\n            'editor.suggest.maxVisibleSuggestions': {\r\n                type: 'number',\r\n                deprecationMessage: nls.localize('suggest.maxVisibleSuggestions.dep', \"This setting is deprecated. The suggest widget can now be resized.\"),\r\n            },\r\n            'editor.suggest.filteredTypes': {\r\n                type: 'object',\r\n                deprecationMessage: nls.localize('deprecated', \"This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.\")\r\n            },\r\n            'editor.suggest.showMethods': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showMethods', \"When enabled IntelliSense shows `method`-suggestions.\")\r\n            },\r\n            'editor.suggest.showFunctions': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showFunctions', \"When enabled IntelliSense shows `function`-suggestions.\")\r\n            },\r\n            'editor.suggest.showConstructors': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showConstructors', \"When enabled IntelliSense shows `constructor`-suggestions.\")\r\n            },\r\n            'editor.suggest.showFields': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showFields', \"When enabled IntelliSense shows `field`-suggestions.\")\r\n            },\r\n            'editor.suggest.showVariables': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showVariables', \"When enabled IntelliSense shows `variable`-suggestions.\")\r\n            },\r\n            'editor.suggest.showClasses': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showClasss', \"When enabled IntelliSense shows `class`-suggestions.\")\r\n            },\r\n            'editor.suggest.showStructs': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showStructs', \"When enabled IntelliSense shows `struct`-suggestions.\")\r\n            },\r\n            'editor.suggest.showInterfaces': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showInterfaces', \"When enabled IntelliSense shows `interface`-suggestions.\")\r\n            },\r\n            'editor.suggest.showModules': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showModules', \"When enabled IntelliSense shows `module`-suggestions.\")\r\n            },\r\n            'editor.suggest.showProperties': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showPropertys', \"When enabled IntelliSense shows `property`-suggestions.\")\r\n            },\r\n            'editor.suggest.showEvents': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showEvents', \"When enabled IntelliSense shows `event`-suggestions.\")\r\n            },\r\n            'editor.suggest.showOperators': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showOperators', \"When enabled IntelliSense shows `operator`-suggestions.\")\r\n            },\r\n            'editor.suggest.showUnits': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showUnits', \"When enabled IntelliSense shows `unit`-suggestions.\")\r\n            },\r\n            'editor.suggest.showValues': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showValues', \"When enabled IntelliSense shows `value`-suggestions.\")\r\n            },\r\n            'editor.suggest.showConstants': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showConstants', \"When enabled IntelliSense shows `constant`-suggestions.\")\r\n            },\r\n            'editor.suggest.showEnums': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showEnums', \"When enabled IntelliSense shows `enum`-suggestions.\")\r\n            },\r\n            'editor.suggest.showEnumMembers': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showEnumMembers', \"When enabled IntelliSense shows `enumMember`-suggestions.\")\r\n            },\r\n            'editor.suggest.showKeywords': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showKeywords', \"When enabled IntelliSense shows `keyword`-suggestions.\")\r\n            },\r\n            'editor.suggest.showWords': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showTexts', \"When enabled IntelliSense shows `text`-suggestions.\")\r\n            },\r\n            'editor.suggest.showColors': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showColors', \"When enabled IntelliSense shows `color`-suggestions.\")\r\n            },\r\n            'editor.suggest.showFiles': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showFiles', \"When enabled IntelliSense shows `file`-suggestions.\")\r\n            },\r\n            'editor.suggest.showReferences': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showReferences', \"When enabled IntelliSense shows `reference`-suggestions.\")\r\n            },\r\n            'editor.suggest.showCustomcolors': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showCustomcolors', \"When enabled IntelliSense shows `customcolor`-suggestions.\")\r\n            },\r\n            'editor.suggest.showFolders': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showFolders', \"When enabled IntelliSense shows `folder`-suggestions.\")\r\n            },\r\n            'editor.suggest.showTypeParameters': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showTypeParameters', \"When enabled IntelliSense shows `typeParameter`-suggestions.\")\r\n            },\r\n            'editor.suggest.showSnippets': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showSnippets', \"When enabled IntelliSense shows `snippet`-suggestions.\")\r\n            },\r\n            'editor.suggest.showUsers': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showUsers', \"When enabled IntelliSense shows `user`-suggestions.\")\r\n            },\r\n            'editor.suggest.showIssues': {\r\n                type: 'boolean',\r\n                default: true,\r\n                markdownDescription: nls.localize('editor.suggest.showIssues', \"When enabled IntelliSense shows `issues`-suggestions.\")\r\n            }\r\n        });\r\n    }\r\n    validate(_input) {\r\n        if (!_input || typeof _input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        const input = _input;\r\n        return {\r\n            insertMode: stringSet(input.insertMode, this.defaultValue.insertMode, ['insert', 'replace']),\r\n            filterGraceful: boolean(input.filterGraceful, this.defaultValue.filterGraceful),\r\n            snippetsPreventQuickSuggestions: boolean(input.snippetsPreventQuickSuggestions, this.defaultValue.filterGraceful),\r\n            localityBonus: boolean(input.localityBonus, this.defaultValue.localityBonus),\r\n            shareSuggestSelections: boolean(input.shareSuggestSelections, this.defaultValue.shareSuggestSelections),\r\n            showIcons: boolean(input.showIcons, this.defaultValue.showIcons),\r\n            showStatusBar: boolean(input.showStatusBar, this.defaultValue.showStatusBar),\r\n            showInlineDetails: boolean(input.showInlineDetails, this.defaultValue.showInlineDetails),\r\n            showMethods: boolean(input.showMethods, this.defaultValue.showMethods),\r\n            showFunctions: boolean(input.showFunctions, this.defaultValue.showFunctions),\r\n            showConstructors: boolean(input.showConstructors, this.defaultValue.showConstructors),\r\n            showFields: boolean(input.showFields, this.defaultValue.showFields),\r\n            showVariables: boolean(input.showVariables, this.defaultValue.showVariables),\r\n            showClasses: boolean(input.showClasses, this.defaultValue.showClasses),\r\n            showStructs: boolean(input.showStructs, this.defaultValue.showStructs),\r\n            showInterfaces: boolean(input.showInterfaces, this.defaultValue.showInterfaces),\r\n            showModules: boolean(input.showModules, this.defaultValue.showModules),\r\n            showProperties: boolean(input.showProperties, this.defaultValue.showProperties),\r\n            showEvents: boolean(input.showEvents, this.defaultValue.showEvents),\r\n            showOperators: boolean(input.showOperators, this.defaultValue.showOperators),\r\n            showUnits: boolean(input.showUnits, this.defaultValue.showUnits),\r\n            showValues: boolean(input.showValues, this.defaultValue.showValues),\r\n            showConstants: boolean(input.showConstants, this.defaultValue.showConstants),\r\n            showEnums: boolean(input.showEnums, this.defaultValue.showEnums),\r\n            showEnumMembers: boolean(input.showEnumMembers, this.defaultValue.showEnumMembers),\r\n            showKeywords: boolean(input.showKeywords, this.defaultValue.showKeywords),\r\n            showWords: boolean(input.showWords, this.defaultValue.showWords),\r\n            showColors: boolean(input.showColors, this.defaultValue.showColors),\r\n            showFiles: boolean(input.showFiles, this.defaultValue.showFiles),\r\n            showReferences: boolean(input.showReferences, this.defaultValue.showReferences),\r\n            showFolders: boolean(input.showFolders, this.defaultValue.showFolders),\r\n            showTypeParameters: boolean(input.showTypeParameters, this.defaultValue.showTypeParameters),\r\n            showSnippets: boolean(input.showSnippets, this.defaultValue.showSnippets),\r\n            showUsers: boolean(input.showUsers, this.defaultValue.showUsers),\r\n            showIssues: boolean(input.showIssues, this.defaultValue.showIssues),\r\n        };\r\n    }\r\n}\r\nclass SmartSelect extends BaseEditorOption {\r\n    constructor() {\r\n        super(97 /* smartSelect */, 'smartSelect', {\r\n            selectLeadingAndTrailingWhitespace: true\r\n        }, {\r\n            'editor.smartSelect.selectLeadingAndTrailingWhitespace': {\r\n                description: nls.localize('selectLeadingAndTrailingWhitespace', \"Whether leading and trailing whitespace should always be selected.\"),\r\n                default: true,\r\n                type: 'boolean'\r\n            }\r\n        });\r\n    }\r\n    validate(input) {\r\n        if (!input || typeof input !== 'object') {\r\n            return this.defaultValue;\r\n        }\r\n        return {\r\n            selectLeadingAndTrailingWhitespace: boolean(input.selectLeadingAndTrailingWhitespace, this.defaultValue.selectLeadingAndTrailingWhitespace)\r\n        };\r\n    }\r\n}\r\n//#endregion\r\n//#region tabFocusMode\r\nclass EditorTabFocusMode extends ComputedEditorOption {\r\n    constructor() {\r\n        super(123 /* tabFocusMode */, [75 /* readOnly */]);\r\n    }\r\n    compute(env, options, _) {\r\n        const readOnly = options.get(75 /* readOnly */);\r\n        return (readOnly ? true : env.tabFocusMode);\r\n    }\r\n}\r\nfunction _wrappingIndentFromString(wrappingIndent) {\r\n    switch (wrappingIndent) {\r\n        case 'none': return 0 /* None */;\r\n        case 'same': return 1 /* Same */;\r\n        case 'indent': return 2 /* Indent */;\r\n        case 'deepIndent': return 3 /* DeepIndent */;\r\n    }\r\n}\r\nclass EditorWrappingInfoComputer extends ComputedEditorOption {\r\n    constructor() {\r\n        super(125 /* wrappingInfo */, [124 /* layoutInfo */]);\r\n    }\r\n    compute(env, options, _) {\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        return {\r\n            isDominatedByLongLines: env.isDominatedByLongLines,\r\n            isWordWrapMinified: layoutInfo.isWordWrapMinified,\r\n            isViewportWrapping: layoutInfo.isViewportWrapping,\r\n            wrappingColumn: layoutInfo.wrappingColumn,\r\n        };\r\n    }\r\n}\r\n//#endregion\r\nconst DEFAULT_WINDOWS_FONT_FAMILY = 'Consolas, \\'Courier New\\', monospace';\r\nconst DEFAULT_MAC_FONT_FAMILY = 'Menlo, Monaco, \\'Courier New\\', monospace';\r\nconst DEFAULT_LINUX_FONT_FAMILY = '\\'Droid Sans Mono\\', \\'monospace\\', monospace, \\'Droid Sans Fallback\\'';\r\n/**\r\n * @internal\r\n */\r\nexport const EDITOR_FONT_DEFAULTS = {\r\n    fontFamily: (platform.isMacintosh ? DEFAULT_MAC_FONT_FAMILY : (platform.isLinux ? DEFAULT_LINUX_FONT_FAMILY : DEFAULT_WINDOWS_FONT_FAMILY)),\r\n    fontWeight: 'normal',\r\n    fontSize: (platform.isMacintosh ? 12 : 14),\r\n    lineHeight: 0,\r\n    letterSpacing: 0,\r\n};\r\n/**\r\n * @internal\r\n */\r\nexport const EDITOR_MODEL_DEFAULTS = {\r\n    tabSize: 4,\r\n    indentSize: 4,\r\n    insertSpaces: true,\r\n    detectIndentation: true,\r\n    trimAutoWhitespace: true,\r\n    largeFileOptimizations: true\r\n};\r\n/**\r\n * @internal\r\n */\r\nexport const editorOptionsRegistry = [];\r\nfunction register(option) {\r\n    editorOptionsRegistry[option.id] = option;\r\n    return option;\r\n}\r\n/**\r\n * WORKAROUND: TS emits \"any\" for complex editor options values (anything except string, bool, enum, etc. ends up being \"any\")\r\n * @monacodtsreplace\r\n * /accessibilitySupport, any/accessibilitySupport, AccessibilitySupport/\r\n * /comments, any/comments, EditorCommentsOptions/\r\n * /find, any/find, EditorFindOptions/\r\n * /fontInfo, any/fontInfo, FontInfo/\r\n * /gotoLocation, any/gotoLocation, GoToLocationOptions/\r\n * /hover, any/hover, EditorHoverOptions/\r\n * /lightbulb, any/lightbulb, EditorLightbulbOptions/\r\n * /minimap, any/minimap, EditorMinimapOptions/\r\n * /parameterHints, any/parameterHints, InternalParameterHintOptions/\r\n * /quickSuggestions, any/quickSuggestions, ValidQuickSuggestionsOptions/\r\n * /suggest, any/suggest, InternalSuggestOptions/\r\n */\r\nexport const EditorOptions = {\r\n    acceptSuggestionOnCommitCharacter: register(new EditorBooleanOption(0 /* acceptSuggestionOnCommitCharacter */, 'acceptSuggestionOnCommitCharacter', true, { markdownDescription: nls.localize('acceptSuggestionOnCommitCharacter', \"Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.\") })),\r\n    acceptSuggestionOnEnter: register(new EditorStringEnumOption(1 /* acceptSuggestionOnEnter */, 'acceptSuggestionOnEnter', 'on', ['on', 'smart', 'off'], {\r\n        markdownEnumDescriptions: [\r\n            '',\r\n            nls.localize('acceptSuggestionOnEnterSmart', \"Only accept a suggestion with `Enter` when it makes a textual change.\"),\r\n            ''\r\n        ],\r\n        markdownDescription: nls.localize('acceptSuggestionOnEnter', \"Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.\")\r\n    })),\r\n    accessibilitySupport: register(new EditorAccessibilitySupport()),\r\n    accessibilityPageSize: register(new EditorIntOption(3 /* accessibilityPageSize */, 'accessibilityPageSize', 10, 1, 1073741824 /* MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('accessibilityPageSize', \"Controls the number of lines in the editor that can be read out by a screen reader. Warning: this has a performance implication for numbers larger than the default.\") })),\r\n    ariaLabel: register(new EditorStringOption(4 /* ariaLabel */, 'ariaLabel', nls.localize('editorViewAccessibleLabel', \"Editor content\"))),\r\n    autoClosingBrackets: register(new EditorStringEnumOption(5 /* autoClosingBrackets */, 'autoClosingBrackets', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {\r\n        enumDescriptions: [\r\n            '',\r\n            nls.localize('editor.autoClosingBrackets.languageDefined', \"Use language configurations to determine when to autoclose brackets.\"),\r\n            nls.localize('editor.autoClosingBrackets.beforeWhitespace', \"Autoclose brackets only when the cursor is to the left of whitespace.\"),\r\n            '',\r\n        ],\r\n        description: nls.localize('autoClosingBrackets', \"Controls whether the editor should automatically close brackets after the user adds an opening bracket.\")\r\n    })),\r\n    autoClosingOvertype: register(new EditorStringEnumOption(6 /* autoClosingOvertype */, 'autoClosingOvertype', 'auto', ['always', 'auto', 'never'], {\r\n        enumDescriptions: [\r\n            '',\r\n            nls.localize('editor.autoClosingOvertype.auto', \"Type over closing quotes or brackets only if they were automatically inserted.\"),\r\n            '',\r\n        ],\r\n        description: nls.localize('autoClosingOvertype', \"Controls whether the editor should type over closing quotes or brackets.\")\r\n    })),\r\n    autoClosingQuotes: register(new EditorStringEnumOption(7 /* autoClosingQuotes */, 'autoClosingQuotes', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {\r\n        enumDescriptions: [\r\n            '',\r\n            nls.localize('editor.autoClosingQuotes.languageDefined', \"Use language configurations to determine when to autoclose quotes.\"),\r\n            nls.localize('editor.autoClosingQuotes.beforeWhitespace', \"Autoclose quotes only when the cursor is to the left of whitespace.\"),\r\n            '',\r\n        ],\r\n        description: nls.localize('autoClosingQuotes', \"Controls whether the editor should automatically close quotes after the user adds an opening quote.\")\r\n    })),\r\n    autoIndent: register(new EditorEnumOption(8 /* autoIndent */, 'autoIndent', 4 /* Full */, 'full', ['none', 'keep', 'brackets', 'advanced', 'full'], _autoIndentFromString, {\r\n        enumDescriptions: [\r\n            nls.localize('editor.autoIndent.none', \"The editor will not insert indentation automatically.\"),\r\n            nls.localize('editor.autoIndent.keep', \"The editor will keep the current line's indentation.\"),\r\n            nls.localize('editor.autoIndent.brackets', \"The editor will keep the current line's indentation and honor language defined brackets.\"),\r\n            nls.localize('editor.autoIndent.advanced', \"The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.\"),\r\n            nls.localize('editor.autoIndent.full', \"The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.\"),\r\n        ],\r\n        description: nls.localize('autoIndent', \"Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.\")\r\n    })),\r\n    automaticLayout: register(new EditorBooleanOption(9 /* automaticLayout */, 'automaticLayout', false)),\r\n    autoSurround: register(new EditorStringEnumOption(10 /* autoSurround */, 'autoSurround', 'languageDefined', ['languageDefined', 'quotes', 'brackets', 'never'], {\r\n        enumDescriptions: [\r\n            nls.localize('editor.autoSurround.languageDefined', \"Use language configurations to determine when to automatically surround selections.\"),\r\n            nls.localize('editor.autoSurround.quotes', \"Surround with quotes but not brackets.\"),\r\n            nls.localize('editor.autoSurround.brackets', \"Surround with brackets but not quotes.\"),\r\n            ''\r\n        ],\r\n        description: nls.localize('autoSurround', \"Controls whether the editor should automatically surround selections when typing quotes or brackets.\")\r\n    })),\r\n    stickyTabStops: register(new EditorBooleanOption(99 /* stickyTabStops */, 'stickyTabStops', false, { description: nls.localize('stickyTabStops', \"Emulate selection behaviour of tab characters when using spaces for indentation. Selection will stick to tab stops.\") })),\r\n    codeLens: register(new EditorBooleanOption(11 /* codeLens */, 'codeLens', true, { description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\") })),\r\n    codeLensFontFamily: register(new EditorStringOption(12 /* codeLensFontFamily */, 'codeLensFontFamily', '', { description: nls.localize('codeLensFontFamily', \"Controls the font family for CodeLens.\") })),\r\n    codeLensFontSize: register(new EditorIntOption(13 /* codeLensFontSize */, 'codeLensFontSize', 0, 0, 100, {\r\n        type: 'number',\r\n        default: 0,\r\n        minimum: 0,\r\n        maximum: 100,\r\n        description: nls.localize('codeLensFontSize', \"Controls the font size in pixels for CodeLens. When set to `0`, the 90% of `#editor.fontSize#` is used.\")\r\n    })),\r\n    colorDecorators: register(new EditorBooleanOption(14 /* colorDecorators */, 'colorDecorators', true, { description: nls.localize('colorDecorators', \"Controls whether the editor should render the inline color decorators and color picker.\") })),\r\n    columnSelection: register(new EditorBooleanOption(15 /* columnSelection */, 'columnSelection', false, { description: nls.localize('columnSelection', \"Enable that the selection with the mouse and keys is doing column selection.\") })),\r\n    comments: register(new EditorComments()),\r\n    contextmenu: register(new EditorBooleanOption(17 /* contextmenu */, 'contextmenu', true)),\r\n    copyWithSyntaxHighlighting: register(new EditorBooleanOption(18 /* copyWithSyntaxHighlighting */, 'copyWithSyntaxHighlighting', true, { description: nls.localize('copyWithSyntaxHighlighting', \"Controls whether syntax highlighting should be copied into the clipboard.\") })),\r\n    cursorBlinking: register(new EditorEnumOption(19 /* cursorBlinking */, 'cursorBlinking', 1 /* Blink */, 'blink', ['blink', 'smooth', 'phase', 'expand', 'solid'], _cursorBlinkingStyleFromString, { description: nls.localize('cursorBlinking', \"Control the cursor animation style.\") })),\r\n    cursorSmoothCaretAnimation: register(new EditorBooleanOption(20 /* cursorSmoothCaretAnimation */, 'cursorSmoothCaretAnimation', false, { description: nls.localize('cursorSmoothCaretAnimation', \"Controls whether the smooth caret animation should be enabled.\") })),\r\n    cursorStyle: register(new EditorEnumOption(21 /* cursorStyle */, 'cursorStyle', TextEditorCursorStyle.Line, 'line', ['line', 'block', 'underline', 'line-thin', 'block-outline', 'underline-thin'], _cursorStyleFromString, { description: nls.localize('cursorStyle', \"Controls the cursor style.\") })),\r\n    cursorSurroundingLines: register(new EditorIntOption(22 /* cursorSurroundingLines */, 'cursorSurroundingLines', 0, 0, 1073741824 /* MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('cursorSurroundingLines', \"Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.\") })),\r\n    cursorSurroundingLinesStyle: register(new EditorStringEnumOption(23 /* cursorSurroundingLinesStyle */, 'cursorSurroundingLinesStyle', 'default', ['default', 'all'], {\r\n        enumDescriptions: [\r\n            nls.localize('cursorSurroundingLinesStyle.default', \"`cursorSurroundingLines` is enforced only when triggered via the keyboard or API.\"),\r\n            nls.localize('cursorSurroundingLinesStyle.all', \"`cursorSurroundingLines` is enforced always.\")\r\n        ],\r\n        description: nls.localize('cursorSurroundingLinesStyle', \"Controls when `cursorSurroundingLines` should be enforced.\")\r\n    })),\r\n    cursorWidth: register(new EditorIntOption(24 /* cursorWidth */, 'cursorWidth', 0, 0, 1073741824 /* MAX_SAFE_SMALL_INTEGER */, { markdownDescription: nls.localize('cursorWidth', \"Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.\") })),\r\n    disableLayerHinting: register(new EditorBooleanOption(25 /* disableLayerHinting */, 'disableLayerHinting', false)),\r\n    disableMonospaceOptimizations: register(new EditorBooleanOption(26 /* disableMonospaceOptimizations */, 'disableMonospaceOptimizations', false)),\r\n    dragAndDrop: register(new EditorBooleanOption(27 /* dragAndDrop */, 'dragAndDrop', true, { description: nls.localize('dragAndDrop', \"Controls whether the editor should allow moving selections via drag and drop.\") })),\r\n    emptySelectionClipboard: register(new EditorEmptySelectionClipboard()),\r\n    extraEditorClassName: register(new EditorStringOption(29 /* extraEditorClassName */, 'extraEditorClassName', '')),\r\n    fastScrollSensitivity: register(new EditorFloatOption(30 /* fastScrollSensitivity */, 'fastScrollSensitivity', 5, x => (x <= 0 ? 5 : x), { markdownDescription: nls.localize('fastScrollSensitivity', \"Scrolling speed multiplier when pressing `Alt`.\") })),\r\n    find: register(new EditorFind()),\r\n    fixedOverflowWidgets: register(new EditorBooleanOption(32 /* fixedOverflowWidgets */, 'fixedOverflowWidgets', false)),\r\n    folding: register(new EditorBooleanOption(33 /* folding */, 'folding', true, { description: nls.localize('folding', \"Controls whether the editor has code folding enabled.\") })),\r\n    foldingStrategy: register(new EditorStringEnumOption(34 /* foldingStrategy */, 'foldingStrategy', 'auto', ['auto', 'indentation'], {\r\n        enumDescriptions: [\r\n            nls.localize('foldingStrategy.auto', \"Use a language-specific folding strategy if available, else the indentation-based one.\"),\r\n            nls.localize('foldingStrategy.indentation', \"Use the indentation-based folding strategy.\"),\r\n        ],\r\n        description: nls.localize('foldingStrategy', \"Controls the strategy for computing folding ranges.\")\r\n    })),\r\n    foldingHighlight: register(new EditorBooleanOption(35 /* foldingHighlight */, 'foldingHighlight', true, { description: nls.localize('foldingHighlight', \"Controls whether the editor should highlight folded ranges.\") })),\r\n    unfoldOnClickAfterEndOfLine: register(new EditorBooleanOption(36 /* unfoldOnClickAfterEndOfLine */, 'unfoldOnClickAfterEndOfLine', false, { description: nls.localize('unfoldOnClickAfterEndOfLine', \"Controls whether clicking on the empty content after a folded line will unfold the line.\") })),\r\n    fontFamily: register(new EditorStringOption(37 /* fontFamily */, 'fontFamily', EDITOR_FONT_DEFAULTS.fontFamily, { description: nls.localize('fontFamily', \"Controls the font family.\") })),\r\n    fontInfo: register(new EditorFontInfo()),\r\n    fontLigatures2: register(new EditorFontLigatures()),\r\n    fontSize: register(new EditorFontSize()),\r\n    fontWeight: register(new EditorFontWeight()),\r\n    formatOnPaste: register(new EditorBooleanOption(42 /* formatOnPaste */, 'formatOnPaste', false, { description: nls.localize('formatOnPaste', \"Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.\") })),\r\n    formatOnType: register(new EditorBooleanOption(43 /* formatOnType */, 'formatOnType', false, { description: nls.localize('formatOnType', \"Controls whether the editor should automatically format the line after typing.\") })),\r\n    glyphMargin: register(new EditorBooleanOption(44 /* glyphMargin */, 'glyphMargin', true, { description: nls.localize('glyphMargin', \"Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.\") })),\r\n    gotoLocation: register(new EditorGoToLocation()),\r\n    hideCursorInOverviewRuler: register(new EditorBooleanOption(46 /* hideCursorInOverviewRuler */, 'hideCursorInOverviewRuler', false, { description: nls.localize('hideCursorInOverviewRuler', \"Controls whether the cursor should be hidden in the overview ruler.\") })),\r\n    highlightActiveIndentGuide: register(new EditorBooleanOption(47 /* highlightActiveIndentGuide */, 'highlightActiveIndentGuide', true, { description: nls.localize('highlightActiveIndentGuide', \"Controls whether the editor should highlight the active indent guide.\") })),\r\n    hover: register(new EditorHover()),\r\n    inDiffEditor: register(new EditorBooleanOption(49 /* inDiffEditor */, 'inDiffEditor', false)),\r\n    letterSpacing: register(new EditorFloatOption(50 /* letterSpacing */, 'letterSpacing', EDITOR_FONT_DEFAULTS.letterSpacing, x => EditorFloatOption.clamp(x, -5, 20), { description: nls.localize('letterSpacing', \"Controls the letter spacing in pixels.\") })),\r\n    lightbulb: register(new EditorLightbulb()),\r\n    lineDecorationsWidth: register(new SimpleEditorOption(52 /* lineDecorationsWidth */, 'lineDecorationsWidth', 10)),\r\n    lineHeight: register(new EditorLineHeight()),\r\n    lineNumbers: register(new EditorRenderLineNumbersOption()),\r\n    lineNumbersMinChars: register(new EditorIntOption(55 /* lineNumbersMinChars */, 'lineNumbersMinChars', 5, 1, 300)),\r\n    linkedEditing: register(new EditorBooleanOption(56 /* linkedEditing */, 'linkedEditing', false, { description: nls.localize('linkedEditing', \"Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.\") })),\r\n    links: register(new EditorBooleanOption(57 /* links */, 'links', true, { description: nls.localize('links', \"Controls whether the editor should detect links and make them clickable.\") })),\r\n    matchBrackets: register(new EditorStringEnumOption(58 /* matchBrackets */, 'matchBrackets', 'always', ['always', 'near', 'never'], { description: nls.localize('matchBrackets', \"Highlight matching brackets.\") })),\r\n    minimap: register(new EditorMinimap()),\r\n    mouseStyle: register(new EditorStringEnumOption(60 /* mouseStyle */, 'mouseStyle', 'text', ['text', 'default', 'copy'])),\r\n    mouseWheelScrollSensitivity: register(new EditorFloatOption(61 /* mouseWheelScrollSensitivity */, 'mouseWheelScrollSensitivity', 1, x => (x === 0 ? 1 : x), { markdownDescription: nls.localize('mouseWheelScrollSensitivity', \"A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\") })),\r\n    mouseWheelZoom: register(new EditorBooleanOption(62 /* mouseWheelZoom */, 'mouseWheelZoom', false, { markdownDescription: nls.localize('mouseWheelZoom', \"Zoom the font of the editor when using mouse wheel and holding `Ctrl`.\") })),\r\n    multiCursorMergeOverlapping: register(new EditorBooleanOption(63 /* multiCursorMergeOverlapping */, 'multiCursorMergeOverlapping', true, { description: nls.localize('multiCursorMergeOverlapping', \"Merge multiple cursors when they are overlapping.\") })),\r\n    multiCursorModifier: register(new EditorEnumOption(64 /* multiCursorModifier */, 'multiCursorModifier', 'altKey', 'alt', ['ctrlCmd', 'alt'], _multiCursorModifierFromString, {\r\n        markdownEnumDescriptions: [\r\n            nls.localize('multiCursorModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"),\r\n            nls.localize('multiCursorModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")\r\n        ],\r\n        markdownDescription: nls.localize({\r\n            key: 'multiCursorModifier',\r\n            comment: [\r\n                '- `ctrlCmd` refers to a value the setting can take and should not be localized.',\r\n                '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.'\r\n            ]\r\n        }, \"The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).\")\r\n    })),\r\n    multiCursorPaste: register(new EditorStringEnumOption(65 /* multiCursorPaste */, 'multiCursorPaste', 'spread', ['spread', 'full'], {\r\n        markdownEnumDescriptions: [\r\n            nls.localize('multiCursorPaste.spread', \"Each cursor pastes a single line of the text.\"),\r\n            nls.localize('multiCursorPaste.full', \"Each cursor pastes the full text.\")\r\n        ],\r\n        markdownDescription: nls.localize('multiCursorPaste', \"Controls pasting when the line count of the pasted text matches the cursor count.\")\r\n    })),\r\n    occurrencesHighlight: register(new EditorBooleanOption(66 /* occurrencesHighlight */, 'occurrencesHighlight', true, { description: nls.localize('occurrencesHighlight', \"Controls whether the editor should highlight semantic symbol occurrences.\") })),\r\n    overviewRulerBorder: register(new EditorBooleanOption(67 /* overviewRulerBorder */, 'overviewRulerBorder', true, { description: nls.localize('overviewRulerBorder', \"Controls whether a border should be drawn around the overview ruler.\") })),\r\n    overviewRulerLanes: register(new EditorIntOption(68 /* overviewRulerLanes */, 'overviewRulerLanes', 3, 0, 3)),\r\n    padding: register(new EditorPadding()),\r\n    parameterHints: register(new EditorParameterHints()),\r\n    peekWidgetDefaultFocus: register(new EditorStringEnumOption(71 /* peekWidgetDefaultFocus */, 'peekWidgetDefaultFocus', 'tree', ['tree', 'editor'], {\r\n        enumDescriptions: [\r\n            nls.localize('peekWidgetDefaultFocus.tree', \"Focus the tree when opening peek\"),\r\n            nls.localize('peekWidgetDefaultFocus.editor', \"Focus the editor when opening peek\")\r\n        ],\r\n        description: nls.localize('peekWidgetDefaultFocus', \"Controls whether to focus the inline editor or the tree in the peek widget.\")\r\n    })),\r\n    definitionLinkOpensInPeek: register(new EditorBooleanOption(72 /* definitionLinkOpensInPeek */, 'definitionLinkOpensInPeek', false, { description: nls.localize('definitionLinkOpensInPeek', \"Controls whether the Go to Definition mouse gesture always opens the peek widget.\") })),\r\n    quickSuggestions: register(new EditorQuickSuggestions()),\r\n    quickSuggestionsDelay: register(new EditorIntOption(74 /* quickSuggestionsDelay */, 'quickSuggestionsDelay', 10, 0, 1073741824 /* MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('quickSuggestionsDelay', \"Controls the delay in milliseconds after which quick suggestions will show up.\") })),\r\n    readOnly: register(new EditorBooleanOption(75 /* readOnly */, 'readOnly', false)),\r\n    renameOnType: register(new EditorBooleanOption(76 /* renameOnType */, 'renameOnType', false, { description: nls.localize('renameOnType', \"Controls whether the editor auto renames on type.\"), markdownDeprecationMessage: nls.localize('renameOnTypeDeprecate', \"Deprecated, use `editor.linkedEditing` instead.\") })),\r\n    renderControlCharacters: register(new EditorBooleanOption(77 /* renderControlCharacters */, 'renderControlCharacters', false, { description: nls.localize('renderControlCharacters', \"Controls whether the editor should render control characters.\") })),\r\n    renderIndentGuides: register(new EditorBooleanOption(78 /* renderIndentGuides */, 'renderIndentGuides', true, { description: nls.localize('renderIndentGuides', \"Controls whether the editor should render indent guides.\") })),\r\n    renderFinalNewline: register(new EditorBooleanOption(79 /* renderFinalNewline */, 'renderFinalNewline', true, { description: nls.localize('renderFinalNewline', \"Render last line number when the file ends with a newline.\") })),\r\n    renderLineHighlight: register(new EditorStringEnumOption(80 /* renderLineHighlight */, 'renderLineHighlight', 'line', ['none', 'gutter', 'line', 'all'], {\r\n        enumDescriptions: [\r\n            '',\r\n            '',\r\n            '',\r\n            nls.localize('renderLineHighlight.all', \"Highlights both the gutter and the current line.\"),\r\n        ],\r\n        description: nls.localize('renderLineHighlight', \"Controls how the editor should render the current line highlight.\")\r\n    })),\r\n    renderLineHighlightOnlyWhenFocus: register(new EditorBooleanOption(81 /* renderLineHighlightOnlyWhenFocus */, 'renderLineHighlightOnlyWhenFocus', false, { description: nls.localize('renderLineHighlightOnlyWhenFocus', \"Controls if the editor should render the current line highlight only when the editor is focused\") })),\r\n    renderValidationDecorations: register(new EditorStringEnumOption(82 /* renderValidationDecorations */, 'renderValidationDecorations', 'editable', ['editable', 'on', 'off'])),\r\n    renderWhitespace: register(new EditorStringEnumOption(83 /* renderWhitespace */, 'renderWhitespace', 'selection', ['none', 'boundary', 'selection', 'trailing', 'all'], {\r\n        enumDescriptions: [\r\n            '',\r\n            nls.localize('renderWhitespace.boundary', \"Render whitespace characters except for single spaces between words.\"),\r\n            nls.localize('renderWhitespace.selection', \"Render whitespace characters only on selected text.\"),\r\n            nls.localize('renderWhitespace.trailing', \"Render only trailing whitespace characters\"),\r\n            ''\r\n        ],\r\n        description: nls.localize('renderWhitespace', \"Controls how the editor should render whitespace characters.\")\r\n    })),\r\n    revealHorizontalRightPadding: register(new EditorIntOption(84 /* revealHorizontalRightPadding */, 'revealHorizontalRightPadding', 30, 0, 1000)),\r\n    roundedSelection: register(new EditorBooleanOption(85 /* roundedSelection */, 'roundedSelection', true, { description: nls.localize('roundedSelection', \"Controls whether selections should have rounded corners.\") })),\r\n    rulers: register(new EditorRulers()),\r\n    scrollbar: register(new EditorScrollbar()),\r\n    scrollBeyondLastColumn: register(new EditorIntOption(88 /* scrollBeyondLastColumn */, 'scrollBeyondLastColumn', 5, 0, 1073741824 /* MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('scrollBeyondLastColumn', \"Controls the number of extra characters beyond which the editor will scroll horizontally.\") })),\r\n    scrollBeyondLastLine: register(new EditorBooleanOption(89 /* scrollBeyondLastLine */, 'scrollBeyondLastLine', true, { description: nls.localize('scrollBeyondLastLine', \"Controls whether the editor will scroll beyond the last line.\") })),\r\n    scrollPredominantAxis: register(new EditorBooleanOption(90 /* scrollPredominantAxis */, 'scrollPredominantAxis', true, { description: nls.localize('scrollPredominantAxis', \"Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.\") })),\r\n    selectionClipboard: register(new EditorBooleanOption(91 /* selectionClipboard */, 'selectionClipboard', true, {\r\n        description: nls.localize('selectionClipboard', \"Controls whether the Linux primary clipboard should be supported.\"),\r\n        included: platform.isLinux\r\n    })),\r\n    selectionHighlight: register(new EditorBooleanOption(92 /* selectionHighlight */, 'selectionHighlight', true, { description: nls.localize('selectionHighlight', \"Controls whether the editor should highlight matches similar to the selection.\") })),\r\n    selectOnLineNumbers: register(new EditorBooleanOption(93 /* selectOnLineNumbers */, 'selectOnLineNumbers', true)),\r\n    showFoldingControls: register(new EditorStringEnumOption(94 /* showFoldingControls */, 'showFoldingControls', 'mouseover', ['always', 'mouseover'], {\r\n        enumDescriptions: [\r\n            nls.localize('showFoldingControls.always', \"Always show the folding controls.\"),\r\n            nls.localize('showFoldingControls.mouseover', \"Only show the folding controls when the mouse is over the gutter.\"),\r\n        ],\r\n        description: nls.localize('showFoldingControls', \"Controls when the folding controls on the gutter are shown.\")\r\n    })),\r\n    showUnused: register(new EditorBooleanOption(95 /* showUnused */, 'showUnused', true, { description: nls.localize('showUnused', \"Controls fading out of unused code.\") })),\r\n    showDeprecated: register(new EditorBooleanOption(119 /* showDeprecated */, 'showDeprecated', true, { description: nls.localize('showDeprecated', \"Controls strikethrough deprecated variables.\") })),\r\n    inlineHints: register(new EditorInlineHints()),\r\n    snippetSuggestions: register(new EditorStringEnumOption(96 /* snippetSuggestions */, 'snippetSuggestions', 'inline', ['top', 'bottom', 'inline', 'none'], {\r\n        enumDescriptions: [\r\n            nls.localize('snippetSuggestions.top', \"Show snippet suggestions on top of other suggestions.\"),\r\n            nls.localize('snippetSuggestions.bottom', \"Show snippet suggestions below other suggestions.\"),\r\n            nls.localize('snippetSuggestions.inline', \"Show snippets suggestions with other suggestions.\"),\r\n            nls.localize('snippetSuggestions.none', \"Do not show snippet suggestions.\"),\r\n        ],\r\n        description: nls.localize('snippetSuggestions', \"Controls whether snippets are shown with other suggestions and how they are sorted.\")\r\n    })),\r\n    smartSelect: register(new SmartSelect()),\r\n    smoothScrolling: register(new EditorBooleanOption(98 /* smoothScrolling */, 'smoothScrolling', false, { description: nls.localize('smoothScrolling', \"Controls whether the editor will scroll using an animation.\") })),\r\n    stopRenderingLineAfter: register(new EditorIntOption(100 /* stopRenderingLineAfter */, 'stopRenderingLineAfter', 10000, -1, 1073741824 /* MAX_SAFE_SMALL_INTEGER */)),\r\n    suggest: register(new EditorSuggest()),\r\n    suggestFontSize: register(new EditorIntOption(102 /* suggestFontSize */, 'suggestFontSize', 0, 0, 1000, { markdownDescription: nls.localize('suggestFontSize', \"Font size for the suggest widget. When set to `0`, the value of `#editor.fontSize#` is used.\") })),\r\n    suggestLineHeight: register(new EditorIntOption(103 /* suggestLineHeight */, 'suggestLineHeight', 0, 0, 1000, { markdownDescription: nls.localize('suggestLineHeight', \"Line height for the suggest widget. When set to `0`, the value of `#editor.lineHeight#` is used. The minimum value is 8.\") })),\r\n    suggestOnTriggerCharacters: register(new EditorBooleanOption(104 /* suggestOnTriggerCharacters */, 'suggestOnTriggerCharacters', true, { description: nls.localize('suggestOnTriggerCharacters', \"Controls whether suggestions should automatically show up when typing trigger characters.\") })),\r\n    suggestSelection: register(new EditorStringEnumOption(105 /* suggestSelection */, 'suggestSelection', 'recentlyUsed', ['first', 'recentlyUsed', 'recentlyUsedByPrefix'], {\r\n        markdownEnumDescriptions: [\r\n            nls.localize('suggestSelection.first', \"Always select the first suggestion.\"),\r\n            nls.localize('suggestSelection.recentlyUsed', \"Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.\"),\r\n            nls.localize('suggestSelection.recentlyUsedByPrefix', \"Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.\"),\r\n        ],\r\n        description: nls.localize('suggestSelection', \"Controls how suggestions are pre-selected when showing the suggest list.\")\r\n    })),\r\n    tabCompletion: register(new EditorStringEnumOption(106 /* tabCompletion */, 'tabCompletion', 'off', ['on', 'off', 'onlySnippets'], {\r\n        enumDescriptions: [\r\n            nls.localize('tabCompletion.on', \"Tab complete will insert the best matching suggestion when pressing tab.\"),\r\n            nls.localize('tabCompletion.off', \"Disable tab completions.\"),\r\n            nls.localize('tabCompletion.onlySnippets', \"Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.\"),\r\n        ],\r\n        description: nls.localize('tabCompletion', \"Enables tab completions.\")\r\n    })),\r\n    tabIndex: register(new EditorIntOption(107 /* tabIndex */, 'tabIndex', 0, -1, 1073741824 /* MAX_SAFE_SMALL_INTEGER */)),\r\n    unusualLineTerminators: register(new EditorStringEnumOption(108 /* unusualLineTerminators */, 'unusualLineTerminators', 'prompt', ['auto', 'off', 'prompt'], {\r\n        enumDescriptions: [\r\n            nls.localize('unusualLineTerminators.auto', \"Unusual line terminators are automatically removed.\"),\r\n            nls.localize('unusualLineTerminators.off', \"Unusual line terminators are ignored.\"),\r\n            nls.localize('unusualLineTerminators.prompt', \"Unusual line terminators prompt to be removed.\"),\r\n        ],\r\n        description: nls.localize('unusualLineTerminators', \"Remove unusual line terminators that might cause problems.\")\r\n    })),\r\n    useTabStops: register(new EditorBooleanOption(109 /* useTabStops */, 'useTabStops', true, { description: nls.localize('useTabStops', \"Inserting and deleting whitespace follows tab stops.\") })),\r\n    wordSeparators: register(new EditorStringOption(110 /* wordSeparators */, 'wordSeparators', USUAL_WORD_SEPARATORS, { description: nls.localize('wordSeparators', \"Characters that will be used as word separators when doing word related navigations or operations.\") })),\r\n    wordWrap: register(new EditorStringEnumOption(111 /* wordWrap */, 'wordWrap', 'off', ['off', 'on', 'wordWrapColumn', 'bounded'], {\r\n        markdownEnumDescriptions: [\r\n            nls.localize('wordWrap.off', \"Lines will never wrap.\"),\r\n            nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"),\r\n            nls.localize({\r\n                key: 'wordWrap.wordWrapColumn',\r\n                comment: [\r\n                    '- `editor.wordWrapColumn` refers to a different setting and should not be localized.'\r\n                ]\r\n            }, \"Lines will wrap at `#editor.wordWrapColumn#`.\"),\r\n            nls.localize({\r\n                key: 'wordWrap.bounded',\r\n                comment: [\r\n                    '- viewport means the edge of the visible window size.',\r\n                    '- `editor.wordWrapColumn` refers to a different setting and should not be localized.'\r\n                ]\r\n            }, \"Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`.\"),\r\n        ],\r\n        description: nls.localize({\r\n            key: 'wordWrap',\r\n            comment: [\r\n                '- \\'off\\', \\'on\\', \\'wordWrapColumn\\' and \\'bounded\\' refer to values the setting can take and should not be localized.',\r\n                '- `editor.wordWrapColumn` refers to a different setting and should not be localized.'\r\n            ]\r\n        }, \"Controls how lines should wrap.\")\r\n    })),\r\n    wordWrapBreakAfterCharacters: register(new EditorStringOption(112 /* wordWrapBreakAfterCharacters */, 'wordWrapBreakAfterCharacters', ' \\t})]?|/&.,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣')),\r\n    wordWrapBreakBeforeCharacters: register(new EditorStringOption(113 /* wordWrapBreakBeforeCharacters */, 'wordWrapBreakBeforeCharacters', '([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋')),\r\n    wordWrapColumn: register(new EditorIntOption(114 /* wordWrapColumn */, 'wordWrapColumn', 80, 1, 1073741824 /* MAX_SAFE_SMALL_INTEGER */, {\r\n        markdownDescription: nls.localize({\r\n            key: 'wordWrapColumn',\r\n            comment: [\r\n                '- `editor.wordWrap` refers to a different setting and should not be localized.',\r\n                '- \\'wordWrapColumn\\' and \\'bounded\\' refer to values the different setting can take and should not be localized.'\r\n            ]\r\n        }, \"Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.\")\r\n    })),\r\n    wordWrapOverride1: register(new EditorStringEnumOption(115 /* wordWrapOverride1 */, 'wordWrapOverride1', 'inherit', ['off', 'on', 'inherit'])),\r\n    wordWrapOverride2: register(new EditorStringEnumOption(116 /* wordWrapOverride2 */, 'wordWrapOverride2', 'inherit', ['off', 'on', 'inherit'])),\r\n    wrappingIndent: register(new EditorEnumOption(117 /* wrappingIndent */, 'wrappingIndent', 1 /* Same */, 'same', ['none', 'same', 'indent', 'deepIndent'], _wrappingIndentFromString, {\r\n        enumDescriptions: [\r\n            nls.localize('wrappingIndent.none', \"No indentation. Wrapped lines begin at column 1.\"),\r\n            nls.localize('wrappingIndent.same', \"Wrapped lines get the same indentation as the parent.\"),\r\n            nls.localize('wrappingIndent.indent', \"Wrapped lines get +1 indentation toward the parent.\"),\r\n            nls.localize('wrappingIndent.deepIndent', \"Wrapped lines get +2 indentation toward the parent.\"),\r\n        ],\r\n        description: nls.localize('wrappingIndent', \"Controls the indentation of wrapped lines.\"),\r\n    })),\r\n    wrappingStrategy: register(new EditorStringEnumOption(118 /* wrappingStrategy */, 'wrappingStrategy', 'simple', ['simple', 'advanced'], {\r\n        enumDescriptions: [\r\n            nls.localize('wrappingStrategy.simple', \"Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.\"),\r\n            nls.localize('wrappingStrategy.advanced', \"Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.\")\r\n        ],\r\n        description: nls.localize('wrappingStrategy', \"Controls the algorithm that computes wrapping points.\")\r\n    })),\r\n    // Leave these at the end (because they have dependencies!)\r\n    editorClassName: register(new EditorClassName()),\r\n    pixelRatio: register(new EditorPixelRatio()),\r\n    tabFocusMode: register(new EditorTabFocusMode()),\r\n    layoutInfo: register(new EditorLayoutInfoComputer()),\r\n    wrappingInfo: register(new EditorWrappingInfoComputer())\r\n};\r\n"]},"metadata":{},"sourceType":"module"}