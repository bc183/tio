{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../controller/coreCommands.js';\nimport { Position } from '../../common/core/position.js';\nimport * as platform from '../../../base/common/platform.js';\nexport var ViewController = /*#__PURE__*/function () {\n  function ViewController(configuration, viewModel, userInputEvents, commandDelegate) {\n    _classCallCheck(this, ViewController);\n\n    this.configuration = configuration;\n    this.viewModel = viewModel;\n    this.userInputEvents = userInputEvents;\n    this.commandDelegate = commandDelegate;\n  }\n\n  _createClass(ViewController, [{\n    key: \"paste\",\n    value: function paste(text, pasteOnNewLine, multicursorText, mode) {\n      this.commandDelegate.paste(text, pasteOnNewLine, multicursorText, mode);\n    }\n  }, {\n    key: \"type\",\n    value: function type(text) {\n      this.commandDelegate.type(text);\n    }\n  }, {\n    key: \"replacePreviousChar\",\n    value: function replacePreviousChar(text, replaceCharCnt) {\n      this.commandDelegate.replacePreviousChar(text, replaceCharCnt);\n    }\n  }, {\n    key: \"compositionStart\",\n    value: function compositionStart() {\n      this.commandDelegate.startComposition();\n    }\n  }, {\n    key: \"compositionEnd\",\n    value: function compositionEnd() {\n      this.commandDelegate.endComposition();\n    }\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      this.commandDelegate.cut();\n    }\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(modelSelection) {\n      CoreNavigationCommands.SetSelection.runCoreEditorCommand(this.viewModel, {\n        source: 'keyboard',\n        selection: modelSelection\n      });\n    }\n  }, {\n    key: \"_validateViewColumn\",\n    value: function _validateViewColumn(viewPosition) {\n      var minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n\n      if (viewPosition.column < minColumn) {\n        return new Position(viewPosition.lineNumber, minColumn);\n      }\n\n      return viewPosition;\n    }\n  }, {\n    key: \"_hasMulticursorModifier\",\n    value: function _hasMulticursorModifier(data) {\n      switch (this.configuration.options.get(64\n      /* multiCursorModifier */\n      )) {\n        case 'altKey':\n          return data.altKey;\n\n        case 'ctrlKey':\n          return data.ctrlKey;\n\n        case 'metaKey':\n          return data.metaKey;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"_hasNonMulticursorModifier\",\n    value: function _hasNonMulticursorModifier(data) {\n      switch (this.configuration.options.get(64\n      /* multiCursorModifier */\n      )) {\n        case 'altKey':\n          return data.ctrlKey || data.metaKey;\n\n        case 'ctrlKey':\n          return data.altKey || data.metaKey;\n\n        case 'metaKey':\n          return data.ctrlKey || data.altKey;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"dispatchMouse\",\n    value: function dispatchMouse(data) {\n      var options = this.configuration.options;\n      var selectionClipboardIsOn = platform.isLinux && options.get(91\n      /* selectionClipboard */\n      );\n      var columnSelection = options.get(15\n      /* columnSelection */\n      );\n\n      if (data.middleButton && !selectionClipboardIsOn) {\n        this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\n      } else if (data.startedOnLineNumbers) {\n        // If the dragging started on the gutter, then have operations work on the entire line\n        if (this._hasMulticursorModifier(data)) {\n          if (data.inSelectionMode) {\n            this._lastCursorLineSelect(data.position);\n          } else {\n            this._createCursor(data.position, true);\n          }\n        } else {\n          if (data.inSelectionMode) {\n            this._lineSelectDrag(data.position);\n          } else {\n            this._lineSelect(data.position);\n          }\n        }\n      } else if (data.mouseDownCount >= 4) {\n        this._selectAll();\n      } else if (data.mouseDownCount === 3) {\n        if (this._hasMulticursorModifier(data)) {\n          if (data.inSelectionMode) {\n            this._lastCursorLineSelectDrag(data.position);\n          } else {\n            this._lastCursorLineSelect(data.position);\n          }\n        } else {\n          if (data.inSelectionMode) {\n            this._lineSelectDrag(data.position);\n          } else {\n            this._lineSelect(data.position);\n          }\n        }\n      } else if (data.mouseDownCount === 2) {\n        if (this._hasMulticursorModifier(data)) {\n          this._lastCursorWordSelect(data.position);\n        } else {\n          if (data.inSelectionMode) {\n            this._wordSelectDrag(data.position);\n          } else {\n            this._wordSelect(data.position);\n          }\n        }\n      } else {\n        if (this._hasMulticursorModifier(data)) {\n          if (!this._hasNonMulticursorModifier(data)) {\n            if (data.shiftKey) {\n              this._columnSelect(data.position, data.mouseColumn, true);\n            } else {\n              // Do multi-cursor operations only when purely alt is pressed\n              if (data.inSelectionMode) {\n                this._lastCursorMoveToSelect(data.position);\n              } else {\n                this._createCursor(data.position, false);\n              }\n            }\n          }\n        } else {\n          if (data.inSelectionMode) {\n            if (data.altKey) {\n              this._columnSelect(data.position, data.mouseColumn, true);\n            } else {\n              if (columnSelection) {\n                this._columnSelect(data.position, data.mouseColumn, true);\n              } else {\n                this._moveToSelect(data.position);\n              }\n            }\n          } else {\n            this.moveTo(data.position);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_usualArgs\",\n    value: function _usualArgs(viewPosition) {\n      viewPosition = this._validateViewColumn(viewPosition);\n      return {\n        source: 'mouse',\n        position: this._convertViewToModelPosition(viewPosition),\n        viewPosition: viewPosition\n      };\n    }\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(viewPosition) {\n      CoreNavigationCommands.MoveTo.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n  }, {\n    key: \"_moveToSelect\",\n    value: function _moveToSelect(viewPosition) {\n      CoreNavigationCommands.MoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n  }, {\n    key: \"_columnSelect\",\n    value: function _columnSelect(viewPosition, mouseColumn, doColumnSelect) {\n      viewPosition = this._validateViewColumn(viewPosition);\n      CoreNavigationCommands.ColumnSelect.runCoreEditorCommand(this.viewModel, {\n        source: 'mouse',\n        position: this._convertViewToModelPosition(viewPosition),\n        viewPosition: viewPosition,\n        mouseColumn: mouseColumn,\n        doColumnSelect: doColumnSelect\n      });\n    }\n  }, {\n    key: \"_createCursor\",\n    value: function _createCursor(viewPosition, wholeLine) {\n      viewPosition = this._validateViewColumn(viewPosition);\n      CoreNavigationCommands.CreateCursor.runCoreEditorCommand(this.viewModel, {\n        source: 'mouse',\n        position: this._convertViewToModelPosition(viewPosition),\n        viewPosition: viewPosition,\n        wholeLine: wholeLine\n      });\n    }\n  }, {\n    key: \"_lastCursorMoveToSelect\",\n    value: function _lastCursorMoveToSelect(viewPosition) {\n      CoreNavigationCommands.LastCursorMoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n  }, {\n    key: \"_wordSelect\",\n    value: function _wordSelect(viewPosition) {\n      CoreNavigationCommands.WordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n  }, {\n    key: \"_wordSelectDrag\",\n    value: function _wordSelectDrag(viewPosition) {\n      CoreNavigationCommands.WordSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n  }, {\n    key: \"_lastCursorWordSelect\",\n    value: function _lastCursorWordSelect(viewPosition) {\n      CoreNavigationCommands.LastCursorWordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n  }, {\n    key: \"_lineSelect\",\n    value: function _lineSelect(viewPosition) {\n      CoreNavigationCommands.LineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n  }, {\n    key: \"_lineSelectDrag\",\n    value: function _lineSelectDrag(viewPosition) {\n      CoreNavigationCommands.LineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n  }, {\n    key: \"_lastCursorLineSelect\",\n    value: function _lastCursorLineSelect(viewPosition) {\n      CoreNavigationCommands.LastCursorLineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n  }, {\n    key: \"_lastCursorLineSelectDrag\",\n    value: function _lastCursorLineSelectDrag(viewPosition) {\n      CoreNavigationCommands.LastCursorLineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n  }, {\n    key: \"_selectAll\",\n    value: function _selectAll() {\n      CoreNavigationCommands.SelectAll.runCoreEditorCommand(this.viewModel, {\n        source: 'mouse'\n      });\n    } // ----------------------\n\n  }, {\n    key: \"_convertViewToModelPosition\",\n    value: function _convertViewToModelPosition(viewPosition) {\n      return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n    }\n  }, {\n    key: \"emitKeyDown\",\n    value: function emitKeyDown(e) {\n      this.userInputEvents.emitKeyDown(e);\n    }\n  }, {\n    key: \"emitKeyUp\",\n    value: function emitKeyUp(e) {\n      this.userInputEvents.emitKeyUp(e);\n    }\n  }, {\n    key: \"emitContextMenu\",\n    value: function emitContextMenu(e) {\n      this.userInputEvents.emitContextMenu(e);\n    }\n  }, {\n    key: \"emitMouseMove\",\n    value: function emitMouseMove(e) {\n      this.userInputEvents.emitMouseMove(e);\n    }\n  }, {\n    key: \"emitMouseLeave\",\n    value: function emitMouseLeave(e) {\n      this.userInputEvents.emitMouseLeave(e);\n    }\n  }, {\n    key: \"emitMouseUp\",\n    value: function emitMouseUp(e) {\n      this.userInputEvents.emitMouseUp(e);\n    }\n  }, {\n    key: \"emitMouseDown\",\n    value: function emitMouseDown(e) {\n      this.userInputEvents.emitMouseDown(e);\n    }\n  }, {\n    key: \"emitMouseDrag\",\n    value: function emitMouseDrag(e) {\n      this.userInputEvents.emitMouseDrag(e);\n    }\n  }, {\n    key: \"emitMouseDrop\",\n    value: function emitMouseDrop(e) {\n      this.userInputEvents.emitMouseDrop(e);\n    }\n  }, {\n    key: \"emitMouseDropCanceled\",\n    value: function emitMouseDropCanceled() {\n      this.userInputEvents.emitMouseDropCanceled();\n    }\n  }, {\n    key: \"emitMouseWheel\",\n    value: function emitMouseWheel(e) {\n      this.userInputEvents.emitMouseWheel(e);\n    }\n  }]);\n\n  return ViewController;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/view/viewController.js"],"names":["CoreNavigationCommands","Position","platform","ViewController","configuration","viewModel","userInputEvents","commandDelegate","text","pasteOnNewLine","multicursorText","mode","paste","type","replaceCharCnt","replacePreviousChar","startComposition","endComposition","cut","modelSelection","SetSelection","runCoreEditorCommand","source","selection","viewPosition","minColumn","getLineMinColumn","lineNumber","column","data","options","get","altKey","ctrlKey","metaKey","selectionClipboardIsOn","isLinux","columnSelection","middleButton","_columnSelect","position","mouseColumn","inSelectionMode","startedOnLineNumbers","_hasMulticursorModifier","_lastCursorLineSelect","_createCursor","_lineSelectDrag","_lineSelect","mouseDownCount","_selectAll","_lastCursorLineSelectDrag","_lastCursorWordSelect","_wordSelectDrag","_wordSelect","_hasNonMulticursorModifier","shiftKey","_lastCursorMoveToSelect","_moveToSelect","moveTo","_validateViewColumn","_convertViewToModelPosition","MoveTo","_usualArgs","MoveToSelect","doColumnSelect","ColumnSelect","wholeLine","CreateCursor","LastCursorMoveToSelect","WordSelect","WordSelectDrag","LastCursorWordSelect","LineSelect","LineSelectDrag","LastCursorLineSelect","LastCursorLineSelectDrag","SelectAll","coordinatesConverter","convertViewPositionToModelPosition","e","emitKeyDown","emitKeyUp","emitContextMenu","emitMouseMove","emitMouseLeave","emitMouseUp","emitMouseDown","emitMouseDrag","emitMouseDrop","emitMouseDropCanceled","emitMouseWheel"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CoreNavigationCommands } from '../controller/coreCommands.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nexport class ViewController {\r\n    constructor(configuration, viewModel, userInputEvents, commandDelegate) {\r\n        this.configuration = configuration;\r\n        this.viewModel = viewModel;\r\n        this.userInputEvents = userInputEvents;\r\n        this.commandDelegate = commandDelegate;\r\n    }\r\n    paste(text, pasteOnNewLine, multicursorText, mode) {\r\n        this.commandDelegate.paste(text, pasteOnNewLine, multicursorText, mode);\r\n    }\r\n    type(text) {\r\n        this.commandDelegate.type(text);\r\n    }\r\n    replacePreviousChar(text, replaceCharCnt) {\r\n        this.commandDelegate.replacePreviousChar(text, replaceCharCnt);\r\n    }\r\n    compositionStart() {\r\n        this.commandDelegate.startComposition();\r\n    }\r\n    compositionEnd() {\r\n        this.commandDelegate.endComposition();\r\n    }\r\n    cut() {\r\n        this.commandDelegate.cut();\r\n    }\r\n    setSelection(modelSelection) {\r\n        CoreNavigationCommands.SetSelection.runCoreEditorCommand(this.viewModel, {\r\n            source: 'keyboard',\r\n            selection: modelSelection\r\n        });\r\n    }\r\n    _validateViewColumn(viewPosition) {\r\n        const minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\r\n        if (viewPosition.column < minColumn) {\r\n            return new Position(viewPosition.lineNumber, minColumn);\r\n        }\r\n        return viewPosition;\r\n    }\r\n    _hasMulticursorModifier(data) {\r\n        switch (this.configuration.options.get(64 /* multiCursorModifier */)) {\r\n            case 'altKey':\r\n                return data.altKey;\r\n            case 'ctrlKey':\r\n                return data.ctrlKey;\r\n            case 'metaKey':\r\n                return data.metaKey;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    _hasNonMulticursorModifier(data) {\r\n        switch (this.configuration.options.get(64 /* multiCursorModifier */)) {\r\n            case 'altKey':\r\n                return data.ctrlKey || data.metaKey;\r\n            case 'ctrlKey':\r\n                return data.altKey || data.metaKey;\r\n            case 'metaKey':\r\n                return data.ctrlKey || data.altKey;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    dispatchMouse(data) {\r\n        const options = this.configuration.options;\r\n        const selectionClipboardIsOn = (platform.isLinux && options.get(91 /* selectionClipboard */));\r\n        const columnSelection = options.get(15 /* columnSelection */);\r\n        if (data.middleButton && !selectionClipboardIsOn) {\r\n            this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\r\n        }\r\n        else if (data.startedOnLineNumbers) {\r\n            // If the dragging started on the gutter, then have operations work on the entire line\r\n            if (this._hasMulticursorModifier(data)) {\r\n                if (data.inSelectionMode) {\r\n                    this._lastCursorLineSelect(data.position);\r\n                }\r\n                else {\r\n                    this._createCursor(data.position, true);\r\n                }\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    this._lineSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._lineSelect(data.position);\r\n                }\r\n            }\r\n        }\r\n        else if (data.mouseDownCount >= 4) {\r\n            this._selectAll();\r\n        }\r\n        else if (data.mouseDownCount === 3) {\r\n            if (this._hasMulticursorModifier(data)) {\r\n                if (data.inSelectionMode) {\r\n                    this._lastCursorLineSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._lastCursorLineSelect(data.position);\r\n                }\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    this._lineSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._lineSelect(data.position);\r\n                }\r\n            }\r\n        }\r\n        else if (data.mouseDownCount === 2) {\r\n            if (this._hasMulticursorModifier(data)) {\r\n                this._lastCursorWordSelect(data.position);\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    this._wordSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._wordSelect(data.position);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this._hasMulticursorModifier(data)) {\r\n                if (!this._hasNonMulticursorModifier(data)) {\r\n                    if (data.shiftKey) {\r\n                        this._columnSelect(data.position, data.mouseColumn, true);\r\n                    }\r\n                    else {\r\n                        // Do multi-cursor operations only when purely alt is pressed\r\n                        if (data.inSelectionMode) {\r\n                            this._lastCursorMoveToSelect(data.position);\r\n                        }\r\n                        else {\r\n                            this._createCursor(data.position, false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    if (data.altKey) {\r\n                        this._columnSelect(data.position, data.mouseColumn, true);\r\n                    }\r\n                    else {\r\n                        if (columnSelection) {\r\n                            this._columnSelect(data.position, data.mouseColumn, true);\r\n                        }\r\n                        else {\r\n                            this._moveToSelect(data.position);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.moveTo(data.position);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _usualArgs(viewPosition) {\r\n        viewPosition = this._validateViewColumn(viewPosition);\r\n        return {\r\n            source: 'mouse',\r\n            position: this._convertViewToModelPosition(viewPosition),\r\n            viewPosition: viewPosition\r\n        };\r\n    }\r\n    moveTo(viewPosition) {\r\n        CoreNavigationCommands.MoveTo.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\r\n    }\r\n    _moveToSelect(viewPosition) {\r\n        CoreNavigationCommands.MoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\r\n    }\r\n    _columnSelect(viewPosition, mouseColumn, doColumnSelect) {\r\n        viewPosition = this._validateViewColumn(viewPosition);\r\n        CoreNavigationCommands.ColumnSelect.runCoreEditorCommand(this.viewModel, {\r\n            source: 'mouse',\r\n            position: this._convertViewToModelPosition(viewPosition),\r\n            viewPosition: viewPosition,\r\n            mouseColumn: mouseColumn,\r\n            doColumnSelect: doColumnSelect\r\n        });\r\n    }\r\n    _createCursor(viewPosition, wholeLine) {\r\n        viewPosition = this._validateViewColumn(viewPosition);\r\n        CoreNavigationCommands.CreateCursor.runCoreEditorCommand(this.viewModel, {\r\n            source: 'mouse',\r\n            position: this._convertViewToModelPosition(viewPosition),\r\n            viewPosition: viewPosition,\r\n            wholeLine: wholeLine\r\n        });\r\n    }\r\n    _lastCursorMoveToSelect(viewPosition) {\r\n        CoreNavigationCommands.LastCursorMoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\r\n    }\r\n    _wordSelect(viewPosition) {\r\n        CoreNavigationCommands.WordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\r\n    }\r\n    _wordSelectDrag(viewPosition) {\r\n        CoreNavigationCommands.WordSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\r\n    }\r\n    _lastCursorWordSelect(viewPosition) {\r\n        CoreNavigationCommands.LastCursorWordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\r\n    }\r\n    _lineSelect(viewPosition) {\r\n        CoreNavigationCommands.LineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\r\n    }\r\n    _lineSelectDrag(viewPosition) {\r\n        CoreNavigationCommands.LineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\r\n    }\r\n    _lastCursorLineSelect(viewPosition) {\r\n        CoreNavigationCommands.LastCursorLineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\r\n    }\r\n    _lastCursorLineSelectDrag(viewPosition) {\r\n        CoreNavigationCommands.LastCursorLineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\r\n    }\r\n    _selectAll() {\r\n        CoreNavigationCommands.SelectAll.runCoreEditorCommand(this.viewModel, { source: 'mouse' });\r\n    }\r\n    // ----------------------\r\n    _convertViewToModelPosition(viewPosition) {\r\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\r\n    }\r\n    emitKeyDown(e) {\r\n        this.userInputEvents.emitKeyDown(e);\r\n    }\r\n    emitKeyUp(e) {\r\n        this.userInputEvents.emitKeyUp(e);\r\n    }\r\n    emitContextMenu(e) {\r\n        this.userInputEvents.emitContextMenu(e);\r\n    }\r\n    emitMouseMove(e) {\r\n        this.userInputEvents.emitMouseMove(e);\r\n    }\r\n    emitMouseLeave(e) {\r\n        this.userInputEvents.emitMouseLeave(e);\r\n    }\r\n    emitMouseUp(e) {\r\n        this.userInputEvents.emitMouseUp(e);\r\n    }\r\n    emitMouseDown(e) {\r\n        this.userInputEvents.emitMouseDown(e);\r\n    }\r\n    emitMouseDrag(e) {\r\n        this.userInputEvents.emitMouseDrag(e);\r\n    }\r\n    emitMouseDrop(e) {\r\n        this.userInputEvents.emitMouseDrop(e);\r\n    }\r\n    emitMouseDropCanceled() {\r\n        this.userInputEvents.emitMouseDropCanceled();\r\n    }\r\n    emitMouseWheel(e) {\r\n        this.userInputEvents.emitMouseWheel(e);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}