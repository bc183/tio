{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { RGBA8 } from '../core/rgba.js';\nimport { TokenizationRegistry } from '../modes.js';\nexport var MinimapTokensColorTracker = /*#__PURE__*/function () {\n  function MinimapTokensColorTracker() {\n    var _this = this;\n\n    _classCallCheck(this, MinimapTokensColorTracker);\n\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n\n    this._updateColorMap();\n\n    TokenizationRegistry.onDidChange(function (e) {\n      if (e.changedColorMap) {\n        _this._updateColorMap();\n      }\n    });\n  }\n\n  _createClass(MinimapTokensColorTracker, [{\n    key: \"_updateColorMap\",\n    value: function _updateColorMap() {\n      var colorMap = TokenizationRegistry.getColorMap();\n\n      if (!colorMap) {\n        this._colors = [RGBA8.Empty];\n        this._backgroundIsLight = true;\n        return;\n      }\n\n      this._colors = [RGBA8.Empty];\n\n      for (var colorId = 1; colorId < colorMap.length; colorId++) {\n        var source = colorMap[colorId].rgba; // Use a VM friendly data-type\n\n        this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n      }\n\n      var backgroundLuminosity = colorMap[2\n      /* DefaultBackground */\n      ].getRelativeLuminance();\n      this._backgroundIsLight = backgroundLuminosity >= 0.5;\n\n      this._onDidChange.fire(undefined);\n    }\n  }, {\n    key: \"getColor\",\n    value: function getColor(colorId) {\n      if (colorId < 1 || colorId >= this._colors.length) {\n        // background color (basically invisible)\n        colorId = 2\n        /* DefaultBackground */\n        ;\n      }\n\n      return this._colors[colorId];\n    }\n  }, {\n    key: \"backgroundIsLight\",\n    value: function backgroundIsLight() {\n      return this._backgroundIsLight;\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!this._INSTANCE) {\n        this._INSTANCE = new MinimapTokensColorTracker();\n      }\n\n      return this._INSTANCE;\n    }\n  }]);\n\n  return MinimapTokensColorTracker;\n}();\nMinimapTokensColorTracker._INSTANCE = null;","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js"],"names":["Emitter","RGBA8","TokenizationRegistry","MinimapTokensColorTracker","_onDidChange","onDidChange","event","_updateColorMap","e","changedColorMap","colorMap","getColorMap","_colors","Empty","_backgroundIsLight","colorId","length","source","rgba","r","g","b","Math","round","a","backgroundLuminosity","getRelativeLuminance","fire","undefined","_INSTANCE"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,+BAAxB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,oBAAT,QAAqC,aAArC;AACA,WAAaC,yBAAb;AACI,uCAAc;AAAA;;AAAA;;AACV,SAAKC,YAAL,GAAoB,IAAIJ,OAAJ,EAApB;AACA,SAAKK,WAAL,GAAmB,KAAKD,YAAL,CAAkBE,KAArC;;AACA,SAAKC,eAAL;;AACAL,IAAAA,oBAAoB,CAACG,WAArB,CAAiC,UAAAG,CAAC,EAAI;AAClC,UAAIA,CAAC,CAACC,eAAN,EAAuB;AACnB,QAAA,KAAI,CAACF,eAAL;AACH;AACJ,KAJD;AAKH;;AAVL;AAAA;AAAA,sCAiBsB;AACd,UAAMG,QAAQ,GAAGR,oBAAoB,CAACS,WAArB,EAAjB;;AACA,UAAI,CAACD,QAAL,EAAe;AACX,aAAKE,OAAL,GAAe,CAACX,KAAK,CAACY,KAAP,CAAf;AACA,aAAKC,kBAAL,GAA0B,IAA1B;AACA;AACH;;AACD,WAAKF,OAAL,GAAe,CAACX,KAAK,CAACY,KAAP,CAAf;;AACA,WAAK,IAAIE,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGL,QAAQ,CAACM,MAAzC,EAAiDD,OAAO,EAAxD,EAA4D;AACxD,YAAME,MAAM,GAAGP,QAAQ,CAACK,OAAD,CAAR,CAAkBG,IAAjC,CADwD,CAExD;;AACA,aAAKN,OAAL,CAAaG,OAAb,IAAwB,IAAId,KAAJ,CAAUgB,MAAM,CAACE,CAAjB,EAAoBF,MAAM,CAACG,CAA3B,EAA8BH,MAAM,CAACI,CAArC,EAAwCC,IAAI,CAACC,KAAL,CAAWN,MAAM,CAACO,CAAP,GAAW,GAAtB,CAAxC,CAAxB;AACH;;AACD,UAAIC,oBAAoB,GAAGf,QAAQ,CAAC;AAAE;AAAH,OAAR,CAAoCgB,oBAApC,EAA3B;AACA,WAAKZ,kBAAL,GAA0BW,oBAAoB,IAAI,GAAlD;;AACA,WAAKrB,YAAL,CAAkBuB,IAAlB,CAAuBC,SAAvB;AACH;AAjCL;AAAA;AAAA,6BAkCab,OAlCb,EAkCsB;AACd,UAAIA,OAAO,GAAG,CAAV,IAAeA,OAAO,IAAI,KAAKH,OAAL,CAAaI,MAA3C,EAAmD;AAC/C;AACAD,QAAAA,OAAO,GAAG;AAAE;AAAZ;AACH;;AACD,aAAO,KAAKH,OAAL,CAAaG,OAAb,CAAP;AACH;AAxCL;AAAA;AAAA,wCAyCwB;AAChB,aAAO,KAAKD,kBAAZ;AACH;AA3CL;AAAA;AAAA,kCAWyB;AACjB,UAAI,CAAC,KAAKe,SAAV,EAAqB;AACjB,aAAKA,SAAL,GAAiB,IAAI1B,yBAAJ,EAAjB;AACH;;AACD,aAAO,KAAK0B,SAAZ;AACH;AAhBL;;AAAA;AAAA;AA6CA1B,yBAAyB,CAAC0B,SAA1B,GAAsC,IAAtC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { RGBA8 } from '../core/rgba.js';\r\nimport { TokenizationRegistry } from '../modes.js';\r\nexport class MinimapTokensColorTracker {\r\n    constructor() {\r\n        this._onDidChange = new Emitter();\r\n        this.onDidChange = this._onDidChange.event;\r\n        this._updateColorMap();\r\n        TokenizationRegistry.onDidChange(e => {\r\n            if (e.changedColorMap) {\r\n                this._updateColorMap();\r\n            }\r\n        });\r\n    }\r\n    static getInstance() {\r\n        if (!this._INSTANCE) {\r\n            this._INSTANCE = new MinimapTokensColorTracker();\r\n        }\r\n        return this._INSTANCE;\r\n    }\r\n    _updateColorMap() {\r\n        const colorMap = TokenizationRegistry.getColorMap();\r\n        if (!colorMap) {\r\n            this._colors = [RGBA8.Empty];\r\n            this._backgroundIsLight = true;\r\n            return;\r\n        }\r\n        this._colors = [RGBA8.Empty];\r\n        for (let colorId = 1; colorId < colorMap.length; colorId++) {\r\n            const source = colorMap[colorId].rgba;\r\n            // Use a VM friendly data-type\r\n            this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\r\n        }\r\n        let backgroundLuminosity = colorMap[2 /* DefaultBackground */].getRelativeLuminance();\r\n        this._backgroundIsLight = backgroundLuminosity >= 0.5;\r\n        this._onDidChange.fire(undefined);\r\n    }\r\n    getColor(colorId) {\r\n        if (colorId < 1 || colorId >= this._colors.length) {\r\n            // background color (basically invisible)\r\n            colorId = 2 /* DefaultBackground */;\r\n        }\r\n        return this._colors[colorId];\r\n    }\r\n    backgroundIsLight() {\r\n        return this._backgroundIsLight;\r\n    }\r\n}\r\nMinimapTokensColorTracker._INSTANCE = null;\r\n"]},"metadata":{},"sourceType":"module"}