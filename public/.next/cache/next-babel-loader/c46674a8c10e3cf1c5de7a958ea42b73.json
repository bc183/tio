{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nexport var ElementSizeObserver = /*#__PURE__*/function (_Disposable) {\n  _inherits(ElementSizeObserver, _Disposable);\n\n  var _super = _createSuper(ElementSizeObserver);\n\n  function ElementSizeObserver(referenceDomElement, dimension, changeCallback) {\n    var _this;\n\n    _classCallCheck(this, ElementSizeObserver);\n\n    _this = _super.call(this);\n    _this.referenceDomElement = referenceDomElement;\n    _this.changeCallback = changeCallback;\n    _this.width = -1;\n    _this.height = -1;\n    _this.resizeObserver = null;\n    _this.measureReferenceDomElementToken = -1;\n\n    _this.measureReferenceDomElement(false, dimension);\n\n    return _this;\n  }\n\n  _createClass(ElementSizeObserver, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.stopObserving();\n\n      _get(_getPrototypeOf(ElementSizeObserver.prototype), \"dispose\", this).call(this);\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.width;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.height;\n    }\n  }, {\n    key: \"startObserving\",\n    value: function startObserving() {\n      var _this2 = this;\n\n      if (typeof ResizeObserver !== 'undefined') {\n        if (!this.resizeObserver && this.referenceDomElement) {\n          this.resizeObserver = new ResizeObserver(function (entries) {\n            if (entries && entries[0] && entries[0].contentRect) {\n              _this2.observe({\n                width: entries[0].contentRect.width,\n                height: entries[0].contentRect.height\n              });\n            } else {\n              _this2.observe();\n            }\n          });\n          this.resizeObserver.observe(this.referenceDomElement);\n        }\n      } else {\n        if (this.measureReferenceDomElementToken === -1) {\n          // setInterval type defaults to NodeJS.Timeout instead of number, so specify it as a number\n          this.measureReferenceDomElementToken = setInterval(function () {\n            return _this2.observe();\n          }, 100);\n        }\n      }\n    }\n  }, {\n    key: \"stopObserving\",\n    value: function stopObserving() {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n      }\n\n      if (this.measureReferenceDomElementToken !== -1) {\n        clearInterval(this.measureReferenceDomElementToken);\n        this.measureReferenceDomElementToken = -1;\n      }\n    }\n  }, {\n    key: \"observe\",\n    value: function observe(dimension) {\n      this.measureReferenceDomElement(true, dimension);\n    }\n  }, {\n    key: \"measureReferenceDomElement\",\n    value: function measureReferenceDomElement(callChangeCallback, dimension) {\n      var observedWidth = 0;\n      var observedHeight = 0;\n\n      if (dimension) {\n        observedWidth = dimension.width;\n        observedHeight = dimension.height;\n      } else if (this.referenceDomElement) {\n        observedWidth = this.referenceDomElement.clientWidth;\n        observedHeight = this.referenceDomElement.clientHeight;\n      }\n\n      observedWidth = Math.max(5, observedWidth);\n      observedHeight = Math.max(5, observedHeight);\n\n      if (this.width !== observedWidth || this.height !== observedHeight) {\n        this.width = observedWidth;\n        this.height = observedHeight;\n\n        if (callChangeCallback) {\n          this.changeCallback();\n        }\n      }\n    }\n  }]);\n\n  return ElementSizeObserver;\n}(Disposable);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/config/elementSizeObserver.js"],"names":["Disposable","ElementSizeObserver","referenceDomElement","dimension","changeCallback","width","height","resizeObserver","measureReferenceDomElementToken","measureReferenceDomElement","stopObserving","ResizeObserver","entries","contentRect","observe","setInterval","disconnect","clearInterval","callChangeCallback","observedWidth","observedHeight","clientWidth","clientHeight","Math","max"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nexport class ElementSizeObserver extends Disposable {\r\n    constructor(referenceDomElement, dimension, changeCallback) {\r\n        super();\r\n        this.referenceDomElement = referenceDomElement;\r\n        this.changeCallback = changeCallback;\r\n        this.width = -1;\r\n        this.height = -1;\r\n        this.resizeObserver = null;\r\n        this.measureReferenceDomElementToken = -1;\r\n        this.measureReferenceDomElement(false, dimension);\r\n    }\r\n    dispose() {\r\n        this.stopObserving();\r\n        super.dispose();\r\n    }\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n    startObserving() {\r\n        if (typeof ResizeObserver !== 'undefined') {\r\n            if (!this.resizeObserver && this.referenceDomElement) {\r\n                this.resizeObserver = new ResizeObserver((entries) => {\r\n                    if (entries && entries[0] && entries[0].contentRect) {\r\n                        this.observe({ width: entries[0].contentRect.width, height: entries[0].contentRect.height });\r\n                    }\r\n                    else {\r\n                        this.observe();\r\n                    }\r\n                });\r\n                this.resizeObserver.observe(this.referenceDomElement);\r\n            }\r\n        }\r\n        else {\r\n            if (this.measureReferenceDomElementToken === -1) {\r\n                // setInterval type defaults to NodeJS.Timeout instead of number, so specify it as a number\r\n                this.measureReferenceDomElementToken = setInterval(() => this.observe(), 100);\r\n            }\r\n        }\r\n    }\r\n    stopObserving() {\r\n        if (this.resizeObserver) {\r\n            this.resizeObserver.disconnect();\r\n            this.resizeObserver = null;\r\n        }\r\n        if (this.measureReferenceDomElementToken !== -1) {\r\n            clearInterval(this.measureReferenceDomElementToken);\r\n            this.measureReferenceDomElementToken = -1;\r\n        }\r\n    }\r\n    observe(dimension) {\r\n        this.measureReferenceDomElement(true, dimension);\r\n    }\r\n    measureReferenceDomElement(callChangeCallback, dimension) {\r\n        let observedWidth = 0;\r\n        let observedHeight = 0;\r\n        if (dimension) {\r\n            observedWidth = dimension.width;\r\n            observedHeight = dimension.height;\r\n        }\r\n        else if (this.referenceDomElement) {\r\n            observedWidth = this.referenceDomElement.clientWidth;\r\n            observedHeight = this.referenceDomElement.clientHeight;\r\n        }\r\n        observedWidth = Math.max(5, observedWidth);\r\n        observedHeight = Math.max(5, observedHeight);\r\n        if (this.width !== observedWidth || this.height !== observedHeight) {\r\n            this.width = observedWidth;\r\n            this.height = observedHeight;\r\n            if (callChangeCallback) {\r\n                this.changeCallback();\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}