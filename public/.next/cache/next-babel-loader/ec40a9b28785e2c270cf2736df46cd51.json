{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport var ColorZone = /*#__PURE__*/function () {\n  function ColorZone(from, to, colorId) {\n    _classCallCheck(this, ColorZone);\n\n    this.from = from | 0;\n    this.to = to | 0;\n    this.colorId = colorId | 0;\n  }\n\n  _createClass(ColorZone, null, [{\n    key: \"compare\",\n    value: function compare(a, b) {\n      if (a.colorId === b.colorId) {\n        if (a.from === b.from) {\n          return a.to - b.to;\n        }\n\n        return a.from - b.from;\n      }\n\n      return a.colorId - b.colorId;\n    }\n  }]);\n\n  return ColorZone;\n}();\n/**\r\n * A zone in the overview ruler\r\n */\n\nexport var OverviewRulerZone = /*#__PURE__*/function () {\n  function OverviewRulerZone(startLineNumber, endLineNumber, color) {\n    _classCallCheck(this, OverviewRulerZone);\n\n    this.startLineNumber = startLineNumber;\n    this.endLineNumber = endLineNumber;\n    this.color = color;\n    this._colorZone = null;\n  }\n\n  _createClass(OverviewRulerZone, [{\n    key: \"setColorZone\",\n    value: function setColorZone(colorZone) {\n      this._colorZone = colorZone;\n    }\n  }, {\n    key: \"getColorZones\",\n    value: function getColorZones() {\n      return this._colorZone;\n    }\n  }], [{\n    key: \"compare\",\n    value: function compare(a, b) {\n      if (a.color === b.color) {\n        if (a.startLineNumber === b.startLineNumber) {\n          return a.endLineNumber - b.endLineNumber;\n        }\n\n        return a.startLineNumber - b.startLineNumber;\n      }\n\n      return a.color < b.color ? -1 : 1;\n    }\n  }]);\n\n  return OverviewRulerZone;\n}();\nexport var OverviewZoneManager = /*#__PURE__*/function () {\n  function OverviewZoneManager(getVerticalOffsetForLine) {\n    _classCallCheck(this, OverviewZoneManager);\n\n    this._getVerticalOffsetForLine = getVerticalOffsetForLine;\n    this._zones = [];\n    this._colorZonesInvalid = false;\n    this._lineHeight = 0;\n    this._domWidth = 0;\n    this._domHeight = 0;\n    this._outerHeight = 0;\n    this._pixelRatio = 1;\n    this._lastAssignedId = 0;\n    this._color2Id = Object.create(null);\n    this._id2Color = [];\n  }\n\n  _createClass(OverviewZoneManager, [{\n    key: \"getId2Color\",\n    value: function getId2Color() {\n      return this._id2Color;\n    }\n  }, {\n    key: \"setZones\",\n    value: function setZones(newZones) {\n      this._zones = newZones;\n\n      this._zones.sort(OverviewRulerZone.compare);\n    }\n  }, {\n    key: \"setLineHeight\",\n    value: function setLineHeight(lineHeight) {\n      if (this._lineHeight === lineHeight) {\n        return false;\n      }\n\n      this._lineHeight = lineHeight;\n      this._colorZonesInvalid = true;\n      return true;\n    }\n  }, {\n    key: \"setPixelRatio\",\n    value: function setPixelRatio(pixelRatio) {\n      this._pixelRatio = pixelRatio;\n      this._colorZonesInvalid = true;\n    }\n  }, {\n    key: \"getDOMWidth\",\n    value: function getDOMWidth() {\n      return this._domWidth;\n    }\n  }, {\n    key: \"getCanvasWidth\",\n    value: function getCanvasWidth() {\n      return this._domWidth * this._pixelRatio;\n    }\n  }, {\n    key: \"setDOMWidth\",\n    value: function setDOMWidth(width) {\n      if (this._domWidth === width) {\n        return false;\n      }\n\n      this._domWidth = width;\n      this._colorZonesInvalid = true;\n      return true;\n    }\n  }, {\n    key: \"getDOMHeight\",\n    value: function getDOMHeight() {\n      return this._domHeight;\n    }\n  }, {\n    key: \"getCanvasHeight\",\n    value: function getCanvasHeight() {\n      return this._domHeight * this._pixelRatio;\n    }\n  }, {\n    key: \"setDOMHeight\",\n    value: function setDOMHeight(height) {\n      if (this._domHeight === height) {\n        return false;\n      }\n\n      this._domHeight = height;\n      this._colorZonesInvalid = true;\n      return true;\n    }\n  }, {\n    key: \"getOuterHeight\",\n    value: function getOuterHeight() {\n      return this._outerHeight;\n    }\n  }, {\n    key: \"setOuterHeight\",\n    value: function setOuterHeight(outerHeight) {\n      if (this._outerHeight === outerHeight) {\n        return false;\n      }\n\n      this._outerHeight = outerHeight;\n      this._colorZonesInvalid = true;\n      return true;\n    }\n  }, {\n    key: \"resolveColorZones\",\n    value: function resolveColorZones() {\n      var colorZonesInvalid = this._colorZonesInvalid;\n      var lineHeight = Math.floor(this._lineHeight); // @perf\n\n      var totalHeight = Math.floor(this.getCanvasHeight()); // @perf\n\n      var outerHeight = Math.floor(this._outerHeight); // @perf\n\n      var heightRatio = totalHeight / outerHeight;\n      var halfMinimumHeight = Math.floor(4\n      /* MINIMUM_HEIGHT */\n      * this._pixelRatio / 2);\n      var allColorZones = [];\n\n      for (var i = 0, len = this._zones.length; i < len; i++) {\n        var zone = this._zones[i];\n\n        if (!colorZonesInvalid) {\n          var _colorZone = zone.getColorZones();\n\n          if (_colorZone) {\n            allColorZones.push(_colorZone);\n            continue;\n          }\n        }\n\n        var y1 = Math.floor(heightRatio * this._getVerticalOffsetForLine(zone.startLineNumber));\n        var y2 = Math.floor(heightRatio * (this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight));\n        var ycenter = Math.floor((y1 + y2) / 2);\n        var halfHeight = y2 - ycenter;\n\n        if (halfHeight < halfMinimumHeight) {\n          halfHeight = halfMinimumHeight;\n        }\n\n        if (ycenter - halfHeight < 0) {\n          ycenter = halfHeight;\n        }\n\n        if (ycenter + halfHeight > totalHeight) {\n          ycenter = totalHeight - halfHeight;\n        }\n\n        var color = zone.color;\n        var colorId = this._color2Id[color];\n\n        if (!colorId) {\n          colorId = ++this._lastAssignedId;\n          this._color2Id[color] = colorId;\n          this._id2Color[colorId] = color;\n        }\n\n        var colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n        zone.setColorZone(colorZone);\n        allColorZones.push(colorZone);\n      }\n\n      this._colorZonesInvalid = false;\n      allColorZones.sort(ColorZone.compare);\n      return allColorZones;\n    }\n  }]);\n\n  return OverviewZoneManager;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/view/overviewZoneManager.js"],"names":["ColorZone","from","to","colorId","a","b","OverviewRulerZone","startLineNumber","endLineNumber","color","_colorZone","colorZone","OverviewZoneManager","getVerticalOffsetForLine","_getVerticalOffsetForLine","_zones","_colorZonesInvalid","_lineHeight","_domWidth","_domHeight","_outerHeight","_pixelRatio","_lastAssignedId","_color2Id","Object","create","_id2Color","newZones","sort","compare","lineHeight","pixelRatio","width","height","outerHeight","colorZonesInvalid","Math","floor","totalHeight","getCanvasHeight","heightRatio","halfMinimumHeight","allColorZones","i","len","length","zone","getColorZones","push","y1","y2","ycenter","halfHeight","setColorZone"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport class ColorZone {\r\n    constructor(from, to, colorId) {\r\n        this.from = from | 0;\r\n        this.to = to | 0;\r\n        this.colorId = colorId | 0;\r\n    }\r\n    static compare(a, b) {\r\n        if (a.colorId === b.colorId) {\r\n            if (a.from === b.from) {\r\n                return a.to - b.to;\r\n            }\r\n            return a.from - b.from;\r\n        }\r\n        return a.colorId - b.colorId;\r\n    }\r\n}\r\n/**\r\n * A zone in the overview ruler\r\n */\r\nexport class OverviewRulerZone {\r\n    constructor(startLineNumber, endLineNumber, color) {\r\n        this.startLineNumber = startLineNumber;\r\n        this.endLineNumber = endLineNumber;\r\n        this.color = color;\r\n        this._colorZone = null;\r\n    }\r\n    static compare(a, b) {\r\n        if (a.color === b.color) {\r\n            if (a.startLineNumber === b.startLineNumber) {\r\n                return a.endLineNumber - b.endLineNumber;\r\n            }\r\n            return a.startLineNumber - b.startLineNumber;\r\n        }\r\n        return a.color < b.color ? -1 : 1;\r\n    }\r\n    setColorZone(colorZone) {\r\n        this._colorZone = colorZone;\r\n    }\r\n    getColorZones() {\r\n        return this._colorZone;\r\n    }\r\n}\r\nexport class OverviewZoneManager {\r\n    constructor(getVerticalOffsetForLine) {\r\n        this._getVerticalOffsetForLine = getVerticalOffsetForLine;\r\n        this._zones = [];\r\n        this._colorZonesInvalid = false;\r\n        this._lineHeight = 0;\r\n        this._domWidth = 0;\r\n        this._domHeight = 0;\r\n        this._outerHeight = 0;\r\n        this._pixelRatio = 1;\r\n        this._lastAssignedId = 0;\r\n        this._color2Id = Object.create(null);\r\n        this._id2Color = [];\r\n    }\r\n    getId2Color() {\r\n        return this._id2Color;\r\n    }\r\n    setZones(newZones) {\r\n        this._zones = newZones;\r\n        this._zones.sort(OverviewRulerZone.compare);\r\n    }\r\n    setLineHeight(lineHeight) {\r\n        if (this._lineHeight === lineHeight) {\r\n            return false;\r\n        }\r\n        this._lineHeight = lineHeight;\r\n        this._colorZonesInvalid = true;\r\n        return true;\r\n    }\r\n    setPixelRatio(pixelRatio) {\r\n        this._pixelRatio = pixelRatio;\r\n        this._colorZonesInvalid = true;\r\n    }\r\n    getDOMWidth() {\r\n        return this._domWidth;\r\n    }\r\n    getCanvasWidth() {\r\n        return this._domWidth * this._pixelRatio;\r\n    }\r\n    setDOMWidth(width) {\r\n        if (this._domWidth === width) {\r\n            return false;\r\n        }\r\n        this._domWidth = width;\r\n        this._colorZonesInvalid = true;\r\n        return true;\r\n    }\r\n    getDOMHeight() {\r\n        return this._domHeight;\r\n    }\r\n    getCanvasHeight() {\r\n        return this._domHeight * this._pixelRatio;\r\n    }\r\n    setDOMHeight(height) {\r\n        if (this._domHeight === height) {\r\n            return false;\r\n        }\r\n        this._domHeight = height;\r\n        this._colorZonesInvalid = true;\r\n        return true;\r\n    }\r\n    getOuterHeight() {\r\n        return this._outerHeight;\r\n    }\r\n    setOuterHeight(outerHeight) {\r\n        if (this._outerHeight === outerHeight) {\r\n            return false;\r\n        }\r\n        this._outerHeight = outerHeight;\r\n        this._colorZonesInvalid = true;\r\n        return true;\r\n    }\r\n    resolveColorZones() {\r\n        const colorZonesInvalid = this._colorZonesInvalid;\r\n        const lineHeight = Math.floor(this._lineHeight); // @perf\r\n        const totalHeight = Math.floor(this.getCanvasHeight()); // @perf\r\n        const outerHeight = Math.floor(this._outerHeight); // @perf\r\n        const heightRatio = totalHeight / outerHeight;\r\n        const halfMinimumHeight = Math.floor(4 /* MINIMUM_HEIGHT */ * this._pixelRatio / 2);\r\n        let allColorZones = [];\r\n        for (let i = 0, len = this._zones.length; i < len; i++) {\r\n            const zone = this._zones[i];\r\n            if (!colorZonesInvalid) {\r\n                const colorZone = zone.getColorZones();\r\n                if (colorZone) {\r\n                    allColorZones.push(colorZone);\r\n                    continue;\r\n                }\r\n            }\r\n            const y1 = Math.floor(heightRatio * (this._getVerticalOffsetForLine(zone.startLineNumber)));\r\n            const y2 = Math.floor(heightRatio * (this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight));\r\n            let ycenter = Math.floor((y1 + y2) / 2);\r\n            let halfHeight = (y2 - ycenter);\r\n            if (halfHeight < halfMinimumHeight) {\r\n                halfHeight = halfMinimumHeight;\r\n            }\r\n            if (ycenter - halfHeight < 0) {\r\n                ycenter = halfHeight;\r\n            }\r\n            if (ycenter + halfHeight > totalHeight) {\r\n                ycenter = totalHeight - halfHeight;\r\n            }\r\n            const color = zone.color;\r\n            let colorId = this._color2Id[color];\r\n            if (!colorId) {\r\n                colorId = (++this._lastAssignedId);\r\n                this._color2Id[color] = colorId;\r\n                this._id2Color[colorId] = color;\r\n            }\r\n            const colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\r\n            zone.setColorZone(colorZone);\r\n            allColorZones.push(colorZone);\r\n        }\r\n        this._colorZonesInvalid = false;\r\n        allColorZones.sort(ColorZone.compare);\r\n        return allColorZones;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}