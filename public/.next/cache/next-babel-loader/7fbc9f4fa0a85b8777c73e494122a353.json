{"ast":null,"code":"import _defineProperty from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _slicedToArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport * as types from '../../../base/common/types.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { OVERRIDE_PROPERTY_PATTERN, overrideIdentifierFromKey } from './configurationRegistry.js';\nimport { addToValueTree, toValuesTree, getConfigurationValue, getDefaultValues, getConfigurationKeys, removeFromValueTree } from './configuration.js';\nexport var ConfigurationModel = /*#__PURE__*/function () {\n  function ConfigurationModel() {\n    var _contents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    var _overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, ConfigurationModel);\n\n    this._contents = _contents;\n    this._keys = _keys;\n    this._overrides = _overrides;\n    this.isFrozen = false;\n  }\n\n  _createClass(ConfigurationModel, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(section) {\n      return section ? getConfigurationValue(this.contents, section) : this.contents;\n    }\n  }, {\n    key: \"override\",\n    value: function override(identifier) {\n      var overrideContents = this.getContentsForOverrideIdentifer(identifier);\n\n      if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n        // If there are no valid overrides, return self\n        return this;\n      }\n\n      var contents = {};\n\n      var _iterator = _createForOfIteratorHelper(arrays.distinct([].concat(_toConsumableArray(Object.keys(this.contents)), _toConsumableArray(Object.keys(overrideContents))))),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n          var contentsForKey = this.contents[key];\n          var overrideContentsForKey = overrideContents[key]; // If there are override contents for the key, clone and merge otherwise use base contents\n\n          if (overrideContentsForKey) {\n            // Clone and merge only if base contents and override contents are of type object otherwise just override\n            if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n              contentsForKey = objects.deepClone(contentsForKey);\n              this.mergeContents(contentsForKey, overrideContentsForKey);\n            } else {\n              contentsForKey = overrideContentsForKey;\n            }\n          }\n\n          contents[key] = contentsForKey;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return new ConfigurationModel(contents, this.keys, this.overrides);\n    }\n  }, {\n    key: \"merge\",\n    value: function merge() {\n      var _this = this;\n\n      var contents = objects.deepClone(this.contents);\n      var overrides = objects.deepClone(this.overrides);\n\n      var keys = _toConsumableArray(this.keys);\n\n      for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n        others[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _others = others; _i < _others.length; _i++) {\n        var other = _others[_i];\n        this.mergeContents(contents, other.contents);\n\n        var _iterator2 = _createForOfIteratorHelper(other.overrides),\n            _step2;\n\n        try {\n          var _loop = function _loop() {\n            var otherOverride = _step2.value;\n\n            var _overrides$filter = overrides.filter(function (o) {\n              return arrays.equals(o.identifiers, otherOverride.identifiers);\n            }),\n                _overrides$filter2 = _slicedToArray(_overrides$filter, 1),\n                override = _overrides$filter2[0];\n\n            if (override) {\n              _this.mergeContents(override.contents, otherOverride.contents);\n            } else {\n              overrides.push(objects.deepClone(otherOverride));\n            }\n          };\n\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            _loop();\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        var _iterator3 = _createForOfIteratorHelper(other.keys),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var key = _step3.value;\n\n            if (keys.indexOf(key) === -1) {\n              keys.push(key);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      return new ConfigurationModel(contents, keys, overrides);\n    }\n  }, {\n    key: \"freeze\",\n    value: function freeze() {\n      this.isFrozen = true;\n      return this;\n    }\n  }, {\n    key: \"mergeContents\",\n    value: function mergeContents(source, target) {\n      for (var _i2 = 0, _Object$keys = Object.keys(target); _i2 < _Object$keys.length; _i2++) {\n        var key = _Object$keys[_i2];\n\n        if (key in source) {\n          if (types.isObject(source[key]) && types.isObject(target[key])) {\n            this.mergeContents(source[key], target[key]);\n            continue;\n          }\n        }\n\n        source[key] = objects.deepClone(target[key]);\n      }\n    }\n  }, {\n    key: \"checkAndFreeze\",\n    value: function checkAndFreeze(data) {\n      if (this.isFrozen && !Object.isFrozen(data)) {\n        return objects.deepFreeze(data);\n      }\n\n      return data;\n    }\n  }, {\n    key: \"getContentsForOverrideIdentifer\",\n    value: function getContentsForOverrideIdentifer(identifier) {\n      var _iterator4 = _createForOfIteratorHelper(this.overrides),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var override = _step4.value;\n\n          if (override.identifiers.indexOf(identifier) !== -1) {\n            return override.contents;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        contents: this.contents,\n        overrides: this.overrides,\n        keys: this.keys\n      };\n    } // Update methods\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(key, value) {\n      this.addKey(key);\n      addToValueTree(this.contents, key, value, function (e) {\n        throw new Error(e);\n      });\n    }\n  }, {\n    key: \"removeValue\",\n    value: function removeValue(key) {\n      if (this.removeKey(key)) {\n        removeFromValueTree(this.contents, key);\n      }\n    }\n  }, {\n    key: \"addKey\",\n    value: function addKey(key) {\n      var index = this.keys.length;\n\n      for (var i = 0; i < index; i++) {\n        if (key.indexOf(this.keys[i]) === 0) {\n          index = i;\n        }\n      }\n\n      this.keys.splice(index, 1, key);\n    }\n  }, {\n    key: \"removeKey\",\n    value: function removeKey(key) {\n      var index = this.keys.indexOf(key);\n\n      if (index !== -1) {\n        this.keys.splice(index, 1);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"contents\",\n    get: function get() {\n      return this.checkAndFreeze(this._contents);\n    }\n  }, {\n    key: \"overrides\",\n    get: function get() {\n      return this.checkAndFreeze(this._overrides);\n    }\n  }, {\n    key: \"keys\",\n    get: function get() {\n      return this.checkAndFreeze(this._keys);\n    }\n  }]);\n\n  return ConfigurationModel;\n}();\nexport var DefaultConfigurationModel = /*#__PURE__*/function (_ConfigurationModel) {\n  _inherits(DefaultConfigurationModel, _ConfigurationModel);\n\n  var _super = _createSuper(DefaultConfigurationModel);\n\n  function DefaultConfigurationModel() {\n    _classCallCheck(this, DefaultConfigurationModel);\n\n    var contents = getDefaultValues();\n    var keys = getConfigurationKeys();\n    var overrides = [];\n\n    for (var _i3 = 0, _Object$keys2 = Object.keys(contents); _i3 < _Object$keys2.length; _i3++) {\n      var key = _Object$keys2[_i3];\n\n      if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n        overrides.push({\n          identifiers: [overrideIdentifierFromKey(key).trim()],\n          keys: Object.keys(contents[key]),\n          contents: toValuesTree(contents[key], function (message) {\n            return console.error(\"Conflict in default settings file: \".concat(message));\n          })\n        });\n      }\n    }\n\n    return _super.call(this, contents, keys, overrides);\n  }\n\n  return DefaultConfigurationModel;\n}(ConfigurationModel);\nexport var Configuration = /*#__PURE__*/function () {\n  function Configuration(_defaultConfiguration, _localUserConfiguration) {\n    var _remoteUserConfiguration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ConfigurationModel();\n\n    var _workspaceConfiguration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new ConfigurationModel();\n\n    var _folderConfigurations = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new ResourceMap();\n\n    var _memoryConfiguration = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ConfigurationModel();\n\n    var _memoryConfigurationByResource = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ResourceMap();\n\n    var _freeze = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;\n\n    _classCallCheck(this, Configuration);\n\n    this._defaultConfiguration = _defaultConfiguration;\n    this._localUserConfiguration = _localUserConfiguration;\n    this._remoteUserConfiguration = _remoteUserConfiguration;\n    this._workspaceConfiguration = _workspaceConfiguration;\n    this._folderConfigurations = _folderConfigurations;\n    this._memoryConfiguration = _memoryConfiguration;\n    this._memoryConfigurationByResource = _memoryConfigurationByResource;\n    this._freeze = _freeze;\n    this._workspaceConsolidatedConfiguration = null;\n    this._foldersConsolidatedConfigurations = new ResourceMap();\n    this._userConfiguration = null;\n  }\n\n  _createClass(Configuration, [{\n    key: \"getValue\",\n    value: function getValue(section, overrides, workspace) {\n      var consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n      return consolidateConfigurationModel.getValue(section);\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(key, value) {\n      var overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var memoryConfiguration;\n\n      if (overrides.resource) {\n        memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n\n        if (!memoryConfiguration) {\n          memoryConfiguration = new ConfigurationModel();\n\n          this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n        }\n      } else {\n        memoryConfiguration = this._memoryConfiguration;\n      }\n\n      if (value === undefined) {\n        memoryConfiguration.removeValue(key);\n      } else {\n        memoryConfiguration.setValue(key, value);\n      }\n\n      if (!overrides.resource) {\n        this._workspaceConsolidatedConfiguration = null;\n      }\n    }\n  }, {\n    key: \"getConsolidateConfigurationModel\",\n    value: function getConsolidateConfigurationModel(overrides, workspace) {\n      var configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n      return overrides.overrideIdentifier ? configurationModel.override(overrides.overrideIdentifier) : configurationModel;\n    }\n  }, {\n    key: \"getConsolidatedConfigurationModelForResource\",\n    value: function getConsolidatedConfigurationModelForResource(_ref, workspace) {\n      var resource = _ref.resource;\n      var consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n\n      if (workspace && resource) {\n        var root = workspace.getFolder(resource);\n\n        if (root) {\n          consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n        }\n\n        var memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n\n        if (memoryConfigurationForResource) {\n          consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n        }\n      }\n\n      return consolidateConfiguration;\n    }\n  }, {\n    key: \"getWorkspaceConsolidatedConfiguration\",\n    value: function getWorkspaceConsolidatedConfiguration() {\n      if (!this._workspaceConsolidatedConfiguration) {\n        this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n\n        if (this._freeze) {\n          this._workspaceConfiguration = this._workspaceConfiguration.freeze();\n        }\n      }\n\n      return this._workspaceConsolidatedConfiguration;\n    }\n  }, {\n    key: \"getFolderConsolidatedConfiguration\",\n    value: function getFolderConsolidatedConfiguration(folder) {\n      var folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n\n      if (!folderConsolidatedConfiguration) {\n        var workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n\n        var folderConfiguration = this._folderConfigurations.get(folder);\n\n        if (folderConfiguration) {\n          folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n\n          if (this._freeze) {\n            folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\n          }\n\n          this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n        } else {\n          folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n        }\n      }\n\n      return folderConsolidatedConfiguration;\n    }\n  }, {\n    key: \"toData\",\n    value: function toData() {\n      var _this2 = this;\n\n      return {\n        defaults: {\n          contents: this._defaultConfiguration.contents,\n          overrides: this._defaultConfiguration.overrides,\n          keys: this._defaultConfiguration.keys\n        },\n        user: {\n          contents: this.userConfiguration.contents,\n          overrides: this.userConfiguration.overrides,\n          keys: this.userConfiguration.keys\n        },\n        workspace: {\n          contents: this._workspaceConfiguration.contents,\n          overrides: this._workspaceConfiguration.overrides,\n          keys: this._workspaceConfiguration.keys\n        },\n        folders: _toConsumableArray(this._folderConfigurations.keys()).reduce(function (result, folder) {\n          var _this2$_folderConfigu = _this2._folderConfigurations.get(folder),\n              contents = _this2$_folderConfigu.contents,\n              overrides = _this2$_folderConfigu.overrides,\n              keys = _this2$_folderConfigu.keys;\n\n          result.push([folder, {\n            contents: contents,\n            overrides: overrides,\n            keys: keys\n          }]);\n          return result;\n        }, [])\n      };\n    }\n  }, {\n    key: \"userConfiguration\",\n    get: function get() {\n      if (!this._userConfiguration) {\n        this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n\n        if (this._freeze) {\n          this._userConfiguration.freeze();\n        }\n      }\n\n      return this._userConfiguration;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(data) {\n      var _this3 = this;\n\n      var defaultConfiguration = this.parseConfigurationModel(data.defaults);\n      var userConfiguration = this.parseConfigurationModel(data.user);\n      var workspaceConfiguration = this.parseConfigurationModel(data.workspace);\n      var folders = data.folders.reduce(function (result, value) {\n        result.set(URI.revive(value[0]), _this3.parseConfigurationModel(value[1]));\n        return result;\n      }, new ResourceMap());\n      return new Configuration(defaultConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap(), false);\n    }\n  }, {\n    key: \"parseConfigurationModel\",\n    value: function parseConfigurationModel(model) {\n      return new ConfigurationModel(model.contents, model.keys, model.overrides).freeze();\n    }\n  }]);\n\n  return Configuration;\n}();\nexport var ConfigurationChangeEvent = /*#__PURE__*/function () {\n  function ConfigurationChangeEvent(change, previous, currentConfiguraiton, currentWorkspace) {\n    _classCallCheck(this, ConfigurationChangeEvent);\n\n    this.change = change;\n    this.previous = previous;\n    this.currentConfiguraiton = currentConfiguraiton;\n    this.currentWorkspace = currentWorkspace;\n    this._previousConfiguration = undefined;\n    var keysSet = new Set();\n    change.keys.forEach(function (key) {\n      return keysSet.add(key);\n    });\n    change.overrides.forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          keys = _ref3[1];\n\n      return keys.forEach(function (key) {\n        return keysSet.add(key);\n      });\n    });\n    this.affectedKeys = _toConsumableArray(keysSet.values());\n    var configurationModel = new ConfigurationModel();\n    this.affectedKeys.forEach(function (key) {\n      return configurationModel.setValue(key, {});\n    });\n    this.affectedKeysTree = configurationModel.contents;\n  }\n\n  _createClass(ConfigurationChangeEvent, [{\n    key: \"affectsConfiguration\",\n    value: function affectsConfiguration(section, overrides) {\n      var _a;\n\n      if (this.doesAffectedKeysTreeContains(this.affectedKeysTree, section)) {\n        if (overrides) {\n          var value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n          var value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n          return !objects.equals(value1, value2);\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"doesAffectedKeysTreeContains\",\n    value: function doesAffectedKeysTreeContains(affectedKeysTree, section) {\n      var requestedTree = toValuesTree(_defineProperty({}, section, true), function () {});\n      var key;\n\n      while (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) {\n        // Only one key should present, since we added only one property\n        affectedKeysTree = affectedKeysTree[key];\n\n        if (!affectedKeysTree) {\n          return false; // Requested tree is not found\n        }\n\n        requestedTree = requestedTree[key];\n      }\n\n      return true;\n    }\n  }, {\n    key: \"previousConfiguration\",\n    get: function get() {\n      if (!this._previousConfiguration && this.previous) {\n        this._previousConfiguration = Configuration.parse(this.previous.data);\n      }\n\n      return this._previousConfiguration;\n    }\n  }]);\n\n  return ConfigurationChangeEvent;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationModels.js"],"names":["ResourceMap","arrays","types","objects","URI","OVERRIDE_PROPERTY_PATTERN","overrideIdentifierFromKey","addToValueTree","toValuesTree","getConfigurationValue","getDefaultValues","getConfigurationKeys","removeFromValueTree","ConfigurationModel","_contents","_keys","_overrides","isFrozen","length","Object","keys","section","contents","identifier","overrideContents","getContentsForOverrideIdentifer","distinct","key","contentsForKey","overrideContentsForKey","deepClone","mergeContents","overrides","others","other","otherOverride","filter","o","equals","identifiers","override","push","indexOf","source","target","isObject","data","deepFreeze","value","addKey","e","Error","removeKey","index","i","splice","checkAndFreeze","DefaultConfigurationModel","test","trim","message","console","error","Configuration","_defaultConfiguration","_localUserConfiguration","_remoteUserConfiguration","_workspaceConfiguration","_folderConfigurations","_memoryConfiguration","_memoryConfigurationByResource","_freeze","_workspaceConsolidatedConfiguration","_foldersConsolidatedConfigurations","_userConfiguration","workspace","consolidateConfigurationModel","getConsolidateConfigurationModel","getValue","memoryConfiguration","resource","get","set","undefined","removeValue","setValue","configurationModel","getConsolidatedConfigurationModelForResource","overrideIdentifier","consolidateConfiguration","getWorkspaceConsolidatedConfiguration","root","getFolder","getFolderConsolidatedConfiguration","uri","memoryConfigurationForResource","merge","userConfiguration","freeze","folder","folderConsolidatedConfiguration","workspaceConsolidateConfiguration","folderConfiguration","defaults","user","folders","reduce","result","isEmpty","defaultConfiguration","parseConfigurationModel","workspaceConfiguration","revive","model","ConfigurationChangeEvent","change","previous","currentConfiguraiton","currentWorkspace","_previousConfiguration","keysSet","Set","forEach","add","affectedKeys","values","affectedKeysTree","_a","doesAffectedKeysTreeContains","value1","previousConfiguration","value2","requestedTree","parse"],"mappings":"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","sourcesContent":["import { ResourceMap } from '../../../base/common/map.js';\r\nimport * as arrays from '../../../base/common/arrays.js';\r\nimport * as types from '../../../base/common/types.js';\r\nimport * as objects from '../../../base/common/objects.js';\r\nimport { URI } from '../../../base/common/uri.js';\r\nimport { OVERRIDE_PROPERTY_PATTERN, overrideIdentifierFromKey } from './configurationRegistry.js';\r\nimport { addToValueTree, toValuesTree, getConfigurationValue, getDefaultValues, getConfigurationKeys, removeFromValueTree } from './configuration.js';\r\nexport class ConfigurationModel {\r\n    constructor(_contents = {}, _keys = [], _overrides = []) {\r\n        this._contents = _contents;\r\n        this._keys = _keys;\r\n        this._overrides = _overrides;\r\n        this.isFrozen = false;\r\n    }\r\n    get contents() {\r\n        return this.checkAndFreeze(this._contents);\r\n    }\r\n    get overrides() {\r\n        return this.checkAndFreeze(this._overrides);\r\n    }\r\n    get keys() {\r\n        return this.checkAndFreeze(this._keys);\r\n    }\r\n    isEmpty() {\r\n        return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\r\n    }\r\n    getValue(section) {\r\n        return section ? getConfigurationValue(this.contents, section) : this.contents;\r\n    }\r\n    override(identifier) {\r\n        const overrideContents = this.getContentsForOverrideIdentifer(identifier);\r\n        if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\r\n            // If there are no valid overrides, return self\r\n            return this;\r\n        }\r\n        let contents = {};\r\n        for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\r\n            let contentsForKey = this.contents[key];\r\n            let overrideContentsForKey = overrideContents[key];\r\n            // If there are override contents for the key, clone and merge otherwise use base contents\r\n            if (overrideContentsForKey) {\r\n                // Clone and merge only if base contents and override contents are of type object otherwise just override\r\n                if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\r\n                    contentsForKey = objects.deepClone(contentsForKey);\r\n                    this.mergeContents(contentsForKey, overrideContentsForKey);\r\n                }\r\n                else {\r\n                    contentsForKey = overrideContentsForKey;\r\n                }\r\n            }\r\n            contents[key] = contentsForKey;\r\n        }\r\n        return new ConfigurationModel(contents, this.keys, this.overrides);\r\n    }\r\n    merge(...others) {\r\n        const contents = objects.deepClone(this.contents);\r\n        const overrides = objects.deepClone(this.overrides);\r\n        const keys = [...this.keys];\r\n        for (const other of others) {\r\n            this.mergeContents(contents, other.contents);\r\n            for (const otherOverride of other.overrides) {\r\n                const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\r\n                if (override) {\r\n                    this.mergeContents(override.contents, otherOverride.contents);\r\n                }\r\n                else {\r\n                    overrides.push(objects.deepClone(otherOverride));\r\n                }\r\n            }\r\n            for (const key of other.keys) {\r\n                if (keys.indexOf(key) === -1) {\r\n                    keys.push(key);\r\n                }\r\n            }\r\n        }\r\n        return new ConfigurationModel(contents, keys, overrides);\r\n    }\r\n    freeze() {\r\n        this.isFrozen = true;\r\n        return this;\r\n    }\r\n    mergeContents(source, target) {\r\n        for (const key of Object.keys(target)) {\r\n            if (key in source) {\r\n                if (types.isObject(source[key]) && types.isObject(target[key])) {\r\n                    this.mergeContents(source[key], target[key]);\r\n                    continue;\r\n                }\r\n            }\r\n            source[key] = objects.deepClone(target[key]);\r\n        }\r\n    }\r\n    checkAndFreeze(data) {\r\n        if (this.isFrozen && !Object.isFrozen(data)) {\r\n            return objects.deepFreeze(data);\r\n        }\r\n        return data;\r\n    }\r\n    getContentsForOverrideIdentifer(identifier) {\r\n        for (const override of this.overrides) {\r\n            if (override.identifiers.indexOf(identifier) !== -1) {\r\n                return override.contents;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            contents: this.contents,\r\n            overrides: this.overrides,\r\n            keys: this.keys\r\n        };\r\n    }\r\n    // Update methods\r\n    setValue(key, value) {\r\n        this.addKey(key);\r\n        addToValueTree(this.contents, key, value, e => { throw new Error(e); });\r\n    }\r\n    removeValue(key) {\r\n        if (this.removeKey(key)) {\r\n            removeFromValueTree(this.contents, key);\r\n        }\r\n    }\r\n    addKey(key) {\r\n        let index = this.keys.length;\r\n        for (let i = 0; i < index; i++) {\r\n            if (key.indexOf(this.keys[i]) === 0) {\r\n                index = i;\r\n            }\r\n        }\r\n        this.keys.splice(index, 1, key);\r\n    }\r\n    removeKey(key) {\r\n        let index = this.keys.indexOf(key);\r\n        if (index !== -1) {\r\n            this.keys.splice(index, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport class DefaultConfigurationModel extends ConfigurationModel {\r\n    constructor() {\r\n        const contents = getDefaultValues();\r\n        const keys = getConfigurationKeys();\r\n        const overrides = [];\r\n        for (const key of Object.keys(contents)) {\r\n            if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\r\n                overrides.push({\r\n                    identifiers: [overrideIdentifierFromKey(key).trim()],\r\n                    keys: Object.keys(contents[key]),\r\n                    contents: toValuesTree(contents[key], message => console.error(`Conflict in default settings file: ${message}`)),\r\n                });\r\n            }\r\n        }\r\n        super(contents, keys, overrides);\r\n    }\r\n}\r\nexport class Configuration {\r\n    constructor(_defaultConfiguration, _localUserConfiguration, _remoteUserConfiguration = new ConfigurationModel(), _workspaceConfiguration = new ConfigurationModel(), _folderConfigurations = new ResourceMap(), _memoryConfiguration = new ConfigurationModel(), _memoryConfigurationByResource = new ResourceMap(), _freeze = true) {\r\n        this._defaultConfiguration = _defaultConfiguration;\r\n        this._localUserConfiguration = _localUserConfiguration;\r\n        this._remoteUserConfiguration = _remoteUserConfiguration;\r\n        this._workspaceConfiguration = _workspaceConfiguration;\r\n        this._folderConfigurations = _folderConfigurations;\r\n        this._memoryConfiguration = _memoryConfiguration;\r\n        this._memoryConfigurationByResource = _memoryConfigurationByResource;\r\n        this._freeze = _freeze;\r\n        this._workspaceConsolidatedConfiguration = null;\r\n        this._foldersConsolidatedConfigurations = new ResourceMap();\r\n        this._userConfiguration = null;\r\n    }\r\n    getValue(section, overrides, workspace) {\r\n        const consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\r\n        return consolidateConfigurationModel.getValue(section);\r\n    }\r\n    updateValue(key, value, overrides = {}) {\r\n        let memoryConfiguration;\r\n        if (overrides.resource) {\r\n            memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\r\n            if (!memoryConfiguration) {\r\n                memoryConfiguration = new ConfigurationModel();\r\n                this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\r\n            }\r\n        }\r\n        else {\r\n            memoryConfiguration = this._memoryConfiguration;\r\n        }\r\n        if (value === undefined) {\r\n            memoryConfiguration.removeValue(key);\r\n        }\r\n        else {\r\n            memoryConfiguration.setValue(key, value);\r\n        }\r\n        if (!overrides.resource) {\r\n            this._workspaceConsolidatedConfiguration = null;\r\n        }\r\n    }\r\n    get userConfiguration() {\r\n        if (!this._userConfiguration) {\r\n            this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\r\n            if (this._freeze) {\r\n                this._userConfiguration.freeze();\r\n            }\r\n        }\r\n        return this._userConfiguration;\r\n    }\r\n    getConsolidateConfigurationModel(overrides, workspace) {\r\n        let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\r\n        return overrides.overrideIdentifier ? configurationModel.override(overrides.overrideIdentifier) : configurationModel;\r\n    }\r\n    getConsolidatedConfigurationModelForResource({ resource }, workspace) {\r\n        let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\r\n        if (workspace && resource) {\r\n            const root = workspace.getFolder(resource);\r\n            if (root) {\r\n                consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\r\n            }\r\n            const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\r\n            if (memoryConfigurationForResource) {\r\n                consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\r\n            }\r\n        }\r\n        return consolidateConfiguration;\r\n    }\r\n    getWorkspaceConsolidatedConfiguration() {\r\n        if (!this._workspaceConsolidatedConfiguration) {\r\n            this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\r\n            if (this._freeze) {\r\n                this._workspaceConfiguration = this._workspaceConfiguration.freeze();\r\n            }\r\n        }\r\n        return this._workspaceConsolidatedConfiguration;\r\n    }\r\n    getFolderConsolidatedConfiguration(folder) {\r\n        let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\r\n        if (!folderConsolidatedConfiguration) {\r\n            const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\r\n            const folderConfiguration = this._folderConfigurations.get(folder);\r\n            if (folderConfiguration) {\r\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\r\n                if (this._freeze) {\r\n                    folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\r\n                }\r\n                this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\r\n            }\r\n            else {\r\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\r\n            }\r\n        }\r\n        return folderConsolidatedConfiguration;\r\n    }\r\n    toData() {\r\n        return {\r\n            defaults: {\r\n                contents: this._defaultConfiguration.contents,\r\n                overrides: this._defaultConfiguration.overrides,\r\n                keys: this._defaultConfiguration.keys\r\n            },\r\n            user: {\r\n                contents: this.userConfiguration.contents,\r\n                overrides: this.userConfiguration.overrides,\r\n                keys: this.userConfiguration.keys\r\n            },\r\n            workspace: {\r\n                contents: this._workspaceConfiguration.contents,\r\n                overrides: this._workspaceConfiguration.overrides,\r\n                keys: this._workspaceConfiguration.keys\r\n            },\r\n            folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\r\n                const { contents, overrides, keys } = this._folderConfigurations.get(folder);\r\n                result.push([folder, { contents, overrides, keys }]);\r\n                return result;\r\n            }, [])\r\n        };\r\n    }\r\n    static parse(data) {\r\n        const defaultConfiguration = this.parseConfigurationModel(data.defaults);\r\n        const userConfiguration = this.parseConfigurationModel(data.user);\r\n        const workspaceConfiguration = this.parseConfigurationModel(data.workspace);\r\n        const folders = data.folders.reduce((result, value) => {\r\n            result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1]));\r\n            return result;\r\n        }, new ResourceMap());\r\n        return new Configuration(defaultConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap(), false);\r\n    }\r\n    static parseConfigurationModel(model) {\r\n        return new ConfigurationModel(model.contents, model.keys, model.overrides).freeze();\r\n    }\r\n}\r\nexport class ConfigurationChangeEvent {\r\n    constructor(change, previous, currentConfiguraiton, currentWorkspace) {\r\n        this.change = change;\r\n        this.previous = previous;\r\n        this.currentConfiguraiton = currentConfiguraiton;\r\n        this.currentWorkspace = currentWorkspace;\r\n        this._previousConfiguration = undefined;\r\n        const keysSet = new Set();\r\n        change.keys.forEach(key => keysSet.add(key));\r\n        change.overrides.forEach(([, keys]) => keys.forEach(key => keysSet.add(key)));\r\n        this.affectedKeys = [...keysSet.values()];\r\n        const configurationModel = new ConfigurationModel();\r\n        this.affectedKeys.forEach(key => configurationModel.setValue(key, {}));\r\n        this.affectedKeysTree = configurationModel.contents;\r\n    }\r\n    get previousConfiguration() {\r\n        if (!this._previousConfiguration && this.previous) {\r\n            this._previousConfiguration = Configuration.parse(this.previous.data);\r\n        }\r\n        return this._previousConfiguration;\r\n    }\r\n    affectsConfiguration(section, overrides) {\r\n        var _a;\r\n        if (this.doesAffectedKeysTreeContains(this.affectedKeysTree, section)) {\r\n            if (overrides) {\r\n                const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\r\n                const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\r\n                return !objects.equals(value1, value2);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    doesAffectedKeysTreeContains(affectedKeysTree, section) {\r\n        let requestedTree = toValuesTree({ [section]: true }, () => { });\r\n        let key;\r\n        while (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) { // Only one key should present, since we added only one property\r\n            affectedKeysTree = affectedKeysTree[key];\r\n            if (!affectedKeysTree) {\r\n                return false; // Requested tree is not found\r\n            }\r\n            requestedTree = requestedTree[key];\r\n        }\r\n        return true;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}