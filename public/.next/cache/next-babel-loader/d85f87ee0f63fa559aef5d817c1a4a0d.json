{"ast":null,"code":"import _slicedToArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport * as stringBuilder from '../../core/stringBuilder.js';\nimport { Range } from '../../core/range.js';\nexport var RichEditBracket = /*#__PURE__*/function () {\n  function RichEditBracket(languageIdentifier, index, open, close, forwardRegex, reversedRegex) {\n    _classCallCheck(this, RichEditBracket);\n\n    this.languageIdentifier = languageIdentifier;\n    this.index = index;\n    this.open = open;\n    this.close = close;\n    this.forwardRegex = forwardRegex;\n    this.reversedRegex = reversedRegex;\n    this._openSet = RichEditBracket._toSet(this.open);\n    this._closeSet = RichEditBracket._toSet(this.close);\n  }\n\n  _createClass(RichEditBracket, [{\n    key: \"isOpen\",\n    value: function isOpen(text) {\n      return this._openSet.has(text);\n    }\n  }, {\n    key: \"isClose\",\n    value: function isClose(text) {\n      return this._closeSet.has(text);\n    }\n  }], [{\n    key: \"_toSet\",\n    value: function _toSet(arr) {\n      var result = new Set();\n\n      var _iterator = _createForOfIteratorHelper(arr),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var element = _step.value;\n          result.add(element);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return result;\n    }\n  }]);\n\n  return RichEditBracket;\n}();\n\nfunction groupFuzzyBrackets(brackets) {\n  var N = brackets.length;\n  brackets = brackets.map(function (b) {\n    return [b[0].toLowerCase(), b[1].toLowerCase()];\n  });\n  var group = [];\n\n  for (var i = 0; i < N; i++) {\n    group[i] = i;\n  }\n\n  var areOverlapping = function areOverlapping(a, b) {\n    var _a = _slicedToArray(a, 2),\n        aOpen = _a[0],\n        aClose = _a[1];\n\n    var _b = _slicedToArray(b, 2),\n        bOpen = _b[0],\n        bClose = _b[1];\n\n    return aOpen === bOpen || aOpen === bClose || aClose === bOpen || aClose === bClose;\n  };\n\n  var mergeGroups = function mergeGroups(g1, g2) {\n    var newG = Math.min(g1, g2);\n    var oldG = Math.max(g1, g2);\n\n    for (var _i = 0; _i < N; _i++) {\n      if (group[_i] === oldG) {\n        group[_i] = newG;\n      }\n    }\n  }; // group together brackets that have the same open or the same close sequence\n\n\n  for (var _i2 = 0; _i2 < N; _i2++) {\n    var a = brackets[_i2];\n\n    for (var j = _i2 + 1; j < N; j++) {\n      var b = brackets[j];\n\n      if (areOverlapping(a, b)) {\n        mergeGroups(group[_i2], group[j]);\n      }\n    }\n  }\n\n  var result = [];\n\n  for (var g = 0; g < N; g++) {\n    var currentOpen = [];\n    var currentClose = [];\n\n    for (var _i3 = 0; _i3 < N; _i3++) {\n      if (group[_i3] === g) {\n        var _brackets$_i = _slicedToArray(brackets[_i3], 2),\n            open = _brackets$_i[0],\n            close = _brackets$_i[1];\n\n        currentOpen.push(open);\n        currentClose.push(close);\n      }\n    }\n\n    if (currentOpen.length > 0) {\n      result.push({\n        open: currentOpen,\n        close: currentClose\n      });\n    }\n  }\n\n  return result;\n}\n\nexport var RichEditBrackets = function RichEditBrackets(languageIdentifier, _brackets) {\n  _classCallCheck(this, RichEditBrackets);\n\n  var brackets = groupFuzzyBrackets(_brackets);\n  this.brackets = brackets.map(function (b, index) {\n    return new RichEditBracket(languageIdentifier, index, b.open, b.close, getRegexForBracketPair(b.open, b.close, brackets, index), getReversedRegexForBracketPair(b.open, b.close, brackets, index));\n  });\n  this.forwardRegex = getRegexForBrackets(this.brackets);\n  this.reversedRegex = getReversedRegexForBrackets(this.brackets);\n  this.textIsBracket = {};\n  this.textIsOpenBracket = {};\n  this.maxBracketLength = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(this.brackets),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var bracket = _step2.value;\n\n      var _iterator3 = _createForOfIteratorHelper(bracket.open),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var open = _step3.value;\n          this.textIsBracket[open] = bracket;\n          this.textIsOpenBracket[open] = true;\n          this.maxBracketLength = Math.max(this.maxBracketLength, open.length);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(bracket.close),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var close = _step4.value;\n          this.textIsBracket[close] = bracket;\n          this.textIsOpenBracket[close] = false;\n          this.maxBracketLength = Math.max(this.maxBracketLength, close.length);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n};\n\nfunction collectSuperstrings(str, brackets, currentIndex, dest) {\n  for (var i = 0, len = brackets.length; i < len; i++) {\n    if (i === currentIndex) {\n      continue;\n    }\n\n    var bracket = brackets[i];\n\n    var _iterator5 = _createForOfIteratorHelper(bracket.open),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var open = _step5.value;\n\n        if (open.indexOf(str) >= 0) {\n          dest.push(open);\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    var _iterator6 = _createForOfIteratorHelper(bracket.close),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var close = _step6.value;\n\n        if (close.indexOf(str) >= 0) {\n          dest.push(close);\n        }\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  }\n}\n\nfunction lengthcmp(a, b) {\n  return a.length - b.length;\n}\n\nfunction unique(arr) {\n  if (arr.length <= 1) {\n    return arr;\n  }\n\n  var result = [];\n  var seen = new Set();\n\n  var _iterator7 = _createForOfIteratorHelper(arr),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var element = _step7.value;\n\n      if (seen.has(element)) {\n        continue;\n      }\n\n      result.push(element);\n      seen.add(element);\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return result;\n}\n\nfunction getRegexForBracketPair(open, close, brackets, currentIndex) {\n  // search in all brackets for other brackets that are a superstring of these brackets\n  var pieces = [];\n  pieces = pieces.concat(open);\n  pieces = pieces.concat(close);\n\n  for (var i = 0, len = pieces.length; i < len; i++) {\n    collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\n  }\n\n  pieces = unique(pieces);\n  pieces.sort(lengthcmp);\n  pieces.reverse();\n  return createBracketOrRegExp(pieces);\n}\n\nfunction getReversedRegexForBracketPair(open, close, brackets, currentIndex) {\n  // search in all brackets for other brackets that are a superstring of these brackets\n  var pieces = [];\n  pieces = pieces.concat(open);\n  pieces = pieces.concat(close);\n\n  for (var i = 0, len = pieces.length; i < len; i++) {\n    collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\n  }\n\n  pieces = unique(pieces);\n  pieces.sort(lengthcmp);\n  pieces.reverse();\n  return createBracketOrRegExp(pieces.map(toReversedString));\n}\n\nfunction getRegexForBrackets(brackets) {\n  var pieces = [];\n\n  var _iterator8 = _createForOfIteratorHelper(brackets),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var bracket = _step8.value;\n\n      var _iterator9 = _createForOfIteratorHelper(bracket.open),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var open = _step9.value;\n          pieces.push(open);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      var _iterator10 = _createForOfIteratorHelper(bracket.close),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var close = _step10.value;\n          pieces.push(close);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  pieces = unique(pieces);\n  return createBracketOrRegExp(pieces);\n}\n\nfunction getReversedRegexForBrackets(brackets) {\n  var pieces = [];\n\n  var _iterator11 = _createForOfIteratorHelper(brackets),\n      _step11;\n\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var bracket = _step11.value;\n\n      var _iterator12 = _createForOfIteratorHelper(bracket.open),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var open = _step12.value;\n          pieces.push(open);\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      var _iterator13 = _createForOfIteratorHelper(bracket.close),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var close = _step13.value;\n          pieces.push(close);\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n\n  pieces = unique(pieces);\n  return createBracketOrRegExp(pieces.map(toReversedString));\n}\n\nfunction prepareBracketForRegExp(str) {\n  // This bracket pair uses letters like e.g. \"begin\" - \"end\"\n  var insertWordBoundaries = /^[\\w ]+$/.test(str);\n  str = strings.escapeRegExpCharacters(str);\n  return insertWordBoundaries ? \"\\\\b\".concat(str, \"\\\\b\") : str;\n}\n\nfunction createBracketOrRegExp(pieces) {\n  var regexStr = \"(\".concat(pieces.map(prepareBracketForRegExp).join(')|('), \")\");\n  return strings.createRegExp(regexStr, true);\n}\n\nvar toReversedString = function () {\n  function reverse(str) {\n    if (stringBuilder.hasTextDecoder) {\n      // create a Uint16Array and then use a TextDecoder to create a string\n      var arr = new Uint16Array(str.length);\n      var offset = 0;\n\n      for (var i = str.length - 1; i >= 0; i--) {\n        arr[offset++] = str.charCodeAt(i);\n      }\n\n      return stringBuilder.getPlatformTextDecoder().decode(arr);\n    } else {\n      var result = [],\n          resultLen = 0;\n\n      for (var _i4 = str.length - 1; _i4 >= 0; _i4--) {\n        result[resultLen++] = str.charAt(_i4);\n      }\n\n      return result.join('');\n    }\n  }\n\n  var lastInput = null;\n  var lastOutput = null;\n  return function toReversedString(str) {\n    if (lastInput !== str) {\n      lastInput = str;\n      lastOutput = reverse(lastInput);\n    }\n\n    return lastOutput;\n  };\n}();\n\nexport var BracketsUtils = /*#__PURE__*/function () {\n  function BracketsUtils() {\n    _classCallCheck(this, BracketsUtils);\n  }\n\n  _createClass(BracketsUtils, null, [{\n    key: \"_findPrevBracketInText\",\n    value: function _findPrevBracketInText(reversedBracketRegex, lineNumber, reversedText, offset) {\n      var m = reversedText.match(reversedBracketRegex);\n\n      if (!m) {\n        return null;\n      }\n\n      var matchOffset = reversedText.length - (m.index || 0);\n      var matchLength = m[0].length;\n      var absoluteMatchOffset = offset + matchOffset;\n      return new Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\n    }\n  }, {\n    key: \"findPrevBracketInRange\",\n    value: function findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, startOffset, endOffset) {\n      // Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\n      var reversedLineText = toReversedString(lineText);\n      var reversedSubstr = reversedLineText.substring(lineText.length - endOffset, lineText.length - startOffset);\n      return this._findPrevBracketInText(reversedBracketRegex, lineNumber, reversedSubstr, startOffset);\n    }\n  }, {\n    key: \"findNextBracketInText\",\n    value: function findNextBracketInText(bracketRegex, lineNumber, text, offset) {\n      var m = text.match(bracketRegex);\n\n      if (!m) {\n        return null;\n      }\n\n      var matchOffset = m.index || 0;\n      var matchLength = m[0].length;\n\n      if (matchLength === 0) {\n        return null;\n      }\n\n      var absoluteMatchOffset = offset + matchOffset;\n      return new Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\n    }\n  }, {\n    key: \"findNextBracketInRange\",\n    value: function findNextBracketInRange(bracketRegex, lineNumber, lineText, startOffset, endOffset) {\n      var substr = lineText.substring(startOffset, endOffset);\n      return this.findNextBracketInText(bracketRegex, lineNumber, substr, startOffset);\n    }\n  }]);\n\n  return BracketsUtils;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/richEditBrackets.js"],"names":["strings","stringBuilder","Range","RichEditBracket","languageIdentifier","index","open","close","forwardRegex","reversedRegex","_openSet","_toSet","_closeSet","text","has","arr","result","Set","element","add","groupFuzzyBrackets","brackets","N","length","map","b","toLowerCase","group","i","areOverlapping","a","aOpen","aClose","bOpen","bClose","mergeGroups","g1","g2","newG","Math","min","oldG","max","j","g","currentOpen","currentClose","push","RichEditBrackets","_brackets","getRegexForBracketPair","getReversedRegexForBracketPair","getRegexForBrackets","getReversedRegexForBrackets","textIsBracket","textIsOpenBracket","maxBracketLength","bracket","collectSuperstrings","str","currentIndex","dest","len","indexOf","lengthcmp","unique","seen","pieces","concat","sort","reverse","createBracketOrRegExp","toReversedString","prepareBracketForRegExp","insertWordBoundaries","test","escapeRegExpCharacters","regexStr","join","createRegExp","hasTextDecoder","Uint16Array","offset","charCodeAt","getPlatformTextDecoder","decode","resultLen","charAt","lastInput","lastOutput","BracketsUtils","reversedBracketRegex","lineNumber","reversedText","m","match","matchOffset","matchLength","absoluteMatchOffset","lineText","startOffset","endOffset","reversedLineText","reversedSubstr","substring","_findPrevBracketInText","bracketRegex","substr","findNextBracketInText"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../../base/common/strings.js';\r\nimport * as stringBuilder from '../../core/stringBuilder.js';\r\nimport { Range } from '../../core/range.js';\r\nexport class RichEditBracket {\r\n    constructor(languageIdentifier, index, open, close, forwardRegex, reversedRegex) {\r\n        this.languageIdentifier = languageIdentifier;\r\n        this.index = index;\r\n        this.open = open;\r\n        this.close = close;\r\n        this.forwardRegex = forwardRegex;\r\n        this.reversedRegex = reversedRegex;\r\n        this._openSet = RichEditBracket._toSet(this.open);\r\n        this._closeSet = RichEditBracket._toSet(this.close);\r\n    }\r\n    isOpen(text) {\r\n        return this._openSet.has(text);\r\n    }\r\n    isClose(text) {\r\n        return this._closeSet.has(text);\r\n    }\r\n    static _toSet(arr) {\r\n        const result = new Set();\r\n        for (const element of arr) {\r\n            result.add(element);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nfunction groupFuzzyBrackets(brackets) {\r\n    const N = brackets.length;\r\n    brackets = brackets.map(b => [b[0].toLowerCase(), b[1].toLowerCase()]);\r\n    const group = [];\r\n    for (let i = 0; i < N; i++) {\r\n        group[i] = i;\r\n    }\r\n    const areOverlapping = (a, b) => {\r\n        const [aOpen, aClose] = a;\r\n        const [bOpen, bClose] = b;\r\n        return (aOpen === bOpen || aOpen === bClose || aClose === bOpen || aClose === bClose);\r\n    };\r\n    const mergeGroups = (g1, g2) => {\r\n        const newG = Math.min(g1, g2);\r\n        const oldG = Math.max(g1, g2);\r\n        for (let i = 0; i < N; i++) {\r\n            if (group[i] === oldG) {\r\n                group[i] = newG;\r\n            }\r\n        }\r\n    };\r\n    // group together brackets that have the same open or the same close sequence\r\n    for (let i = 0; i < N; i++) {\r\n        const a = brackets[i];\r\n        for (let j = i + 1; j < N; j++) {\r\n            const b = brackets[j];\r\n            if (areOverlapping(a, b)) {\r\n                mergeGroups(group[i], group[j]);\r\n            }\r\n        }\r\n    }\r\n    const result = [];\r\n    for (let g = 0; g < N; g++) {\r\n        let currentOpen = [];\r\n        let currentClose = [];\r\n        for (let i = 0; i < N; i++) {\r\n            if (group[i] === g) {\r\n                const [open, close] = brackets[i];\r\n                currentOpen.push(open);\r\n                currentClose.push(close);\r\n            }\r\n        }\r\n        if (currentOpen.length > 0) {\r\n            result.push({\r\n                open: currentOpen,\r\n                close: currentClose\r\n            });\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexport class RichEditBrackets {\r\n    constructor(languageIdentifier, _brackets) {\r\n        const brackets = groupFuzzyBrackets(_brackets);\r\n        this.brackets = brackets.map((b, index) => {\r\n            return new RichEditBracket(languageIdentifier, index, b.open, b.close, getRegexForBracketPair(b.open, b.close, brackets, index), getReversedRegexForBracketPair(b.open, b.close, brackets, index));\r\n        });\r\n        this.forwardRegex = getRegexForBrackets(this.brackets);\r\n        this.reversedRegex = getReversedRegexForBrackets(this.brackets);\r\n        this.textIsBracket = {};\r\n        this.textIsOpenBracket = {};\r\n        this.maxBracketLength = 0;\r\n        for (const bracket of this.brackets) {\r\n            for (const open of bracket.open) {\r\n                this.textIsBracket[open] = bracket;\r\n                this.textIsOpenBracket[open] = true;\r\n                this.maxBracketLength = Math.max(this.maxBracketLength, open.length);\r\n            }\r\n            for (const close of bracket.close) {\r\n                this.textIsBracket[close] = bracket;\r\n                this.textIsOpenBracket[close] = false;\r\n                this.maxBracketLength = Math.max(this.maxBracketLength, close.length);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction collectSuperstrings(str, brackets, currentIndex, dest) {\r\n    for (let i = 0, len = brackets.length; i < len; i++) {\r\n        if (i === currentIndex) {\r\n            continue;\r\n        }\r\n        const bracket = brackets[i];\r\n        for (const open of bracket.open) {\r\n            if (open.indexOf(str) >= 0) {\r\n                dest.push(open);\r\n            }\r\n        }\r\n        for (const close of bracket.close) {\r\n            if (close.indexOf(str) >= 0) {\r\n                dest.push(close);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction lengthcmp(a, b) {\r\n    return a.length - b.length;\r\n}\r\nfunction unique(arr) {\r\n    if (arr.length <= 1) {\r\n        return arr;\r\n    }\r\n    const result = [];\r\n    const seen = new Set();\r\n    for (const element of arr) {\r\n        if (seen.has(element)) {\r\n            continue;\r\n        }\r\n        result.push(element);\r\n        seen.add(element);\r\n    }\r\n    return result;\r\n}\r\nfunction getRegexForBracketPair(open, close, brackets, currentIndex) {\r\n    // search in all brackets for other brackets that are a superstring of these brackets\r\n    let pieces = [];\r\n    pieces = pieces.concat(open);\r\n    pieces = pieces.concat(close);\r\n    for (let i = 0, len = pieces.length; i < len; i++) {\r\n        collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\r\n    }\r\n    pieces = unique(pieces);\r\n    pieces.sort(lengthcmp);\r\n    pieces.reverse();\r\n    return createBracketOrRegExp(pieces);\r\n}\r\nfunction getReversedRegexForBracketPair(open, close, brackets, currentIndex) {\r\n    // search in all brackets for other brackets that are a superstring of these brackets\r\n    let pieces = [];\r\n    pieces = pieces.concat(open);\r\n    pieces = pieces.concat(close);\r\n    for (let i = 0, len = pieces.length; i < len; i++) {\r\n        collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\r\n    }\r\n    pieces = unique(pieces);\r\n    pieces.sort(lengthcmp);\r\n    pieces.reverse();\r\n    return createBracketOrRegExp(pieces.map(toReversedString));\r\n}\r\nfunction getRegexForBrackets(brackets) {\r\n    let pieces = [];\r\n    for (const bracket of brackets) {\r\n        for (const open of bracket.open) {\r\n            pieces.push(open);\r\n        }\r\n        for (const close of bracket.close) {\r\n            pieces.push(close);\r\n        }\r\n    }\r\n    pieces = unique(pieces);\r\n    return createBracketOrRegExp(pieces);\r\n}\r\nfunction getReversedRegexForBrackets(brackets) {\r\n    let pieces = [];\r\n    for (const bracket of brackets) {\r\n        for (const open of bracket.open) {\r\n            pieces.push(open);\r\n        }\r\n        for (const close of bracket.close) {\r\n            pieces.push(close);\r\n        }\r\n    }\r\n    pieces = unique(pieces);\r\n    return createBracketOrRegExp(pieces.map(toReversedString));\r\n}\r\nfunction prepareBracketForRegExp(str) {\r\n    // This bracket pair uses letters like e.g. \"begin\" - \"end\"\r\n    const insertWordBoundaries = (/^[\\w ]+$/.test(str));\r\n    str = strings.escapeRegExpCharacters(str);\r\n    return (insertWordBoundaries ? `\\\\b${str}\\\\b` : str);\r\n}\r\nfunction createBracketOrRegExp(pieces) {\r\n    let regexStr = `(${pieces.map(prepareBracketForRegExp).join(')|(')})`;\r\n    return strings.createRegExp(regexStr, true);\r\n}\r\nconst toReversedString = (function () {\r\n    function reverse(str) {\r\n        if (stringBuilder.hasTextDecoder) {\r\n            // create a Uint16Array and then use a TextDecoder to create a string\r\n            const arr = new Uint16Array(str.length);\r\n            let offset = 0;\r\n            for (let i = str.length - 1; i >= 0; i--) {\r\n                arr[offset++] = str.charCodeAt(i);\r\n            }\r\n            return stringBuilder.getPlatformTextDecoder().decode(arr);\r\n        }\r\n        else {\r\n            let result = [], resultLen = 0;\r\n            for (let i = str.length - 1; i >= 0; i--) {\r\n                result[resultLen++] = str.charAt(i);\r\n            }\r\n            return result.join('');\r\n        }\r\n    }\r\n    let lastInput = null;\r\n    let lastOutput = null;\r\n    return function toReversedString(str) {\r\n        if (lastInput !== str) {\r\n            lastInput = str;\r\n            lastOutput = reverse(lastInput);\r\n        }\r\n        return lastOutput;\r\n    };\r\n})();\r\nexport class BracketsUtils {\r\n    static _findPrevBracketInText(reversedBracketRegex, lineNumber, reversedText, offset) {\r\n        let m = reversedText.match(reversedBracketRegex);\r\n        if (!m) {\r\n            return null;\r\n        }\r\n        let matchOffset = reversedText.length - (m.index || 0);\r\n        let matchLength = m[0].length;\r\n        let absoluteMatchOffset = offset + matchOffset;\r\n        return new Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\r\n    }\r\n    static findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, startOffset, endOffset) {\r\n        // Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\r\n        const reversedLineText = toReversedString(lineText);\r\n        const reversedSubstr = reversedLineText.substring(lineText.length - endOffset, lineText.length - startOffset);\r\n        return this._findPrevBracketInText(reversedBracketRegex, lineNumber, reversedSubstr, startOffset);\r\n    }\r\n    static findNextBracketInText(bracketRegex, lineNumber, text, offset) {\r\n        let m = text.match(bracketRegex);\r\n        if (!m) {\r\n            return null;\r\n        }\r\n        let matchOffset = m.index || 0;\r\n        let matchLength = m[0].length;\r\n        if (matchLength === 0) {\r\n            return null;\r\n        }\r\n        let absoluteMatchOffset = offset + matchOffset;\r\n        return new Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\r\n    }\r\n    static findNextBracketInRange(bracketRegex, lineNumber, lineText, startOffset, endOffset) {\r\n        const substr = lineText.substring(startOffset, endOffset);\r\n        return this.findNextBracketInText(bracketRegex, lineNumber, substr, startOffset);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}