{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar _a;\n\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nexport var RenderedLinesCollection = /*#__PURE__*/function () {\n  function RenderedLinesCollection(createLine) {\n    _classCallCheck(this, RenderedLinesCollection);\n\n    this._createLine = createLine;\n\n    this._set(1, []);\n  }\n\n  _createClass(RenderedLinesCollection, [{\n    key: \"flush\",\n    value: function flush() {\n      this._set(1, []);\n    }\n  }, {\n    key: \"_set\",\n    value: function _set(rendLineNumberStart, lines) {\n      this._lines = lines;\n      this._rendLineNumberStart = rendLineNumberStart;\n    }\n  }, {\n    key: \"_get\",\n    value: function _get() {\n      return {\n        rendLineNumberStart: this._rendLineNumberStart,\n        lines: this._lines\n      };\n    }\n    /**\r\n     * @returns Inclusive line number that is inside this collection\r\n     */\n\n  }, {\n    key: \"getStartLineNumber\",\n    value: function getStartLineNumber() {\n      return this._rendLineNumberStart;\n    }\n    /**\r\n     * @returns Inclusive line number that is inside this collection\r\n     */\n\n  }, {\n    key: \"getEndLineNumber\",\n    value: function getEndLineNumber() {\n      return this._rendLineNumberStart + this._lines.length - 1;\n    }\n  }, {\n    key: \"getCount\",\n    value: function getCount() {\n      return this._lines.length;\n    }\n  }, {\n    key: \"getLine\",\n    value: function getLine(lineNumber) {\n      var lineIndex = lineNumber - this._rendLineNumberStart;\n\n      if (lineIndex < 0 || lineIndex >= this._lines.length) {\n        throw new Error('Illegal value for lineNumber');\n      }\n\n      return this._lines[lineIndex];\n    }\n    /**\r\n     * @returns Lines that were removed from this collection\r\n     */\n\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n      if (this.getCount() === 0) {\n        // no lines\n        return null;\n      }\n\n      var startLineNumber = this.getStartLineNumber();\n      var endLineNumber = this.getEndLineNumber();\n\n      if (deleteToLineNumber < startLineNumber) {\n        // deleting above the viewport\n        var deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\n        this._rendLineNumberStart -= deleteCnt;\n        return null;\n      }\n\n      if (deleteFromLineNumber > endLineNumber) {\n        // deleted below the viewport\n        return null;\n      } // Record what needs to be deleted\n\n\n      var deleteStartIndex = 0;\n      var deleteCount = 0;\n\n      for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        var lineIndex = lineNumber - this._rendLineNumberStart;\n\n        if (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\n          // this is a line to be deleted\n          if (deleteCount === 0) {\n            // this is the first line to be deleted\n            deleteStartIndex = lineIndex;\n            deleteCount = 1;\n          } else {\n            deleteCount++;\n          }\n        }\n      } // Adjust this._rendLineNumberStart for lines deleted above\n\n\n      if (deleteFromLineNumber < startLineNumber) {\n        // Something was deleted above\n        var deleteAboveCount = 0;\n\n        if (deleteToLineNumber < startLineNumber) {\n          // the entire deleted lines are above\n          deleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\n        } else {\n          deleteAboveCount = startLineNumber - deleteFromLineNumber;\n        }\n\n        this._rendLineNumberStart -= deleteAboveCount;\n      }\n\n      var deleted = this._lines.splice(deleteStartIndex, deleteCount);\n\n      return deleted;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(changeFromLineNumber, changeToLineNumber) {\n      if (this.getCount() === 0) {\n        // no lines\n        return false;\n      }\n\n      var startLineNumber = this.getStartLineNumber();\n      var endLineNumber = this.getEndLineNumber();\n      var someoneNotified = false;\n\n      for (var changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\n        if (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\n          // Notify the line\n          this._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\n\n          someoneNotified = true;\n        }\n      }\n\n      return someoneNotified;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n      if (this.getCount() === 0) {\n        // no lines\n        return null;\n      }\n\n      var insertCnt = insertToLineNumber - insertFromLineNumber + 1;\n      var startLineNumber = this.getStartLineNumber();\n      var endLineNumber = this.getEndLineNumber();\n\n      if (insertFromLineNumber <= startLineNumber) {\n        // inserting above the viewport\n        this._rendLineNumberStart += insertCnt;\n        return null;\n      }\n\n      if (insertFromLineNumber > endLineNumber) {\n        // inserting below the viewport\n        return null;\n      }\n\n      if (insertCnt + insertFromLineNumber > endLineNumber) {\n        // insert inside the viewport in such a way that all remaining lines are pushed outside\n        var deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\n\n        return deleted;\n      } // insert inside the viewport, push out some lines, but not all remaining lines\n\n\n      var newLines = [];\n\n      for (var i = 0; i < insertCnt; i++) {\n        newLines[i] = this._createLine();\n      }\n\n      var insertIndex = insertFromLineNumber - this._rendLineNumberStart;\n\n      var beforeLines = this._lines.slice(0, insertIndex);\n\n      var afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\n\n      var deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\n\n      this._lines = beforeLines.concat(newLines).concat(afterLines);\n      return deletedLines;\n    }\n  }, {\n    key: \"onTokensChanged\",\n    value: function onTokensChanged(ranges) {\n      if (this.getCount() === 0) {\n        // no lines\n        return false;\n      }\n\n      var startLineNumber = this.getStartLineNumber();\n      var endLineNumber = this.getEndLineNumber();\n      var notifiedSomeone = false;\n\n      for (var i = 0, len = ranges.length; i < len; i++) {\n        var rng = ranges[i];\n\n        if (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\n          // range outside viewport\n          continue;\n        }\n\n        var from = Math.max(startLineNumber, rng.fromLineNumber);\n        var to = Math.min(endLineNumber, rng.toLineNumber);\n\n        for (var lineNumber = from; lineNumber <= to; lineNumber++) {\n          var lineIndex = lineNumber - this._rendLineNumberStart;\n\n          this._lines[lineIndex].onTokensChanged();\n\n          notifiedSomeone = true;\n        }\n      }\n\n      return notifiedSomeone;\n    }\n  }]);\n\n  return RenderedLinesCollection;\n}();\nexport var VisibleLinesCollection = /*#__PURE__*/function () {\n  function VisibleLinesCollection(host) {\n    var _this = this;\n\n    _classCallCheck(this, VisibleLinesCollection);\n\n    this._host = host;\n    this.domNode = this._createDomNode();\n    this._linesCollection = new RenderedLinesCollection(function () {\n      return _this._host.createVisibleLine();\n    });\n  }\n\n  _createClass(VisibleLinesCollection, [{\n    key: \"_createDomNode\",\n    value: function _createDomNode() {\n      var domNode = createFastDomNode(document.createElement('div'));\n      domNode.setClassName('view-layer');\n      domNode.setPosition('absolute');\n      domNode.domNode.setAttribute('role', 'presentation');\n      domNode.domNode.setAttribute('aria-hidden', 'true');\n      return domNode;\n    } // ---- begin view event handlers\n\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      if (e.hasChanged(124\n      /* layoutInfo */\n      )) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      this._linesCollection.flush(); // No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\n\n\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return this._linesCollection.onLinesChanged(e.fromLineNumber, e.toLineNumber);\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      var deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n\n      if (deleted) {\n        // Remove from DOM\n        for (var i = 0, len = deleted.length; i < len; i++) {\n          var lineDomNode = deleted[i].getDomNode();\n\n          if (lineDomNode) {\n            this.domNode.domNode.removeChild(lineDomNode);\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      var deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n\n      if (deleted) {\n        // Remove from DOM\n        for (var i = 0, len = deleted.length; i < len; i++) {\n          var lineDomNode = deleted[i].getDomNode();\n\n          if (lineDomNode) {\n            this.domNode.domNode.removeChild(lineDomNode);\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return e.scrollTopChanged;\n    }\n  }, {\n    key: \"onTokensChanged\",\n    value: function onTokensChanged(e) {\n      return this._linesCollection.onTokensChanged(e.ranges);\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    } // ---- end view event handlers\n\n  }, {\n    key: \"getStartLineNumber\",\n    value: function getStartLineNumber() {\n      return this._linesCollection.getStartLineNumber();\n    }\n  }, {\n    key: \"getEndLineNumber\",\n    value: function getEndLineNumber() {\n      return this._linesCollection.getEndLineNumber();\n    }\n  }, {\n    key: \"getVisibleLine\",\n    value: function getVisibleLine(lineNumber) {\n      return this._linesCollection.getLine(lineNumber);\n    }\n  }, {\n    key: \"renderLines\",\n    value: function renderLines(viewportData) {\n      var inp = this._linesCollection._get();\n\n      var renderer = new ViewLayerRenderer(this.domNode.domNode, this._host, viewportData);\n      var ctx = {\n        rendLineNumberStart: inp.rendLineNumberStart,\n        lines: inp.lines,\n        linesLength: inp.lines.length\n      }; // Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\n\n      var resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\n\n      this._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\n    }\n  }]);\n\n  return VisibleLinesCollection;\n}();\n\nvar ViewLayerRenderer = /*#__PURE__*/function () {\n  function ViewLayerRenderer(domNode, host, viewportData) {\n    _classCallCheck(this, ViewLayerRenderer);\n\n    this.domNode = domNode;\n    this.host = host;\n    this.viewportData = viewportData;\n  }\n\n  _createClass(ViewLayerRenderer, [{\n    key: \"render\",\n    value: function render(inContext, startLineNumber, stopLineNumber, deltaTop) {\n      var ctx = {\n        rendLineNumberStart: inContext.rendLineNumberStart,\n        lines: inContext.lines.slice(0),\n        linesLength: inContext.linesLength\n      };\n\n      if (ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber || stopLineNumber < ctx.rendLineNumberStart) {\n        // There is no overlap whatsoever\n        ctx.rendLineNumberStart = startLineNumber;\n        ctx.linesLength = stopLineNumber - startLineNumber + 1;\n        ctx.lines = [];\n\n        for (var x = startLineNumber; x <= stopLineNumber; x++) {\n          ctx.lines[x - startLineNumber] = this.host.createVisibleLine();\n        }\n\n        this._finishRendering(ctx, true, deltaTop);\n\n        return ctx;\n      } // Update lines which will remain untouched\n\n\n      this._renderUntouchedLines(ctx, Math.max(startLineNumber - ctx.rendLineNumberStart, 0), Math.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1), deltaTop, startLineNumber);\n\n      if (ctx.rendLineNumberStart > startLineNumber) {\n        // Insert lines before\n        var fromLineNumber = startLineNumber;\n        var toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\n\n        if (fromLineNumber <= toLineNumber) {\n          this._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n\n          ctx.linesLength += toLineNumber - fromLineNumber + 1;\n        }\n      } else if (ctx.rendLineNumberStart < startLineNumber) {\n        // Remove lines before\n        var removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\n\n        if (removeCnt > 0) {\n          this._removeLinesBefore(ctx, removeCnt);\n\n          ctx.linesLength -= removeCnt;\n        }\n      }\n\n      ctx.rendLineNumberStart = startLineNumber;\n\n      if (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\n        // Insert lines after\n        var _fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\n\n        var _toLineNumber = stopLineNumber;\n\n        if (_fromLineNumber <= _toLineNumber) {\n          this._insertLinesAfter(ctx, _fromLineNumber, _toLineNumber, deltaTop, startLineNumber);\n\n          ctx.linesLength += _toLineNumber - _fromLineNumber + 1;\n        }\n      } else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\n        // Remove lines after\n        var _fromLineNumber2 = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\n\n        var _toLineNumber2 = ctx.linesLength - 1;\n\n        var _removeCnt = _toLineNumber2 - _fromLineNumber2 + 1;\n\n        if (_removeCnt > 0) {\n          this._removeLinesAfter(ctx, _removeCnt);\n\n          ctx.linesLength -= _removeCnt;\n        }\n      }\n\n      this._finishRendering(ctx, false, deltaTop);\n\n      return ctx;\n    }\n  }, {\n    key: \"_renderUntouchedLines\",\n    value: function _renderUntouchedLines(ctx, startIndex, endIndex, deltaTop, deltaLN) {\n      var rendLineNumberStart = ctx.rendLineNumberStart;\n      var lines = ctx.lines;\n\n      for (var i = startIndex; i <= endIndex; i++) {\n        var lineNumber = rendLineNumberStart + i;\n        lines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN]);\n      }\n    }\n  }, {\n    key: \"_insertLinesBefore\",\n    value: function _insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n      var newLines = [];\n      var newLinesLen = 0;\n\n      for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n        newLines[newLinesLen++] = this.host.createVisibleLine();\n      }\n\n      ctx.lines = newLines.concat(ctx.lines);\n    }\n  }, {\n    key: \"_removeLinesBefore\",\n    value: function _removeLinesBefore(ctx, removeCount) {\n      for (var i = 0; i < removeCount; i++) {\n        var lineDomNode = ctx.lines[i].getDomNode();\n\n        if (lineDomNode) {\n          this.domNode.removeChild(lineDomNode);\n        }\n      }\n\n      ctx.lines.splice(0, removeCount);\n    }\n  }, {\n    key: \"_insertLinesAfter\",\n    value: function _insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n      var newLines = [];\n      var newLinesLen = 0;\n\n      for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n        newLines[newLinesLen++] = this.host.createVisibleLine();\n      }\n\n      ctx.lines = ctx.lines.concat(newLines);\n    }\n  }, {\n    key: \"_removeLinesAfter\",\n    value: function _removeLinesAfter(ctx, removeCount) {\n      var removeIndex = ctx.linesLength - removeCount;\n\n      for (var i = 0; i < removeCount; i++) {\n        var lineDomNode = ctx.lines[removeIndex + i].getDomNode();\n\n        if (lineDomNode) {\n          this.domNode.removeChild(lineDomNode);\n        }\n      }\n\n      ctx.lines.splice(removeIndex, removeCount);\n    }\n  }, {\n    key: \"_finishRenderingNewLines\",\n    value: function _finishRenderingNewLines(ctx, domNodeIsEmpty, newLinesHTML, wasNew) {\n      if (ViewLayerRenderer._ttPolicy) {\n        newLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(newLinesHTML);\n      }\n\n      var lastChild = this.domNode.lastChild;\n\n      if (domNodeIsEmpty || !lastChild) {\n        this.domNode.innerHTML = newLinesHTML; // explains the ugly casts -> https://github.com/microsoft/vscode/issues/106396#issuecomment-692625393;\n      } else {\n        lastChild.insertAdjacentHTML('afterend', newLinesHTML);\n      }\n\n      var currChild = this.domNode.lastChild;\n\n      for (var i = ctx.linesLength - 1; i >= 0; i--) {\n        var line = ctx.lines[i];\n\n        if (wasNew[i]) {\n          line.setDomNode(currChild);\n          currChild = currChild.previousSibling;\n        }\n      }\n    }\n  }, {\n    key: \"_finishRenderingInvalidLines\",\n    value: function _finishRenderingInvalidLines(ctx, invalidLinesHTML, wasInvalid) {\n      var hugeDomNode = document.createElement('div');\n\n      if (ViewLayerRenderer._ttPolicy) {\n        invalidLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(invalidLinesHTML);\n      }\n\n      hugeDomNode.innerHTML = invalidLinesHTML;\n\n      for (var i = 0; i < ctx.linesLength; i++) {\n        var line = ctx.lines[i];\n\n        if (wasInvalid[i]) {\n          var source = hugeDomNode.firstChild;\n          var lineDomNode = line.getDomNode();\n          lineDomNode.parentNode.replaceChild(source, lineDomNode);\n          line.setDomNode(source);\n        }\n      }\n    }\n  }, {\n    key: \"_finishRendering\",\n    value: function _finishRendering(ctx, domNodeIsEmpty, deltaTop) {\n      var sb = ViewLayerRenderer._sb;\n      var linesLength = ctx.linesLength;\n      var lines = ctx.lines;\n      var rendLineNumberStart = ctx.rendLineNumberStart;\n      var wasNew = [];\n      {\n        sb.reset();\n        var hadNewLine = false;\n\n        for (var i = 0; i < linesLength; i++) {\n          var line = lines[i];\n          wasNew[i] = false;\n          var lineDomNode = line.getDomNode();\n\n          if (lineDomNode) {\n            // line is not new\n            continue;\n          }\n\n          var renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\n\n          if (!renderResult) {\n            // line does not need rendering\n            continue;\n          }\n\n          wasNew[i] = true;\n          hadNewLine = true;\n        }\n\n        if (hadNewLine) {\n          this._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\n        }\n      }\n      {\n        sb.reset();\n        var hadInvalidLine = false;\n        var wasInvalid = [];\n\n        for (var _i = 0; _i < linesLength; _i++) {\n          var _line = lines[_i];\n          wasInvalid[_i] = false;\n\n          if (wasNew[_i]) {\n            // line was new\n            continue;\n          }\n\n          var _renderResult = _line.renderLine(_i + rendLineNumberStart, deltaTop[_i], this.viewportData, sb);\n\n          if (!_renderResult) {\n            // line does not need rendering\n            continue;\n          }\n\n          wasInvalid[_i] = true;\n          hadInvalidLine = true;\n        }\n\n        if (hadInvalidLine) {\n          this._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\n        }\n      }\n    }\n  }]);\n\n  return ViewLayerRenderer;\n}();\n\nViewLayerRenderer._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('editorViewLayer', {\n  createHTML: function createHTML(value) {\n    return value;\n  }\n});\nViewLayerRenderer._sb = createStringBuilder(100000);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/view/viewLayer.js"],"names":["_a","createFastDomNode","createStringBuilder","RenderedLinesCollection","createLine","_createLine","_set","rendLineNumberStart","lines","_lines","_rendLineNumberStart","length","lineNumber","lineIndex","Error","deleteFromLineNumber","deleteToLineNumber","getCount","startLineNumber","getStartLineNumber","endLineNumber","getEndLineNumber","deleteCnt","deleteStartIndex","deleteCount","deleteAboveCount","deleted","splice","changeFromLineNumber","changeToLineNumber","someoneNotified","changedLineNumber","onContentChanged","insertFromLineNumber","insertToLineNumber","insertCnt","newLines","i","insertIndex","beforeLines","slice","afterLines","deletedLines","concat","ranges","notifiedSomeone","len","rng","toLineNumber","fromLineNumber","from","Math","max","to","min","onTokensChanged","VisibleLinesCollection","host","_host","domNode","_createDomNode","_linesCollection","createVisibleLine","document","createElement","setClassName","setPosition","setAttribute","e","hasChanged","flush","onLinesChanged","onLinesDeleted","lineDomNode","getDomNode","removeChild","onLinesInserted","scrollTopChanged","getLine","viewportData","inp","_get","renderer","ViewLayerRenderer","ctx","linesLength","resCtx","render","relativeVerticalOffset","inContext","stopLineNumber","deltaTop","x","_finishRendering","_renderUntouchedLines","_insertLinesBefore","removeCnt","_removeLinesBefore","_insertLinesAfter","_removeLinesAfter","startIndex","endIndex","deltaLN","layoutLine","newLinesLen","removeCount","removeIndex","domNodeIsEmpty","newLinesHTML","wasNew","_ttPolicy","createHTML","lastChild","innerHTML","insertAdjacentHTML","currChild","line","setDomNode","previousSibling","invalidLinesHTML","wasInvalid","hugeDomNode","source","firstChild","parentNode","replaceChild","sb","_sb","reset","hadNewLine","renderResult","renderLine","_finishRenderingNewLines","build","hadInvalidLine","_finishRenderingInvalidLines","window","trustedTypes","createPolicy","value"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _a;\r\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\r\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\r\nexport class RenderedLinesCollection {\r\n    constructor(createLine) {\r\n        this._createLine = createLine;\r\n        this._set(1, []);\r\n    }\r\n    flush() {\r\n        this._set(1, []);\r\n    }\r\n    _set(rendLineNumberStart, lines) {\r\n        this._lines = lines;\r\n        this._rendLineNumberStart = rendLineNumberStart;\r\n    }\r\n    _get() {\r\n        return {\r\n            rendLineNumberStart: this._rendLineNumberStart,\r\n            lines: this._lines\r\n        };\r\n    }\r\n    /**\r\n     * @returns Inclusive line number that is inside this collection\r\n     */\r\n    getStartLineNumber() {\r\n        return this._rendLineNumberStart;\r\n    }\r\n    /**\r\n     * @returns Inclusive line number that is inside this collection\r\n     */\r\n    getEndLineNumber() {\r\n        return this._rendLineNumberStart + this._lines.length - 1;\r\n    }\r\n    getCount() {\r\n        return this._lines.length;\r\n    }\r\n    getLine(lineNumber) {\r\n        const lineIndex = lineNumber - this._rendLineNumberStart;\r\n        if (lineIndex < 0 || lineIndex >= this._lines.length) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._lines[lineIndex];\r\n    }\r\n    /**\r\n     * @returns Lines that were removed from this collection\r\n     */\r\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return null;\r\n        }\r\n        const startLineNumber = this.getStartLineNumber();\r\n        const endLineNumber = this.getEndLineNumber();\r\n        if (deleteToLineNumber < startLineNumber) {\r\n            // deleting above the viewport\r\n            const deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\r\n            this._rendLineNumberStart -= deleteCnt;\r\n            return null;\r\n        }\r\n        if (deleteFromLineNumber > endLineNumber) {\r\n            // deleted below the viewport\r\n            return null;\r\n        }\r\n        // Record what needs to be deleted\r\n        let deleteStartIndex = 0;\r\n        let deleteCount = 0;\r\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            const lineIndex = lineNumber - this._rendLineNumberStart;\r\n            if (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\r\n                // this is a line to be deleted\r\n                if (deleteCount === 0) {\r\n                    // this is the first line to be deleted\r\n                    deleteStartIndex = lineIndex;\r\n                    deleteCount = 1;\r\n                }\r\n                else {\r\n                    deleteCount++;\r\n                }\r\n            }\r\n        }\r\n        // Adjust this._rendLineNumberStart for lines deleted above\r\n        if (deleteFromLineNumber < startLineNumber) {\r\n            // Something was deleted above\r\n            let deleteAboveCount = 0;\r\n            if (deleteToLineNumber < startLineNumber) {\r\n                // the entire deleted lines are above\r\n                deleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\r\n            }\r\n            else {\r\n                deleteAboveCount = startLineNumber - deleteFromLineNumber;\r\n            }\r\n            this._rendLineNumberStart -= deleteAboveCount;\r\n        }\r\n        const deleted = this._lines.splice(deleteStartIndex, deleteCount);\r\n        return deleted;\r\n    }\r\n    onLinesChanged(changeFromLineNumber, changeToLineNumber) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return false;\r\n        }\r\n        const startLineNumber = this.getStartLineNumber();\r\n        const endLineNumber = this.getEndLineNumber();\r\n        let someoneNotified = false;\r\n        for (let changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\r\n            if (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\r\n                // Notify the line\r\n                this._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\r\n                someoneNotified = true;\r\n            }\r\n        }\r\n        return someoneNotified;\r\n    }\r\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return null;\r\n        }\r\n        const insertCnt = insertToLineNumber - insertFromLineNumber + 1;\r\n        const startLineNumber = this.getStartLineNumber();\r\n        const endLineNumber = this.getEndLineNumber();\r\n        if (insertFromLineNumber <= startLineNumber) {\r\n            // inserting above the viewport\r\n            this._rendLineNumberStart += insertCnt;\r\n            return null;\r\n        }\r\n        if (insertFromLineNumber > endLineNumber) {\r\n            // inserting below the viewport\r\n            return null;\r\n        }\r\n        if (insertCnt + insertFromLineNumber > endLineNumber) {\r\n            // insert inside the viewport in such a way that all remaining lines are pushed outside\r\n            const deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\r\n            return deleted;\r\n        }\r\n        // insert inside the viewport, push out some lines, but not all remaining lines\r\n        const newLines = [];\r\n        for (let i = 0; i < insertCnt; i++) {\r\n            newLines[i] = this._createLine();\r\n        }\r\n        const insertIndex = insertFromLineNumber - this._rendLineNumberStart;\r\n        const beforeLines = this._lines.slice(0, insertIndex);\r\n        const afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\r\n        const deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\r\n        this._lines = beforeLines.concat(newLines).concat(afterLines);\r\n        return deletedLines;\r\n    }\r\n    onTokensChanged(ranges) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return false;\r\n        }\r\n        const startLineNumber = this.getStartLineNumber();\r\n        const endLineNumber = this.getEndLineNumber();\r\n        let notifiedSomeone = false;\r\n        for (let i = 0, len = ranges.length; i < len; i++) {\r\n            const rng = ranges[i];\r\n            if (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\r\n                // range outside viewport\r\n                continue;\r\n            }\r\n            const from = Math.max(startLineNumber, rng.fromLineNumber);\r\n            const to = Math.min(endLineNumber, rng.toLineNumber);\r\n            for (let lineNumber = from; lineNumber <= to; lineNumber++) {\r\n                const lineIndex = lineNumber - this._rendLineNumberStart;\r\n                this._lines[lineIndex].onTokensChanged();\r\n                notifiedSomeone = true;\r\n            }\r\n        }\r\n        return notifiedSomeone;\r\n    }\r\n}\r\nexport class VisibleLinesCollection {\r\n    constructor(host) {\r\n        this._host = host;\r\n        this.domNode = this._createDomNode();\r\n        this._linesCollection = new RenderedLinesCollection(() => this._host.createVisibleLine());\r\n    }\r\n    _createDomNode() {\r\n        const domNode = createFastDomNode(document.createElement('div'));\r\n        domNode.setClassName('view-layer');\r\n        domNode.setPosition('absolute');\r\n        domNode.domNode.setAttribute('role', 'presentation');\r\n        domNode.domNode.setAttribute('aria-hidden', 'true');\r\n        return domNode;\r\n    }\r\n    // ---- begin view event handlers\r\n    onConfigurationChanged(e) {\r\n        if (e.hasChanged(124 /* layoutInfo */)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    onFlushed(e) {\r\n        this._linesCollection.flush();\r\n        // No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return this._linesCollection.onLinesChanged(e.fromLineNumber, e.toLineNumber);\r\n    }\r\n    onLinesDeleted(e) {\r\n        const deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\r\n        if (deleted) {\r\n            // Remove from DOM\r\n            for (let i = 0, len = deleted.length; i < len; i++) {\r\n                const lineDomNode = deleted[i].getDomNode();\r\n                if (lineDomNode) {\r\n                    this.domNode.domNode.removeChild(lineDomNode);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        const deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\r\n        if (deleted) {\r\n            // Remove from DOM\r\n            for (let i = 0, len = deleted.length; i < len; i++) {\r\n                const lineDomNode = deleted[i].getDomNode();\r\n                if (lineDomNode) {\r\n                    this.domNode.domNode.removeChild(lineDomNode);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return e.scrollTopChanged;\r\n    }\r\n    onTokensChanged(e) {\r\n        return this._linesCollection.onTokensChanged(e.ranges);\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    // ---- end view event handlers\r\n    getStartLineNumber() {\r\n        return this._linesCollection.getStartLineNumber();\r\n    }\r\n    getEndLineNumber() {\r\n        return this._linesCollection.getEndLineNumber();\r\n    }\r\n    getVisibleLine(lineNumber) {\r\n        return this._linesCollection.getLine(lineNumber);\r\n    }\r\n    renderLines(viewportData) {\r\n        const inp = this._linesCollection._get();\r\n        const renderer = new ViewLayerRenderer(this.domNode.domNode, this._host, viewportData);\r\n        const ctx = {\r\n            rendLineNumberStart: inp.rendLineNumberStart,\r\n            lines: inp.lines,\r\n            linesLength: inp.lines.length\r\n        };\r\n        // Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\r\n        const resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\r\n        this._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\r\n    }\r\n}\r\nclass ViewLayerRenderer {\r\n    constructor(domNode, host, viewportData) {\r\n        this.domNode = domNode;\r\n        this.host = host;\r\n        this.viewportData = viewportData;\r\n    }\r\n    render(inContext, startLineNumber, stopLineNumber, deltaTop) {\r\n        const ctx = {\r\n            rendLineNumberStart: inContext.rendLineNumberStart,\r\n            lines: inContext.lines.slice(0),\r\n            linesLength: inContext.linesLength\r\n        };\r\n        if ((ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber) || (stopLineNumber < ctx.rendLineNumberStart)) {\r\n            // There is no overlap whatsoever\r\n            ctx.rendLineNumberStart = startLineNumber;\r\n            ctx.linesLength = stopLineNumber - startLineNumber + 1;\r\n            ctx.lines = [];\r\n            for (let x = startLineNumber; x <= stopLineNumber; x++) {\r\n                ctx.lines[x - startLineNumber] = this.host.createVisibleLine();\r\n            }\r\n            this._finishRendering(ctx, true, deltaTop);\r\n            return ctx;\r\n        }\r\n        // Update lines which will remain untouched\r\n        this._renderUntouchedLines(ctx, Math.max(startLineNumber - ctx.rendLineNumberStart, 0), Math.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1), deltaTop, startLineNumber);\r\n        if (ctx.rendLineNumberStart > startLineNumber) {\r\n            // Insert lines before\r\n            const fromLineNumber = startLineNumber;\r\n            const toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\r\n            if (fromLineNumber <= toLineNumber) {\r\n                this._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\r\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\r\n            }\r\n        }\r\n        else if (ctx.rendLineNumberStart < startLineNumber) {\r\n            // Remove lines before\r\n            const removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\r\n            if (removeCnt > 0) {\r\n                this._removeLinesBefore(ctx, removeCnt);\r\n                ctx.linesLength -= removeCnt;\r\n            }\r\n        }\r\n        ctx.rendLineNumberStart = startLineNumber;\r\n        if (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\r\n            // Insert lines after\r\n            const fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\r\n            const toLineNumber = stopLineNumber;\r\n            if (fromLineNumber <= toLineNumber) {\r\n                this._insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\r\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\r\n            }\r\n        }\r\n        else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\r\n            // Remove lines after\r\n            const fromLineNumber = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\r\n            const toLineNumber = ctx.linesLength - 1;\r\n            const removeCnt = toLineNumber - fromLineNumber + 1;\r\n            if (removeCnt > 0) {\r\n                this._removeLinesAfter(ctx, removeCnt);\r\n                ctx.linesLength -= removeCnt;\r\n            }\r\n        }\r\n        this._finishRendering(ctx, false, deltaTop);\r\n        return ctx;\r\n    }\r\n    _renderUntouchedLines(ctx, startIndex, endIndex, deltaTop, deltaLN) {\r\n        const rendLineNumberStart = ctx.rendLineNumberStart;\r\n        const lines = ctx.lines;\r\n        for (let i = startIndex; i <= endIndex; i++) {\r\n            const lineNumber = rendLineNumberStart + i;\r\n            lines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN]);\r\n        }\r\n    }\r\n    _insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\r\n        const newLines = [];\r\n        let newLinesLen = 0;\r\n        for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\r\n            newLines[newLinesLen++] = this.host.createVisibleLine();\r\n        }\r\n        ctx.lines = newLines.concat(ctx.lines);\r\n    }\r\n    _removeLinesBefore(ctx, removeCount) {\r\n        for (let i = 0; i < removeCount; i++) {\r\n            const lineDomNode = ctx.lines[i].getDomNode();\r\n            if (lineDomNode) {\r\n                this.domNode.removeChild(lineDomNode);\r\n            }\r\n        }\r\n        ctx.lines.splice(0, removeCount);\r\n    }\r\n    _insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\r\n        const newLines = [];\r\n        let newLinesLen = 0;\r\n        for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\r\n            newLines[newLinesLen++] = this.host.createVisibleLine();\r\n        }\r\n        ctx.lines = ctx.lines.concat(newLines);\r\n    }\r\n    _removeLinesAfter(ctx, removeCount) {\r\n        const removeIndex = ctx.linesLength - removeCount;\r\n        for (let i = 0; i < removeCount; i++) {\r\n            const lineDomNode = ctx.lines[removeIndex + i].getDomNode();\r\n            if (lineDomNode) {\r\n                this.domNode.removeChild(lineDomNode);\r\n            }\r\n        }\r\n        ctx.lines.splice(removeIndex, removeCount);\r\n    }\r\n    _finishRenderingNewLines(ctx, domNodeIsEmpty, newLinesHTML, wasNew) {\r\n        if (ViewLayerRenderer._ttPolicy) {\r\n            newLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(newLinesHTML);\r\n        }\r\n        const lastChild = this.domNode.lastChild;\r\n        if (domNodeIsEmpty || !lastChild) {\r\n            this.domNode.innerHTML = newLinesHTML; // explains the ugly casts -> https://github.com/microsoft/vscode/issues/106396#issuecomment-692625393;\r\n        }\r\n        else {\r\n            lastChild.insertAdjacentHTML('afterend', newLinesHTML);\r\n        }\r\n        let currChild = this.domNode.lastChild;\r\n        for (let i = ctx.linesLength - 1; i >= 0; i--) {\r\n            const line = ctx.lines[i];\r\n            if (wasNew[i]) {\r\n                line.setDomNode(currChild);\r\n                currChild = currChild.previousSibling;\r\n            }\r\n        }\r\n    }\r\n    _finishRenderingInvalidLines(ctx, invalidLinesHTML, wasInvalid) {\r\n        const hugeDomNode = document.createElement('div');\r\n        if (ViewLayerRenderer._ttPolicy) {\r\n            invalidLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(invalidLinesHTML);\r\n        }\r\n        hugeDomNode.innerHTML = invalidLinesHTML;\r\n        for (let i = 0; i < ctx.linesLength; i++) {\r\n            const line = ctx.lines[i];\r\n            if (wasInvalid[i]) {\r\n                const source = hugeDomNode.firstChild;\r\n                const lineDomNode = line.getDomNode();\r\n                lineDomNode.parentNode.replaceChild(source, lineDomNode);\r\n                line.setDomNode(source);\r\n            }\r\n        }\r\n    }\r\n    _finishRendering(ctx, domNodeIsEmpty, deltaTop) {\r\n        const sb = ViewLayerRenderer._sb;\r\n        const linesLength = ctx.linesLength;\r\n        const lines = ctx.lines;\r\n        const rendLineNumberStart = ctx.rendLineNumberStart;\r\n        const wasNew = [];\r\n        {\r\n            sb.reset();\r\n            let hadNewLine = false;\r\n            for (let i = 0; i < linesLength; i++) {\r\n                const line = lines[i];\r\n                wasNew[i] = false;\r\n                const lineDomNode = line.getDomNode();\r\n                if (lineDomNode) {\r\n                    // line is not new\r\n                    continue;\r\n                }\r\n                const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\r\n                if (!renderResult) {\r\n                    // line does not need rendering\r\n                    continue;\r\n                }\r\n                wasNew[i] = true;\r\n                hadNewLine = true;\r\n            }\r\n            if (hadNewLine) {\r\n                this._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\r\n            }\r\n        }\r\n        {\r\n            sb.reset();\r\n            let hadInvalidLine = false;\r\n            const wasInvalid = [];\r\n            for (let i = 0; i < linesLength; i++) {\r\n                const line = lines[i];\r\n                wasInvalid[i] = false;\r\n                if (wasNew[i]) {\r\n                    // line was new\r\n                    continue;\r\n                }\r\n                const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\r\n                if (!renderResult) {\r\n                    // line does not need rendering\r\n                    continue;\r\n                }\r\n                wasInvalid[i] = true;\r\n                hadInvalidLine = true;\r\n            }\r\n            if (hadInvalidLine) {\r\n                this._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\r\n            }\r\n        }\r\n    }\r\n}\r\nViewLayerRenderer._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('editorViewLayer', { createHTML: value => value });\r\nViewLayerRenderer._sb = createStringBuilder(100000);\r\n"]},"metadata":{},"sourceType":"module"}