{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { toUint8 } from '../../../base/common/uint.js';\n/**\r\n * A fast character classifier that uses a compact array for ASCII values.\r\n */\n\nexport var CharacterClassifier = /*#__PURE__*/function () {\n  function CharacterClassifier(_defaultValue) {\n    _classCallCheck(this, CharacterClassifier);\n\n    var defaultValue = toUint8(_defaultValue);\n    this._defaultValue = defaultValue;\n    this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n    this._map = new Map();\n  }\n\n  _createClass(CharacterClassifier, [{\n    key: \"set\",\n    value: function set(charCode, _value) {\n      var value = toUint8(_value);\n\n      if (charCode >= 0 && charCode < 256) {\n        this._asciiMap[charCode] = value;\n      } else {\n        this._map.set(charCode, value);\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get(charCode) {\n      if (charCode >= 0 && charCode < 256) {\n        return this._asciiMap[charCode];\n      } else {\n        return this._map.get(charCode) || this._defaultValue;\n      }\n    }\n  }], [{\n    key: \"_createAsciiMap\",\n    value: function _createAsciiMap(defaultValue) {\n      var asciiMap = new Uint8Array(256);\n\n      for (var i = 0; i < 256; i++) {\n        asciiMap[i] = defaultValue;\n      }\n\n      return asciiMap;\n    }\n  }]);\n\n  return CharacterClassifier;\n}();\nexport var CharacterSet = /*#__PURE__*/function () {\n  function CharacterSet() {\n    _classCallCheck(this, CharacterSet);\n\n    this._actual = new CharacterClassifier(0\n    /* False */\n    );\n  }\n\n  _createClass(CharacterSet, [{\n    key: \"add\",\n    value: function add(charCode) {\n      this._actual.set(charCode, 1\n      /* True */\n      );\n    }\n  }, {\n    key: \"has\",\n    value: function has(charCode) {\n      return this._actual.get(charCode) === 1\n      /* True */\n      ;\n    }\n  }]);\n\n  return CharacterSet;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js"],"names":["toUint8","CharacterClassifier","_defaultValue","defaultValue","_asciiMap","_createAsciiMap","_map","Map","charCode","_value","value","set","get","asciiMap","Uint8Array","i","CharacterSet","_actual"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,8BAAxB;AACA;AACA;AACA;;AACA,WAAaC,mBAAb;AACI,+BAAYC,aAAZ,EAA2B;AAAA;;AACvB,QAAIC,YAAY,GAAGH,OAAO,CAACE,aAAD,CAA1B;AACA,SAAKA,aAAL,GAAqBC,YAArB;AACA,SAAKC,SAAL,GAAiBH,mBAAmB,CAACI,eAApB,CAAoCF,YAApC,CAAjB;AACA,SAAKG,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACH;;AANL;AAAA;AAAA,wBAcQC,QAdR,EAckBC,MAdlB,EAc0B;AAClB,UAAIC,KAAK,GAAGV,OAAO,CAACS,MAAD,CAAnB;;AACA,UAAID,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,GAAG,GAAhC,EAAqC;AACjC,aAAKJ,SAAL,CAAeI,QAAf,IAA2BE,KAA3B;AACH,OAFD,MAGK;AACD,aAAKJ,IAAL,CAAUK,GAAV,CAAcH,QAAd,EAAwBE,KAAxB;AACH;AACJ;AAtBL;AAAA;AAAA,wBAuBQF,QAvBR,EAuBkB;AACV,UAAIA,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,GAAG,GAAhC,EAAqC;AACjC,eAAO,KAAKJ,SAAL,CAAeI,QAAf,CAAP;AACH,OAFD,MAGK;AACD,eAAQ,KAAKF,IAAL,CAAUM,GAAV,CAAcJ,QAAd,KAA2B,KAAKN,aAAxC;AACH;AACJ;AA9BL;AAAA;AAAA,oCAO2BC,YAP3B,EAOyC;AACjC,UAAIU,QAAQ,GAAG,IAAIC,UAAJ,CAAe,GAAf,CAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BF,QAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcZ,YAAd;AACH;;AACD,aAAOU,QAAP;AACH;AAbL;;AAAA;AAAA;AAgCA,WAAaG,YAAb;AACI,0BAAc;AAAA;;AACV,SAAKC,OAAL,GAAe,IAAIhB,mBAAJ,CAAwB;AAAE;AAA1B,KAAf;AACH;;AAHL;AAAA;AAAA,wBAIQO,QAJR,EAIkB;AACV,WAAKS,OAAL,CAAaN,GAAb,CAAiBH,QAAjB,EAA2B;AAAE;AAA7B;AACH;AANL;AAAA;AAAA,wBAOQA,QAPR,EAOkB;AACV,aAAQ,KAAKS,OAAL,CAAaL,GAAb,CAAiBJ,QAAjB,MAA+B;AAAE;AAAzC;AACH;AATL;;AAAA;AAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { toUint8 } from '../../../base/common/uint.js';\r\n/**\r\n * A fast character classifier that uses a compact array for ASCII values.\r\n */\r\nexport class CharacterClassifier {\r\n    constructor(_defaultValue) {\r\n        let defaultValue = toUint8(_defaultValue);\r\n        this._defaultValue = defaultValue;\r\n        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\r\n        this._map = new Map();\r\n    }\r\n    static _createAsciiMap(defaultValue) {\r\n        let asciiMap = new Uint8Array(256);\r\n        for (let i = 0; i < 256; i++) {\r\n            asciiMap[i] = defaultValue;\r\n        }\r\n        return asciiMap;\r\n    }\r\n    set(charCode, _value) {\r\n        let value = toUint8(_value);\r\n        if (charCode >= 0 && charCode < 256) {\r\n            this._asciiMap[charCode] = value;\r\n        }\r\n        else {\r\n            this._map.set(charCode, value);\r\n        }\r\n    }\r\n    get(charCode) {\r\n        if (charCode >= 0 && charCode < 256) {\r\n            return this._asciiMap[charCode];\r\n        }\r\n        else {\r\n            return (this._map.get(charCode) || this._defaultValue);\r\n        }\r\n    }\r\n}\r\nexport class CharacterSet {\r\n    constructor() {\r\n        this._actual = new CharacterClassifier(0 /* False */);\r\n    }\r\n    add(charCode) {\r\n        this._actual.set(charCode, 1 /* True */);\r\n    }\r\n    has(charCode) {\r\n        return (this._actual.get(charCode) === 1 /* True */);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}