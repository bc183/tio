{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from '../../registry/common/platform.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js'; // color registry\n\nexport var Extensions = {\n  ColorContribution: 'base.contributions.colors'\n};\n\nvar ColorRegistry = /*#__PURE__*/function () {\n  function ColorRegistry() {\n    _classCallCheck(this, ColorRegistry);\n\n    this._onDidChangeSchema = new Emitter();\n    this.onDidChangeSchema = this._onDidChangeSchema.event;\n    this.colorSchema = {\n      type: 'object',\n      properties: {}\n    };\n    this.colorReferenceSchema = {\n      type: 'string',\n      \"enum\": [],\n      enumDescriptions: []\n    };\n    this.colorsById = {};\n  }\n\n  _createClass(ColorRegistry, [{\n    key: \"registerColor\",\n    value: function registerColor(id, defaults, description) {\n      var needsTransparency = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var deprecationMessage = arguments.length > 4 ? arguments[4] : undefined;\n      var colorContribution = {\n        id: id,\n        description: description,\n        defaults: defaults,\n        needsTransparency: needsTransparency,\n        deprecationMessage: deprecationMessage\n      };\n      this.colorsById[id] = colorContribution;\n      var propertySchema = {\n        type: 'string',\n        description: description,\n        format: 'color-hex',\n        defaultSnippets: [{\n          body: '${1:#ff0000}'\n        }]\n      };\n\n      if (deprecationMessage) {\n        propertySchema.deprecationMessage = deprecationMessage;\n      }\n\n      this.colorSchema.properties[id] = propertySchema;\n      this.colorReferenceSchema[\"enum\"].push(id);\n      this.colorReferenceSchema.enumDescriptions.push(description);\n\n      this._onDidChangeSchema.fire();\n\n      return id;\n    }\n  }, {\n    key: \"resolveDefaultColor\",\n    value: function resolveDefaultColor(id, theme) {\n      var colorDesc = this.colorsById[id];\n\n      if (colorDesc && colorDesc.defaults) {\n        var colorValue = colorDesc.defaults[theme.type];\n        return resolveColorValue(colorValue, theme);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getColorSchema\",\n    value: function getColorSchema() {\n      return this.colorSchema;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this = this;\n\n      var sorter = function sorter(a, b) {\n        var cat1 = a.indexOf('.') === -1 ? 0 : 1;\n        var cat2 = b.indexOf('.') === -1 ? 0 : 1;\n\n        if (cat1 !== cat2) {\n          return cat1 - cat2;\n        }\n\n        return a.localeCompare(b);\n      };\n\n      return Object.keys(this.colorsById).sort(sorter).map(function (k) {\n        return \"- `\".concat(k, \"`: \").concat(_this.colorsById[k].description);\n      }).join('\\n');\n    }\n  }]);\n\n  return ColorRegistry;\n}();\n\nvar colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n  return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n} // ----- base colors\n\nexport var foreground = registerColor('foreground', {\n  dark: '#CCCCCC',\n  light: '#616161',\n  hc: '#FFFFFF'\n}, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport var errorForeground = registerColor('errorForeground', {\n  dark: '#F48771',\n  light: '#A1260D',\n  hc: '#F48771'\n}, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport var iconForeground = registerColor('icon.foreground', {\n  dark: '#C5C5C5',\n  light: '#424242',\n  hc: '#FFFFFF'\n}, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport var focusBorder = registerColor('focusBorder', {\n  dark: '#007FD4',\n  light: '#0090F1',\n  hc: '#F38518'\n}, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport var contrastBorder = registerColor('contrastBorder', {\n  light: null,\n  dark: null,\n  hc: '#6FC3DF'\n}, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport var activeContrastBorder = registerColor('contrastActiveBorder', {\n  light: null,\n  dark: null,\n  hc: focusBorder\n}, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport var textLinkForeground = registerColor('textLink.foreground', {\n  light: '#006AB1',\n  dark: '#3794FF',\n  hc: '#3794FF'\n}, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport var textCodeBlockBackground = registerColor('textCodeBlock.background', {\n  light: '#dcdcdc66',\n  dark: '#0a0a0a66',\n  hc: Color.black\n}, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\")); // ----- widgets\n\nexport var widgetShadow = registerColor('widget.shadow', {\n  dark: transparent(Color.black, .36),\n  light: transparent(Color.black, .16),\n  hc: null\n}, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport var inputBackground = registerColor('input.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hc: Color.black\n}, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport var inputForeground = registerColor('input.foreground', {\n  dark: foreground,\n  light: foreground,\n  hc: foreground\n}, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport var inputBorder = registerColor('input.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport var inputActiveOptionBorder = registerColor('inputOption.activeBorder', {\n  dark: '#007ACC00',\n  light: '#007ACC00',\n  hc: contrastBorder\n}, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport var inputActiveOptionBackground = registerColor('inputOption.activeBackground', {\n  dark: transparent(focusBorder, 0.4),\n  light: transparent(focusBorder, 0.2),\n  hc: Color.transparent\n}, nls.localize('inputOption.activeBackground', \"Background color of activated options in input fields.\"));\nexport var inputActiveOptionForeground = registerColor('inputOption.activeForeground', {\n  dark: Color.white,\n  light: Color.black,\n  hc: null\n}, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport var inputValidationInfoBackground = registerColor('inputValidation.infoBackground', {\n  dark: '#063B49',\n  light: '#D6ECF2',\n  hc: Color.black\n}, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport var inputValidationInfoForeground = registerColor('inputValidation.infoForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport var inputValidationInfoBorder = registerColor('inputValidation.infoBorder', {\n  dark: '#007acc',\n  light: '#007acc',\n  hc: contrastBorder\n}, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport var inputValidationWarningBackground = registerColor('inputValidation.warningBackground', {\n  dark: '#352A05',\n  light: '#F6F5D2',\n  hc: Color.black\n}, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport var inputValidationWarningForeground = registerColor('inputValidation.warningForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport var inputValidationWarningBorder = registerColor('inputValidation.warningBorder', {\n  dark: '#B89500',\n  light: '#B89500',\n  hc: contrastBorder\n}, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport var inputValidationErrorBackground = registerColor('inputValidation.errorBackground', {\n  dark: '#5A1D1D',\n  light: '#F2DEDE',\n  hc: Color.black\n}, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport var inputValidationErrorForeground = registerColor('inputValidation.errorForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport var inputValidationErrorBorder = registerColor('inputValidation.errorBorder', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hc: contrastBorder\n}, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexport var selectBackground = registerColor('dropdown.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hc: Color.black\n}, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport var selectForeground = registerColor('dropdown.foreground', {\n  dark: '#F0F0F0',\n  light: null,\n  hc: Color.white\n}, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport var buttonForeground = registerColor('button.foreground', {\n  dark: Color.white,\n  light: Color.white,\n  hc: Color.white\n}, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport var buttonBackground = registerColor('button.background', {\n  dark: '#0E639C',\n  light: '#007ACC',\n  hc: null\n}, nls.localize('buttonBackground', \"Button background color.\"));\nexport var buttonHoverBackground = registerColor('button.hoverBackground', {\n  dark: lighten(buttonBackground, 0.2),\n  light: darken(buttonBackground, 0.2),\n  hc: null\n}, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport var badgeBackground = registerColor('badge.background', {\n  dark: '#4D4D4D',\n  light: '#C4C4C4',\n  hc: Color.black\n}, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport var badgeForeground = registerColor('badge.foreground', {\n  dark: Color.white,\n  light: '#333',\n  hc: Color.white\n}, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexport var scrollbarShadow = registerColor('scrollbar.shadow', {\n  dark: '#000000',\n  light: '#DDDDDD',\n  hc: null\n}, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport var scrollbarSliderBackground = registerColor('scrollbarSlider.background', {\n  dark: Color.fromHex('#797979').transparent(0.4),\n  light: Color.fromHex('#646464').transparent(0.4),\n  hc: transparent(contrastBorder, 0.6)\n}, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport var scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', {\n  dark: Color.fromHex('#646464').transparent(0.7),\n  light: Color.fromHex('#646464').transparent(0.7),\n  hc: transparent(contrastBorder, 0.8)\n}, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport var scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', {\n  dark: Color.fromHex('#BFBFBF').transparent(0.4),\n  light: Color.fromHex('#000000').transparent(0.6),\n  hc: contrastBorder\n}, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexport var progressBarBackground = registerColor('progressBar.background', {\n  dark: Color.fromHex('#0E70C0'),\n  light: Color.fromHex('#0E70C0'),\n  hc: contrastBorder\n}, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexport var editorErrorBackground = registerColor('editorError.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorErrorForeground = registerColor('editorError.foreground', {\n  dark: '#F48771',\n  light: '#E51400',\n  hc: null\n}, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport var editorErrorBorder = registerColor('editorError.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#E47777').transparent(0.8)\n}, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));\nexport var editorWarningBackground = registerColor('editorWarning.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorWarningForeground = registerColor('editorWarning.foreground', {\n  dark: '#CCA700',\n  light: '#E9A700',\n  hc: null\n}, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport var editorWarningBorder = registerColor('editorWarning.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#FFCC00').transparent(0.8)\n}, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));\nexport var editorInfoBackground = registerColor('editorInfo.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorInfoForeground = registerColor('editorInfo.foreground', {\n  dark: '#75BEFF',\n  light: '#75BEFF',\n  hc: null\n}, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport var editorInfoBorder = registerColor('editorInfo.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#75BEFF').transparent(0.8)\n}, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));\nexport var editorHintForeground = registerColor('editorHint.foreground', {\n  dark: Color.fromHex('#eeeeee').transparent(0.7),\n  light: '#6c6c6c',\n  hc: null\n}, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport var editorHintBorder = registerColor('editorHint.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#eeeeee').transparent(0.8)\n}, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));\n/**\r\n * Editor background color.\r\n * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254\r\n * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.\r\n */\n\nexport var editorBackground = registerColor('editor.background', {\n  light: '#fffffe',\n  dark: '#1E1E1E',\n  hc: Color.black\n}, nls.localize('editorBackground', \"Editor background color.\"));\n/**\r\n * Editor foreground color.\r\n */\n\nexport var editorForeground = registerColor('editor.foreground', {\n  light: '#333333',\n  dark: '#BBBBBB',\n  hc: Color.white\n}, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\r\n * Editor widgets\r\n */\n\nexport var editorWidgetBackground = registerColor('editorWidget.background', {\n  dark: '#252526',\n  light: '#F3F3F3',\n  hc: '#0C141F'\n}, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport var editorWidgetForeground = registerColor('editorWidget.foreground', {\n  dark: foreground,\n  light: foreground,\n  hc: foreground\n}, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport var editorWidgetBorder = registerColor('editorWidget.border', {\n  dark: '#454545',\n  light: '#C8C8C8',\n  hc: contrastBorder\n}, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport var editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', {\n  light: null,\n  dark: null,\n  hc: null\n}, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\r\n * Quick pick widget\r\n */\n\nexport var quickInputBackground = registerColor('quickInput.background', {\n  dark: editorWidgetBackground,\n  light: editorWidgetBackground,\n  hc: editorWidgetBackground\n}, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport var quickInputForeground = registerColor('quickInput.foreground', {\n  dark: editorWidgetForeground,\n  light: editorWidgetForeground,\n  hc: editorWidgetForeground\n}, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport var quickInputTitleBackground = registerColor('quickInputTitle.background', {\n  dark: new Color(new RGBA(255, 255, 255, 0.105)),\n  light: new Color(new RGBA(0, 0, 0, 0.06)),\n  hc: '#000000'\n}, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport var pickerGroupForeground = registerColor('pickerGroup.foreground', {\n  dark: '#3794FF',\n  light: '#0066BF',\n  hc: Color.white\n}, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport var pickerGroupBorder = registerColor('pickerGroup.border', {\n  dark: '#3F3F46',\n  light: '#CCCEDB',\n  hc: Color.white\n}, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\n/**\r\n * Editor selection colors.\r\n */\n\nexport var editorSelectionBackground = registerColor('editor.selectionBackground', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hc: '#f3f518'\n}, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport var editorSelectionForeground = registerColor('editor.selectionForeground', {\n  light: null,\n  dark: null,\n  hc: '#000000'\n}, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport var editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', {\n  light: transparent(editorSelectionBackground, 0.5),\n  dark: transparent(editorSelectionBackground, 0.5),\n  hc: transparent(editorSelectionBackground, 0.5)\n}, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport var editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', {\n  light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  hc: null\n}, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\r\n * Editor find match colors.\r\n */\n\nexport var editorFindMatch = registerColor('editor.findMatchBackground', {\n  light: '#A8AC94',\n  dark: '#515C6A',\n  hc: null\n}, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport var editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', {\n  light: '#EA5C0055',\n  dark: '#EA5C0055',\n  hc: null\n}, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport var editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', {\n  dark: '#3a3d4166',\n  light: '#b4b4b44d',\n  hc: null\n}, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport var editorFindMatchBorder = registerColor('editor.findMatchBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport var editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport var editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', {\n  dark: null,\n  light: null,\n  hc: transparent(activeContrastBorder, 0.4)\n}, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\r\n * Editor hover\r\n */\n\nexport var editorHoverHighlight = registerColor('editor.hoverHighlightBackground', {\n  light: '#ADD6FF26',\n  dark: '#264f7840',\n  hc: '#ADD6FF26'\n}, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorHoverBackground = registerColor('editorHoverWidget.background', {\n  light: editorWidgetBackground,\n  dark: editorWidgetBackground,\n  hc: editorWidgetBackground\n}, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport var editorHoverForeground = registerColor('editorHoverWidget.foreground', {\n  light: editorWidgetForeground,\n  dark: editorWidgetForeground,\n  hc: editorWidgetForeground\n}, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport var editorHoverBorder = registerColor('editorHoverWidget.border', {\n  light: editorWidgetBorder,\n  dark: editorWidgetBorder,\n  hc: editorWidgetBorder\n}, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport var editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', {\n  dark: lighten(editorHoverBackground, 0.2),\n  light: darken(editorHoverBackground, 0.05),\n  hc: editorWidgetBackground\n}, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\r\n * Editor link colors\r\n */\n\nexport var editorActiveLinkForeground = registerColor('editorLink.activeForeground', {\n  dark: '#4E94CE',\n  light: Color.blue,\n  hc: Color.cyan\n}, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\r\n * Inline hints\r\n */\n\nexport var editorInlineHintForeground = registerColor('editorInlineHint.foreground', {\n  dark: editorWidgetBackground,\n  light: editorWidgetForeground,\n  hc: editorWidgetBackground\n}, nls.localize('editorInlineHintForeground', 'Foreground color of inline hints'));\nexport var editorInlineHintBackground = registerColor('editorInlineHint.background', {\n  dark: editorWidgetForeground,\n  light: editorWidgetBackground,\n  hc: editorWidgetForeground\n}, nls.localize('editorInlineHintBackground', 'Background color of inline hints'));\n/**\r\n * Editor lighbulb icon colors\r\n */\n\nexport var editorLightBulbForeground = registerColor('editorLightBulb.foreground', {\n  dark: '#FFCC00',\n  light: '#DDB100',\n  hc: '#FFCC00'\n}, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport var editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', {\n  dark: '#75BEFF',\n  light: '#007ACC',\n  hc: '#75BEFF'\n}, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\n/**\r\n * Diff Editor Colors\r\n */\n\nexport var defaultInsertColor = new Color(new RGBA(155, 185, 85, 0.2));\nexport var defaultRemoveColor = new Color(new RGBA(255, 0, 0, 0.2));\nexport var diffInserted = registerColor('diffEditor.insertedTextBackground', {\n  dark: defaultInsertColor,\n  light: defaultInsertColor,\n  hc: null\n}, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var diffRemoved = registerColor('diffEditor.removedTextBackground', {\n  dark: defaultRemoveColor,\n  light: defaultRemoveColor,\n  hc: null\n}, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', {\n  dark: null,\n  light: null,\n  hc: '#33ff2eff'\n}, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport var diffRemovedOutline = registerColor('diffEditor.removedTextBorder', {\n  dark: null,\n  light: null,\n  hc: '#FF008F'\n}, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport var diffBorder = registerColor('diffEditor.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport var diffDiagonalFill = registerColor('diffEditor.diagonalFill', {\n  dark: '#cccccc33',\n  light: '#22222233',\n  hc: null\n}, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\n/**\r\n * List and tree colors\r\n */\n\nexport var listFocusBackground = registerColor('list.focusBackground', {\n  dark: '#062F4A',\n  light: '#D6EBFF',\n  hc: null\n}, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listFocusForeground = registerColor('list.focusForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listActiveSelectionBackground = registerColor('list.activeSelectionBackground', {\n  dark: '#094771',\n  light: '#0060C0',\n  hc: null\n}, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listActiveSelectionForeground = registerColor('list.activeSelectionForeground', {\n  dark: Color.white,\n  light: Color.white,\n  hc: null\n}, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', {\n  dark: '#37373D',\n  light: '#E4E6F1',\n  hc: null\n}, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listHoverBackground = registerColor('list.hoverBackground', {\n  dark: '#2A2D2E',\n  light: '#F0F0F0',\n  hc: null\n}, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport var listHoverForeground = registerColor('list.hoverForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport var listDropBackground = registerColor('list.dropBackground', {\n  dark: listFocusBackground,\n  light: listFocusBackground,\n  hc: null\n}, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport var listHighlightForeground = registerColor('list.highlightForeground', {\n  dark: '#0097fb',\n  light: '#0066BF',\n  hc: focusBorder\n}, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport var listFilterWidgetBackground = registerColor('listFilterWidget.background', {\n  light: '#efc1ad',\n  dark: '#653723',\n  hc: Color.black\n}, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport var listFilterWidgetOutline = registerColor('listFilterWidget.outline', {\n  dark: Color.transparent,\n  light: Color.transparent,\n  hc: '#f38518'\n}, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport var listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hc: contrastBorder\n}, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport var treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', {\n  dark: '#585858',\n  light: '#a9a9a9',\n  hc: '#a9a9a9'\n}, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\n/**\r\n * Menu colors\r\n */\n\nexport var menuBorder = registerColor('menu.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('menuBorder', \"Border color of menus.\"));\nexport var menuForeground = registerColor('menu.foreground', {\n  dark: selectForeground,\n  light: foreground,\n  hc: selectForeground\n}, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport var menuBackground = registerColor('menu.background', {\n  dark: selectBackground,\n  light: selectBackground,\n  hc: selectBackground\n}, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport var menuSelectionForeground = registerColor('menu.selectionForeground', {\n  dark: listActiveSelectionForeground,\n  light: listActiveSelectionForeground,\n  hc: listActiveSelectionForeground\n}, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport var menuSelectionBackground = registerColor('menu.selectionBackground', {\n  dark: listActiveSelectionBackground,\n  light: listActiveSelectionBackground,\n  hc: listActiveSelectionBackground\n}, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport var menuSelectionBorder = registerColor('menu.selectionBorder', {\n  dark: null,\n  light: null,\n  hc: activeContrastBorder\n}, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport var menuSeparatorBackground = registerColor('menu.separatorBackground', {\n  dark: '#BBBBBB',\n  light: '#888888',\n  hc: contrastBorder\n}, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n/**\r\n * Snippet placeholder colors\r\n */\n\nexport var snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', {\n  dark: new Color(new RGBA(124, 124, 124, 0.3)),\n  light: new Color(new RGBA(10, 50, 100, 0.2)),\n  hc: new Color(new RGBA(124, 124, 124, 0.3))\n}, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport var snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport var snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport var snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', {\n  dark: '#525252',\n  light: new Color(new RGBA(10, 50, 100, 0.5)),\n  hc: '#525252'\n}, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\nexport var overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', {\n  dark: '#d186167e',\n  light: '#d186167e',\n  hc: '#AB5A00'\n}, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', {\n  dark: '#A0A0A0CC',\n  light: '#A0A0A0CC',\n  hc: '#A0A0A0CC'\n}, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var minimapFindMatch = registerColor('minimap.findMatchHighlight', {\n  light: '#d18616',\n  dark: '#d18616',\n  hc: '#AB5A00'\n}, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport var minimapSelection = registerColor('minimap.selectionHighlight', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hc: '#ffffff'\n}, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport var minimapError = registerColor('minimap.errorHighlight', {\n  dark: new Color(new RGBA(255, 18, 18, 0.7)),\n  light: new Color(new RGBA(255, 18, 18, 0.7)),\n  hc: new Color(new RGBA(255, 50, 50, 1))\n}, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport var minimapWarning = registerColor('minimap.warningHighlight', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hc: editorWarningBorder\n}, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport var minimapBackground = registerColor('minimap.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport var minimapSliderBackground = registerColor('minimapSlider.background', {\n  light: transparent(scrollbarSliderBackground, 0.5),\n  dark: transparent(scrollbarSliderBackground, 0.5),\n  hc: transparent(scrollbarSliderBackground, 0.5)\n}, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport var minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', {\n  light: transparent(scrollbarSliderHoverBackground, 0.5),\n  dark: transparent(scrollbarSliderHoverBackground, 0.5),\n  hc: transparent(scrollbarSliderHoverBackground, 0.5)\n}, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport var minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', {\n  light: transparent(scrollbarSliderActiveBackground, 0.5),\n  dark: transparent(scrollbarSliderActiveBackground, 0.5),\n  hc: transparent(scrollbarSliderActiveBackground, 0.5)\n}, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\nexport var problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', {\n  dark: editorErrorForeground,\n  light: editorErrorForeground,\n  hc: editorErrorForeground\n}, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport var problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hc: editorWarningForeground\n}, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport var problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', {\n  dark: editorInfoForeground,\n  light: editorInfoForeground,\n  hc: editorInfoForeground\n}, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\")); // ----- color functions\n\nexport function darken(colorValue, factor) {\n  return function (theme) {\n    var color = resolveColorValue(colorValue, theme);\n\n    if (color) {\n      return color.darken(factor);\n    }\n\n    return undefined;\n  };\n}\nexport function lighten(colorValue, factor) {\n  return function (theme) {\n    var color = resolveColorValue(colorValue, theme);\n\n    if (color) {\n      return color.lighten(factor);\n    }\n\n    return undefined;\n  };\n}\nexport function transparent(colorValue, factor) {\n  return function (theme) {\n    var color = resolveColorValue(colorValue, theme);\n\n    if (color) {\n      return color.transparent(factor);\n    }\n\n    return undefined;\n  };\n}\nexport function oneOf() {\n  for (var _len = arguments.length, colorValues = new Array(_len), _key = 0; _key < _len; _key++) {\n    colorValues[_key] = arguments[_key];\n  }\n\n  return function (theme) {\n    var _iterator = _createForOfIteratorHelper(colorValues),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var colorValue = _step.value;\n        var color = resolveColorValue(colorValue, theme);\n\n        if (color) {\n          return color;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return undefined;\n  };\n}\n\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n  return function (theme) {\n    var from = resolveColorValue(colorValue, theme);\n\n    if (from) {\n      var backgroundColor = resolveColorValue(backgroundColorValue, theme);\n\n      if (backgroundColor) {\n        if (from.isDarkerThan(backgroundColor)) {\n          return Color.getLighterColor(from, backgroundColor, factor).transparent(transparency);\n        }\n\n        return Color.getDarkerColor(from, backgroundColor, factor).transparent(transparency);\n      }\n\n      return from.transparent(factor * transparency);\n    }\n\n    return undefined;\n  };\n} // ----- implementation\n\n/**\r\n * @param colorValue Resolve a color value in the context of a theme\r\n */\n\n\nexport function resolveColorValue(colorValue, theme) {\n  if (colorValue === null) {\n    return undefined;\n  } else if (typeof colorValue === 'string') {\n    if (colorValue[0] === '#') {\n      return Color.fromHex(colorValue);\n    }\n\n    return theme.getColor(colorValue);\n  } else if (colorValue instanceof Color) {\n    return colorValue;\n  } else if (typeof colorValue === 'function') {\n    return colorValue(theme);\n  }\n\n  return undefined;\n}\nexport var workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nvar schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nvar delayer = new RunOnceScheduler(function () {\n  return schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId);\n}, 200);\ncolorRegistry.onDidChangeSchema(function () {\n  if (!delayer.isScheduled()) {\n    delayer.schedule();\n  }\n}); // setTimeout(_ => console.log(colorRegistry.toString()), 5000);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js"],"names":["platform","Color","RGBA","Emitter","nls","Extensions","JSONExtensions","RunOnceScheduler","ColorContribution","ColorRegistry","_onDidChangeSchema","onDidChangeSchema","event","colorSchema","type","properties","colorReferenceSchema","enumDescriptions","colorsById","id","defaults","description","needsTransparency","deprecationMessage","colorContribution","propertySchema","format","defaultSnippets","body","push","fire","theme","colorDesc","colorValue","resolveColorValue","undefined","sorter","a","b","cat1","indexOf","cat2","localeCompare","Object","keys","sort","map","k","join","colorRegistry","Registry","add","registerColor","foreground","dark","light","hc","localize","errorForeground","iconForeground","focusBorder","contrastBorder","activeContrastBorder","textLinkForeground","textCodeBlockBackground","black","widgetShadow","transparent","inputBackground","white","inputForeground","inputBorder","inputActiveOptionBorder","inputActiveOptionBackground","inputActiveOptionForeground","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationInfoBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationWarningBorder","inputValidationErrorBackground","inputValidationErrorForeground","inputValidationErrorBorder","selectBackground","selectForeground","buttonForeground","buttonBackground","buttonHoverBackground","lighten","darken","badgeBackground","badgeForeground","scrollbarShadow","scrollbarSliderBackground","fromHex","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","progressBarBackground","editorErrorBackground","editorErrorForeground","editorErrorBorder","editorWarningBackground","editorWarningForeground","editorWarningBorder","editorInfoBackground","editorInfoForeground","editorInfoBorder","editorHintForeground","editorHintBorder","editorBackground","editorForeground","editorWidgetBackground","editorWidgetForeground","editorWidgetBorder","editorWidgetResizeBorder","quickInputBackground","quickInputForeground","quickInputTitleBackground","pickerGroupForeground","pickerGroupBorder","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","lessProminent","editorSelectionHighlightBorder","editorFindMatch","editorFindMatchHighlight","editorFindRangeHighlight","editorFindMatchBorder","editorFindMatchHighlightBorder","editorFindRangeHighlightBorder","editorHoverHighlight","editorHoverBackground","editorHoverForeground","editorHoverBorder","editorHoverStatusBarBackground","editorActiveLinkForeground","blue","cyan","editorInlineHintForeground","editorInlineHintBackground","editorLightBulbForeground","editorLightBulbAutoFixForeground","defaultInsertColor","defaultRemoveColor","diffInserted","diffRemoved","diffInsertedOutline","diffRemovedOutline","diffBorder","diffDiagonalFill","listFocusBackground","listFocusForeground","listActiveSelectionBackground","listActiveSelectionForeground","listInactiveSelectionBackground","listInactiveSelectionForeground","listInactiveFocusBackground","listHoverBackground","listHoverForeground","listDropBackground","listHighlightForeground","listFilterWidgetBackground","listFilterWidgetOutline","listFilterWidgetNoMatchesOutline","treeIndentGuidesStroke","menuBorder","menuForeground","menuBackground","menuSelectionForeground","menuSelectionBackground","menuSelectionBorder","menuSeparatorBackground","snippetTabstopHighlightBackground","snippetTabstopHighlightBorder","snippetFinalTabstopHighlightBackground","snippetFinalTabstopHighlightBorder","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","minimapFindMatch","minimapSelection","minimapError","minimapWarning","minimapBackground","minimapSliderBackground","minimapSliderHoverBackground","minimapSliderActiveBackground","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground","factor","color","oneOf","colorValues","backgroundColorValue","transparency","from","backgroundColor","isDarkerThan","getLighterColor","getDarkerColor","getColor","workbenchColorsSchemaId","schemaRegistry","as","JSONContribution","registerSchema","getColorSchema","delayer","notifySchemaChanged","isScheduled","schedule"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as platform from '../../registry/common/platform.js';\r\nimport { Color, RGBA } from '../../../base/common/color.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport * as nls from '../../../nls.js';\r\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\n// color registry\r\nexport const Extensions = {\r\n    ColorContribution: 'base.contributions.colors'\r\n};\r\nclass ColorRegistry {\r\n    constructor() {\r\n        this._onDidChangeSchema = new Emitter();\r\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\r\n        this.colorSchema = { type: 'object', properties: {} };\r\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\r\n        this.colorsById = {};\r\n    }\r\n    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\r\n        let colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\r\n        this.colorsById[id] = colorContribution;\r\n        let propertySchema = { type: 'string', description, format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\r\n        if (deprecationMessage) {\r\n            propertySchema.deprecationMessage = deprecationMessage;\r\n        }\r\n        this.colorSchema.properties[id] = propertySchema;\r\n        this.colorReferenceSchema.enum.push(id);\r\n        this.colorReferenceSchema.enumDescriptions.push(description);\r\n        this._onDidChangeSchema.fire();\r\n        return id;\r\n    }\r\n    resolveDefaultColor(id, theme) {\r\n        const colorDesc = this.colorsById[id];\r\n        if (colorDesc && colorDesc.defaults) {\r\n            const colorValue = colorDesc.defaults[theme.type];\r\n            return resolveColorValue(colorValue, theme);\r\n        }\r\n        return undefined;\r\n    }\r\n    getColorSchema() {\r\n        return this.colorSchema;\r\n    }\r\n    toString() {\r\n        let sorter = (a, b) => {\r\n            let cat1 = a.indexOf('.') === -1 ? 0 : 1;\r\n            let cat2 = b.indexOf('.') === -1 ? 0 : 1;\r\n            if (cat1 !== cat2) {\r\n                return cat1 - cat2;\r\n            }\r\n            return a.localeCompare(b);\r\n        };\r\n        return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\r\n    }\r\n}\r\nconst colorRegistry = new ColorRegistry();\r\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\r\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\r\n    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\r\n}\r\n// ----- base colors\r\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hc: '#FFFFFF' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\r\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hc: '#F48771' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\r\nexport const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hc: '#FFFFFF' }, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\r\nexport const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hc: '#F38518' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\r\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hc: '#6FC3DF' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\r\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hc: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\r\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hc: '#3794FF' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\r\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hc: Color.black }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\r\n// ----- widgets\r\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hc: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\r\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hc: Color.black }, nls.localize('inputBoxBackground', \"Input box background.\"));\r\nexport const inputForeground = registerColor('input.foreground', { dark: foreground, light: foreground, hc: foreground }, nls.localize('inputBoxForeground', \"Input box foreground.\"));\r\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\r\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC00', light: '#007ACC00', hc: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\r\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hc: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background color of activated options in input fields.\"));\r\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hc: null }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\r\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hc: Color.black }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\r\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\r\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hc: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\r\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hc: Color.black }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\r\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\r\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hc: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\r\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hc: Color.black }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\r\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\r\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hc: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\r\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hc: Color.black }, nls.localize('dropdownBackground', \"Dropdown background.\"));\r\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: null, hc: Color.white }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\r\nexport const buttonForeground = registerColor('button.foreground', { dark: Color.white, light: Color.white, hc: Color.white }, nls.localize('buttonForeground', \"Button foreground color.\"));\r\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hc: null }, nls.localize('buttonBackground', \"Button background color.\"));\r\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hc: null }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\r\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hc: Color.black }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\r\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hc: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\r\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hc: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\r\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hc: transparent(contrastBorder, 0.6) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\r\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hc: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\r\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hc: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\r\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hc: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\r\nexport const editorErrorBackground = registerColor('editorError.background', { dark: null, light: null, hc: null }, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F48771', light: '#E51400', hc: null }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\r\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hc: Color.fromHex('#E47777').transparent(0.8) }, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));\r\nexport const editorWarningBackground = registerColor('editorWarning.background', { dark: null, light: null, hc: null }, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#E9A700', hc: null }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\r\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hc: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));\r\nexport const editorInfoBackground = registerColor('editorInfo.background', { dark: null, light: null, hc: null }, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#75BEFF', light: '#75BEFF', hc: null }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\r\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hc: Color.fromHex('#75BEFF').transparent(0.8) }, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));\r\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hc: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\r\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hc: Color.fromHex('#eeeeee').transparent(0.8) }, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));\r\n/**\r\n * Editor background color.\r\n * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254\r\n * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.\r\n */\r\nexport const editorBackground = registerColor('editor.background', { light: '#fffffe', dark: '#1E1E1E', hc: Color.black }, nls.localize('editorBackground', \"Editor background color.\"));\r\n/**\r\n * Editor foreground color.\r\n */\r\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hc: Color.white }, nls.localize('editorForeground', \"Editor default foreground color.\"));\r\n/**\r\n * Editor widgets\r\n */\r\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hc: '#0C141F' }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\r\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', { dark: foreground, light: foreground, hc: foreground }, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\r\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hc: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\r\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hc: null }, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\r\n/**\r\n * Quick pick widget\r\n */\r\nexport const quickInputBackground = registerColor('quickInput.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hc: editorWidgetBackground }, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\r\nexport const quickInputForeground = registerColor('quickInput.foreground', { dark: editorWidgetForeground, light: editorWidgetForeground, hc: editorWidgetForeground }, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\r\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hc: '#000000' }, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\r\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hc: Color.white }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\r\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hc: Color.white }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\r\n/**\r\n * Editor selection colors.\r\n */\r\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hc: '#f3f518' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\r\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hc: '#000000' }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\r\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hc: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\r\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hc: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\r\n/**\r\n * Editor find match colors.\r\n */\r\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hc: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\r\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hc: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\r\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hc: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\r\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\r\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\r\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hc: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\r\n/**\r\n * Editor hover\r\n */\r\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hc: '#ADD6FF26' }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hc: editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));\r\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', { light: editorWidgetForeground, dark: editorWidgetForeground, hc: editorWidgetForeground }, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\r\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hc: editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));\r\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hc: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\r\n/**\r\n * Editor link colors\r\n */\r\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hc: Color.cyan }, nls.localize('activeLinkForeground', 'Color of active links.'));\r\n/**\r\n * Inline hints\r\n */\r\nexport const editorInlineHintForeground = registerColor('editorInlineHint.foreground', { dark: editorWidgetBackground, light: editorWidgetForeground, hc: editorWidgetBackground }, nls.localize('editorInlineHintForeground', 'Foreground color of inline hints'));\r\nexport const editorInlineHintBackground = registerColor('editorInlineHint.background', { dark: editorWidgetForeground, light: editorWidgetBackground, hc: editorWidgetForeground }, nls.localize('editorInlineHintBackground', 'Background color of inline hints'));\r\n/**\r\n * Editor lighbulb icon colors\r\n */\r\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hc: '#FFCC00' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\r\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hc: '#75BEFF' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\r\n/**\r\n * Diff Editor Colors\r\n */\r\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, 0.2));\r\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, 0.2));\r\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: defaultInsertColor, light: defaultInsertColor, hc: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hc: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hc: '#33ff2eff' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\r\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hc: '#FF008F' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\r\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\r\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hc: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\r\n/**\r\n * List and tree colors\r\n */\r\nexport const listFocusBackground = registerColor('list.focusBackground', { dark: '#062F4A', light: '#D6EBFF', hc: null }, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hc: null }, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#094771', light: '#0060C0', hc: null }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hc: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hc: null }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hc: null }, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hc: null }, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hc: null }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\r\nexport const listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hc: null }, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\r\nexport const listDropBackground = registerColor('list.dropBackground', { dark: listFocusBackground, light: listFocusBackground, hc: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\r\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#0097fb', light: '#0066BF', hc: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\r\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: '#efc1ad', dark: '#653723', hc: Color.black }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\r\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hc: '#f38518' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\r\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hc: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\r\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hc: '#a9a9a9' }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\r\n/**\r\n * Menu colors\r\n */\r\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\r\nexport const menuForeground = registerColor('menu.foreground', { dark: selectForeground, light: foreground, hc: selectForeground }, nls.localize('menuForeground', \"Foreground color of menu items.\"));\r\nexport const menuBackground = registerColor('menu.background', { dark: selectBackground, light: selectBackground, hc: selectBackground }, nls.localize('menuBackground', \"Background color of menu items.\"));\r\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hc: listActiveSelectionForeground }, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\r\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', { dark: listActiveSelectionBackground, light: listActiveSelectionBackground, hc: listActiveSelectionBackground }, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\r\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hc: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\r\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#BBBBBB', light: '#888888', hc: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\r\n/**\r\n * Snippet placeholder colors\r\n */\r\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hc: new Color(new RGBA(124, 124, 124, 0.3)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\r\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hc: null }, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\r\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hc: null }, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\r\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hc: '#525252' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\r\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hc: '#AB5A00' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hc: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hc: '#AB5A00' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\r\nexport const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hc: '#ffffff' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\r\nexport const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hc: new Color(new RGBA(255, 50, 50, 1)) }, nls.localize('minimapError', 'Minimap marker color for errors.'));\r\nexport const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hc: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\r\nexport const minimapBackground = registerColor('minimap.background', { dark: null, light: null, hc: null }, nls.localize('minimapBackground', \"Minimap background color.\"));\r\nexport const minimapSliderBackground = registerColor('minimapSlider.background', { light: transparent(scrollbarSliderBackground, 0.5), dark: transparent(scrollbarSliderBackground, 0.5), hc: transparent(scrollbarSliderBackground, 0.5) }, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\r\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', { light: transparent(scrollbarSliderHoverBackground, 0.5), dark: transparent(scrollbarSliderHoverBackground, 0.5), hc: transparent(scrollbarSliderHoverBackground, 0.5) }, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\r\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', { light: transparent(scrollbarSliderActiveBackground, 0.5), dark: transparent(scrollbarSliderActiveBackground, 0.5), hc: transparent(scrollbarSliderActiveBackground, 0.5) }, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\r\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', { dark: editorErrorForeground, light: editorErrorForeground, hc: editorErrorForeground }, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\r\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', { dark: editorWarningForeground, light: editorWarningForeground, hc: editorWarningForeground }, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\r\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', { dark: editorInfoForeground, light: editorInfoForeground, hc: editorInfoForeground }, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\r\n// ----- color functions\r\nexport function darken(colorValue, factor) {\r\n    return (theme) => {\r\n        let color = resolveColorValue(colorValue, theme);\r\n        if (color) {\r\n            return color.darken(factor);\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\nexport function lighten(colorValue, factor) {\r\n    return (theme) => {\r\n        let color = resolveColorValue(colorValue, theme);\r\n        if (color) {\r\n            return color.lighten(factor);\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\nexport function transparent(colorValue, factor) {\r\n    return (theme) => {\r\n        let color = resolveColorValue(colorValue, theme);\r\n        if (color) {\r\n            return color.transparent(factor);\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\nexport function oneOf(...colorValues) {\r\n    return (theme) => {\r\n        for (let colorValue of colorValues) {\r\n            let color = resolveColorValue(colorValue, theme);\r\n            if (color) {\r\n                return color;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\r\n    return (theme) => {\r\n        let from = resolveColorValue(colorValue, theme);\r\n        if (from) {\r\n            let backgroundColor = resolveColorValue(backgroundColorValue, theme);\r\n            if (backgroundColor) {\r\n                if (from.isDarkerThan(backgroundColor)) {\r\n                    return Color.getLighterColor(from, backgroundColor, factor).transparent(transparency);\r\n                }\r\n                return Color.getDarkerColor(from, backgroundColor, factor).transparent(transparency);\r\n            }\r\n            return from.transparent(factor * transparency);\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\n// ----- implementation\r\n/**\r\n * @param colorValue Resolve a color value in the context of a theme\r\n */\r\nexport function resolveColorValue(colorValue, theme) {\r\n    if (colorValue === null) {\r\n        return undefined;\r\n    }\r\n    else if (typeof colorValue === 'string') {\r\n        if (colorValue[0] === '#') {\r\n            return Color.fromHex(colorValue);\r\n        }\r\n        return theme.getColor(colorValue);\r\n    }\r\n    else if (colorValue instanceof Color) {\r\n        return colorValue;\r\n    }\r\n    else if (typeof colorValue === 'function') {\r\n        return colorValue(theme);\r\n    }\r\n    return undefined;\r\n}\r\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\r\nlet schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\r\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\r\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\r\ncolorRegistry.onDidChangeSchema(() => {\r\n    if (!delayer.isScheduled()) {\r\n        delayer.schedule();\r\n    }\r\n});\r\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\r\n"]},"metadata":{},"sourceType":"module"}