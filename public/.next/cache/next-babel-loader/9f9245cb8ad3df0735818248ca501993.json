{"ast":null,"code":"import _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel/viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModel/viewModelEventDispatcher.js';\nvar SMOOTH_SCROLLING_TIME = 125;\n\nvar EditorScrollDimensions = /*#__PURE__*/function () {\n  function EditorScrollDimensions(width, contentWidth, height, contentHeight) {\n    _classCallCheck(this, EditorScrollDimensions);\n\n    width = width | 0;\n    contentWidth = contentWidth | 0;\n    height = height | 0;\n    contentHeight = contentHeight | 0;\n\n    if (width < 0) {\n      width = 0;\n    }\n\n    if (contentWidth < 0) {\n      contentWidth = 0;\n    }\n\n    if (height < 0) {\n      height = 0;\n    }\n\n    if (contentHeight < 0) {\n      contentHeight = 0;\n    }\n\n    this.width = width;\n    this.contentWidth = contentWidth;\n    this.scrollWidth = Math.max(width, contentWidth);\n    this.height = height;\n    this.contentHeight = contentHeight;\n    this.scrollHeight = Math.max(height, contentHeight);\n  }\n\n  _createClass(EditorScrollDimensions, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return this.width === other.width && this.contentWidth === other.contentWidth && this.height === other.height && this.contentHeight === other.contentHeight;\n    }\n  }]);\n\n  return EditorScrollDimensions;\n}();\n\nvar EditorScrollable = /*#__PURE__*/function (_Disposable) {\n  _inherits(EditorScrollable, _Disposable);\n\n  var _super = _createSuper(EditorScrollable);\n\n  function EditorScrollable(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n    var _this;\n\n    _classCallCheck(this, EditorScrollable);\n\n    _this = _super.call(this);\n    _this._onDidContentSizeChange = _this._register(new Emitter());\n    _this.onDidContentSizeChange = _this._onDidContentSizeChange.event;\n    _this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n    _this._scrollable = _this._register(new Scrollable(smoothScrollDuration, scheduleAtNextAnimationFrame));\n    _this.onDidScroll = _this._scrollable.onScroll;\n    return _this;\n  }\n\n  _createClass(EditorScrollable, [{\n    key: \"getScrollable\",\n    value: function getScrollable() {\n      return this._scrollable;\n    }\n  }, {\n    key: \"setSmoothScrollDuration\",\n    value: function setSmoothScrollDuration(smoothScrollDuration) {\n      this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n    }\n  }, {\n    key: \"validateScrollPosition\",\n    value: function validateScrollPosition(scrollPosition) {\n      return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n  }, {\n    key: \"getScrollDimensions\",\n    value: function getScrollDimensions() {\n      return this._dimensions;\n    }\n  }, {\n    key: \"setScrollDimensions\",\n    value: function setScrollDimensions(dimensions) {\n      if (this._dimensions.equals(dimensions)) {\n        return;\n      }\n\n      var oldDimensions = this._dimensions;\n      this._dimensions = dimensions;\n\n      this._scrollable.setScrollDimensions({\n        width: dimensions.width,\n        scrollWidth: dimensions.scrollWidth,\n        height: dimensions.height,\n        scrollHeight: dimensions.scrollHeight\n      }, true);\n\n      var contentWidthChanged = oldDimensions.contentWidth !== dimensions.contentWidth;\n      var contentHeightChanged = oldDimensions.contentHeight !== dimensions.contentHeight;\n\n      if (contentWidthChanged || contentHeightChanged) {\n        this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n      }\n    }\n  }, {\n    key: \"getFutureScrollPosition\",\n    value: function getFutureScrollPosition() {\n      return this._scrollable.getFutureScrollPosition();\n    }\n  }, {\n    key: \"getCurrentScrollPosition\",\n    value: function getCurrentScrollPosition() {\n      return this._scrollable.getCurrentScrollPosition();\n    }\n  }, {\n    key: \"setScrollPositionNow\",\n    value: function setScrollPositionNow(update) {\n      this._scrollable.setScrollPositionNow(update);\n    }\n  }, {\n    key: \"setScrollPositionSmooth\",\n    value: function setScrollPositionSmooth(update) {\n      this._scrollable.setScrollPositionSmooth(update);\n    }\n  }]);\n\n  return EditorScrollable;\n}(Disposable);\n\nexport var ViewLayout = /*#__PURE__*/function (_Disposable2) {\n  _inherits(ViewLayout, _Disposable2);\n\n  var _super2 = _createSuper(ViewLayout);\n\n  function ViewLayout(configuration, lineCount, scheduleAtNextAnimationFrame) {\n    var _this2;\n\n    _classCallCheck(this, ViewLayout);\n\n    _this2 = _super2.call(this);\n    _this2._configuration = configuration;\n    var options = _this2._configuration.options;\n    var layoutInfo = options.get(124\n    /* layoutInfo */\n    );\n    var padding = options.get(69\n    /* padding */\n    );\n    _this2._linesLayout = new LinesLayout(lineCount, options.get(53\n    /* lineHeight */\n    ), padding.top, padding.bottom);\n    _this2._scrollable = _this2._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n\n    _this2._configureSmoothScrollDuration();\n\n    _this2._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n\n    _this2.onDidScroll = _this2._scrollable.onDidScroll;\n    _this2.onDidContentSizeChange = _this2._scrollable.onDidContentSizeChange;\n\n    _this2._updateHeight();\n\n    return _this2;\n  }\n\n  _createClass(ViewLayout, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ViewLayout.prototype), \"dispose\", this).call(this);\n    }\n  }, {\n    key: \"getScrollable\",\n    value: function getScrollable() {\n      return this._scrollable.getScrollable();\n    }\n  }, {\n    key: \"onHeightMaybeChanged\",\n    value: function onHeightMaybeChanged() {\n      this._updateHeight();\n    }\n  }, {\n    key: \"_configureSmoothScrollDuration\",\n    value: function _configureSmoothScrollDuration() {\n      this._scrollable.setSmoothScrollDuration(this._configuration.options.get(98\n      /* smoothScrolling */\n      ) ? SMOOTH_SCROLLING_TIME : 0);\n    } // ---- begin view event handlers\n\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._configuration.options;\n\n      if (e.hasChanged(53\n      /* lineHeight */\n      )) {\n        this._linesLayout.setLineHeight(options.get(53\n        /* lineHeight */\n        ));\n      }\n\n      if (e.hasChanged(69\n      /* padding */\n      )) {\n        var padding = options.get(69\n        /* padding */\n        );\n\n        this._linesLayout.setPadding(padding.top, padding.bottom);\n      }\n\n      if (e.hasChanged(124\n      /* layoutInfo */\n      )) {\n        var layoutInfo = options.get(124\n        /* layoutInfo */\n        );\n        var width = layoutInfo.contentWidth;\n        var height = layoutInfo.height;\n\n        var scrollDimensions = this._scrollable.getScrollDimensions();\n\n        var contentWidth = scrollDimensions.contentWidth;\n\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n      } else {\n        this._updateHeight();\n      }\n\n      if (e.hasChanged(98\n      /* smoothScrolling */\n      )) {\n        this._configureSmoothScrollDuration();\n      }\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(lineCount) {\n      this._linesLayout.onFlushed(lineCount);\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(fromLineNumber, toLineNumber) {\n      this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(fromLineNumber, toLineNumber) {\n      this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    } // ---- end view event handlers\n\n  }, {\n    key: \"_getHorizontalScrollbarHeight\",\n    value: function _getHorizontalScrollbarHeight(width, scrollWidth) {\n      var options = this._configuration.options;\n      var scrollbar = options.get(87\n      /* scrollbar */\n      );\n\n      if (scrollbar.horizontal === 2\n      /* Hidden */\n      ) {\n          // horizontal scrollbar not visible\n          return 0;\n        }\n\n      if (width >= scrollWidth) {\n        // horizontal scrollbar not visible\n        return 0;\n      }\n\n      return scrollbar.horizontalScrollbarSize;\n    }\n  }, {\n    key: \"_getContentHeight\",\n    value: function _getContentHeight(width, height, contentWidth) {\n      var options = this._configuration.options;\n\n      var result = this._linesLayout.getLinesTotalHeight();\n\n      if (options.get(89\n      /* scrollBeyondLastLine */\n      )) {\n        result += Math.max(0, height - options.get(53\n        /* lineHeight */\n        ) - options.get(69\n        /* padding */\n        ).bottom);\n      } else {\n        result += this._getHorizontalScrollbarHeight(width, contentWidth);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_updateHeight\",\n    value: function _updateHeight() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n\n      var width = scrollDimensions.width;\n      var height = scrollDimensions.height;\n      var contentWidth = scrollDimensions.contentWidth;\n\n      this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    } // ---- Layouting logic\n\n  }, {\n    key: \"getCurrentViewport\",\n    value: function getCurrentViewport() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n\n      var currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\n      return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n  }, {\n    key: \"getFutureViewport\",\n    value: function getFutureViewport() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n\n      var currentScrollPosition = this._scrollable.getFutureScrollPosition();\n\n      return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n  }, {\n    key: \"_computeContentWidth\",\n    value: function _computeContentWidth(maxLineWidth) {\n      var options = this._configuration.options;\n      var wrappingInfo = options.get(125\n      /* wrappingInfo */\n      );\n      var fontInfo = options.get(38\n      /* fontInfo */\n      );\n\n      if (wrappingInfo.isViewportWrapping) {\n        var layoutInfo = options.get(124\n        /* layoutInfo */\n        );\n        var minimap = options.get(59\n        /* minimap */\n        );\n\n        if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n          // This is a case where viewport wrapping is on, but the line extends above the viewport\n          if (minimap.enabled && minimap.side === 'right') {\n            // We need to accomodate the scrollbar width\n            return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n          }\n        }\n\n        return maxLineWidth;\n      } else {\n        var extraHorizontalSpace = options.get(88\n        /* scrollBeyondLastColumn */\n        ) * fontInfo.typicalHalfwidthCharacterWidth;\n\n        var whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n\n        return Math.max(maxLineWidth + extraHorizontalSpace, whitespaceMinWidth);\n      }\n    }\n  }, {\n    key: \"setMaxLineWidth\",\n    value: function setMaxLineWidth(maxLineWidth) {\n      var scrollDimensions = this._scrollable.getScrollDimensions(); // const newScrollWidth = ;\n\n\n      this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(maxLineWidth), scrollDimensions.height, scrollDimensions.contentHeight)); // The height might depend on the fact that there is a horizontal scrollbar or not\n\n\n      this._updateHeight();\n    } // ---- view state\n\n  }, {\n    key: \"saveState\",\n    value: function saveState() {\n      var currentScrollPosition = this._scrollable.getFutureScrollPosition();\n\n      var scrollTop = currentScrollPosition.scrollTop;\n\n      var firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n\n      var whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n\n      return {\n        scrollTop: scrollTop,\n        scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n        scrollLeft: currentScrollPosition.scrollLeft\n      };\n    } // ---- IVerticalLayoutProvider\n\n  }, {\n    key: \"changeWhitespace\",\n    value: function changeWhitespace(callback) {\n      var hadAChange = this._linesLayout.changeWhitespace(callback);\n\n      if (hadAChange) {\n        this.onHeightMaybeChanged();\n      }\n\n      return hadAChange;\n    }\n  }, {\n    key: \"getVerticalOffsetForLineNumber\",\n    value: function getVerticalOffsetForLineNumber(lineNumber) {\n      return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber);\n    }\n  }, {\n    key: \"isAfterLines\",\n    value: function isAfterLines(verticalOffset) {\n      return this._linesLayout.isAfterLines(verticalOffset);\n    }\n  }, {\n    key: \"isInTopPadding\",\n    value: function isInTopPadding(verticalOffset) {\n      return this._linesLayout.isInTopPadding(verticalOffset);\n    }\n  }, {\n    key: \"isInBottomPadding\",\n    value: function isInBottomPadding(verticalOffset) {\n      return this._linesLayout.isInBottomPadding(verticalOffset);\n    }\n  }, {\n    key: \"getLineNumberAtVerticalOffset\",\n    value: function getLineNumberAtVerticalOffset(verticalOffset) {\n      return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    }\n  }, {\n    key: \"getWhitespaceAtVerticalOffset\",\n    value: function getWhitespaceAtVerticalOffset(verticalOffset) {\n      return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    }\n  }, {\n    key: \"getLinesViewportData\",\n    value: function getLinesViewportData() {\n      var visibleBox = this.getCurrentViewport();\n      return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n  }, {\n    key: \"getLinesViewportDataAtScrollTop\",\n    value: function getLinesViewportDataAtScrollTop(scrollTop) {\n      // do some minimal validations on scrollTop\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n\n      if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n        scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n      }\n\n      if (scrollTop < 0) {\n        scrollTop = 0;\n      }\n\n      return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    }\n  }, {\n    key: \"getWhitespaceViewportData\",\n    value: function getWhitespaceViewportData() {\n      var visibleBox = this.getCurrentViewport();\n      return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n  }, {\n    key: \"getWhitespaces\",\n    value: function getWhitespaces() {\n      return this._linesLayout.getWhitespaces();\n    } // ---- IScrollingProvider\n\n  }, {\n    key: \"getContentWidth\",\n    value: function getContentWidth() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n\n      return scrollDimensions.contentWidth;\n    }\n  }, {\n    key: \"getScrollWidth\",\n    value: function getScrollWidth() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n\n      return scrollDimensions.scrollWidth;\n    }\n  }, {\n    key: \"getContentHeight\",\n    value: function getContentHeight() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n\n      return scrollDimensions.contentHeight;\n    }\n  }, {\n    key: \"getScrollHeight\",\n    value: function getScrollHeight() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n\n      return scrollDimensions.scrollHeight;\n    }\n  }, {\n    key: \"getCurrentScrollLeft\",\n    value: function getCurrentScrollLeft() {\n      var currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\n      return currentScrollPosition.scrollLeft;\n    }\n  }, {\n    key: \"getCurrentScrollTop\",\n    value: function getCurrentScrollTop() {\n      var currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\n      return currentScrollPosition.scrollTop;\n    }\n  }, {\n    key: \"validateScrollPosition\",\n    value: function validateScrollPosition(scrollPosition) {\n      return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n  }, {\n    key: \"setScrollPosition\",\n    value: function setScrollPosition(position, type) {\n      if (type === 1\n      /* Immediate */\n      ) {\n          this._scrollable.setScrollPositionNow(position);\n        } else {\n        this._scrollable.setScrollPositionSmooth(position);\n      }\n    }\n  }, {\n    key: \"deltaScrollNow\",\n    value: function deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n      var currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\n      this._scrollable.setScrollPositionNow({\n        scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n        scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n      });\n    }\n  }]);\n\n  return ViewLayout;\n}(Disposable);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js"],"names":["Emitter","Disposable","Scrollable","LinesLayout","Viewport","ContentSizeChangedEvent","SMOOTH_SCROLLING_TIME","EditorScrollDimensions","width","contentWidth","height","contentHeight","scrollWidth","Math","max","scrollHeight","other","EditorScrollable","smoothScrollDuration","scheduleAtNextAnimationFrame","_onDidContentSizeChange","_register","onDidContentSizeChange","event","_dimensions","_scrollable","onDidScroll","onScroll","setSmoothScrollDuration","scrollPosition","validateScrollPosition","dimensions","equals","oldDimensions","setScrollDimensions","contentWidthChanged","contentHeightChanged","fire","getFutureScrollPosition","getCurrentScrollPosition","update","setScrollPositionNow","setScrollPositionSmooth","ViewLayout","configuration","lineCount","_configuration","options","layoutInfo","get","padding","_linesLayout","top","bottom","_configureSmoothScrollDuration","_updateHeight","getScrollable","e","hasChanged","setLineHeight","setPadding","scrollDimensions","getScrollDimensions","_getContentHeight","onFlushed","fromLineNumber","toLineNumber","onLinesDeleted","onLinesInserted","scrollbar","horizontal","horizontalScrollbarSize","result","getLinesTotalHeight","_getHorizontalScrollbarHeight","currentScrollPosition","scrollTop","scrollLeft","maxLineWidth","wrappingInfo","fontInfo","isViewportWrapping","minimap","typicalHalfwidthCharacterWidth","enabled","side","verticalScrollbarWidth","extraHorizontalSpace","whitespaceMinWidth","getWhitespaceMinWidth","_computeContentWidth","firstLineNumberInViewport","getLineNumberAtOrAfterVerticalOffset","whitespaceAboveFirstLine","getWhitespaceAccumulatedHeightBeforeLineNumber","scrollTopWithoutViewZones","callback","hadAChange","changeWhitespace","onHeightMaybeChanged","lineNumber","getVerticalOffsetForLineNumber","verticalOffset","isAfterLines","isInTopPadding","isInBottomPadding","getWhitespaceAtVerticalOffset","visibleBox","getCurrentViewport","getLinesViewportData","getWhitespaceViewportData","getWhitespaces","position","type","deltaScrollLeft","deltaScrollTop"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { Scrollable } from '../../../base/common/scrollable.js';\r\nimport { LinesLayout } from './linesLayout.js';\r\nimport { Viewport } from '../viewModel/viewModel.js';\r\nimport { ContentSizeChangedEvent } from '../viewModel/viewModelEventDispatcher.js';\r\nconst SMOOTH_SCROLLING_TIME = 125;\r\nclass EditorScrollDimensions {\r\n    constructor(width, contentWidth, height, contentHeight) {\r\n        width = width | 0;\r\n        contentWidth = contentWidth | 0;\r\n        height = height | 0;\r\n        contentHeight = contentHeight | 0;\r\n        if (width < 0) {\r\n            width = 0;\r\n        }\r\n        if (contentWidth < 0) {\r\n            contentWidth = 0;\r\n        }\r\n        if (height < 0) {\r\n            height = 0;\r\n        }\r\n        if (contentHeight < 0) {\r\n            contentHeight = 0;\r\n        }\r\n        this.width = width;\r\n        this.contentWidth = contentWidth;\r\n        this.scrollWidth = Math.max(width, contentWidth);\r\n        this.height = height;\r\n        this.contentHeight = contentHeight;\r\n        this.scrollHeight = Math.max(height, contentHeight);\r\n    }\r\n    equals(other) {\r\n        return (this.width === other.width\r\n            && this.contentWidth === other.contentWidth\r\n            && this.height === other.height\r\n            && this.contentHeight === other.contentHeight);\r\n    }\r\n}\r\nclass EditorScrollable extends Disposable {\r\n    constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\r\n        super();\r\n        this._onDidContentSizeChange = this._register(new Emitter());\r\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\r\n        this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\r\n        this._scrollable = this._register(new Scrollable(smoothScrollDuration, scheduleAtNextAnimationFrame));\r\n        this.onDidScroll = this._scrollable.onScroll;\r\n    }\r\n    getScrollable() {\r\n        return this._scrollable;\r\n    }\r\n    setSmoothScrollDuration(smoothScrollDuration) {\r\n        this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\r\n    }\r\n    validateScrollPosition(scrollPosition) {\r\n        return this._scrollable.validateScrollPosition(scrollPosition);\r\n    }\r\n    getScrollDimensions() {\r\n        return this._dimensions;\r\n    }\r\n    setScrollDimensions(dimensions) {\r\n        if (this._dimensions.equals(dimensions)) {\r\n            return;\r\n        }\r\n        const oldDimensions = this._dimensions;\r\n        this._dimensions = dimensions;\r\n        this._scrollable.setScrollDimensions({\r\n            width: dimensions.width,\r\n            scrollWidth: dimensions.scrollWidth,\r\n            height: dimensions.height,\r\n            scrollHeight: dimensions.scrollHeight\r\n        }, true);\r\n        const contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\r\n        const contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\r\n        if (contentWidthChanged || contentHeightChanged) {\r\n            this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\r\n        }\r\n    }\r\n    getFutureScrollPosition() {\r\n        return this._scrollable.getFutureScrollPosition();\r\n    }\r\n    getCurrentScrollPosition() {\r\n        return this._scrollable.getCurrentScrollPosition();\r\n    }\r\n    setScrollPositionNow(update) {\r\n        this._scrollable.setScrollPositionNow(update);\r\n    }\r\n    setScrollPositionSmooth(update) {\r\n        this._scrollable.setScrollPositionSmooth(update);\r\n    }\r\n}\r\nexport class ViewLayout extends Disposable {\r\n    constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\r\n        super();\r\n        this._configuration = configuration;\r\n        const options = this._configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        const padding = options.get(69 /* padding */);\r\n        this._linesLayout = new LinesLayout(lineCount, options.get(53 /* lineHeight */), padding.top, padding.bottom);\r\n        this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\r\n        this._configureSmoothScrollDuration();\r\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\r\n        this.onDidScroll = this._scrollable.onDidScroll;\r\n        this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\r\n        this._updateHeight();\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n    }\r\n    getScrollable() {\r\n        return this._scrollable.getScrollable();\r\n    }\r\n    onHeightMaybeChanged() {\r\n        this._updateHeight();\r\n    }\r\n    _configureSmoothScrollDuration() {\r\n        this._scrollable.setSmoothScrollDuration(this._configuration.options.get(98 /* smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\r\n    }\r\n    // ---- begin view event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._configuration.options;\r\n        if (e.hasChanged(53 /* lineHeight */)) {\r\n            this._linesLayout.setLineHeight(options.get(53 /* lineHeight */));\r\n        }\r\n        if (e.hasChanged(69 /* padding */)) {\r\n            const padding = options.get(69 /* padding */);\r\n            this._linesLayout.setPadding(padding.top, padding.bottom);\r\n        }\r\n        if (e.hasChanged(124 /* layoutInfo */)) {\r\n            const layoutInfo = options.get(124 /* layoutInfo */);\r\n            const width = layoutInfo.contentWidth;\r\n            const height = layoutInfo.height;\r\n            const scrollDimensions = this._scrollable.getScrollDimensions();\r\n            const contentWidth = scrollDimensions.contentWidth;\r\n            this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\r\n        }\r\n        else {\r\n            this._updateHeight();\r\n        }\r\n        if (e.hasChanged(98 /* smoothScrolling */)) {\r\n            this._configureSmoothScrollDuration();\r\n        }\r\n    }\r\n    onFlushed(lineCount) {\r\n        this._linesLayout.onFlushed(lineCount);\r\n    }\r\n    onLinesDeleted(fromLineNumber, toLineNumber) {\r\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\r\n    }\r\n    onLinesInserted(fromLineNumber, toLineNumber) {\r\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\r\n    }\r\n    // ---- end view event handlers\r\n    _getHorizontalScrollbarHeight(width, scrollWidth) {\r\n        const options = this._configuration.options;\r\n        const scrollbar = options.get(87 /* scrollbar */);\r\n        if (scrollbar.horizontal === 2 /* Hidden */) {\r\n            // horizontal scrollbar not visible\r\n            return 0;\r\n        }\r\n        if (width >= scrollWidth) {\r\n            // horizontal scrollbar not visible\r\n            return 0;\r\n        }\r\n        return scrollbar.horizontalScrollbarSize;\r\n    }\r\n    _getContentHeight(width, height, contentWidth) {\r\n        const options = this._configuration.options;\r\n        let result = this._linesLayout.getLinesTotalHeight();\r\n        if (options.get(89 /* scrollBeyondLastLine */)) {\r\n            result += Math.max(0, height - options.get(53 /* lineHeight */) - options.get(69 /* padding */).bottom);\r\n        }\r\n        else {\r\n            result += this._getHorizontalScrollbarHeight(width, contentWidth);\r\n        }\r\n        return result;\r\n    }\r\n    _updateHeight() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        const width = scrollDimensions.width;\r\n        const height = scrollDimensions.height;\r\n        const contentWidth = scrollDimensions.contentWidth;\r\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\r\n    }\r\n    // ---- Layouting logic\r\n    getCurrentViewport() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\r\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\r\n    }\r\n    getFutureViewport() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\r\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\r\n    }\r\n    _computeContentWidth(maxLineWidth) {\r\n        const options = this._configuration.options;\r\n        const wrappingInfo = options.get(125 /* wrappingInfo */);\r\n        const fontInfo = options.get(38 /* fontInfo */);\r\n        if (wrappingInfo.isViewportWrapping) {\r\n            const layoutInfo = options.get(124 /* layoutInfo */);\r\n            const minimap = options.get(59 /* minimap */);\r\n            if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\r\n                // This is a case where viewport wrapping is on, but the line extends above the viewport\r\n                if (minimap.enabled && minimap.side === 'right') {\r\n                    // We need to accomodate the scrollbar width\r\n                    return maxLineWidth + layoutInfo.verticalScrollbarWidth;\r\n                }\r\n            }\r\n            return maxLineWidth;\r\n        }\r\n        else {\r\n            const extraHorizontalSpace = options.get(88 /* scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\r\n            const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\r\n            return Math.max(maxLineWidth + extraHorizontalSpace, whitespaceMinWidth);\r\n        }\r\n    }\r\n    setMaxLineWidth(maxLineWidth) {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        // const newScrollWidth = ;\r\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(maxLineWidth), scrollDimensions.height, scrollDimensions.contentHeight));\r\n        // The height might depend on the fact that there is a horizontal scrollbar or not\r\n        this._updateHeight();\r\n    }\r\n    // ---- view state\r\n    saveState() {\r\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\r\n        let scrollTop = currentScrollPosition.scrollTop;\r\n        let firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\r\n        let whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\r\n        return {\r\n            scrollTop: scrollTop,\r\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\r\n            scrollLeft: currentScrollPosition.scrollLeft\r\n        };\r\n    }\r\n    // ---- IVerticalLayoutProvider\r\n    changeWhitespace(callback) {\r\n        const hadAChange = this._linesLayout.changeWhitespace(callback);\r\n        if (hadAChange) {\r\n            this.onHeightMaybeChanged();\r\n        }\r\n        return hadAChange;\r\n    }\r\n    getVerticalOffsetForLineNumber(lineNumber) {\r\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber);\r\n    }\r\n    isAfterLines(verticalOffset) {\r\n        return this._linesLayout.isAfterLines(verticalOffset);\r\n    }\r\n    isInTopPadding(verticalOffset) {\r\n        return this._linesLayout.isInTopPadding(verticalOffset);\r\n    }\r\n    isInBottomPadding(verticalOffset) {\r\n        return this._linesLayout.isInBottomPadding(verticalOffset);\r\n    }\r\n    getLineNumberAtVerticalOffset(verticalOffset) {\r\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\r\n    }\r\n    getWhitespaceAtVerticalOffset(verticalOffset) {\r\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\r\n    }\r\n    getLinesViewportData() {\r\n        const visibleBox = this.getCurrentViewport();\r\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\r\n    }\r\n    getLinesViewportDataAtScrollTop(scrollTop) {\r\n        // do some minimal validations on scrollTop\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\r\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\r\n        }\r\n        if (scrollTop < 0) {\r\n            scrollTop = 0;\r\n        }\r\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\r\n    }\r\n    getWhitespaceViewportData() {\r\n        const visibleBox = this.getCurrentViewport();\r\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\r\n    }\r\n    getWhitespaces() {\r\n        return this._linesLayout.getWhitespaces();\r\n    }\r\n    // ---- IScrollingProvider\r\n    getContentWidth() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        return scrollDimensions.contentWidth;\r\n    }\r\n    getScrollWidth() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        return scrollDimensions.scrollWidth;\r\n    }\r\n    getContentHeight() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        return scrollDimensions.contentHeight;\r\n    }\r\n    getScrollHeight() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        return scrollDimensions.scrollHeight;\r\n    }\r\n    getCurrentScrollLeft() {\r\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\r\n        return currentScrollPosition.scrollLeft;\r\n    }\r\n    getCurrentScrollTop() {\r\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\r\n        return currentScrollPosition.scrollTop;\r\n    }\r\n    validateScrollPosition(scrollPosition) {\r\n        return this._scrollable.validateScrollPosition(scrollPosition);\r\n    }\r\n    setScrollPosition(position, type) {\r\n        if (type === 1 /* Immediate */) {\r\n            this._scrollable.setScrollPositionNow(position);\r\n        }\r\n        else {\r\n            this._scrollable.setScrollPositionSmooth(position);\r\n        }\r\n    }\r\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\r\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\r\n        this._scrollable.setScrollPositionNow({\r\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\r\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}