{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n  var decimal = Math.pow(10, decimalPoints);\n  return Math.round(number * decimal) / decimal;\n}\n\nexport var RGBA = /*#__PURE__*/function () {\n  function RGBA(r, g, b) {\n    var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n    _classCallCheck(this, RGBA);\n\n    this.r = Math.min(255, Math.max(0, r)) | 0;\n    this.g = Math.min(255, Math.max(0, g)) | 0;\n    this.b = Math.min(255, Math.max(0, b)) | 0;\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n\n  _createClass(RGBA, null, [{\n    key: \"equals\",\n    value: function equals(a, b) {\n      return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n    }\n  }]);\n\n  return RGBA;\n}();\nexport var HSLA = /*#__PURE__*/function () {\n  function HSLA(h, s, l, a) {\n    _classCallCheck(this, HSLA);\n\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n\n  _createClass(HSLA, null, [{\n    key: \"equals\",\n    value: function equals(a, b) {\n      return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n    }\n    /**\r\n     * Converts an RGB color value to HSL. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes r, g, and b are contained in the set [0, 255] and\r\n     * returns h in the set [0, 360], s, and l in the set [0, 1].\r\n     */\n\n  }, {\n    key: \"fromRGBA\",\n    value: function fromRGBA(rgba) {\n      var r = rgba.r / 255;\n      var g = rgba.g / 255;\n      var b = rgba.b / 255;\n      var a = rgba.a;\n      var max = Math.max(r, g, b);\n      var min = Math.min(r, g, b);\n      var h = 0;\n      var s = 0;\n      var l = (min + max) / 2;\n      var chroma = max - min;\n\n      if (chroma > 0) {\n        s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n\n        switch (max) {\n          case r:\n            h = (g - b) / chroma + (g < b ? 6 : 0);\n            break;\n\n          case g:\n            h = (b - r) / chroma + 2;\n            break;\n\n          case b:\n            h = (r - g) / chroma + 4;\n            break;\n        }\n\n        h *= 60;\n        h = Math.round(h);\n      }\n\n      return new HSLA(h, s, l, a);\n    }\n  }, {\n    key: \"_hue2rgb\",\n    value: function _hue2rgb(p, q, t) {\n      if (t < 0) {\n        t += 1;\n      }\n\n      if (t > 1) {\n        t -= 1;\n      }\n\n      if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n      }\n\n      if (t < 1 / 2) {\n        return q;\n      }\n\n      if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n      }\n\n      return p;\n    }\n    /**\r\n     * Converts an HSL color value to RGB. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\r\n     * returns r, g, and b in the set [0, 255].\r\n     */\n\n  }, {\n    key: \"toRGBA\",\n    value: function toRGBA(hsla) {\n      var h = hsla.h / 360;\n      var s = hsla.s,\n          l = hsla.l,\n          a = hsla.a;\n      var r, g, b;\n\n      if (s === 0) {\n        r = g = b = l; // achromatic\n      } else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = HSLA._hue2rgb(p, q, h + 1 / 3);\n        g = HSLA._hue2rgb(p, q, h);\n        b = HSLA._hue2rgb(p, q, h - 1 / 3);\n      }\n\n      return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n    }\n  }]);\n\n  return HSLA;\n}();\nexport var HSVA = /*#__PURE__*/function () {\n  function HSVA(h, s, v, a) {\n    _classCallCheck(this, HSVA);\n\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n\n  _createClass(HSVA, null, [{\n    key: \"equals\",\n    value: function equals(a, b) {\n      return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n    } // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n\n  }, {\n    key: \"fromRGBA\",\n    value: function fromRGBA(rgba) {\n      var r = rgba.r / 255;\n      var g = rgba.g / 255;\n      var b = rgba.b / 255;\n      var cmax = Math.max(r, g, b);\n      var cmin = Math.min(r, g, b);\n      var delta = cmax - cmin;\n      var s = cmax === 0 ? 0 : delta / cmax;\n      var m;\n\n      if (delta === 0) {\n        m = 0;\n      } else if (cmax === r) {\n        m = ((g - b) / delta % 6 + 6) % 6;\n      } else if (cmax === g) {\n        m = (b - r) / delta + 2;\n      } else {\n        m = (r - g) / delta + 4;\n      }\n\n      return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n    } // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n\n  }, {\n    key: \"toRGBA\",\n    value: function toRGBA(hsva) {\n      var h = hsva.h,\n          s = hsva.s,\n          v = hsva.v,\n          a = hsva.a;\n      var c = v * s;\n      var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n      var m = v - c;\n      var r = 0,\n          g = 0,\n          b = 0;\n\n      if (h < 60) {\n        r = c;\n        g = x;\n      } else if (h < 120) {\n        r = x;\n        g = c;\n      } else if (h < 180) {\n        g = c;\n        b = x;\n      } else if (h < 240) {\n        g = x;\n        b = c;\n      } else if (h < 300) {\n        r = x;\n        b = c;\n      } else if (h <= 360) {\n        r = c;\n        b = x;\n      }\n\n      r = Math.round((r + m) * 255);\n      g = Math.round((g + m) * 255);\n      b = Math.round((b + m) * 255);\n      return new RGBA(r, g, b, a);\n    }\n  }]);\n\n  return HSVA;\n}();\nexport var Color = /*#__PURE__*/function () {\n  function Color(arg) {\n    _classCallCheck(this, Color);\n\n    if (!arg) {\n      throw new Error('Color needs a value');\n    } else if (arg instanceof RGBA) {\n      this.rgba = arg;\n    } else if (arg instanceof HSLA) {\n      this._hsla = arg;\n      this.rgba = HSLA.toRGBA(arg);\n    } else if (arg instanceof HSVA) {\n      this._hsva = arg;\n      this.rgba = HSVA.toRGBA(arg);\n    } else {\n      throw new Error('Invalid color ctor argument');\n    }\n  }\n\n  _createClass(Color, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n    }\n    /**\r\n     * http://www.w3.org/TR/WCAG20/#relativeluminancedef\r\n     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\r\n     */\n\n  }, {\n    key: \"getRelativeLuminance\",\n    value: function getRelativeLuminance() {\n      var R = Color._relativeLuminanceForComponent(this.rgba.r);\n\n      var G = Color._relativeLuminanceForComponent(this.rgba.g);\n\n      var B = Color._relativeLuminanceForComponent(this.rgba.b);\n\n      var luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n      return roundFloat(luminance, 4);\n    }\n  }, {\n    key: \"isLighter\",\n\n    /**\r\n     *\thttp://24ways.org/2010/calculating-color-contrast\r\n     *  Return 'true' if lighter color otherwise 'false'\r\n     */\n    value: function isLighter() {\n      var yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n      return yiq >= 128;\n    }\n  }, {\n    key: \"isLighterThan\",\n    value: function isLighterThan(another) {\n      var lum1 = this.getRelativeLuminance();\n      var lum2 = another.getRelativeLuminance();\n      return lum1 > lum2;\n    }\n  }, {\n    key: \"isDarkerThan\",\n    value: function isDarkerThan(another) {\n      var lum1 = this.getRelativeLuminance();\n      var lum2 = another.getRelativeLuminance();\n      return lum1 < lum2;\n    }\n  }, {\n    key: \"lighten\",\n    value: function lighten(factor) {\n      return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n    }\n  }, {\n    key: \"darken\",\n    value: function darken(factor) {\n      return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n    }\n  }, {\n    key: \"transparent\",\n    value: function transparent(factor) {\n      var _this$rgba = this.rgba,\n          r = _this$rgba.r,\n          g = _this$rgba.g,\n          b = _this$rgba.b,\n          a = _this$rgba.a;\n      return new Color(new RGBA(r, g, b, a * factor));\n    }\n  }, {\n    key: \"isTransparent\",\n    value: function isTransparent() {\n      return this.rgba.a === 0;\n    }\n  }, {\n    key: \"isOpaque\",\n    value: function isOpaque() {\n      return this.rgba.a === 1;\n    }\n  }, {\n    key: \"opposite\",\n    value: function opposite() {\n      return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '' + Color.Format.CSS.format(this);\n    }\n  }, {\n    key: \"hsla\",\n    get: function get() {\n      if (this._hsla) {\n        return this._hsla;\n      } else {\n        return HSLA.fromRGBA(this.rgba);\n      }\n    }\n  }, {\n    key: \"hsva\",\n    get: function get() {\n      if (this._hsva) {\n        return this._hsva;\n      }\n\n      return HSVA.fromRGBA(this.rgba);\n    }\n  }], [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      return Color.Format.CSS.parseHex(hex) || Color.red;\n    }\n  }, {\n    key: \"_relativeLuminanceForComponent\",\n    value: function _relativeLuminanceForComponent(color) {\n      var c = color / 255;\n      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n    }\n  }, {\n    key: \"getLighterColor\",\n    value: function getLighterColor(of, relative, factor) {\n      if (of.isLighterThan(relative)) {\n        return of;\n      }\n\n      factor = factor ? factor : 0.5;\n      var lum1 = of.getRelativeLuminance();\n      var lum2 = relative.getRelativeLuminance();\n      factor = factor * (lum2 - lum1) / lum2;\n      return of.lighten(factor);\n    }\n  }, {\n    key: \"getDarkerColor\",\n    value: function getDarkerColor(of, relative, factor) {\n      if (of.isDarkerThan(relative)) {\n        return of;\n      }\n\n      factor = factor ? factor : 0.5;\n      var lum1 = of.getRelativeLuminance();\n      var lum2 = relative.getRelativeLuminance();\n      factor = factor * (lum1 - lum2) / lum1;\n      return of.darken(factor);\n    }\n  }]);\n\n  return Color;\n}();\nColor.white = new Color(new RGBA(255, 255, 255, 1));\nColor.black = new Color(new RGBA(0, 0, 0, 1));\nColor.red = new Color(new RGBA(255, 0, 0, 1));\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\n\n(function (Color) {\n  var Format;\n\n  (function (Format) {\n    var CSS;\n\n    (function (CSS) {\n      function formatRGB(color) {\n        if (color.rgba.a === 1) {\n          return \"rgb(\".concat(color.rgba.r, \", \").concat(color.rgba.g, \", \").concat(color.rgba.b, \")\");\n        }\n\n        return Color.Format.CSS.formatRGBA(color);\n      }\n\n      CSS.formatRGB = formatRGB;\n\n      function formatRGBA(color) {\n        return \"rgba(\".concat(color.rgba.r, \", \").concat(color.rgba.g, \", \").concat(color.rgba.b, \", \").concat(+color.rgba.a.toFixed(2), \")\");\n      }\n\n      CSS.formatRGBA = formatRGBA;\n\n      function formatHSL(color) {\n        if (color.hsla.a === 1) {\n          return \"hsl(\".concat(color.hsla.h, \", \").concat((color.hsla.s * 100).toFixed(2), \"%, \").concat((color.hsla.l * 100).toFixed(2), \"%)\");\n        }\n\n        return Color.Format.CSS.formatHSLA(color);\n      }\n\n      CSS.formatHSL = formatHSL;\n\n      function formatHSLA(color) {\n        return \"hsla(\".concat(color.hsla.h, \", \").concat((color.hsla.s * 100).toFixed(2), \"%, \").concat((color.hsla.l * 100).toFixed(2), \"%, \").concat(color.hsla.a.toFixed(2), \")\");\n      }\n\n      CSS.formatHSLA = formatHSLA;\n\n      function _toTwoDigitHex(n) {\n        var r = n.toString(16);\n        return r.length !== 2 ? '0' + r : r;\n      }\n      /**\r\n       * Formats the color as #RRGGBB\r\n       */\n\n\n      function formatHex(color) {\n        return \"#\".concat(_toTwoDigitHex(color.rgba.r)).concat(_toTwoDigitHex(color.rgba.g)).concat(_toTwoDigitHex(color.rgba.b));\n      }\n\n      CSS.formatHex = formatHex;\n      /**\r\n       * Formats the color as #RRGGBBAA\r\n       * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\r\n       */\n\n      function formatHexA(color) {\n        var compact = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (compact && color.rgba.a === 1) {\n          return Color.Format.CSS.formatHex(color);\n        }\n\n        return \"#\".concat(_toTwoDigitHex(color.rgba.r)).concat(_toTwoDigitHex(color.rgba.g)).concat(_toTwoDigitHex(color.rgba.b)).concat(_toTwoDigitHex(Math.round(color.rgba.a * 255)));\n      }\n\n      CSS.formatHexA = formatHexA;\n      /**\r\n       * The default format will use HEX if opaque and RGBA otherwise.\r\n       */\n\n      function format(color) {\n        if (color.isOpaque()) {\n          return Color.Format.CSS.formatHex(color);\n        }\n\n        return Color.Format.CSS.formatRGBA(color);\n      }\n\n      CSS.format = format;\n      /**\r\n       * Converts an Hex color value to a Color.\r\n       * returns r, g, and b are contained in the set [0, 255]\r\n       * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\r\n       */\n\n      function parseHex(hex) {\n        var length = hex.length;\n\n        if (length === 0) {\n          // Invalid color\n          return null;\n        }\n\n        if (hex.charCodeAt(0) !== 35\n        /* Hash */\n        ) {\n            // Does not begin with a #\n            return null;\n          }\n\n        if (length === 7) {\n          // #RRGGBB format\n          var r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n\n          var g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n\n          var b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n\n          return new Color(new RGBA(r, g, b, 1));\n        }\n\n        if (length === 9) {\n          // #RRGGBBAA format\n          var _r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n\n          var _g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n\n          var _b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n\n          var a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n\n          return new Color(new RGBA(_r, _g, _b, a / 255));\n        }\n\n        if (length === 4) {\n          // #RGB format\n          var _r2 = _parseHexDigit(hex.charCodeAt(1));\n\n          var _g2 = _parseHexDigit(hex.charCodeAt(2));\n\n          var _b2 = _parseHexDigit(hex.charCodeAt(3));\n\n          return new Color(new RGBA(16 * _r2 + _r2, 16 * _g2 + _g2, 16 * _b2 + _b2));\n        }\n\n        if (length === 5) {\n          // #RGBA format\n          var _r3 = _parseHexDigit(hex.charCodeAt(1));\n\n          var _g3 = _parseHexDigit(hex.charCodeAt(2));\n\n          var _b3 = _parseHexDigit(hex.charCodeAt(3));\n\n          var _a = _parseHexDigit(hex.charCodeAt(4));\n\n          return new Color(new RGBA(16 * _r3 + _r3, 16 * _g3 + _g3, 16 * _b3 + _b3, (16 * _a + _a) / 255));\n        } // Invalid color\n\n\n        return null;\n      }\n\n      CSS.parseHex = parseHex;\n\n      function _parseHexDigit(charCode) {\n        switch (charCode) {\n          case 48\n          /* Digit0 */\n          :\n            return 0;\n\n          case 49\n          /* Digit1 */\n          :\n            return 1;\n\n          case 50\n          /* Digit2 */\n          :\n            return 2;\n\n          case 51\n          /* Digit3 */\n          :\n            return 3;\n\n          case 52\n          /* Digit4 */\n          :\n            return 4;\n\n          case 53\n          /* Digit5 */\n          :\n            return 5;\n\n          case 54\n          /* Digit6 */\n          :\n            return 6;\n\n          case 55\n          /* Digit7 */\n          :\n            return 7;\n\n          case 56\n          /* Digit8 */\n          :\n            return 8;\n\n          case 57\n          /* Digit9 */\n          :\n            return 9;\n\n          case 97\n          /* a */\n          :\n            return 10;\n\n          case 65\n          /* A */\n          :\n            return 10;\n\n          case 98\n          /* b */\n          :\n            return 11;\n\n          case 66\n          /* B */\n          :\n            return 11;\n\n          case 99\n          /* c */\n          :\n            return 12;\n\n          case 67\n          /* C */\n          :\n            return 12;\n\n          case 100\n          /* d */\n          :\n            return 13;\n\n          case 68\n          /* D */\n          :\n            return 13;\n\n          case 101\n          /* e */\n          :\n            return 14;\n\n          case 69\n          /* E */\n          :\n            return 14;\n\n          case 102\n          /* f */\n          :\n            return 15;\n\n          case 70\n          /* F */\n          :\n            return 15;\n        }\n\n        return 0;\n      }\n    })(CSS = Format.CSS || (Format.CSS = {}));\n  })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/common/color.js"],"names":["roundFloat","number","decimalPoints","decimal","Math","pow","round","RGBA","r","g","b","a","min","max","HSLA","h","s","l","rgba","chroma","p","q","t","hsla","_hue2rgb","HSVA","v","cmax","cmin","delta","m","hsva","c","x","abs","Color","arg","Error","_hsla","toRGBA","_hsva","other","equals","R","_relativeLuminanceForComponent","G","B","luminance","yiq","another","lum1","getRelativeLuminance","lum2","factor","Format","CSS","format","fromRGBA","hex","parseHex","red","color","of","relative","isLighterThan","lighten","isDarkerThan","darken","white","black","blue","cyan","lightgrey","transparent","formatRGB","formatRGBA","toFixed","formatHSL","formatHSLA","_toTwoDigitHex","n","toString","length","formatHex","formatHexA","compact","isOpaque","charCodeAt","_parseHexDigit","charCode"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nfunction roundFloat(number, decimalPoints) {\r\n    const decimal = Math.pow(10, decimalPoints);\r\n    return Math.round(number * decimal) / decimal;\r\n}\r\nexport class RGBA {\r\n    constructor(r, g, b, a = 1) {\r\n        this.r = Math.min(255, Math.max(0, r)) | 0;\r\n        this.g = Math.min(255, Math.max(0, g)) | 0;\r\n        this.b = Math.min(255, Math.max(0, b)) | 0;\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    static equals(a, b) {\r\n        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\r\n    }\r\n}\r\nexport class HSLA {\r\n    constructor(h, s, l, a) {\r\n        this.h = Math.max(Math.min(360, h), 0) | 0;\r\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\r\n        this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    static equals(a, b) {\r\n        return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\r\n    }\r\n    /**\r\n     * Converts an RGB color value to HSL. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes r, g, and b are contained in the set [0, 255] and\r\n     * returns h in the set [0, 360], s, and l in the set [0, 1].\r\n     */\r\n    static fromRGBA(rgba) {\r\n        const r = rgba.r / 255;\r\n        const g = rgba.g / 255;\r\n        const b = rgba.b / 255;\r\n        const a = rgba.a;\r\n        const max = Math.max(r, g, b);\r\n        const min = Math.min(r, g, b);\r\n        let h = 0;\r\n        let s = 0;\r\n        const l = (min + max) / 2;\r\n        const chroma = max - min;\r\n        if (chroma > 0) {\r\n            s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);\r\n            switch (max) {\r\n                case r:\r\n                    h = (g - b) / chroma + (g < b ? 6 : 0);\r\n                    break;\r\n                case g:\r\n                    h = (b - r) / chroma + 2;\r\n                    break;\r\n                case b:\r\n                    h = (r - g) / chroma + 4;\r\n                    break;\r\n            }\r\n            h *= 60;\r\n            h = Math.round(h);\r\n        }\r\n        return new HSLA(h, s, l, a);\r\n    }\r\n    static _hue2rgb(p, q, t) {\r\n        if (t < 0) {\r\n            t += 1;\r\n        }\r\n        if (t > 1) {\r\n            t -= 1;\r\n        }\r\n        if (t < 1 / 6) {\r\n            return p + (q - p) * 6 * t;\r\n        }\r\n        if (t < 1 / 2) {\r\n            return q;\r\n        }\r\n        if (t < 2 / 3) {\r\n            return p + (q - p) * (2 / 3 - t) * 6;\r\n        }\r\n        return p;\r\n    }\r\n    /**\r\n     * Converts an HSL color value to RGB. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\r\n     * returns r, g, and b in the set [0, 255].\r\n     */\r\n    static toRGBA(hsla) {\r\n        const h = hsla.h / 360;\r\n        const { s, l, a } = hsla;\r\n        let r, g, b;\r\n        if (s === 0) {\r\n            r = g = b = l; // achromatic\r\n        }\r\n        else {\r\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            const p = 2 * l - q;\r\n            r = HSLA._hue2rgb(p, q, h + 1 / 3);\r\n            g = HSLA._hue2rgb(p, q, h);\r\n            b = HSLA._hue2rgb(p, q, h - 1 / 3);\r\n        }\r\n        return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\r\n    }\r\n}\r\nexport class HSVA {\r\n    constructor(h, s, v, a) {\r\n        this.h = Math.max(Math.min(360, h), 0) | 0;\r\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\r\n        this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    static equals(a, b) {\r\n        return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\r\n    }\r\n    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\r\n    static fromRGBA(rgba) {\r\n        const r = rgba.r / 255;\r\n        const g = rgba.g / 255;\r\n        const b = rgba.b / 255;\r\n        const cmax = Math.max(r, g, b);\r\n        const cmin = Math.min(r, g, b);\r\n        const delta = cmax - cmin;\r\n        const s = cmax === 0 ? 0 : (delta / cmax);\r\n        let m;\r\n        if (delta === 0) {\r\n            m = 0;\r\n        }\r\n        else if (cmax === r) {\r\n            m = ((((g - b) / delta) % 6) + 6) % 6;\r\n        }\r\n        else if (cmax === g) {\r\n            m = ((b - r) / delta) + 2;\r\n        }\r\n        else {\r\n            m = ((r - g) / delta) + 4;\r\n        }\r\n        return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\r\n    }\r\n    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\r\n    static toRGBA(hsva) {\r\n        const { h, s, v, a } = hsva;\r\n        const c = v * s;\r\n        const x = c * (1 - Math.abs((h / 60) % 2 - 1));\r\n        const m = v - c;\r\n        let [r, g, b] = [0, 0, 0];\r\n        if (h < 60) {\r\n            r = c;\r\n            g = x;\r\n        }\r\n        else if (h < 120) {\r\n            r = x;\r\n            g = c;\r\n        }\r\n        else if (h < 180) {\r\n            g = c;\r\n            b = x;\r\n        }\r\n        else if (h < 240) {\r\n            g = x;\r\n            b = c;\r\n        }\r\n        else if (h < 300) {\r\n            r = x;\r\n            b = c;\r\n        }\r\n        else if (h <= 360) {\r\n            r = c;\r\n            b = x;\r\n        }\r\n        r = Math.round((r + m) * 255);\r\n        g = Math.round((g + m) * 255);\r\n        b = Math.round((b + m) * 255);\r\n        return new RGBA(r, g, b, a);\r\n    }\r\n}\r\nexport class Color {\r\n    constructor(arg) {\r\n        if (!arg) {\r\n            throw new Error('Color needs a value');\r\n        }\r\n        else if (arg instanceof RGBA) {\r\n            this.rgba = arg;\r\n        }\r\n        else if (arg instanceof HSLA) {\r\n            this._hsla = arg;\r\n            this.rgba = HSLA.toRGBA(arg);\r\n        }\r\n        else if (arg instanceof HSVA) {\r\n            this._hsva = arg;\r\n            this.rgba = HSVA.toRGBA(arg);\r\n        }\r\n        else {\r\n            throw new Error('Invalid color ctor argument');\r\n        }\r\n    }\r\n    static fromHex(hex) {\r\n        return Color.Format.CSS.parseHex(hex) || Color.red;\r\n    }\r\n    get hsla() {\r\n        if (this._hsla) {\r\n            return this._hsla;\r\n        }\r\n        else {\r\n            return HSLA.fromRGBA(this.rgba);\r\n        }\r\n    }\r\n    get hsva() {\r\n        if (this._hsva) {\r\n            return this._hsva;\r\n        }\r\n        return HSVA.fromRGBA(this.rgba);\r\n    }\r\n    equals(other) {\r\n        return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\r\n    }\r\n    /**\r\n     * http://www.w3.org/TR/WCAG20/#relativeluminancedef\r\n     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\r\n     */\r\n    getRelativeLuminance() {\r\n        const R = Color._relativeLuminanceForComponent(this.rgba.r);\r\n        const G = Color._relativeLuminanceForComponent(this.rgba.g);\r\n        const B = Color._relativeLuminanceForComponent(this.rgba.b);\r\n        const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\r\n        return roundFloat(luminance, 4);\r\n    }\r\n    static _relativeLuminanceForComponent(color) {\r\n        const c = color / 255;\r\n        return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);\r\n    }\r\n    /**\r\n     *\thttp://24ways.org/2010/calculating-color-contrast\r\n     *  Return 'true' if lighter color otherwise 'false'\r\n     */\r\n    isLighter() {\r\n        const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\r\n        return yiq >= 128;\r\n    }\r\n    isLighterThan(another) {\r\n        const lum1 = this.getRelativeLuminance();\r\n        const lum2 = another.getRelativeLuminance();\r\n        return lum1 > lum2;\r\n    }\r\n    isDarkerThan(another) {\r\n        const lum1 = this.getRelativeLuminance();\r\n        const lum2 = another.getRelativeLuminance();\r\n        return lum1 < lum2;\r\n    }\r\n    lighten(factor) {\r\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\r\n    }\r\n    darken(factor) {\r\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\r\n    }\r\n    transparent(factor) {\r\n        const { r, g, b, a } = this.rgba;\r\n        return new Color(new RGBA(r, g, b, a * factor));\r\n    }\r\n    isTransparent() {\r\n        return this.rgba.a === 0;\r\n    }\r\n    isOpaque() {\r\n        return this.rgba.a === 1;\r\n    }\r\n    opposite() {\r\n        return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\r\n    }\r\n    toString() {\r\n        return '' + Color.Format.CSS.format(this);\r\n    }\r\n    static getLighterColor(of, relative, factor) {\r\n        if (of.isLighterThan(relative)) {\r\n            return of;\r\n        }\r\n        factor = factor ? factor : 0.5;\r\n        const lum1 = of.getRelativeLuminance();\r\n        const lum2 = relative.getRelativeLuminance();\r\n        factor = factor * (lum2 - lum1) / lum2;\r\n        return of.lighten(factor);\r\n    }\r\n    static getDarkerColor(of, relative, factor) {\r\n        if (of.isDarkerThan(relative)) {\r\n            return of;\r\n        }\r\n        factor = factor ? factor : 0.5;\r\n        const lum1 = of.getRelativeLuminance();\r\n        const lum2 = relative.getRelativeLuminance();\r\n        factor = factor * (lum1 - lum2) / lum1;\r\n        return of.darken(factor);\r\n    }\r\n}\r\nColor.white = new Color(new RGBA(255, 255, 255, 1));\r\nColor.black = new Color(new RGBA(0, 0, 0, 1));\r\nColor.red = new Color(new RGBA(255, 0, 0, 1));\r\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\r\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\r\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\r\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\r\n(function (Color) {\r\n    let Format;\r\n    (function (Format) {\r\n        let CSS;\r\n        (function (CSS) {\r\n            function formatRGB(color) {\r\n                if (color.rgba.a === 1) {\r\n                    return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\r\n                }\r\n                return Color.Format.CSS.formatRGBA(color);\r\n            }\r\n            CSS.formatRGB = formatRGB;\r\n            function formatRGBA(color) {\r\n                return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+(color.rgba.a).toFixed(2)})`;\r\n            }\r\n            CSS.formatRGBA = formatRGBA;\r\n            function formatHSL(color) {\r\n                if (color.hsla.a === 1) {\r\n                    return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\r\n                }\r\n                return Color.Format.CSS.formatHSLA(color);\r\n            }\r\n            CSS.formatHSL = formatHSL;\r\n            function formatHSLA(color) {\r\n                return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\r\n            }\r\n            CSS.formatHSLA = formatHSLA;\r\n            function _toTwoDigitHex(n) {\r\n                const r = n.toString(16);\r\n                return r.length !== 2 ? '0' + r : r;\r\n            }\r\n            /**\r\n             * Formats the color as #RRGGBB\r\n             */\r\n            function formatHex(color) {\r\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\r\n            }\r\n            CSS.formatHex = formatHex;\r\n            /**\r\n             * Formats the color as #RRGGBBAA\r\n             * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\r\n             */\r\n            function formatHexA(color, compact = false) {\r\n                if (compact && color.rgba.a === 1) {\r\n                    return Color.Format.CSS.formatHex(color);\r\n                }\r\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\r\n            }\r\n            CSS.formatHexA = formatHexA;\r\n            /**\r\n             * The default format will use HEX if opaque and RGBA otherwise.\r\n             */\r\n            function format(color) {\r\n                if (color.isOpaque()) {\r\n                    return Color.Format.CSS.formatHex(color);\r\n                }\r\n                return Color.Format.CSS.formatRGBA(color);\r\n            }\r\n            CSS.format = format;\r\n            /**\r\n             * Converts an Hex color value to a Color.\r\n             * returns r, g, and b are contained in the set [0, 255]\r\n             * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\r\n             */\r\n            function parseHex(hex) {\r\n                const length = hex.length;\r\n                if (length === 0) {\r\n                    // Invalid color\r\n                    return null;\r\n                }\r\n                if (hex.charCodeAt(0) !== 35 /* Hash */) {\r\n                    // Does not begin with a #\r\n                    return null;\r\n                }\r\n                if (length === 7) {\r\n                    // #RRGGBB format\r\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\r\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\r\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\r\n                    return new Color(new RGBA(r, g, b, 1));\r\n                }\r\n                if (length === 9) {\r\n                    // #RRGGBBAA format\r\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\r\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\r\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\r\n                    const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\r\n                    return new Color(new RGBA(r, g, b, a / 255));\r\n                }\r\n                if (length === 4) {\r\n                    // #RGB format\r\n                    const r = _parseHexDigit(hex.charCodeAt(1));\r\n                    const g = _parseHexDigit(hex.charCodeAt(2));\r\n                    const b = _parseHexDigit(hex.charCodeAt(3));\r\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\r\n                }\r\n                if (length === 5) {\r\n                    // #RGBA format\r\n                    const r = _parseHexDigit(hex.charCodeAt(1));\r\n                    const g = _parseHexDigit(hex.charCodeAt(2));\r\n                    const b = _parseHexDigit(hex.charCodeAt(3));\r\n                    const a = _parseHexDigit(hex.charCodeAt(4));\r\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\r\n                }\r\n                // Invalid color\r\n                return null;\r\n            }\r\n            CSS.parseHex = parseHex;\r\n            function _parseHexDigit(charCode) {\r\n                switch (charCode) {\r\n                    case 48 /* Digit0 */: return 0;\r\n                    case 49 /* Digit1 */: return 1;\r\n                    case 50 /* Digit2 */: return 2;\r\n                    case 51 /* Digit3 */: return 3;\r\n                    case 52 /* Digit4 */: return 4;\r\n                    case 53 /* Digit5 */: return 5;\r\n                    case 54 /* Digit6 */: return 6;\r\n                    case 55 /* Digit7 */: return 7;\r\n                    case 56 /* Digit8 */: return 8;\r\n                    case 57 /* Digit9 */: return 9;\r\n                    case 97 /* a */: return 10;\r\n                    case 65 /* A */: return 10;\r\n                    case 98 /* b */: return 11;\r\n                    case 66 /* B */: return 11;\r\n                    case 99 /* c */: return 12;\r\n                    case 67 /* C */: return 12;\r\n                    case 100 /* d */: return 13;\r\n                    case 68 /* D */: return 13;\r\n                    case 101 /* e */: return 14;\r\n                    case 69 /* E */: return 14;\r\n                    case 102 /* f */: return 15;\r\n                    case 70 /* F */: return 15;\r\n                }\r\n                return 0;\r\n            }\r\n        })(CSS = Format.CSS || (Format.CSS = {}));\r\n    })(Format = Color.Format || (Color.Format = {}));\r\n})(Color || (Color = {}));\r\n"]},"metadata":{},"sourceType":"module"}