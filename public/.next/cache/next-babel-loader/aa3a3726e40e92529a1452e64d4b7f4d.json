{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveIndentGuides, editorIndentGuides } from '../../../common/view/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport var IndentGuidesOverlay = /*#__PURE__*/function (_DynamicViewOverlay) {\n  _inherits(IndentGuidesOverlay, _DynamicViewOverlay);\n\n  var _super = _createSuper(IndentGuidesOverlay);\n\n  function IndentGuidesOverlay(context) {\n    var _this;\n\n    _classCallCheck(this, IndentGuidesOverlay);\n\n    _this = _super.call(this);\n    _this._context = context;\n    _this._primaryLineNumber = 0;\n    var options = _this._context.configuration.options;\n    var wrappingInfo = options.get(125\n    /* wrappingInfo */\n    );\n    var fontInfo = options.get(38\n    /* fontInfo */\n    );\n    _this._lineHeight = options.get(53\n    /* lineHeight */\n    );\n    _this._spaceWidth = fontInfo.spaceWidth;\n    _this._enabled = options.get(78\n    /* renderIndentGuides */\n    );\n    _this._activeIndentEnabled = options.get(47\n    /* highlightActiveIndentGuide */\n    );\n    _this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth;\n    _this._renderResult = null;\n\n    _this._context.addEventHandler(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(IndentGuidesOverlay, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._context.removeEventHandler(this);\n\n      this._renderResult = null;\n\n      _get(_getPrototypeOf(IndentGuidesOverlay.prototype), \"dispose\", this).call(this);\n    } // --- begin event handlers\n\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n      var wrappingInfo = options.get(125\n      /* wrappingInfo */\n      );\n      var fontInfo = options.get(38\n      /* fontInfo */\n      );\n      this._lineHeight = options.get(53\n      /* lineHeight */\n      );\n      this._spaceWidth = fontInfo.spaceWidth;\n      this._enabled = options.get(78\n      /* renderIndentGuides */\n      );\n      this._activeIndentEnabled = options.get(47\n      /* highlightActiveIndentGuide */\n      );\n      this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth;\n      return true;\n    }\n  }, {\n    key: \"onCursorStateChanged\",\n    value: function onCursorStateChanged(e) {\n      var selection = e.selections[0];\n      var newPrimaryLineNumber = selection.isEmpty() ? selection.positionLineNumber : 0;\n\n      if (this._primaryLineNumber !== newPrimaryLineNumber) {\n        this._primaryLineNumber = newPrimaryLineNumber;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"onDecorationsChanged\",\n    value: function onDecorationsChanged(e) {\n      // true for inline decorations\n      return true;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return e.scrollTopChanged; // || e.scrollWidthChanged;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onLanguageConfigurationChanged\",\n    value: function onLanguageConfigurationChanged(e) {\n      return true;\n    } // --- end event handlers\n\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      if (!this._enabled) {\n        this._renderResult = null;\n        return;\n      }\n\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n      var _this$_context$model$ = this._context.model.getTextModelOptions(),\n          indentSize = _this$_context$model$.indentSize;\n\n      var indentWidth = indentSize * this._spaceWidth;\n      var scrollWidth = ctx.scrollWidth;\n      var lineHeight = this._lineHeight;\n\n      var indents = this._context.model.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber);\n\n      var activeIndentStartLineNumber = 0;\n      var activeIndentEndLineNumber = 0;\n      var activeIndentLevel = 0;\n\n      if (this._activeIndentEnabled && this._primaryLineNumber) {\n        var activeIndentInfo = this._context.model.getActiveIndentGuide(this._primaryLineNumber, visibleStartLineNumber, visibleEndLineNumber);\n\n        activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n        activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n        activeIndentLevel = activeIndentInfo.indent;\n      }\n\n      var output = [];\n\n      for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n        var containsActiveIndentGuide = activeIndentStartLineNumber <= lineNumber && lineNumber <= activeIndentEndLineNumber;\n        var lineIndex = lineNumber - visibleStartLineNumber;\n        var indent = indents[lineIndex];\n        var result = '';\n\n        if (indent >= 1) {\n          var leftMostVisiblePosition = ctx.visibleRangeForPosition(new Position(lineNumber, 1));\n          var left = leftMostVisiblePosition ? leftMostVisiblePosition.left : 0;\n\n          for (var i = 1; i <= indent; i++) {\n            var className = containsActiveIndentGuide && i === activeIndentLevel ? 'cigra' : 'cigr';\n            result += \"<div class=\\\"\".concat(className, \"\\\" style=\\\"left:\").concat(left, \"px;height:\").concat(lineHeight, \"px;width:\").concat(indentWidth, \"px\\\"></div>\");\n            left += indentWidth;\n\n            if (left > scrollWidth || this._maxIndentLeft > 0 && left > this._maxIndentLeft) {\n              break;\n            }\n          }\n        }\n\n        output[lineIndex] = result;\n      }\n\n      this._renderResult = output;\n    }\n  }, {\n    key: \"render\",\n    value: function render(startLineNumber, lineNumber) {\n      if (!this._renderResult) {\n        return '';\n      }\n\n      var lineIndex = lineNumber - startLineNumber;\n\n      if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n        return '';\n      }\n\n      return this._renderResult[lineIndex];\n    }\n  }]);\n\n  return IndentGuidesOverlay;\n}(DynamicViewOverlay);\nregisterThemingParticipant(function (theme, collector) {\n  var editorIndentGuidesColor = theme.getColor(editorIndentGuides);\n\n  if (editorIndentGuidesColor) {\n    collector.addRule(\".monaco-editor .lines-content .cigr { box-shadow: 1px 0 0 0 \".concat(editorIndentGuidesColor, \" inset; }\"));\n  }\n\n  var editorActiveIndentGuidesColor = theme.getColor(editorActiveIndentGuides) || editorIndentGuidesColor;\n\n  if (editorActiveIndentGuidesColor) {\n    collector.addRule(\".monaco-editor .lines-content .cigra { box-shadow: 1px 0 0 0 \".concat(editorActiveIndentGuidesColor, \" inset; }\"));\n  }\n});","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/indentGuides/indentGuides.js"],"names":["DynamicViewOverlay","Position","editorActiveIndentGuides","editorIndentGuides","registerThemingParticipant","IndentGuidesOverlay","context","_context","_primaryLineNumber","options","configuration","wrappingInfo","get","fontInfo","_lineHeight","_spaceWidth","spaceWidth","_enabled","_activeIndentEnabled","_maxIndentLeft","wrappingColumn","typicalHalfwidthCharacterWidth","_renderResult","addEventHandler","removeEventHandler","e","selection","selections","newPrimaryLineNumber","isEmpty","positionLineNumber","scrollTopChanged","ctx","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","model","getTextModelOptions","indentSize","indentWidth","scrollWidth","lineHeight","indents","getLinesIndentGuides","activeIndentStartLineNumber","activeIndentEndLineNumber","activeIndentLevel","activeIndentInfo","getActiveIndentGuide","indent","output","lineNumber","containsActiveIndentGuide","lineIndex","result","leftMostVisiblePosition","visibleRangeForPosition","left","i","className","length","theme","collector","editorIndentGuidesColor","getColor","addRule","editorActiveIndentGuidesColor"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,OAAO,oBAAP;AACA,SAASA,kBAAT,QAAmC,kCAAnC;AACA,SAASC,QAAT,QAAyB,kCAAzB;AACA,SAASC,wBAAT,EAAmCC,kBAAnC,QAA6D,6CAA7D;AACA,SAASC,0BAAT,QAA2C,mDAA3C;AACA,WAAaC,mBAAb;AAAA;;AAAA;;AACI,+BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB;AACA,UAAKC,QAAL,GAAgBD,OAAhB;AACA,UAAKE,kBAAL,GAA0B,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAKF,QAAL,CAAcG,aAAd,CAA4BD,OAA5C;AACA,QAAME,YAAY,GAAGF,OAAO,CAACG,GAAR,CAAY;AAAI;AAAhB,KAArB;AACA,QAAMC,QAAQ,GAAGJ,OAAO,CAACG,GAAR,CAAY;AAAG;AAAf,KAAjB;AACA,UAAKE,WAAL,GAAmBL,OAAO,CAACG,GAAR,CAAY;AAAG;AAAf,KAAnB;AACA,UAAKG,WAAL,GAAmBF,QAAQ,CAACG,UAA5B;AACA,UAAKC,QAAL,GAAgBR,OAAO,CAACG,GAAR,CAAY;AAAG;AAAf,KAAhB;AACA,UAAKM,oBAAL,GAA4BT,OAAO,CAACG,GAAR,CAAY;AAAG;AAAf,KAA5B;AACA,UAAKO,cAAL,GAAsBR,YAAY,CAACS,cAAb,KAAgC,CAAC,CAAjC,GAAqC,CAAC,CAAtC,GAA2CT,YAAY,CAACS,cAAb,GAA8BP,QAAQ,CAACQ,8BAAxG;AACA,UAAKC,aAAL,GAAqB,IAArB;;AACA,UAAKf,QAAL,CAAcgB,eAAd;;AAbiB;AAcpB;;AAfL;AAAA;AAAA,8BAgBc;AACN,WAAKhB,QAAL,CAAciB,kBAAd,CAAiC,IAAjC;;AACA,WAAKF,aAAL,GAAqB,IAArB;;AACA;AACH,KApBL,CAqBI;;AArBJ;AAAA;AAAA,2CAsB2BG,CAtB3B,EAsB8B;AACtB,UAAMhB,OAAO,GAAG,KAAKF,QAAL,CAAcG,aAAd,CAA4BD,OAA5C;AACA,UAAME,YAAY,GAAGF,OAAO,CAACG,GAAR,CAAY;AAAI;AAAhB,OAArB;AACA,UAAMC,QAAQ,GAAGJ,OAAO,CAACG,GAAR,CAAY;AAAG;AAAf,OAAjB;AACA,WAAKE,WAAL,GAAmBL,OAAO,CAACG,GAAR,CAAY;AAAG;AAAf,OAAnB;AACA,WAAKG,WAAL,GAAmBF,QAAQ,CAACG,UAA5B;AACA,WAAKC,QAAL,GAAgBR,OAAO,CAACG,GAAR,CAAY;AAAG;AAAf,OAAhB;AACA,WAAKM,oBAAL,GAA4BT,OAAO,CAACG,GAAR,CAAY;AAAG;AAAf,OAA5B;AACA,WAAKO,cAAL,GAAsBR,YAAY,CAACS,cAAb,KAAgC,CAAC,CAAjC,GAAqC,CAAC,CAAtC,GAA2CT,YAAY,CAACS,cAAb,GAA8BP,QAAQ,CAACQ,8BAAxG;AACA,aAAO,IAAP;AACH;AAhCL;AAAA;AAAA,yCAiCyBI,CAjCzB,EAiC4B;AACpB,UAAMC,SAAS,GAAGD,CAAC,CAACE,UAAF,CAAa,CAAb,CAAlB;AACA,UAAMC,oBAAoB,GAAGF,SAAS,CAACG,OAAV,KAAsBH,SAAS,CAACI,kBAAhC,GAAqD,CAAlF;;AACA,UAAI,KAAKtB,kBAAL,KAA4BoB,oBAAhC,EAAsD;AAClD,aAAKpB,kBAAL,GAA0BoB,oBAA1B;AACA,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;AAzCL;AAAA;AAAA,yCA0CyBH,CA1CzB,EA0C4B;AACpB;AACA,aAAO,IAAP;AACH;AA7CL;AAAA;AAAA,8BA8CcA,CA9Cd,EA8CiB;AACT,aAAO,IAAP;AACH;AAhDL;AAAA;AAAA,mCAiDmBA,CAjDnB,EAiDsB;AACd,aAAO,IAAP;AACH;AAnDL;AAAA;AAAA,mCAoDmBA,CApDnB,EAoDsB;AACd,aAAO,IAAP;AACH;AAtDL;AAAA;AAAA,oCAuDoBA,CAvDpB,EAuDuB;AACf,aAAO,IAAP;AACH;AAzDL;AAAA;AAAA,oCA0DoBA,CA1DpB,EA0DuB;AACf,aAAOA,CAAC,CAACM,gBAAT,CADe,CACY;AAC9B;AA5DL;AAAA;AAAA,mCA6DmBN,CA7DnB,EA6DsB;AACd,aAAO,IAAP;AACH;AA/DL;AAAA;AAAA,mDAgEmCA,CAhEnC,EAgEsC;AAC9B,aAAO,IAAP;AACH,KAlEL,CAmEI;;AAnEJ;AAAA;AAAA,kCAoEkBO,GApElB,EAoEuB;AACf,UAAI,CAAC,KAAKf,QAAV,EAAoB;AAChB,aAAKK,aAAL,GAAqB,IAArB;AACA;AACH;;AACD,UAAMW,sBAAsB,GAAGD,GAAG,CAACE,YAAJ,CAAiBC,eAAhD;AACA,UAAMC,oBAAoB,GAAGJ,GAAG,CAACE,YAAJ,CAAiBG,aAA9C;;AANe,kCAOQ,KAAK9B,QAAL,CAAc+B,KAAd,CAAoBC,mBAApB,EAPR;AAAA,UAOPC,UAPO,yBAOPA,UAPO;;AAQf,UAAMC,WAAW,GAAGD,UAAU,GAAG,KAAKzB,WAAtC;AACA,UAAM2B,WAAW,GAAGV,GAAG,CAACU,WAAxB;AACA,UAAMC,UAAU,GAAG,KAAK7B,WAAxB;;AACA,UAAM8B,OAAO,GAAG,KAAKrC,QAAL,CAAc+B,KAAd,CAAoBO,oBAApB,CAAyCZ,sBAAzC,EAAiEG,oBAAjE,CAAhB;;AACA,UAAIU,2BAA2B,GAAG,CAAlC;AACA,UAAIC,yBAAyB,GAAG,CAAhC;AACA,UAAIC,iBAAiB,GAAG,CAAxB;;AACA,UAAI,KAAK9B,oBAAL,IAA6B,KAAKV,kBAAtC,EAA0D;AACtD,YAAMyC,gBAAgB,GAAG,KAAK1C,QAAL,CAAc+B,KAAd,CAAoBY,oBAApB,CAAyC,KAAK1C,kBAA9C,EAAkEyB,sBAAlE,EAA0FG,oBAA1F,CAAzB;;AACAU,QAAAA,2BAA2B,GAAGG,gBAAgB,CAACd,eAA/C;AACAY,QAAAA,yBAAyB,GAAGE,gBAAgB,CAACZ,aAA7C;AACAW,QAAAA,iBAAiB,GAAGC,gBAAgB,CAACE,MAArC;AACH;;AACD,UAAMC,MAAM,GAAG,EAAf;;AACA,WAAK,IAAIC,UAAU,GAAGpB,sBAAtB,EAA8CoB,UAAU,IAAIjB,oBAA5D,EAAkFiB,UAAU,EAA5F,EAAgG;AAC5F,YAAMC,yBAAyB,GAAIR,2BAA2B,IAAIO,UAA/B,IAA6CA,UAAU,IAAIN,yBAA9F;AACA,YAAMQ,SAAS,GAAGF,UAAU,GAAGpB,sBAA/B;AACA,YAAMkB,MAAM,GAAGP,OAAO,CAACW,SAAD,CAAtB;AACA,YAAIC,MAAM,GAAG,EAAb;;AACA,YAAIL,MAAM,IAAI,CAAd,EAAiB;AACb,cAAMM,uBAAuB,GAAGzB,GAAG,CAAC0B,uBAAJ,CAA4B,IAAIzD,QAAJ,CAAaoD,UAAb,EAAyB,CAAzB,CAA5B,CAAhC;AACA,cAAIM,IAAI,GAAGF,uBAAuB,GAAGA,uBAAuB,CAACE,IAA3B,GAAkC,CAApE;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIT,MAArB,EAA6BS,CAAC,EAA9B,EAAkC;AAC9B,gBAAMC,SAAS,GAAIP,yBAAyB,IAAIM,CAAC,KAAKZ,iBAAnC,GAAuD,OAAvD,GAAiE,MAApF;AACAQ,YAAAA,MAAM,2BAAmBK,SAAnB,6BAA6CF,IAA7C,uBAA8DhB,UAA9D,sBAAoFF,WAApF,gBAAN;AACAkB,YAAAA,IAAI,IAAIlB,WAAR;;AACA,gBAAIkB,IAAI,GAAGjB,WAAP,IAAuB,KAAKvB,cAAL,GAAsB,CAAtB,IAA2BwC,IAAI,GAAG,KAAKxC,cAAlE,EAAmF;AAC/E;AACH;AACJ;AACJ;;AACDiC,QAAAA,MAAM,CAACG,SAAD,CAAN,GAAoBC,MAApB;AACH;;AACD,WAAKlC,aAAL,GAAqB8B,MAArB;AACH;AA9GL;AAAA;AAAA,2BA+GWjB,eA/GX,EA+G4BkB,UA/G5B,EA+GwC;AAChC,UAAI,CAAC,KAAK/B,aAAV,EAAyB;AACrB,eAAO,EAAP;AACH;;AACD,UAAMiC,SAAS,GAAGF,UAAU,GAAGlB,eAA/B;;AACA,UAAIoB,SAAS,GAAG,CAAZ,IAAiBA,SAAS,IAAI,KAAKjC,aAAL,CAAmBwC,MAArD,EAA6D;AACzD,eAAO,EAAP;AACH;;AACD,aAAO,KAAKxC,aAAL,CAAmBiC,SAAnB,CAAP;AACH;AAxHL;;AAAA;AAAA,EAAyCvD,kBAAzC;AA0HAI,0BAA0B,CAAC,UAAC2D,KAAD,EAAQC,SAAR,EAAsB;AAC7C,MAAMC,uBAAuB,GAAGF,KAAK,CAACG,QAAN,CAAe/D,kBAAf,CAAhC;;AACA,MAAI8D,uBAAJ,EAA6B;AACzBD,IAAAA,SAAS,CAACG,OAAV,uEAAiFF,uBAAjF;AACH;;AACD,MAAMG,6BAA6B,GAAGL,KAAK,CAACG,QAAN,CAAehE,wBAAf,KAA4C+D,uBAAlF;;AACA,MAAIG,6BAAJ,EAAmC;AAC/BJ,IAAAA,SAAS,CAACG,OAAV,wEAAkFC,6BAAlF;AACH;AACJ,CATyB,CAA1B","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './indentGuides.css';\r\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\r\nimport { Position } from '../../../common/core/position.js';\r\nimport { editorActiveIndentGuides, editorIndentGuides } from '../../../common/view/editorColorRegistry.js';\r\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\r\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\r\n    constructor(context) {\r\n        super();\r\n        this._context = context;\r\n        this._primaryLineNumber = 0;\r\n        const options = this._context.configuration.options;\r\n        const wrappingInfo = options.get(125 /* wrappingInfo */);\r\n        const fontInfo = options.get(38 /* fontInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._spaceWidth = fontInfo.spaceWidth;\r\n        this._enabled = options.get(78 /* renderIndentGuides */);\r\n        this._activeIndentEnabled = options.get(47 /* highlightActiveIndentGuide */);\r\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\r\n        this._renderResult = null;\r\n        this._context.addEventHandler(this);\r\n    }\r\n    dispose() {\r\n        this._context.removeEventHandler(this);\r\n        this._renderResult = null;\r\n        super.dispose();\r\n    }\r\n    // --- begin event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        const wrappingInfo = options.get(125 /* wrappingInfo */);\r\n        const fontInfo = options.get(38 /* fontInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._spaceWidth = fontInfo.spaceWidth;\r\n        this._enabled = options.get(78 /* renderIndentGuides */);\r\n        this._activeIndentEnabled = options.get(47 /* highlightActiveIndentGuide */);\r\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\r\n        return true;\r\n    }\r\n    onCursorStateChanged(e) {\r\n        const selection = e.selections[0];\r\n        const newPrimaryLineNumber = selection.isEmpty() ? selection.positionLineNumber : 0;\r\n        if (this._primaryLineNumber !== newPrimaryLineNumber) {\r\n            this._primaryLineNumber = newPrimaryLineNumber;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    onDecorationsChanged(e) {\r\n        // true for inline decorations\r\n        return true;\r\n    }\r\n    onFlushed(e) {\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return true;\r\n    }\r\n    onLinesDeleted(e) {\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    onLanguageConfigurationChanged(e) {\r\n        return true;\r\n    }\r\n    // --- end event handlers\r\n    prepareRender(ctx) {\r\n        if (!this._enabled) {\r\n            this._renderResult = null;\r\n            return;\r\n        }\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\r\n        const { indentSize } = this._context.model.getTextModelOptions();\r\n        const indentWidth = indentSize * this._spaceWidth;\r\n        const scrollWidth = ctx.scrollWidth;\r\n        const lineHeight = this._lineHeight;\r\n        const indents = this._context.model.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber);\r\n        let activeIndentStartLineNumber = 0;\r\n        let activeIndentEndLineNumber = 0;\r\n        let activeIndentLevel = 0;\r\n        if (this._activeIndentEnabled && this._primaryLineNumber) {\r\n            const activeIndentInfo = this._context.model.getActiveIndentGuide(this._primaryLineNumber, visibleStartLineNumber, visibleEndLineNumber);\r\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\r\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\r\n            activeIndentLevel = activeIndentInfo.indent;\r\n        }\r\n        const output = [];\r\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\r\n            const containsActiveIndentGuide = (activeIndentStartLineNumber <= lineNumber && lineNumber <= activeIndentEndLineNumber);\r\n            const lineIndex = lineNumber - visibleStartLineNumber;\r\n            const indent = indents[lineIndex];\r\n            let result = '';\r\n            if (indent >= 1) {\r\n                const leftMostVisiblePosition = ctx.visibleRangeForPosition(new Position(lineNumber, 1));\r\n                let left = leftMostVisiblePosition ? leftMostVisiblePosition.left : 0;\r\n                for (let i = 1; i <= indent; i++) {\r\n                    const className = (containsActiveIndentGuide && i === activeIndentLevel ? 'cigra' : 'cigr');\r\n                    result += `<div class=\"${className}\" style=\"left:${left}px;height:${lineHeight}px;width:${indentWidth}px\"></div>`;\r\n                    left += indentWidth;\r\n                    if (left > scrollWidth || (this._maxIndentLeft > 0 && left > this._maxIndentLeft)) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            output[lineIndex] = result;\r\n        }\r\n        this._renderResult = output;\r\n    }\r\n    render(startLineNumber, lineNumber) {\r\n        if (!this._renderResult) {\r\n            return '';\r\n        }\r\n        const lineIndex = lineNumber - startLineNumber;\r\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\r\n            return '';\r\n        }\r\n        return this._renderResult[lineIndex];\r\n    }\r\n}\r\nregisterThemingParticipant((theme, collector) => {\r\n    const editorIndentGuidesColor = theme.getColor(editorIndentGuides);\r\n    if (editorIndentGuidesColor) {\r\n        collector.addRule(`.monaco-editor .lines-content .cigr { box-shadow: 1px 0 0 0 ${editorIndentGuidesColor} inset; }`);\r\n    }\r\n    const editorActiveIndentGuidesColor = theme.getColor(editorActiveIndentGuides) || editorIndentGuidesColor;\r\n    if (editorActiveIndentGuidesColor) {\r\n        collector.addRule(`.monaco-editor .lines-content .cigra { box-shadow: 1px 0 0 0 ${editorActiveIndentGuidesColor} inset; }`);\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}