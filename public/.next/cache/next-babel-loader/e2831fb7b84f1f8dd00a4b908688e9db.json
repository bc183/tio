{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nexport var ModifierLabelProvider = /*#__PURE__*/function () {\n  function ModifierLabelProvider(mac, windows) {\n    var linux = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : windows;\n\n    _classCallCheck(this, ModifierLabelProvider);\n\n    this.modifierLabels = [null]; // index 0 will never me accessed.\n\n    this.modifierLabels[2\n    /* Macintosh */\n    ] = mac;\n    this.modifierLabels[1\n    /* Windows */\n    ] = windows;\n    this.modifierLabels[3\n    /* Linux */\n    ] = linux;\n  }\n\n  _createClass(ModifierLabelProvider, [{\n    key: \"toLabel\",\n    value: function toLabel(OS, parts, keyLabelProvider) {\n      if (parts.length === 0) {\n        return null;\n      }\n\n      var result = [];\n\n      for (var i = 0, len = parts.length; i < len; i++) {\n        var part = parts[i];\n        var keyLabel = keyLabelProvider(part);\n\n        if (keyLabel === null) {\n          // this keybinding cannot be expressed...\n          return null;\n        }\n\n        result[i] = _simpleAsString(part, keyLabel, this.modifierLabels[OS]);\n      }\n\n      return result.join(' ');\n    }\n  }]);\n\n  return ModifierLabelProvider;\n}();\n/**\r\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\r\n */\n\nexport var UILabelProvider = new ModifierLabelProvider({\n  ctrlKey: '⌃',\n  shiftKey: '⇧',\n  altKey: '⌥',\n  metaKey: '⌘',\n  separator: ''\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey',\n    comment: ['This is the short form for the Control key on the keyboard']\n  }, \"Ctrl\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey',\n    comment: ['This is the short form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey',\n    comment: ['This is the short form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'windowsKey',\n    comment: ['This is the short form for the Windows key on the keyboard']\n  }, \"Windows\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey',\n    comment: ['This is the short form for the Control key on the keyboard']\n  }, \"Ctrl\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey',\n    comment: ['This is the short form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey',\n    comment: ['This is the short form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'superKey',\n    comment: ['This is the short form for the Super key on the keyboard']\n  }, \"Super\"),\n  separator: '+'\n});\n/**\r\n * A label provider that prints modifiers in a suitable format for ARIA.\r\n */\n\nexport var AriaLabelProvider = new ModifierLabelProvider({\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'cmdKey.long',\n    comment: ['This is the long form for the Command key on the keyboard']\n  }, \"Command\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'windowsKey.long',\n    comment: ['This is the long form for the Windows key on the keyboard']\n  }, \"Windows\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'superKey.long',\n    comment: ['This is the long form for the Super key on the keyboard']\n  }, \"Super\"),\n  separator: '+'\n});\n\nfunction _simpleAsString(modifiers, key, labels) {\n  if (key === null) {\n    return '';\n  }\n\n  var result = []; // translate modifier keys: Ctrl-Shift-Alt-Meta\n\n  if (modifiers.ctrlKey) {\n    result.push(labels.ctrlKey);\n  }\n\n  if (modifiers.shiftKey) {\n    result.push(labels.shiftKey);\n  }\n\n  if (modifiers.altKey) {\n    result.push(labels.altKey);\n  }\n\n  if (modifiers.metaKey) {\n    result.push(labels.metaKey);\n  } // the actual key\n\n\n  if (key !== '') {\n    result.push(key);\n  }\n\n  return result.join(labels.separator);\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/common/keybindingLabels.js"],"names":["nls","ModifierLabelProvider","mac","windows","linux","modifierLabels","OS","parts","keyLabelProvider","length","result","i","len","part","keyLabel","_simpleAsString","join","UILabelProvider","ctrlKey","shiftKey","altKey","metaKey","separator","localize","key","comment","AriaLabelProvider","modifiers","labels","push"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../nls.js';\r\nexport class ModifierLabelProvider {\r\n    constructor(mac, windows, linux = windows) {\r\n        this.modifierLabels = [null]; // index 0 will never me accessed.\r\n        this.modifierLabels[2 /* Macintosh */] = mac;\r\n        this.modifierLabels[1 /* Windows */] = windows;\r\n        this.modifierLabels[3 /* Linux */] = linux;\r\n    }\r\n    toLabel(OS, parts, keyLabelProvider) {\r\n        if (parts.length === 0) {\r\n            return null;\r\n        }\r\n        const result = [];\r\n        for (let i = 0, len = parts.length; i < len; i++) {\r\n            const part = parts[i];\r\n            const keyLabel = keyLabelProvider(part);\r\n            if (keyLabel === null) {\r\n                // this keybinding cannot be expressed...\r\n                return null;\r\n            }\r\n            result[i] = _simpleAsString(part, keyLabel, this.modifierLabels[OS]);\r\n        }\r\n        return result.join(' ');\r\n    }\r\n}\r\n/**\r\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\r\n */\r\nexport const UILabelProvider = new ModifierLabelProvider({\r\n    ctrlKey: '⌃',\r\n    shiftKey: '⇧',\r\n    altKey: '⌥',\r\n    metaKey: '⌘',\r\n    separator: '',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, \"Windows\"),\r\n    separator: '+',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, \"Super\"),\r\n    separator: '+',\r\n});\r\n/**\r\n * A label provider that prints modifiers in a suitable format for ARIA.\r\n */\r\nexport const AriaLabelProvider = new ModifierLabelProvider({\r\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, \"Command\"),\r\n    separator: '+',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, \"Windows\"),\r\n    separator: '+',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, \"Super\"),\r\n    separator: '+',\r\n});\r\nfunction _simpleAsString(modifiers, key, labels) {\r\n    if (key === null) {\r\n        return '';\r\n    }\r\n    const result = [];\r\n    // translate modifier keys: Ctrl-Shift-Alt-Meta\r\n    if (modifiers.ctrlKey) {\r\n        result.push(labels.ctrlKey);\r\n    }\r\n    if (modifiers.shiftKey) {\r\n        result.push(labels.shiftKey);\r\n    }\r\n    if (modifiers.altKey) {\r\n        result.push(labels.altKey);\r\n    }\r\n    if (modifiers.metaKey) {\r\n        result.push(labels.metaKey);\r\n    }\r\n    // the actual key\r\n    if (key !== '') {\r\n        result.push(key);\r\n    }\r\n    return result.join(labels.separator);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}