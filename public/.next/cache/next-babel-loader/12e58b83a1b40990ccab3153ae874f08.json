{"ast":null,"code":"import _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './textAreaHandler.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Configuration } from '../config/configuration.js';\nimport { CopyOptions, TextAreaInput } from './textAreaInput.js';\nimport { PagedScreenReaderStrategy, TextAreaState } from './textAreaState.js';\nimport { PartFingerprints, ViewPart } from '../view/viewPart.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { getMapForWordSeparators } from '../../common/controller/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\n\nvar VisibleTextAreaData = /*#__PURE__*/function () {\n  function VisibleTextAreaData(top, left, width) {\n    _classCallCheck(this, VisibleTextAreaData);\n\n    this.top = top;\n    this.left = left;\n    this.width = width;\n  }\n\n  _createClass(VisibleTextAreaData, [{\n    key: \"setWidth\",\n    value: function setWidth(width) {\n      return new VisibleTextAreaData(this.top, this.left, width);\n    }\n  }]);\n\n  return VisibleTextAreaData;\n}();\n\nvar canUseZeroSizeTextarea = browser.isFirefox;\nexport var TextAreaHandler = /*#__PURE__*/function (_ViewPart) {\n  _inherits(TextAreaHandler, _ViewPart);\n\n  var _super = _createSuper(TextAreaHandler);\n\n  function TextAreaHandler(context, viewController, viewHelper) {\n    var _this;\n\n    _classCallCheck(this, TextAreaHandler);\n\n    _this = _super.call(this, context); // --- end view API\n\n    _this._primaryCursorPosition = new Position(1, 1);\n    _this._primaryCursorVisibleRange = null;\n    _this._viewController = viewController;\n    _this._viewHelper = viewHelper;\n    _this._scrollLeft = 0;\n    _this._scrollTop = 0;\n    var options = _this._context.configuration.options;\n    var layoutInfo = options.get(124\n    /* layoutInfo */\n    );\n\n    _this._setAccessibilityOptions(options);\n\n    _this._contentLeft = layoutInfo.contentLeft;\n    _this._contentWidth = layoutInfo.contentWidth;\n    _this._contentHeight = layoutInfo.height;\n    _this._fontInfo = options.get(38\n    /* fontInfo */\n    );\n    _this._lineHeight = options.get(53\n    /* lineHeight */\n    );\n    _this._emptySelectionClipboard = options.get(28\n    /* emptySelectionClipboard */\n    );\n    _this._copyWithSyntaxHighlighting = options.get(18\n    /* copyWithSyntaxHighlighting */\n    );\n    _this._visibleTextArea = null;\n    _this._selections = [new Selection(1, 1, 1, 1)];\n    _this._modelSelections = [new Selection(1, 1, 1, 1)];\n    _this._lastRenderPosition = null; // Text Area (The focus will always be in the textarea when the cursor is blinking)\n\n    _this.textArea = createFastDomNode(document.createElement('textarea'));\n    PartFingerprints.write(_this.textArea, 6\n    /* TextArea */\n    );\n\n    _this.textArea.setClassName(\"inputarea \".concat(MOUSE_CURSOR_TEXT_CSS_CLASS_NAME));\n\n    _this.textArea.setAttribute('wrap', 'off');\n\n    _this.textArea.setAttribute('autocorrect', 'off');\n\n    _this.textArea.setAttribute('autocapitalize', 'off');\n\n    _this.textArea.setAttribute('autocomplete', 'off');\n\n    _this.textArea.setAttribute('spellcheck', 'false');\n\n    _this.textArea.setAttribute('aria-label', _this._getAriaLabel(options));\n\n    _this.textArea.setAttribute('tabindex', String(options.get(107\n    /* tabIndex */\n    )));\n\n    _this.textArea.setAttribute('role', 'textbox');\n\n    _this.textArea.setAttribute('aria-roledescription', nls.localize('editor', \"editor\"));\n\n    _this.textArea.setAttribute('aria-multiline', 'true');\n\n    _this.textArea.setAttribute('aria-haspopup', 'false');\n\n    _this.textArea.setAttribute('aria-autocomplete', 'both');\n\n    if (platform.isWeb && options.get(75\n    /* readOnly */\n    )) {\n      _this.textArea.setAttribute('readonly', 'true');\n    }\n\n    _this.textAreaCover = createFastDomNode(document.createElement('div'));\n\n    _this.textAreaCover.setPosition('absolute');\n\n    var simpleModel = {\n      getLineCount: function getLineCount() {\n        return _this._context.model.getLineCount();\n      },\n      getLineMaxColumn: function getLineMaxColumn(lineNumber) {\n        return _this._context.model.getLineMaxColumn(lineNumber);\n      },\n      getValueInRange: function getValueInRange(range, eol) {\n        return _this._context.model.getValueInRange(range, eol);\n      }\n    };\n    var textAreaInputHost = {\n      getDataToCopy: function getDataToCopy(generateHTML) {\n        var rawTextToCopy = _this._context.model.getPlainTextToCopy(_this._modelSelections, _this._emptySelectionClipboard, platform.isWindows);\n\n        var newLineCharacter = _this._context.model.getEOL();\n\n        var isFromEmptySelection = _this._emptySelectionClipboard && _this._modelSelections.length === 1 && _this._modelSelections[0].isEmpty();\n\n        var multicursorText = Array.isArray(rawTextToCopy) ? rawTextToCopy : null;\n        var text = Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy;\n        var html = undefined;\n        var mode = null;\n\n        if (generateHTML) {\n          if (CopyOptions.forceCopyWithSyntaxHighlighting || _this._copyWithSyntaxHighlighting && text.length < 65536) {\n            var richText = _this._context.model.getRichTextToCopy(_this._modelSelections, _this._emptySelectionClipboard);\n\n            if (richText) {\n              html = richText.html;\n              mode = richText.mode;\n            }\n          }\n        }\n\n        return {\n          isFromEmptySelection: isFromEmptySelection,\n          multicursorText: multicursorText,\n          text: text,\n          html: html,\n          mode: mode\n        };\n      },\n      getScreenReaderContent: function getScreenReaderContent(currentState) {\n        if (_this._accessibilitySupport === 1\n        /* Disabled */\n        ) {\n            // We know for a fact that a screen reader is not attached\n            // On OSX, we write the character before the cursor to allow for \"long-press\" composition\n            // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n            if (platform.isMacintosh) {\n              var selection = _this._selections[0];\n\n              if (selection.isEmpty()) {\n                var position = selection.getStartPosition();\n\n                var textBefore = _this._getWordBeforePosition(position);\n\n                if (textBefore.length === 0) {\n                  textBefore = _this._getCharacterBeforePosition(position);\n                }\n\n                if (textBefore.length > 0) {\n                  return new TextAreaState(textBefore, textBefore.length, textBefore.length, position, position);\n                }\n              }\n            }\n\n            return TextAreaState.EMPTY;\n          }\n\n        return PagedScreenReaderStrategy.fromEditorSelection(currentState, simpleModel, _this._selections[0], _this._accessibilityPageSize, _this._accessibilitySupport === 0\n        /* Unknown */\n        );\n      },\n      deduceModelPosition: function deduceModelPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        return _this._context.model.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\n      }\n    };\n    _this._textAreaInput = _this._register(new TextAreaInput(textAreaInputHost, _this.textArea));\n\n    _this._register(_this._textAreaInput.onKeyDown(function (e) {\n      _this._viewController.emitKeyDown(e);\n    }));\n\n    _this._register(_this._textAreaInput.onKeyUp(function (e) {\n      _this._viewController.emitKeyUp(e);\n    }));\n\n    _this._register(_this._textAreaInput.onPaste(function (e) {\n      var pasteOnNewLine = false;\n      var multicursorText = null;\n      var mode = null;\n\n      if (e.metadata) {\n        pasteOnNewLine = _this._emptySelectionClipboard && !!e.metadata.isFromEmptySelection;\n        multicursorText = typeof e.metadata.multicursorText !== 'undefined' ? e.metadata.multicursorText : null;\n        mode = e.metadata.mode;\n      }\n\n      _this._viewController.paste(e.text, pasteOnNewLine, multicursorText, mode);\n    }));\n\n    _this._register(_this._textAreaInput.onCut(function () {\n      _this._viewController.cut();\n    }));\n\n    _this._register(_this._textAreaInput.onType(function (e) {\n      if (e.replaceCharCnt) {\n        _this._viewController.replacePreviousChar(e.text, e.replaceCharCnt);\n      } else {\n        _this._viewController.type(e.text);\n      }\n    }));\n\n    _this._register(_this._textAreaInput.onSelectionChangeRequest(function (modelSelection) {\n      _this._viewController.setSelection(modelSelection);\n    }));\n\n    _this._register(_this._textAreaInput.onCompositionStart(function (e) {\n      var lineNumber = _this._selections[0].startLineNumber;\n      var column = _this._selections[0].startColumn - (e.moveOneCharacterLeft ? 1 : 0);\n\n      _this._context.model.revealRange('keyboard', true, new Range(lineNumber, column, lineNumber, column), 0\n      /* Simple */\n      , 1\n      /* Immediate */\n      ); // Find range pixel position\n\n\n      var visibleRange = _this._viewHelper.visibleRangeForPositionRelativeToEditor(lineNumber, column);\n\n      if (visibleRange) {\n        _this._visibleTextArea = new VisibleTextAreaData(_this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber), visibleRange.left, canUseZeroSizeTextarea ? 0 : 1);\n\n        _this._render();\n      } // Show the textarea\n\n\n      _this.textArea.setClassName(\"inputarea \".concat(MOUSE_CURSOR_TEXT_CSS_CLASS_NAME, \" ime-input\"));\n\n      _this._viewController.compositionStart();\n\n      _this._context.model.onCompositionStart();\n    }));\n\n    _this._register(_this._textAreaInput.onCompositionUpdate(function (e) {\n      // adjust width by its size\n      _this._visibleTextArea = _this._visibleTextArea.setWidth(measureText(e.data, _this._fontInfo));\n\n      _this._render();\n    }));\n\n    _this._register(_this._textAreaInput.onCompositionEnd(function () {\n      _this._visibleTextArea = null;\n\n      _this._render();\n\n      _this.textArea.setClassName(\"inputarea \".concat(MOUSE_CURSOR_TEXT_CSS_CLASS_NAME));\n\n      _this._viewController.compositionEnd();\n\n      _this._context.model.onCompositionEnd();\n    }));\n\n    _this._register(_this._textAreaInput.onFocus(function () {\n      _this._context.model.setHasFocus(true);\n    }));\n\n    _this._register(_this._textAreaInput.onBlur(function () {\n      _this._context.model.setHasFocus(false);\n    }));\n\n    return _this;\n  }\n\n  _createClass(TextAreaHandler, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(TextAreaHandler.prototype), \"dispose\", this).call(this);\n    }\n  }, {\n    key: \"_getWordBeforePosition\",\n    value: function _getWordBeforePosition(position) {\n      var lineContent = this._context.model.getLineContent(position.lineNumber);\n\n      var wordSeparators = getMapForWordSeparators(this._context.configuration.options.get(110\n      /* wordSeparators */\n      ));\n      var column = position.column;\n      var distance = 0;\n\n      while (column > 1) {\n        var charCode = lineContent.charCodeAt(column - 2);\n        var charClass = wordSeparators.get(charCode);\n\n        if (charClass !== 0\n        /* Regular */\n        || distance > 50) {\n          return lineContent.substring(column - 1, position.column - 1);\n        }\n\n        distance++;\n        column--;\n      }\n\n      return lineContent.substring(0, position.column - 1);\n    }\n  }, {\n    key: \"_getCharacterBeforePosition\",\n    value: function _getCharacterBeforePosition(position) {\n      if (position.column > 1) {\n        var lineContent = this._context.model.getLineContent(position.lineNumber);\n\n        var charBefore = lineContent.charAt(position.column - 2);\n\n        if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n          return charBefore;\n        }\n      }\n\n      return '';\n    }\n  }, {\n    key: \"_getAriaLabel\",\n    value: function _getAriaLabel(options) {\n      var accessibilitySupport = options.get(2\n      /* accessibilitySupport */\n      );\n\n      if (accessibilitySupport === 1\n      /* Disabled */\n      ) {\n          return nls.localize('accessibilityOffAriaLabel', \"The editor is not accessible at this time. Press {0} for options.\", platform.isLinux ? 'Shift+Alt+F1' : 'Alt+F1');\n        }\n\n      return options.get(4\n      /* ariaLabel */\n      );\n    }\n  }, {\n    key: \"_setAccessibilityOptions\",\n    value: function _setAccessibilityOptions(options) {\n      this._accessibilitySupport = options.get(2\n      /* accessibilitySupport */\n      );\n      var accessibilityPageSize = options.get(3\n      /* accessibilityPageSize */\n      );\n\n      if (this._accessibilitySupport === 2\n      /* Enabled */\n      && accessibilityPageSize === EditorOptions.accessibilityPageSize.defaultValue) {\n        // If a screen reader is attached and the default value is not set we shuold automatically increase the page size to 100 for a better experience\n        // If we put more than 100 lines the nvda can not handle this https://github.com/microsoft/vscode/issues/89717\n        this._accessibilityPageSize = 100;\n      } else {\n        this._accessibilityPageSize = accessibilityPageSize;\n      }\n    } // --- begin event handlers\n\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n      var layoutInfo = options.get(124\n      /* layoutInfo */\n      );\n\n      this._setAccessibilityOptions(options);\n\n      this._contentLeft = layoutInfo.contentLeft;\n      this._contentWidth = layoutInfo.contentWidth;\n      this._contentHeight = layoutInfo.height;\n      this._fontInfo = options.get(38\n      /* fontInfo */\n      );\n      this._lineHeight = options.get(53\n      /* lineHeight */\n      );\n      this._emptySelectionClipboard = options.get(28\n      /* emptySelectionClipboard */\n      );\n      this._copyWithSyntaxHighlighting = options.get(18\n      /* copyWithSyntaxHighlighting */\n      );\n      this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n      this.textArea.setAttribute('tabindex', String(options.get(107\n      /* tabIndex */\n      )));\n\n      if (platform.isWeb && e.hasChanged(75\n      /* readOnly */\n      )) {\n        if (options.get(75\n        /* readOnly */\n        )) {\n          this.textArea.setAttribute('readonly', 'true');\n        } else {\n          this.textArea.removeAttribute('readonly');\n        }\n      }\n\n      if (e.hasChanged(2\n      /* accessibilitySupport */\n      )) {\n        this._textAreaInput.writeScreenReaderContent('strategy changed');\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onCursorStateChanged\",\n    value: function onCursorStateChanged(e) {\n      this._selections = e.selections.slice(0);\n      this._modelSelections = e.modelSelections.slice(0);\n\n      this._textAreaInput.writeScreenReaderContent('selection changed');\n\n      return true;\n    }\n  }, {\n    key: \"onDecorationsChanged\",\n    value: function onDecorationsChanged(e) {\n      // true for inline decorations that can end up relayouting text\n      return true;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      this._scrollLeft = e.scrollLeft;\n      this._scrollTop = e.scrollTop;\n      return true;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    } // --- end event handlers\n    // --- begin view API\n\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this._textAreaInput.isFocused();\n    }\n  }, {\n    key: \"focusTextArea\",\n    value: function focusTextArea() {\n      this._textAreaInput.focusTextArea();\n    }\n  }, {\n    key: \"getLastRenderData\",\n    value: function getLastRenderData() {\n      return this._lastRenderPosition;\n    }\n  }, {\n    key: \"setAriaOptions\",\n    value: function setAriaOptions(options) {\n      if (options.activeDescendant) {\n        this.textArea.setAttribute('aria-haspopup', 'true');\n        this.textArea.setAttribute('aria-autocomplete', 'list');\n        this.textArea.setAttribute('aria-activedescendant', options.activeDescendant);\n      } else {\n        this.textArea.setAttribute('aria-haspopup', 'false');\n        this.textArea.setAttribute('aria-autocomplete', 'both');\n        this.textArea.removeAttribute('aria-activedescendant');\n      }\n\n      if (options.role) {\n        this.textArea.setAttribute('role', options.role);\n      }\n    }\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      this._primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\n      this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(this._primaryCursorPosition);\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx) {\n      this._textAreaInput.writeScreenReaderContent('render');\n\n      this._render();\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      if (this._visibleTextArea) {\n        // The text area is visible for composition reasons\n        this._renderInsideEditor(null, this._visibleTextArea.top - this._scrollTop, this._contentLeft + this._visibleTextArea.left - this._scrollLeft, this._visibleTextArea.width, this._lineHeight);\n\n        return;\n      }\n\n      if (!this._primaryCursorVisibleRange) {\n        // The primary cursor is outside the viewport => place textarea to the top left\n        this._renderAtTopLeft();\n\n        return;\n      }\n\n      var left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\n\n      if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\n        // cursor is outside the viewport\n        this._renderAtTopLeft();\n\n        return;\n      }\n\n      var top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\n\n      if (top < 0 || top > this._contentHeight) {\n        // cursor is outside the viewport\n        this._renderAtTopLeft();\n\n        return;\n      } // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n\n\n      if (platform.isMacintosh) {\n        // For the popup emoji input, we will make the text area as high as the line height\n        // We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\n        this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, this._lineHeight);\n\n        return;\n      }\n\n      this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, canUseZeroSizeTextarea ? 0 : 1);\n    }\n  }, {\n    key: \"_renderInsideEditor\",\n    value: function _renderInsideEditor(renderedPosition, top, left, width, height) {\n      this._lastRenderPosition = renderedPosition;\n      var ta = this.textArea;\n      var tac = this.textAreaCover;\n      Configuration.applyFontInfo(ta, this._fontInfo);\n      ta.setTop(top);\n      ta.setLeft(left);\n      ta.setWidth(width);\n      ta.setHeight(height);\n      tac.setTop(0);\n      tac.setLeft(0);\n      tac.setWidth(0);\n      tac.setHeight(0);\n    }\n  }, {\n    key: \"_renderAtTopLeft\",\n    value: function _renderAtTopLeft() {\n      this._lastRenderPosition = null;\n      var ta = this.textArea;\n      var tac = this.textAreaCover;\n      Configuration.applyFontInfo(ta, this._fontInfo);\n      ta.setTop(0);\n      ta.setLeft(0);\n      tac.setTop(0);\n      tac.setLeft(0);\n\n      if (canUseZeroSizeTextarea) {\n        ta.setWidth(0);\n        ta.setHeight(0);\n        tac.setWidth(0);\n        tac.setHeight(0);\n        return;\n      } // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n      // specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\n\n\n      ta.setWidth(1);\n      ta.setHeight(1);\n      tac.setWidth(1);\n      tac.setHeight(1);\n      var options = this._context.configuration.options;\n\n      if (options.get(44\n      /* glyphMargin */\n      )) {\n        tac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\n      } else {\n        if (options.get(54\n        /* lineNumbers */\n        ).renderType !== 0\n        /* Off */\n        ) {\n            tac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\n          } else {\n          tac.setClassName('monaco-editor-background textAreaCover');\n        }\n      }\n    }\n  }]);\n\n  return TextAreaHandler;\n}(ViewPart);\n\nfunction measureText(text, fontInfo) {\n  // adjust width by its size\n  var canvasElem = document.createElement('canvas');\n  var context = canvasElem.getContext('2d');\n  context.font = createFontString(fontInfo);\n  var metrics = context.measureText(text);\n\n  if (browser.isFirefox) {\n    return metrics.width + 2; // +2 for Japanese...\n  } else {\n    return metrics.width;\n  }\n}\n\nfunction createFontString(bareFontInfo) {\n  return doCreateFontString('normal', bareFontInfo.fontWeight, bareFontInfo.fontSize, bareFontInfo.lineHeight, bareFontInfo.fontFamily);\n}\n\nfunction doCreateFontString(fontStyle, fontWeight, fontSize, lineHeight, fontFamily) {\n  // The full font syntax is:\n  // style | variant | weight | stretch | size/line-height | fontFamily\n  // (https://developer.mozilla.org/en-US/docs/Web/CSS/font)\n  // But it appears Edge and IE11 cannot properly parse `stretch`.\n  return \"\".concat(fontStyle, \" normal \").concat(fontWeight, \" \").concat(fontSize, \"px / \").concat(lineHeight, \"px \").concat(fontFamily);\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaHandler.js"],"names":["nls","browser","createFastDomNode","platform","strings","Configuration","CopyOptions","TextAreaInput","PagedScreenReaderStrategy","TextAreaState","PartFingerprints","ViewPart","LineNumbersOverlay","Margin","EditorOptions","getMapForWordSeparators","Position","Range","Selection","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","VisibleTextAreaData","top","left","width","canUseZeroSizeTextarea","isFirefox","TextAreaHandler","context","viewController","viewHelper","_primaryCursorPosition","_primaryCursorVisibleRange","_viewController","_viewHelper","_scrollLeft","_scrollTop","options","_context","configuration","layoutInfo","get","_setAccessibilityOptions","_contentLeft","contentLeft","_contentWidth","contentWidth","_contentHeight","height","_fontInfo","_lineHeight","_emptySelectionClipboard","_copyWithSyntaxHighlighting","_visibleTextArea","_selections","_modelSelections","_lastRenderPosition","textArea","document","createElement","write","setClassName","setAttribute","_getAriaLabel","String","localize","isWeb","textAreaCover","setPosition","simpleModel","getLineCount","model","getLineMaxColumn","lineNumber","getValueInRange","range","eol","textAreaInputHost","getDataToCopy","generateHTML","rawTextToCopy","getPlainTextToCopy","isWindows","newLineCharacter","getEOL","isFromEmptySelection","length","isEmpty","multicursorText","Array","isArray","text","join","html","undefined","mode","forceCopyWithSyntaxHighlighting","richText","getRichTextToCopy","getScreenReaderContent","currentState","_accessibilitySupport","isMacintosh","selection","position","getStartPosition","textBefore","_getWordBeforePosition","_getCharacterBeforePosition","EMPTY","fromEditorSelection","_accessibilityPageSize","deduceModelPosition","viewAnchorPosition","deltaOffset","lineFeedCnt","deduceModelPositionRelativeToViewPosition","_textAreaInput","_register","onKeyDown","e","emitKeyDown","onKeyUp","emitKeyUp","onPaste","pasteOnNewLine","metadata","paste","onCut","cut","onType","replaceCharCnt","replacePreviousChar","type","onSelectionChangeRequest","modelSelection","setSelection","onCompositionStart","startLineNumber","column","startColumn","moveOneCharacterLeft","revealRange","visibleRange","visibleRangeForPositionRelativeToEditor","viewLayout","getVerticalOffsetForLineNumber","_render","compositionStart","onCompositionUpdate","setWidth","measureText","data","onCompositionEnd","compositionEnd","onFocus","setHasFocus","onBlur","lineContent","getLineContent","wordSeparators","distance","charCode","charCodeAt","charClass","substring","charBefore","charAt","isHighSurrogate","accessibilitySupport","isLinux","accessibilityPageSize","defaultValue","hasChanged","removeAttribute","writeScreenReaderContent","selections","slice","modelSelections","scrollLeft","scrollTop","isFocused","focusTextArea","activeDescendant","role","ctx","positionLineNumber","positionColumn","visibleRangeForPosition","_renderInsideEditor","_renderAtTopLeft","renderedPosition","ta","tac","applyFontInfo","setTop","setLeft","setHeight","OUTER_CLASS_NAME","renderType","CLASS_NAME","fontInfo","canvasElem","getContext","font","createFontString","metrics","bareFontInfo","doCreateFontString","fontWeight","fontSize","lineHeight","fontFamily","fontStyle"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './textAreaHandler.css';\r\nimport * as nls from '../../../nls.js';\r\nimport * as browser from '../../../base/browser/browser.js';\r\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { Configuration } from '../config/configuration.js';\r\nimport { CopyOptions, TextAreaInput } from './textAreaInput.js';\r\nimport { PagedScreenReaderStrategy, TextAreaState } from './textAreaState.js';\r\nimport { PartFingerprints, ViewPart } from '../view/viewPart.js';\r\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\r\nimport { Margin } from '../viewParts/margin/margin.js';\r\nimport { EditorOptions } from '../../common/config/editorOptions.js';\r\nimport { getMapForWordSeparators } from '../../common/controller/wordCharacterClassifier.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\r\nclass VisibleTextAreaData {\r\n    constructor(top, left, width) {\r\n        this.top = top;\r\n        this.left = left;\r\n        this.width = width;\r\n    }\r\n    setWidth(width) {\r\n        return new VisibleTextAreaData(this.top, this.left, width);\r\n    }\r\n}\r\nconst canUseZeroSizeTextarea = (browser.isFirefox);\r\nexport class TextAreaHandler extends ViewPart {\r\n    constructor(context, viewController, viewHelper) {\r\n        super(context);\r\n        // --- end view API\r\n        this._primaryCursorPosition = new Position(1, 1);\r\n        this._primaryCursorVisibleRange = null;\r\n        this._viewController = viewController;\r\n        this._viewHelper = viewHelper;\r\n        this._scrollLeft = 0;\r\n        this._scrollTop = 0;\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._setAccessibilityOptions(options);\r\n        this._contentLeft = layoutInfo.contentLeft;\r\n        this._contentWidth = layoutInfo.contentWidth;\r\n        this._contentHeight = layoutInfo.height;\r\n        this._fontInfo = options.get(38 /* fontInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._emptySelectionClipboard = options.get(28 /* emptySelectionClipboard */);\r\n        this._copyWithSyntaxHighlighting = options.get(18 /* copyWithSyntaxHighlighting */);\r\n        this._visibleTextArea = null;\r\n        this._selections = [new Selection(1, 1, 1, 1)];\r\n        this._modelSelections = [new Selection(1, 1, 1, 1)];\r\n        this._lastRenderPosition = null;\r\n        // Text Area (The focus will always be in the textarea when the cursor is blinking)\r\n        this.textArea = createFastDomNode(document.createElement('textarea'));\r\n        PartFingerprints.write(this.textArea, 6 /* TextArea */);\r\n        this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\r\n        this.textArea.setAttribute('wrap', 'off');\r\n        this.textArea.setAttribute('autocorrect', 'off');\r\n        this.textArea.setAttribute('autocapitalize', 'off');\r\n        this.textArea.setAttribute('autocomplete', 'off');\r\n        this.textArea.setAttribute('spellcheck', 'false');\r\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\r\n        this.textArea.setAttribute('tabindex', String(options.get(107 /* tabIndex */)));\r\n        this.textArea.setAttribute('role', 'textbox');\r\n        this.textArea.setAttribute('aria-roledescription', nls.localize('editor', \"editor\"));\r\n        this.textArea.setAttribute('aria-multiline', 'true');\r\n        this.textArea.setAttribute('aria-haspopup', 'false');\r\n        this.textArea.setAttribute('aria-autocomplete', 'both');\r\n        if (platform.isWeb && options.get(75 /* readOnly */)) {\r\n            this.textArea.setAttribute('readonly', 'true');\r\n        }\r\n        this.textAreaCover = createFastDomNode(document.createElement('div'));\r\n        this.textAreaCover.setPosition('absolute');\r\n        const simpleModel = {\r\n            getLineCount: () => {\r\n                return this._context.model.getLineCount();\r\n            },\r\n            getLineMaxColumn: (lineNumber) => {\r\n                return this._context.model.getLineMaxColumn(lineNumber);\r\n            },\r\n            getValueInRange: (range, eol) => {\r\n                return this._context.model.getValueInRange(range, eol);\r\n            }\r\n        };\r\n        const textAreaInputHost = {\r\n            getDataToCopy: (generateHTML) => {\r\n                const rawTextToCopy = this._context.model.getPlainTextToCopy(this._modelSelections, this._emptySelectionClipboard, platform.isWindows);\r\n                const newLineCharacter = this._context.model.getEOL();\r\n                const isFromEmptySelection = (this._emptySelectionClipboard && this._modelSelections.length === 1 && this._modelSelections[0].isEmpty());\r\n                const multicursorText = (Array.isArray(rawTextToCopy) ? rawTextToCopy : null);\r\n                const text = (Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy);\r\n                let html = undefined;\r\n                let mode = null;\r\n                if (generateHTML) {\r\n                    if (CopyOptions.forceCopyWithSyntaxHighlighting || (this._copyWithSyntaxHighlighting && text.length < 65536)) {\r\n                        const richText = this._context.model.getRichTextToCopy(this._modelSelections, this._emptySelectionClipboard);\r\n                        if (richText) {\r\n                            html = richText.html;\r\n                            mode = richText.mode;\r\n                        }\r\n                    }\r\n                }\r\n                return {\r\n                    isFromEmptySelection,\r\n                    multicursorText,\r\n                    text,\r\n                    html,\r\n                    mode\r\n                };\r\n            },\r\n            getScreenReaderContent: (currentState) => {\r\n                if (this._accessibilitySupport === 1 /* Disabled */) {\r\n                    // We know for a fact that a screen reader is not attached\r\n                    // On OSX, we write the character before the cursor to allow for \"long-press\" composition\r\n                    // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\r\n                    if (platform.isMacintosh) {\r\n                        const selection = this._selections[0];\r\n                        if (selection.isEmpty()) {\r\n                            const position = selection.getStartPosition();\r\n                            let textBefore = this._getWordBeforePosition(position);\r\n                            if (textBefore.length === 0) {\r\n                                textBefore = this._getCharacterBeforePosition(position);\r\n                            }\r\n                            if (textBefore.length > 0) {\r\n                                return new TextAreaState(textBefore, textBefore.length, textBefore.length, position, position);\r\n                            }\r\n                        }\r\n                    }\r\n                    return TextAreaState.EMPTY;\r\n                }\r\n                return PagedScreenReaderStrategy.fromEditorSelection(currentState, simpleModel, this._selections[0], this._accessibilityPageSize, this._accessibilitySupport === 0 /* Unknown */);\r\n            },\r\n            deduceModelPosition: (viewAnchorPosition, deltaOffset, lineFeedCnt) => {\r\n                return this._context.model.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\r\n            }\r\n        };\r\n        this._textAreaInput = this._register(new TextAreaInput(textAreaInputHost, this.textArea));\r\n        this._register(this._textAreaInput.onKeyDown((e) => {\r\n            this._viewController.emitKeyDown(e);\r\n        }));\r\n        this._register(this._textAreaInput.onKeyUp((e) => {\r\n            this._viewController.emitKeyUp(e);\r\n        }));\r\n        this._register(this._textAreaInput.onPaste((e) => {\r\n            let pasteOnNewLine = false;\r\n            let multicursorText = null;\r\n            let mode = null;\r\n            if (e.metadata) {\r\n                pasteOnNewLine = (this._emptySelectionClipboard && !!e.metadata.isFromEmptySelection);\r\n                multicursorText = (typeof e.metadata.multicursorText !== 'undefined' ? e.metadata.multicursorText : null);\r\n                mode = e.metadata.mode;\r\n            }\r\n            this._viewController.paste(e.text, pasteOnNewLine, multicursorText, mode);\r\n        }));\r\n        this._register(this._textAreaInput.onCut(() => {\r\n            this._viewController.cut();\r\n        }));\r\n        this._register(this._textAreaInput.onType((e) => {\r\n            if (e.replaceCharCnt) {\r\n                this._viewController.replacePreviousChar(e.text, e.replaceCharCnt);\r\n            }\r\n            else {\r\n                this._viewController.type(e.text);\r\n            }\r\n        }));\r\n        this._register(this._textAreaInput.onSelectionChangeRequest((modelSelection) => {\r\n            this._viewController.setSelection(modelSelection);\r\n        }));\r\n        this._register(this._textAreaInput.onCompositionStart((e) => {\r\n            const lineNumber = this._selections[0].startLineNumber;\r\n            const column = this._selections[0].startColumn - (e.moveOneCharacterLeft ? 1 : 0);\r\n            this._context.model.revealRange('keyboard', true, new Range(lineNumber, column, lineNumber, column), 0 /* Simple */, 1 /* Immediate */);\r\n            // Find range pixel position\r\n            const visibleRange = this._viewHelper.visibleRangeForPositionRelativeToEditor(lineNumber, column);\r\n            if (visibleRange) {\r\n                this._visibleTextArea = new VisibleTextAreaData(this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber), visibleRange.left, canUseZeroSizeTextarea ? 0 : 1);\r\n                this._render();\r\n            }\r\n            // Show the textarea\r\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ime-input`);\r\n            this._viewController.compositionStart();\r\n            this._context.model.onCompositionStart();\r\n        }));\r\n        this._register(this._textAreaInput.onCompositionUpdate((e) => {\r\n            // adjust width by its size\r\n            this._visibleTextArea = this._visibleTextArea.setWidth(measureText(e.data, this._fontInfo));\r\n            this._render();\r\n        }));\r\n        this._register(this._textAreaInput.onCompositionEnd(() => {\r\n            this._visibleTextArea = null;\r\n            this._render();\r\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\r\n            this._viewController.compositionEnd();\r\n            this._context.model.onCompositionEnd();\r\n        }));\r\n        this._register(this._textAreaInput.onFocus(() => {\r\n            this._context.model.setHasFocus(true);\r\n        }));\r\n        this._register(this._textAreaInput.onBlur(() => {\r\n            this._context.model.setHasFocus(false);\r\n        }));\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n    }\r\n    _getWordBeforePosition(position) {\r\n        const lineContent = this._context.model.getLineContent(position.lineNumber);\r\n        const wordSeparators = getMapForWordSeparators(this._context.configuration.options.get(110 /* wordSeparators */));\r\n        let column = position.column;\r\n        let distance = 0;\r\n        while (column > 1) {\r\n            const charCode = lineContent.charCodeAt(column - 2);\r\n            const charClass = wordSeparators.get(charCode);\r\n            if (charClass !== 0 /* Regular */ || distance > 50) {\r\n                return lineContent.substring(column - 1, position.column - 1);\r\n            }\r\n            distance++;\r\n            column--;\r\n        }\r\n        return lineContent.substring(0, position.column - 1);\r\n    }\r\n    _getCharacterBeforePosition(position) {\r\n        if (position.column > 1) {\r\n            const lineContent = this._context.model.getLineContent(position.lineNumber);\r\n            const charBefore = lineContent.charAt(position.column - 2);\r\n            if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\r\n                return charBefore;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    _getAriaLabel(options) {\r\n        const accessibilitySupport = options.get(2 /* accessibilitySupport */);\r\n        if (accessibilitySupport === 1 /* Disabled */) {\r\n            return nls.localize('accessibilityOffAriaLabel', \"The editor is not accessible at this time. Press {0} for options.\", platform.isLinux ? 'Shift+Alt+F1' : 'Alt+F1');\r\n        }\r\n        return options.get(4 /* ariaLabel */);\r\n    }\r\n    _setAccessibilityOptions(options) {\r\n        this._accessibilitySupport = options.get(2 /* accessibilitySupport */);\r\n        const accessibilityPageSize = options.get(3 /* accessibilityPageSize */);\r\n        if (this._accessibilitySupport === 2 /* Enabled */ && accessibilityPageSize === EditorOptions.accessibilityPageSize.defaultValue) {\r\n            // If a screen reader is attached and the default value is not set we shuold automatically increase the page size to 100 for a better experience\r\n            // If we put more than 100 lines the nvda can not handle this https://github.com/microsoft/vscode/issues/89717\r\n            this._accessibilityPageSize = 100;\r\n        }\r\n        else {\r\n            this._accessibilityPageSize = accessibilityPageSize;\r\n        }\r\n    }\r\n    // --- begin event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._setAccessibilityOptions(options);\r\n        this._contentLeft = layoutInfo.contentLeft;\r\n        this._contentWidth = layoutInfo.contentWidth;\r\n        this._contentHeight = layoutInfo.height;\r\n        this._fontInfo = options.get(38 /* fontInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._emptySelectionClipboard = options.get(28 /* emptySelectionClipboard */);\r\n        this._copyWithSyntaxHighlighting = options.get(18 /* copyWithSyntaxHighlighting */);\r\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\r\n        this.textArea.setAttribute('tabindex', String(options.get(107 /* tabIndex */)));\r\n        if (platform.isWeb && e.hasChanged(75 /* readOnly */)) {\r\n            if (options.get(75 /* readOnly */)) {\r\n                this.textArea.setAttribute('readonly', 'true');\r\n            }\r\n            else {\r\n                this.textArea.removeAttribute('readonly');\r\n            }\r\n        }\r\n        if (e.hasChanged(2 /* accessibilitySupport */)) {\r\n            this._textAreaInput.writeScreenReaderContent('strategy changed');\r\n        }\r\n        return true;\r\n    }\r\n    onCursorStateChanged(e) {\r\n        this._selections = e.selections.slice(0);\r\n        this._modelSelections = e.modelSelections.slice(0);\r\n        this._textAreaInput.writeScreenReaderContent('selection changed');\r\n        return true;\r\n    }\r\n    onDecorationsChanged(e) {\r\n        // true for inline decorations that can end up relayouting text\r\n        return true;\r\n    }\r\n    onFlushed(e) {\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return true;\r\n    }\r\n    onLinesDeleted(e) {\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        this._scrollLeft = e.scrollLeft;\r\n        this._scrollTop = e.scrollTop;\r\n        return true;\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    // --- end event handlers\r\n    // --- begin view API\r\n    isFocused() {\r\n        return this._textAreaInput.isFocused();\r\n    }\r\n    focusTextArea() {\r\n        this._textAreaInput.focusTextArea();\r\n    }\r\n    getLastRenderData() {\r\n        return this._lastRenderPosition;\r\n    }\r\n    setAriaOptions(options) {\r\n        if (options.activeDescendant) {\r\n            this.textArea.setAttribute('aria-haspopup', 'true');\r\n            this.textArea.setAttribute('aria-autocomplete', 'list');\r\n            this.textArea.setAttribute('aria-activedescendant', options.activeDescendant);\r\n        }\r\n        else {\r\n            this.textArea.setAttribute('aria-haspopup', 'false');\r\n            this.textArea.setAttribute('aria-autocomplete', 'both');\r\n            this.textArea.removeAttribute('aria-activedescendant');\r\n        }\r\n        if (options.role) {\r\n            this.textArea.setAttribute('role', options.role);\r\n        }\r\n    }\r\n    prepareRender(ctx) {\r\n        this._primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\r\n        this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(this._primaryCursorPosition);\r\n    }\r\n    render(ctx) {\r\n        this._textAreaInput.writeScreenReaderContent('render');\r\n        this._render();\r\n    }\r\n    _render() {\r\n        if (this._visibleTextArea) {\r\n            // The text area is visible for composition reasons\r\n            this._renderInsideEditor(null, this._visibleTextArea.top - this._scrollTop, this._contentLeft + this._visibleTextArea.left - this._scrollLeft, this._visibleTextArea.width, this._lineHeight);\r\n            return;\r\n        }\r\n        if (!this._primaryCursorVisibleRange) {\r\n            // The primary cursor is outside the viewport => place textarea to the top left\r\n            this._renderAtTopLeft();\r\n            return;\r\n        }\r\n        const left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\r\n        if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\r\n            // cursor is outside the viewport\r\n            this._renderAtTopLeft();\r\n            return;\r\n        }\r\n        const top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\r\n        if (top < 0 || top > this._contentHeight) {\r\n            // cursor is outside the viewport\r\n            this._renderAtTopLeft();\r\n            return;\r\n        }\r\n        // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\r\n        if (platform.isMacintosh) {\r\n            // For the popup emoji input, we will make the text area as high as the line height\r\n            // We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\r\n            this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, this._lineHeight);\r\n            return;\r\n        }\r\n        this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, canUseZeroSizeTextarea ? 0 : 1);\r\n    }\r\n    _renderInsideEditor(renderedPosition, top, left, width, height) {\r\n        this._lastRenderPosition = renderedPosition;\r\n        const ta = this.textArea;\r\n        const tac = this.textAreaCover;\r\n        Configuration.applyFontInfo(ta, this._fontInfo);\r\n        ta.setTop(top);\r\n        ta.setLeft(left);\r\n        ta.setWidth(width);\r\n        ta.setHeight(height);\r\n        tac.setTop(0);\r\n        tac.setLeft(0);\r\n        tac.setWidth(0);\r\n        tac.setHeight(0);\r\n    }\r\n    _renderAtTopLeft() {\r\n        this._lastRenderPosition = null;\r\n        const ta = this.textArea;\r\n        const tac = this.textAreaCover;\r\n        Configuration.applyFontInfo(ta, this._fontInfo);\r\n        ta.setTop(0);\r\n        ta.setLeft(0);\r\n        tac.setTop(0);\r\n        tac.setLeft(0);\r\n        if (canUseZeroSizeTextarea) {\r\n            ta.setWidth(0);\r\n            ta.setHeight(0);\r\n            tac.setWidth(0);\r\n            tac.setHeight(0);\r\n            return;\r\n        }\r\n        // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\r\n        // specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\r\n        ta.setWidth(1);\r\n        ta.setHeight(1);\r\n        tac.setWidth(1);\r\n        tac.setHeight(1);\r\n        const options = this._context.configuration.options;\r\n        if (options.get(44 /* glyphMargin */)) {\r\n            tac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\r\n        }\r\n        else {\r\n            if (options.get(54 /* lineNumbers */).renderType !== 0 /* Off */) {\r\n                tac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\r\n            }\r\n            else {\r\n                tac.setClassName('monaco-editor-background textAreaCover');\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction measureText(text, fontInfo) {\r\n    // adjust width by its size\r\n    const canvasElem = document.createElement('canvas');\r\n    const context = canvasElem.getContext('2d');\r\n    context.font = createFontString(fontInfo);\r\n    const metrics = context.measureText(text);\r\n    if (browser.isFirefox) {\r\n        return metrics.width + 2; // +2 for Japanese...\r\n    }\r\n    else {\r\n        return metrics.width;\r\n    }\r\n}\r\nfunction createFontString(bareFontInfo) {\r\n    return doCreateFontString('normal', bareFontInfo.fontWeight, bareFontInfo.fontSize, bareFontInfo.lineHeight, bareFontInfo.fontFamily);\r\n}\r\nfunction doCreateFontString(fontStyle, fontWeight, fontSize, lineHeight, fontFamily) {\r\n    // The full font syntax is:\r\n    // style | variant | weight | stretch | size/line-height | fontFamily\r\n    // (https://developer.mozilla.org/en-US/docs/Web/CSS/font)\r\n    // But it appears Edge and IE11 cannot properly parse `stretch`.\r\n    return `${fontStyle} normal ${fontWeight} ${fontSize}px / ${lineHeight}px ${fontFamily}`;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}