{"ast":null,"code":"import _toConsumableArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as mime from '../../../base/common/mime.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { LanguageIdentifier } from '../modes.js';\nimport { ModesRegistry } from '../modes/modesRegistry.js';\nimport { NULL_LANGUAGE_IDENTIFIER, NULL_MODE_ID } from '../modes/nullMode.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport var LanguagesRegistry = /*#__PURE__*/function (_Disposable) {\n  _inherits(LanguagesRegistry, _Disposable);\n\n  var _super = _createSuper(LanguagesRegistry);\n\n  function LanguagesRegistry() {\n    var _this;\n\n    var useModesRegistry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var warnOnOverwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, LanguagesRegistry);\n\n    _this = _super.call(this);\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    _this._warnOnOverwrite = warnOnOverwrite;\n    _this._nextLanguageId2 = 1;\n    _this._languageIdToLanguage = [];\n    _this._languageToLanguageId = Object.create(null);\n    _this._languages = {};\n    _this._mimeTypesMap = {};\n    _this._nameMap = {};\n    _this._lowercaseNameMap = {};\n\n    if (useModesRegistry) {\n      _this._initializeFromRegistry();\n\n      _this._register(ModesRegistry.onDidChangeLanguages(function (m) {\n        return _this._initializeFromRegistry();\n      }));\n    }\n\n    return _this;\n  }\n\n  _createClass(LanguagesRegistry, [{\n    key: \"_initializeFromRegistry\",\n    value: function _initializeFromRegistry() {\n      this._languages = {};\n      this._mimeTypesMap = {};\n      this._nameMap = {};\n      this._lowercaseNameMap = {};\n      var desc = ModesRegistry.getLanguages();\n\n      this._registerLanguages(desc);\n    }\n  }, {\n    key: \"_registerLanguages\",\n    value: function _registerLanguages(desc) {\n      var _this2 = this;\n\n      var _iterator = _createForOfIteratorHelper(desc),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var d = _step.value;\n\n          this._registerLanguage(d);\n        } // Rebuild fast path maps\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._mimeTypesMap = {};\n      this._nameMap = {};\n      this._lowercaseNameMap = {};\n      Object.keys(this._languages).forEach(function (langId) {\n        var language = _this2._languages[langId];\n\n        if (language.name) {\n          _this2._nameMap[language.name] = language.identifier;\n        }\n\n        language.aliases.forEach(function (alias) {\n          _this2._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n        });\n        language.mimetypes.forEach(function (mimetype) {\n          _this2._mimeTypesMap[mimetype] = language.identifier;\n        });\n      });\n      Registry.as(Extensions.Configuration).registerOverrideIdentifiers(ModesRegistry.getLanguages().map(function (language) {\n        return language.id;\n      }));\n\n      this._onDidChange.fire();\n    }\n  }, {\n    key: \"_getLanguageId\",\n    value: function _getLanguageId(language) {\n      if (this._languageToLanguageId[language]) {\n        return this._languageToLanguageId[language];\n      }\n\n      var languageId = this._nextLanguageId2++;\n      this._languageIdToLanguage[languageId] = language;\n      this._languageToLanguageId[language] = languageId;\n      return languageId;\n    }\n  }, {\n    key: \"_registerLanguage\",\n    value: function _registerLanguage(lang) {\n      var langId = lang.id;\n      var resolvedLanguage;\n\n      if (hasOwnProperty.call(this._languages, langId)) {\n        resolvedLanguage = this._languages[langId];\n      } else {\n        var languageId = this._getLanguageId(langId);\n\n        resolvedLanguage = {\n          identifier: new LanguageIdentifier(langId, languageId),\n          name: null,\n          mimetypes: [],\n          aliases: [],\n          extensions: [],\n          filenames: [],\n          configurationFiles: []\n        };\n        this._languages[langId] = resolvedLanguage;\n      }\n\n      this._mergeLanguage(resolvedLanguage, lang);\n    }\n  }, {\n    key: \"_mergeLanguage\",\n    value: function _mergeLanguage(resolvedLanguage, lang) {\n      var langId = lang.id;\n      var primaryMime = null;\n\n      if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n        var _resolvedLanguage$mim;\n\n        (_resolvedLanguage$mim = resolvedLanguage.mimetypes).push.apply(_resolvedLanguage$mim, _toConsumableArray(lang.mimetypes));\n\n        primaryMime = lang.mimetypes[0];\n      }\n\n      if (!primaryMime) {\n        primaryMime = \"text/x-\".concat(langId);\n        resolvedLanguage.mimetypes.push(primaryMime);\n      }\n\n      if (Array.isArray(lang.extensions)) {\n        if (lang.configuration) {\n          // insert first as this appears to be the 'primary' language definition\n          resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n        } else {\n          resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n        }\n\n        var _iterator2 = _createForOfIteratorHelper(lang.extensions),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var extension = _step2.value;\n            mime.registerTextMime({\n              id: langId,\n              mime: primaryMime,\n              extension: extension\n            }, this._warnOnOverwrite);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      if (Array.isArray(lang.filenames)) {\n        var _iterator3 = _createForOfIteratorHelper(lang.filenames),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var filename = _step3.value;\n            mime.registerTextMime({\n              id: langId,\n              mime: primaryMime,\n              filename: filename\n            }, this._warnOnOverwrite);\n            resolvedLanguage.filenames.push(filename);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      if (Array.isArray(lang.filenamePatterns)) {\n        var _iterator4 = _createForOfIteratorHelper(lang.filenamePatterns),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var filenamePattern = _step4.value;\n            mime.registerTextMime({\n              id: langId,\n              mime: primaryMime,\n              filepattern: filenamePattern\n            }, this._warnOnOverwrite);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n\n      if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n        var firstLineRegexStr = lang.firstLine;\n\n        if (firstLineRegexStr.charAt(0) !== '^') {\n          firstLineRegexStr = '^' + firstLineRegexStr;\n        }\n\n        try {\n          var firstLineRegex = new RegExp(firstLineRegexStr);\n\n          if (!strings.regExpLeadsToEndlessLoop(firstLineRegex)) {\n            mime.registerTextMime({\n              id: langId,\n              mime: primaryMime,\n              firstline: firstLineRegex\n            }, this._warnOnOverwrite);\n          }\n        } catch (err) {\n          // Most likely, the regex was bad\n          onUnexpectedError(err);\n        }\n      }\n\n      resolvedLanguage.aliases.push(langId);\n      var langAliases = null;\n\n      if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n        if (lang.aliases.length === 0) {\n          // signal that this language should not get a name\n          langAliases = [null];\n        } else {\n          langAliases = lang.aliases;\n        }\n      }\n\n      if (langAliases !== null) {\n        var _iterator5 = _createForOfIteratorHelper(langAliases),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var langAlias = _step5.value;\n\n            if (!langAlias || langAlias.length === 0) {\n              continue;\n            }\n\n            resolvedLanguage.aliases.push(langAlias);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n\n      var containsAliases = langAliases !== null && langAliases.length > 0;\n\n      if (containsAliases && langAliases[0] === null) {// signal that this language should not get a name\n      } else {\n        var bestName = (containsAliases ? langAliases[0] : null) || langId;\n\n        if (containsAliases || !resolvedLanguage.name) {\n          resolvedLanguage.name = bestName;\n        }\n      }\n\n      if (lang.configuration) {\n        resolvedLanguage.configurationFiles.push(lang.configuration);\n      }\n    }\n  }, {\n    key: \"isRegisteredMode\",\n    value: function isRegisteredMode(mimetypeOrModeId) {\n      // Is this a known mime type ?\n      if (hasOwnProperty.call(this._mimeTypesMap, mimetypeOrModeId)) {\n        return true;\n      } // Is this a known mode id ?\n\n\n      return hasOwnProperty.call(this._languages, mimetypeOrModeId);\n    }\n  }, {\n    key: \"getModeIdForLanguageNameLowercase\",\n    value: function getModeIdForLanguageNameLowercase(languageNameLower) {\n      if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n        return null;\n      }\n\n      return this._lowercaseNameMap[languageNameLower].language;\n    }\n  }, {\n    key: \"extractModeIds\",\n    value: function extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds) {\n      var _this3 = this;\n\n      if (!commaSeparatedMimetypesOrCommaSeparatedIds) {\n        return [];\n      }\n\n      return commaSeparatedMimetypesOrCommaSeparatedIds.split(',').map(function (mimeTypeOrId) {\n        return mimeTypeOrId.trim();\n      }).map(function (mimeTypeOrId) {\n        if (hasOwnProperty.call(_this3._mimeTypesMap, mimeTypeOrId)) {\n          return _this3._mimeTypesMap[mimeTypeOrId].language;\n        }\n\n        return mimeTypeOrId;\n      }).filter(function (modeId) {\n        return hasOwnProperty.call(_this3._languages, modeId);\n      });\n    }\n  }, {\n    key: \"getLanguageIdentifier\",\n    value: function getLanguageIdentifier(_modeId) {\n      if (_modeId === NULL_MODE_ID || _modeId === 0\n      /* Null */\n      ) {\n          return NULL_LANGUAGE_IDENTIFIER;\n        }\n\n      var modeId;\n\n      if (typeof _modeId === 'string') {\n        modeId = _modeId;\n      } else {\n        modeId = this._languageIdToLanguage[_modeId];\n\n        if (!modeId) {\n          return null;\n        }\n      }\n\n      if (!hasOwnProperty.call(this._languages, modeId)) {\n        return null;\n      }\n\n      return this._languages[modeId].identifier;\n    }\n  }, {\n    key: \"getModeIdsFromFilepathOrFirstLine\",\n    value: function getModeIdsFromFilepathOrFirstLine(resource, firstLine) {\n      if (!resource && !firstLine) {\n        return [];\n      }\n\n      var mimeTypes = mime.guessMimeTypes(resource, firstLine);\n      return this.extractModeIds(mimeTypes.join(','));\n    }\n  }]);\n\n  return LanguagesRegistry;\n}(Disposable);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/services/languagesRegistry.js"],"names":["onUnexpectedError","Emitter","Disposable","mime","strings","LanguageIdentifier","ModesRegistry","NULL_LANGUAGE_IDENTIFIER","NULL_MODE_ID","Extensions","Registry","hasOwnProperty","Object","prototype","LanguagesRegistry","useModesRegistry","warnOnOverwrite","_onDidChange","_register","onDidChange","event","_warnOnOverwrite","_nextLanguageId2","_languageIdToLanguage","_languageToLanguageId","create","_languages","_mimeTypesMap","_nameMap","_lowercaseNameMap","_initializeFromRegistry","onDidChangeLanguages","m","desc","getLanguages","_registerLanguages","d","_registerLanguage","keys","forEach","langId","language","name","identifier","aliases","alias","toLowerCase","mimetypes","mimetype","as","Configuration","registerOverrideIdentifiers","map","id","fire","languageId","lang","resolvedLanguage","call","_getLanguageId","extensions","filenames","configurationFiles","_mergeLanguage","primaryMime","Array","isArray","length","push","configuration","concat","extension","registerTextMime","filename","filenamePatterns","filenamePattern","filepattern","firstLine","firstLineRegexStr","charAt","firstLineRegex","RegExp","regExpLeadsToEndlessLoop","firstline","err","langAliases","langAlias","containsAliases","bestName","mimetypeOrModeId","languageNameLower","commaSeparatedMimetypesOrCommaSeparatedIds","split","mimeTypeOrId","trim","filter","modeId","_modeId","resource","mimeTypes","guessMimeTypes","extractModeIds","join"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport * as mime from '../../../base/common/mime.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { LanguageIdentifier } from '../modes.js';\r\nimport { ModesRegistry } from '../modes/modesRegistry.js';\r\nimport { NULL_LANGUAGE_IDENTIFIER, NULL_MODE_ID } from '../modes/nullMode.js';\r\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\r\nimport { Registry } from '../../../platform/registry/common/platform.js';\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport class LanguagesRegistry extends Disposable {\r\n    constructor(useModesRegistry = true, warnOnOverwrite = false) {\r\n        super();\r\n        this._onDidChange = this._register(new Emitter());\r\n        this.onDidChange = this._onDidChange.event;\r\n        this._warnOnOverwrite = warnOnOverwrite;\r\n        this._nextLanguageId2 = 1;\r\n        this._languageIdToLanguage = [];\r\n        this._languageToLanguageId = Object.create(null);\r\n        this._languages = {};\r\n        this._mimeTypesMap = {};\r\n        this._nameMap = {};\r\n        this._lowercaseNameMap = {};\r\n        if (useModesRegistry) {\r\n            this._initializeFromRegistry();\r\n            this._register(ModesRegistry.onDidChangeLanguages((m) => this._initializeFromRegistry()));\r\n        }\r\n    }\r\n    _initializeFromRegistry() {\r\n        this._languages = {};\r\n        this._mimeTypesMap = {};\r\n        this._nameMap = {};\r\n        this._lowercaseNameMap = {};\r\n        const desc = ModesRegistry.getLanguages();\r\n        this._registerLanguages(desc);\r\n    }\r\n    _registerLanguages(desc) {\r\n        for (const d of desc) {\r\n            this._registerLanguage(d);\r\n        }\r\n        // Rebuild fast path maps\r\n        this._mimeTypesMap = {};\r\n        this._nameMap = {};\r\n        this._lowercaseNameMap = {};\r\n        Object.keys(this._languages).forEach((langId) => {\r\n            let language = this._languages[langId];\r\n            if (language.name) {\r\n                this._nameMap[language.name] = language.identifier;\r\n            }\r\n            language.aliases.forEach((alias) => {\r\n                this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\r\n            });\r\n            language.mimetypes.forEach((mimetype) => {\r\n                this._mimeTypesMap[mimetype] = language.identifier;\r\n            });\r\n        });\r\n        Registry.as(Extensions.Configuration).registerOverrideIdentifiers(ModesRegistry.getLanguages().map(language => language.id));\r\n        this._onDidChange.fire();\r\n    }\r\n    _getLanguageId(language) {\r\n        if (this._languageToLanguageId[language]) {\r\n            return this._languageToLanguageId[language];\r\n        }\r\n        const languageId = this._nextLanguageId2++;\r\n        this._languageIdToLanguage[languageId] = language;\r\n        this._languageToLanguageId[language] = languageId;\r\n        return languageId;\r\n    }\r\n    _registerLanguage(lang) {\r\n        const langId = lang.id;\r\n        let resolvedLanguage;\r\n        if (hasOwnProperty.call(this._languages, langId)) {\r\n            resolvedLanguage = this._languages[langId];\r\n        }\r\n        else {\r\n            const languageId = this._getLanguageId(langId);\r\n            resolvedLanguage = {\r\n                identifier: new LanguageIdentifier(langId, languageId),\r\n                name: null,\r\n                mimetypes: [],\r\n                aliases: [],\r\n                extensions: [],\r\n                filenames: [],\r\n                configurationFiles: []\r\n            };\r\n            this._languages[langId] = resolvedLanguage;\r\n        }\r\n        this._mergeLanguage(resolvedLanguage, lang);\r\n    }\r\n    _mergeLanguage(resolvedLanguage, lang) {\r\n        const langId = lang.id;\r\n        let primaryMime = null;\r\n        if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\r\n            resolvedLanguage.mimetypes.push(...lang.mimetypes);\r\n            primaryMime = lang.mimetypes[0];\r\n        }\r\n        if (!primaryMime) {\r\n            primaryMime = `text/x-${langId}`;\r\n            resolvedLanguage.mimetypes.push(primaryMime);\r\n        }\r\n        if (Array.isArray(lang.extensions)) {\r\n            if (lang.configuration) {\r\n                // insert first as this appears to be the 'primary' language definition\r\n                resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\r\n            }\r\n            else {\r\n                resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\r\n            }\r\n            for (let extension of lang.extensions) {\r\n                mime.registerTextMime({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\r\n            }\r\n        }\r\n        if (Array.isArray(lang.filenames)) {\r\n            for (let filename of lang.filenames) {\r\n                mime.registerTextMime({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\r\n                resolvedLanguage.filenames.push(filename);\r\n            }\r\n        }\r\n        if (Array.isArray(lang.filenamePatterns)) {\r\n            for (let filenamePattern of lang.filenamePatterns) {\r\n                mime.registerTextMime({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\r\n            }\r\n        }\r\n        if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\r\n            let firstLineRegexStr = lang.firstLine;\r\n            if (firstLineRegexStr.charAt(0) !== '^') {\r\n                firstLineRegexStr = '^' + firstLineRegexStr;\r\n            }\r\n            try {\r\n                let firstLineRegex = new RegExp(firstLineRegexStr);\r\n                if (!strings.regExpLeadsToEndlessLoop(firstLineRegex)) {\r\n                    mime.registerTextMime({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\r\n                }\r\n            }\r\n            catch (err) {\r\n                // Most likely, the regex was bad\r\n                onUnexpectedError(err);\r\n            }\r\n        }\r\n        resolvedLanguage.aliases.push(langId);\r\n        let langAliases = null;\r\n        if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\r\n            if (lang.aliases.length === 0) {\r\n                // signal that this language should not get a name\r\n                langAliases = [null];\r\n            }\r\n            else {\r\n                langAliases = lang.aliases;\r\n            }\r\n        }\r\n        if (langAliases !== null) {\r\n            for (const langAlias of langAliases) {\r\n                if (!langAlias || langAlias.length === 0) {\r\n                    continue;\r\n                }\r\n                resolvedLanguage.aliases.push(langAlias);\r\n            }\r\n        }\r\n        let containsAliases = (langAliases !== null && langAliases.length > 0);\r\n        if (containsAliases && langAliases[0] === null) {\r\n            // signal that this language should not get a name\r\n        }\r\n        else {\r\n            let bestName = (containsAliases ? langAliases[0] : null) || langId;\r\n            if (containsAliases || !resolvedLanguage.name) {\r\n                resolvedLanguage.name = bestName;\r\n            }\r\n        }\r\n        if (lang.configuration) {\r\n            resolvedLanguage.configurationFiles.push(lang.configuration);\r\n        }\r\n    }\r\n    isRegisteredMode(mimetypeOrModeId) {\r\n        // Is this a known mime type ?\r\n        if (hasOwnProperty.call(this._mimeTypesMap, mimetypeOrModeId)) {\r\n            return true;\r\n        }\r\n        // Is this a known mode id ?\r\n        return hasOwnProperty.call(this._languages, mimetypeOrModeId);\r\n    }\r\n    getModeIdForLanguageNameLowercase(languageNameLower) {\r\n        if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\r\n            return null;\r\n        }\r\n        return this._lowercaseNameMap[languageNameLower].language;\r\n    }\r\n    extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n        if (!commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n            return [];\r\n        }\r\n        return (commaSeparatedMimetypesOrCommaSeparatedIds.\r\n            split(',').\r\n            map((mimeTypeOrId) => mimeTypeOrId.trim()).\r\n            map((mimeTypeOrId) => {\r\n            if (hasOwnProperty.call(this._mimeTypesMap, mimeTypeOrId)) {\r\n                return this._mimeTypesMap[mimeTypeOrId].language;\r\n            }\r\n            return mimeTypeOrId;\r\n        }).\r\n            filter((modeId) => {\r\n            return hasOwnProperty.call(this._languages, modeId);\r\n        }));\r\n    }\r\n    getLanguageIdentifier(_modeId) {\r\n        if (_modeId === NULL_MODE_ID || _modeId === 0 /* Null */) {\r\n            return NULL_LANGUAGE_IDENTIFIER;\r\n        }\r\n        let modeId;\r\n        if (typeof _modeId === 'string') {\r\n            modeId = _modeId;\r\n        }\r\n        else {\r\n            modeId = this._languageIdToLanguage[_modeId];\r\n            if (!modeId) {\r\n                return null;\r\n            }\r\n        }\r\n        if (!hasOwnProperty.call(this._languages, modeId)) {\r\n            return null;\r\n        }\r\n        return this._languages[modeId].identifier;\r\n    }\r\n    getModeIdsFromFilepathOrFirstLine(resource, firstLine) {\r\n        if (!resource && !firstLine) {\r\n            return [];\r\n        }\r\n        let mimeTypes = mime.guessMimeTypes(resource, firstLine);\r\n        return this.extractModeIds(mimeTypes.join(','));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}