{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { MovingAverage } from '../../../base/common/numbers.js';\nimport { score } from './languageSelector.js';\nimport { shouldSynchronizeModel } from '../services/modelService.js';\n\nfunction isExclusive(selector) {\n  if (typeof selector === 'string') {\n    return false;\n  } else if (Array.isArray(selector)) {\n    return selector.every(isExclusive);\n  } else {\n    return !!selector.exclusive;\n  }\n}\n\nexport var LanguageFeatureRegistry = /*#__PURE__*/function () {\n  function LanguageFeatureRegistry() {\n    _classCallCheck(this, LanguageFeatureRegistry);\n\n    this._clock = 0;\n    this._entries = [];\n    this._onDidChange = new Emitter();\n  }\n\n  _createClass(LanguageFeatureRegistry, [{\n    key: \"register\",\n    value: function register(selector, provider) {\n      var _this = this;\n\n      var entry = {\n        selector: selector,\n        provider: provider,\n        _score: -1,\n        _time: this._clock++\n      };\n\n      this._entries.push(entry);\n\n      this._lastCandidate = undefined;\n\n      this._onDidChange.fire(this._entries.length);\n\n      return toDisposable(function () {\n        if (entry) {\n          var idx = _this._entries.indexOf(entry);\n\n          if (idx >= 0) {\n            _this._entries.splice(idx, 1);\n\n            _this._lastCandidate = undefined;\n\n            _this._onDidChange.fire(_this._entries.length);\n\n            entry = undefined;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"has\",\n    value: function has(model) {\n      return this.all(model).length > 0;\n    }\n  }, {\n    key: \"all\",\n    value: function all(model) {\n      if (!model) {\n        return [];\n      }\n\n      this._updateScores(model);\n\n      var result = []; // from registry\n\n      var _iterator = _createForOfIteratorHelper(this._entries),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var entry = _step.value;\n\n          if (entry._score > 0) {\n            result.push(entry.provider);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"ordered\",\n    value: function ordered(model) {\n      var result = [];\n\n      this._orderedForEach(model, function (entry) {\n        return result.push(entry.provider);\n      });\n\n      return result;\n    }\n  }, {\n    key: \"orderedGroups\",\n    value: function orderedGroups(model) {\n      var result = [];\n      var lastBucket;\n      var lastBucketScore;\n\n      this._orderedForEach(model, function (entry) {\n        if (lastBucket && lastBucketScore === entry._score) {\n          lastBucket.push(entry.provider);\n        } else {\n          lastBucketScore = entry._score;\n          lastBucket = [entry.provider];\n          result.push(lastBucket);\n        }\n      });\n\n      return result;\n    }\n  }, {\n    key: \"_orderedForEach\",\n    value: function _orderedForEach(model, callback) {\n      if (!model) {\n        return;\n      }\n\n      this._updateScores(model);\n\n      var _iterator2 = _createForOfIteratorHelper(this._entries),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var entry = _step2.value;\n\n          if (entry._score > 0) {\n            callback(entry);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"_updateScores\",\n    value: function _updateScores(model) {\n      var candidate = {\n        uri: model.uri.toString(),\n        language: model.getLanguageIdentifier().language\n      };\n\n      if (this._lastCandidate && this._lastCandidate.language === candidate.language && this._lastCandidate.uri === candidate.uri) {\n        // nothing has changed\n        return;\n      }\n\n      this._lastCandidate = candidate;\n\n      var _iterator3 = _createForOfIteratorHelper(this._entries),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var entry = _step3.value;\n          entry._score = score(entry.selector, model.uri, model.getLanguageIdentifier().language, shouldSynchronizeModel(model));\n\n          if (isExclusive(entry.selector) && entry._score > 0) {\n            // support for one exclusive selector that overwrites\n            // any other selector\n            var _iterator4 = _createForOfIteratorHelper(this._entries),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var _entry = _step4.value;\n                _entry._score = 0;\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n\n            entry._score = 1000;\n            break;\n          }\n        } // needs sorting\n\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n    }\n  }, {\n    key: \"onDidChange\",\n    get: function get() {\n      return this._onDidChange.event;\n    }\n  }], [{\n    key: \"_compareByScoreAndTime\",\n    value: function _compareByScoreAndTime(a, b) {\n      if (a._score < b._score) {\n        return 1;\n      } else if (a._score > b._score) {\n        return -1;\n      } else if (a._time < b._time) {\n        return 1;\n      } else if (a._time > b._time) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n  }]);\n\n  return LanguageFeatureRegistry;\n}();\n/**\r\n * Keeps moving average per model and set of providers so that requests\r\n * can be debounce according to the provider performance\r\n */\n\nexport var LanguageFeatureRequestDelays = /*#__PURE__*/function () {\n  function LanguageFeatureRequestDelays(_registry, min) {\n    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.MAX_SAFE_INTEGER;\n\n    _classCallCheck(this, LanguageFeatureRequestDelays);\n\n    this._registry = _registry;\n    this.min = min;\n    this.max = max;\n    this._cache = new LRUCache(50, 0.7);\n  }\n\n  _createClass(LanguageFeatureRequestDelays, [{\n    key: \"_key\",\n    value: function _key(model) {\n      return model.id + hash(this._registry.all(model));\n    }\n  }, {\n    key: \"_clamp\",\n    value: function _clamp(value) {\n      if (value === undefined) {\n        return this.min;\n      } else {\n        return Math.min(this.max, Math.max(this.min, Math.floor(value * 1.3)));\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get(model) {\n      var key = this._key(model);\n\n      var avg = this._cache.get(key);\n\n      return this._clamp(avg === null || avg === void 0 ? void 0 : avg.value);\n    }\n  }, {\n    key: \"update\",\n    value: function update(model, value) {\n      var key = this._key(model);\n\n      var avg = this._cache.get(key);\n\n      if (!avg) {\n        avg = new MovingAverage();\n\n        this._cache.set(key, avg);\n      }\n\n      avg.update(value);\n      return this.get(model);\n    }\n  }]);\n\n  return LanguageFeatureRequestDelays;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/modes/languageFeatureRegistry.js"],"names":["Emitter","hash","toDisposable","LRUCache","MovingAverage","score","shouldSynchronizeModel","isExclusive","selector","Array","isArray","every","exclusive","LanguageFeatureRegistry","_clock","_entries","_onDidChange","provider","entry","_score","_time","push","_lastCandidate","undefined","fire","length","idx","indexOf","splice","model","all","_updateScores","result","_orderedForEach","lastBucket","lastBucketScore","callback","candidate","uri","toString","language","getLanguageIdentifier","sort","_compareByScoreAndTime","event","a","b","LanguageFeatureRequestDelays","_registry","min","max","Number","MAX_SAFE_INTEGER","_cache","id","value","Math","floor","key","_key","avg","get","_clamp","set","update"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { hash } from '../../../base/common/hash.js';\r\nimport { toDisposable } from '../../../base/common/lifecycle.js';\r\nimport { LRUCache } from '../../../base/common/map.js';\r\nimport { MovingAverage } from '../../../base/common/numbers.js';\r\nimport { score } from './languageSelector.js';\r\nimport { shouldSynchronizeModel } from '../services/modelService.js';\r\nfunction isExclusive(selector) {\r\n    if (typeof selector === 'string') {\r\n        return false;\r\n    }\r\n    else if (Array.isArray(selector)) {\r\n        return selector.every(isExclusive);\r\n    }\r\n    else {\r\n        return !!selector.exclusive;\r\n    }\r\n}\r\nexport class LanguageFeatureRegistry {\r\n    constructor() {\r\n        this._clock = 0;\r\n        this._entries = [];\r\n        this._onDidChange = new Emitter();\r\n    }\r\n    get onDidChange() {\r\n        return this._onDidChange.event;\r\n    }\r\n    register(selector, provider) {\r\n        let entry = {\r\n            selector,\r\n            provider,\r\n            _score: -1,\r\n            _time: this._clock++\r\n        };\r\n        this._entries.push(entry);\r\n        this._lastCandidate = undefined;\r\n        this._onDidChange.fire(this._entries.length);\r\n        return toDisposable(() => {\r\n            if (entry) {\r\n                let idx = this._entries.indexOf(entry);\r\n                if (idx >= 0) {\r\n                    this._entries.splice(idx, 1);\r\n                    this._lastCandidate = undefined;\r\n                    this._onDidChange.fire(this._entries.length);\r\n                    entry = undefined;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    has(model) {\r\n        return this.all(model).length > 0;\r\n    }\r\n    all(model) {\r\n        if (!model) {\r\n            return [];\r\n        }\r\n        this._updateScores(model);\r\n        const result = [];\r\n        // from registry\r\n        for (let entry of this._entries) {\r\n            if (entry._score > 0) {\r\n                result.push(entry.provider);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    ordered(model) {\r\n        const result = [];\r\n        this._orderedForEach(model, entry => result.push(entry.provider));\r\n        return result;\r\n    }\r\n    orderedGroups(model) {\r\n        const result = [];\r\n        let lastBucket;\r\n        let lastBucketScore;\r\n        this._orderedForEach(model, entry => {\r\n            if (lastBucket && lastBucketScore === entry._score) {\r\n                lastBucket.push(entry.provider);\r\n            }\r\n            else {\r\n                lastBucketScore = entry._score;\r\n                lastBucket = [entry.provider];\r\n                result.push(lastBucket);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    _orderedForEach(model, callback) {\r\n        if (!model) {\r\n            return;\r\n        }\r\n        this._updateScores(model);\r\n        for (const entry of this._entries) {\r\n            if (entry._score > 0) {\r\n                callback(entry);\r\n            }\r\n        }\r\n    }\r\n    _updateScores(model) {\r\n        let candidate = {\r\n            uri: model.uri.toString(),\r\n            language: model.getLanguageIdentifier().language\r\n        };\r\n        if (this._lastCandidate\r\n            && this._lastCandidate.language === candidate.language\r\n            && this._lastCandidate.uri === candidate.uri) {\r\n            // nothing has changed\r\n            return;\r\n        }\r\n        this._lastCandidate = candidate;\r\n        for (let entry of this._entries) {\r\n            entry._score = score(entry.selector, model.uri, model.getLanguageIdentifier().language, shouldSynchronizeModel(model));\r\n            if (isExclusive(entry.selector) && entry._score > 0) {\r\n                // support for one exclusive selector that overwrites\r\n                // any other selector\r\n                for (let entry of this._entries) {\r\n                    entry._score = 0;\r\n                }\r\n                entry._score = 1000;\r\n                break;\r\n            }\r\n        }\r\n        // needs sorting\r\n        this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\r\n    }\r\n    static _compareByScoreAndTime(a, b) {\r\n        if (a._score < b._score) {\r\n            return 1;\r\n        }\r\n        else if (a._score > b._score) {\r\n            return -1;\r\n        }\r\n        else if (a._time < b._time) {\r\n            return 1;\r\n        }\r\n        else if (a._time > b._time) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Keeps moving average per model and set of providers so that requests\r\n * can be debounce according to the provider performance\r\n */\r\nexport class LanguageFeatureRequestDelays {\r\n    constructor(_registry, min, max = Number.MAX_SAFE_INTEGER) {\r\n        this._registry = _registry;\r\n        this.min = min;\r\n        this.max = max;\r\n        this._cache = new LRUCache(50, 0.7);\r\n    }\r\n    _key(model) {\r\n        return model.id + hash(this._registry.all(model));\r\n    }\r\n    _clamp(value) {\r\n        if (value === undefined) {\r\n            return this.min;\r\n        }\r\n        else {\r\n            return Math.min(this.max, Math.max(this.min, Math.floor(value * 1.3)));\r\n        }\r\n    }\r\n    get(model) {\r\n        const key = this._key(model);\r\n        const avg = this._cache.get(key);\r\n        return this._clamp(avg === null || avg === void 0 ? void 0 : avg.value);\r\n    }\r\n    update(model, value) {\r\n        const key = this._key(model);\r\n        let avg = this._cache.get(key);\r\n        if (!avg) {\r\n            avg = new MovingAverage();\r\n            this._cache.set(key, avg);\r\n        }\r\n        avg.update(value);\r\n        return this.get(model);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}