{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Registry } from '../../registry/common/platform.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { Extensions } from './configurationRegistry.js';\nexport var IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n  var root = Object.create(null);\n\n  for (var key in properties) {\n    addToValueTree(root, key, properties[key], conflictReporter);\n  }\n\n  return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n  var segments = key.split('.');\n  var last = segments.pop();\n  var curr = settingsTreeRoot;\n\n  for (var i = 0; i < segments.length; i++) {\n    var s = segments[i];\n    var obj = curr[s];\n\n    switch (typeof obj) {\n      case 'undefined':\n        obj = curr[s] = Object.create(null);\n        break;\n\n      case 'object':\n        break;\n\n      default:\n        conflictReporter(\"Ignoring \".concat(key, \" as \").concat(segments.slice(0, i + 1).join('.'), \" is \").concat(JSON.stringify(obj)));\n        return;\n    }\n\n    curr = obj;\n  }\n\n  if (typeof curr === 'object' && curr !== null) {\n    try {\n      curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n    } catch (e) {\n      conflictReporter(\"Ignoring \".concat(key, \" as \").concat(segments.join('.'), \" is \").concat(JSON.stringify(curr)));\n    }\n  } else {\n    conflictReporter(\"Ignoring \".concat(key, \" as \").concat(segments.join('.'), \" is \").concat(JSON.stringify(curr)));\n  }\n}\nexport function removeFromValueTree(valueTree, key) {\n  var segments = key.split('.');\n  doRemoveFromValueTree(valueTree, segments);\n}\n\nfunction doRemoveFromValueTree(valueTree, segments) {\n  var first = segments.shift();\n\n  if (segments.length === 0) {\n    // Reached last segment\n    delete valueTree[first];\n    return;\n  }\n\n  if (Object.keys(valueTree).indexOf(first) !== -1) {\n    var value = valueTree[first];\n\n    if (typeof value === 'object' && !Array.isArray(value)) {\n      doRemoveFromValueTree(value, segments);\n\n      if (Object.keys(value).length === 0) {\n        delete valueTree[first];\n      }\n    }\n  }\n}\n/**\r\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\r\n */\n\n\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n  function accessSetting(config, path) {\n    var current = config;\n\n    var _iterator = _createForOfIteratorHelper(path),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var component = _step.value;\n\n        if (typeof current !== 'object' || current === null) {\n          return undefined;\n        }\n\n        current = current[component];\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return current;\n  }\n\n  var path = settingPath.split('.');\n  var result = accessSetting(config, path);\n  return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getConfigurationKeys() {\n  var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n  return Object.keys(properties);\n}\nexport function getDefaultValues() {\n  var valueTreeRoot = Object.create(null);\n  var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n\n  for (var key in properties) {\n    var value = properties[key][\"default\"];\n    addToValueTree(valueTreeRoot, key, value, function (message) {\n      return console.error(\"Conflict in default settings: \".concat(message));\n    });\n  }\n\n  return valueTreeRoot;\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js"],"names":["Registry","createDecorator","Extensions","IConfigurationService","toValuesTree","properties","conflictReporter","root","Object","create","key","addToValueTree","settingsTreeRoot","value","segments","split","last","pop","curr","i","length","s","obj","slice","join","JSON","stringify","e","removeFromValueTree","valueTree","doRemoveFromValueTree","first","shift","keys","indexOf","Array","isArray","getConfigurationValue","config","settingPath","defaultValue","accessSetting","path","current","component","undefined","result","getConfigurationKeys","as","Configuration","getConfigurationProperties","getDefaultValues","valueTreeRoot","message","console","error"],"mappings":"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","sourcesContent":["import { Registry } from '../../registry/common/platform.js';\r\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\r\nimport { Extensions } from './configurationRegistry.js';\r\nexport const IConfigurationService = createDecorator('configurationService');\r\nexport function toValuesTree(properties, conflictReporter) {\r\n    const root = Object.create(null);\r\n    for (let key in properties) {\r\n        addToValueTree(root, key, properties[key], conflictReporter);\r\n    }\r\n    return root;\r\n}\r\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\r\n    const segments = key.split('.');\r\n    const last = segments.pop();\r\n    let curr = settingsTreeRoot;\r\n    for (let i = 0; i < segments.length; i++) {\r\n        let s = segments[i];\r\n        let obj = curr[s];\r\n        switch (typeof obj) {\r\n            case 'undefined':\r\n                obj = curr[s] = Object.create(null);\r\n                break;\r\n            case 'object':\r\n                break;\r\n            default:\r\n                conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\r\n                return;\r\n        }\r\n        curr = obj;\r\n    }\r\n    if (typeof curr === 'object' && curr !== null) {\r\n        try {\r\n            curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\r\n        }\r\n        catch (e) {\r\n            conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\r\n        }\r\n    }\r\n    else {\r\n        conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\r\n    }\r\n}\r\nexport function removeFromValueTree(valueTree, key) {\r\n    const segments = key.split('.');\r\n    doRemoveFromValueTree(valueTree, segments);\r\n}\r\nfunction doRemoveFromValueTree(valueTree, segments) {\r\n    const first = segments.shift();\r\n    if (segments.length === 0) {\r\n        // Reached last segment\r\n        delete valueTree[first];\r\n        return;\r\n    }\r\n    if (Object.keys(valueTree).indexOf(first) !== -1) {\r\n        const value = valueTree[first];\r\n        if (typeof value === 'object' && !Array.isArray(value)) {\r\n            doRemoveFromValueTree(value, segments);\r\n            if (Object.keys(value).length === 0) {\r\n                delete valueTree[first];\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\r\n */\r\nexport function getConfigurationValue(config, settingPath, defaultValue) {\r\n    function accessSetting(config, path) {\r\n        let current = config;\r\n        for (const component of path) {\r\n            if (typeof current !== 'object' || current === null) {\r\n                return undefined;\r\n            }\r\n            current = current[component];\r\n        }\r\n        return current;\r\n    }\r\n    const path = settingPath.split('.');\r\n    const result = accessSetting(config, path);\r\n    return typeof result === 'undefined' ? defaultValue : result;\r\n}\r\nexport function getConfigurationKeys() {\r\n    const properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\r\n    return Object.keys(properties);\r\n}\r\nexport function getDefaultValues() {\r\n    const valueTreeRoot = Object.create(null);\r\n    const properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\r\n    for (let key in properties) {\r\n        let value = properties[key].default;\r\n        addToValueTree(valueTreeRoot, key, value, message => console.error(`Conflict in default settings: ${message}`));\r\n    }\r\n    return valueTreeRoot;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}