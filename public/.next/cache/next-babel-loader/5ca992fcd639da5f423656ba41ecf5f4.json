{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { PrefixSumComputer } from '../viewModel/prefixSumComputer.js';\nexport var MirrorTextModel = /*#__PURE__*/function () {\n  function MirrorTextModel(uri, lines, eol, versionId) {\n    _classCallCheck(this, MirrorTextModel);\n\n    this._uri = uri;\n    this._lines = lines;\n    this._eol = eol;\n    this._versionId = versionId;\n    this._lineStarts = null;\n    this._cachedTextValue = null;\n  }\n\n  _createClass(MirrorTextModel, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._lines.length = 0;\n    }\n  }, {\n    key: \"getText\",\n    value: function getText() {\n      if (this._cachedTextValue === null) {\n        this._cachedTextValue = this._lines.join(this._eol);\n      }\n\n      return this._cachedTextValue;\n    }\n  }, {\n    key: \"onEvents\",\n    value: function onEvents(e) {\n      if (e.eol && e.eol !== this._eol) {\n        this._eol = e.eol;\n        this._lineStarts = null;\n      } // Update my lines\n\n\n      var changes = e.changes;\n\n      var _iterator = _createForOfIteratorHelper(changes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var change = _step.value;\n\n          this._acceptDeleteRange(change.range);\n\n          this._acceptInsertText(new Position(change.range.startLineNumber, change.range.startColumn), change.text);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._versionId = e.versionId;\n      this._cachedTextValue = null;\n    }\n  }, {\n    key: \"_ensureLineStarts\",\n    value: function _ensureLineStarts() {\n      if (!this._lineStarts) {\n        var eolLength = this._eol.length;\n        var linesLength = this._lines.length;\n        var lineStartValues = new Uint32Array(linesLength);\n\n        for (var i = 0; i < linesLength; i++) {\n          lineStartValues[i] = this._lines[i].length + eolLength;\n        }\n\n        this._lineStarts = new PrefixSumComputer(lineStartValues);\n      }\n    }\n    /**\r\n     * All changes to a line's text go through this method\r\n     */\n\n  }, {\n    key: \"_setLineText\",\n    value: function _setLineText(lineIndex, newValue) {\n      this._lines[lineIndex] = newValue;\n\n      if (this._lineStarts) {\n        // update prefix sum\n        this._lineStarts.changeValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\n      }\n    }\n  }, {\n    key: \"_acceptDeleteRange\",\n    value: function _acceptDeleteRange(range) {\n      if (range.startLineNumber === range.endLineNumber) {\n        if (range.startColumn === range.endColumn) {\n          // Nothing to delete\n          return;\n        } // Delete text on the affected line\n\n\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1) + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\n\n        return;\n      } // Take remaining text on last line and append it to remaining text on first line\n\n\n      this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1) + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1)); // Delete middle lines\n\n\n      this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n\n      if (this._lineStarts) {\n        // update prefix sum\n        this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n      }\n    }\n  }, {\n    key: \"_acceptInsertText\",\n    value: function _acceptInsertText(position, insertText) {\n      if (insertText.length === 0) {\n        // Nothing to insert\n        return;\n      }\n\n      var insertLines = splitLines(insertText);\n\n      if (insertLines.length === 1) {\n        // Inserting text on one line\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1) + insertLines[0] + this._lines[position.lineNumber - 1].substring(position.column - 1));\n\n        return;\n      } // Append overflowing text from first line to the end of text to insert\n\n\n      insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1); // Delete overflowing text from first line and insert text on first line\n\n      this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1) + insertLines[0]); // Insert new lines & store lengths\n\n\n      var newLengths = new Uint32Array(insertLines.length - 1);\n\n      for (var i = 1; i < insertLines.length; i++) {\n        this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\n\n        newLengths[i - 1] = insertLines[i].length + this._eol.length;\n      }\n\n      if (this._lineStarts) {\n        // update prefix sum\n        this._lineStarts.insertValues(position.lineNumber, newLengths);\n      }\n    }\n  }]);\n\n  return MirrorTextModel;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js"],"names":["splitLines","Position","PrefixSumComputer","MirrorTextModel","uri","lines","eol","versionId","_uri","_lines","_eol","_versionId","_lineStarts","_cachedTextValue","length","join","e","changes","change","_acceptDeleteRange","range","_acceptInsertText","startLineNumber","startColumn","text","eolLength","linesLength","lineStartValues","Uint32Array","i","lineIndex","newValue","changeValue","endLineNumber","endColumn","_setLineText","substring","splice","removeValues","position","insertText","insertLines","lineNumber","column","newLengths","insertValues"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { splitLines } from '../../../base/common/strings.js';\r\nimport { Position } from '../core/position.js';\r\nimport { PrefixSumComputer } from '../viewModel/prefixSumComputer.js';\r\nexport class MirrorTextModel {\r\n    constructor(uri, lines, eol, versionId) {\r\n        this._uri = uri;\r\n        this._lines = lines;\r\n        this._eol = eol;\r\n        this._versionId = versionId;\r\n        this._lineStarts = null;\r\n        this._cachedTextValue = null;\r\n    }\r\n    dispose() {\r\n        this._lines.length = 0;\r\n    }\r\n    getText() {\r\n        if (this._cachedTextValue === null) {\r\n            this._cachedTextValue = this._lines.join(this._eol);\r\n        }\r\n        return this._cachedTextValue;\r\n    }\r\n    onEvents(e) {\r\n        if (e.eol && e.eol !== this._eol) {\r\n            this._eol = e.eol;\r\n            this._lineStarts = null;\r\n        }\r\n        // Update my lines\r\n        const changes = e.changes;\r\n        for (const change of changes) {\r\n            this._acceptDeleteRange(change.range);\r\n            this._acceptInsertText(new Position(change.range.startLineNumber, change.range.startColumn), change.text);\r\n        }\r\n        this._versionId = e.versionId;\r\n        this._cachedTextValue = null;\r\n    }\r\n    _ensureLineStarts() {\r\n        if (!this._lineStarts) {\r\n            const eolLength = this._eol.length;\r\n            const linesLength = this._lines.length;\r\n            const lineStartValues = new Uint32Array(linesLength);\r\n            for (let i = 0; i < linesLength; i++) {\r\n                lineStartValues[i] = this._lines[i].length + eolLength;\r\n            }\r\n            this._lineStarts = new PrefixSumComputer(lineStartValues);\r\n        }\r\n    }\r\n    /**\r\n     * All changes to a line's text go through this method\r\n     */\r\n    _setLineText(lineIndex, newValue) {\r\n        this._lines[lineIndex] = newValue;\r\n        if (this._lineStarts) {\r\n            // update prefix sum\r\n            this._lineStarts.changeValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\r\n        }\r\n    }\r\n    _acceptDeleteRange(range) {\r\n        if (range.startLineNumber === range.endLineNumber) {\r\n            if (range.startColumn === range.endColumn) {\r\n                // Nothing to delete\r\n                return;\r\n            }\r\n            // Delete text on the affected line\r\n            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\r\n                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\r\n            return;\r\n        }\r\n        // Take remaining text on last line and append it to remaining text on first line\r\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\r\n            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\r\n        // Delete middle lines\r\n        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\r\n        if (this._lineStarts) {\r\n            // update prefix sum\r\n            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\r\n        }\r\n    }\r\n    _acceptInsertText(position, insertText) {\r\n        if (insertText.length === 0) {\r\n            // Nothing to insert\r\n            return;\r\n        }\r\n        let insertLines = splitLines(insertText);\r\n        if (insertLines.length === 1) {\r\n            // Inserting text on one line\r\n            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\r\n                + insertLines[0]\r\n                + this._lines[position.lineNumber - 1].substring(position.column - 1));\r\n            return;\r\n        }\r\n        // Append overflowing text from first line to the end of text to insert\r\n        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\r\n        // Delete overflowing text from first line and insert text on first line\r\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\r\n            + insertLines[0]);\r\n        // Insert new lines & store lengths\r\n        let newLengths = new Uint32Array(insertLines.length - 1);\r\n        for (let i = 1; i < insertLines.length; i++) {\r\n            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\r\n            newLengths[i - 1] = insertLines[i].length + this._eol.length;\r\n        }\r\n        if (this._lineStarts) {\r\n            // update prefix sum\r\n            this._lineStarts.insertValues(position.lineNumber, newLengths);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}