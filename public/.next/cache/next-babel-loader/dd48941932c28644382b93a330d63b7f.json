{"ast":null,"code":"import _toConsumableArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\r\n * Returns the last element of an array.\r\n * @param array The array.\r\n * @param n Which element from the end (default is zero).\r\n */\nexport function tail(array) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return array[array.length - (1 + n)];\n}\nexport function tail2(arr) {\n  if (arr.length === 0) {\n    throw new Error('Invalid tail call');\n  }\n\n  return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\nexport function equals(one, other) {\n  var itemEquals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (a, b) {\n    return a === b;\n  };\n\n  if (one === other) {\n    return true;\n  }\n\n  if (!one || !other) {\n    return false;\n  }\n\n  if (one.length !== other.length) {\n    return false;\n  }\n\n  for (var i = 0, len = one.length; i < len; i++) {\n    if (!itemEquals(one[i], other[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function binarySearch(array, key, comparator) {\n  var low = 0,\n      high = array.length - 1;\n\n  while (low <= high) {\n    var mid = (low + high) / 2 | 0;\n    var comp = comparator(array[mid], key);\n\n    if (comp < 0) {\n      low = mid + 1;\n    } else if (comp > 0) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n\n  return -(low + 1);\n}\n/**\r\n * Takes a sorted array and a function p. The array is sorted in such a way that all elements where p(x) is false\r\n * are located before all elements where p(x) is true.\r\n * @returns the least x for which p(x) is true or array.length if no element fullfills the given function.\r\n */\n\nexport function findFirstInSorted(array, p) {\n  var low = 0,\n      high = array.length;\n\n  if (high === 0) {\n    return 0; // no children\n  }\n\n  while (low < high) {\n    var mid = Math.floor((low + high) / 2);\n\n    if (p(array[mid])) {\n      high = mid;\n    } else {\n      low = mid + 1;\n    }\n  }\n\n  return low;\n}\nexport function quickSelect(nth, data, compare) {\n  nth = nth | 0;\n\n  if (nth >= data.length) {\n    throw new TypeError('invalid index');\n  }\n\n  var pivotValue = data[Math.floor(data.length * Math.random())];\n  var lower = [];\n  var higher = [];\n  var pivots = [];\n\n  var _iterator = _createForOfIteratorHelper(data),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var value = _step.value;\n      var val = compare(value, pivotValue);\n\n      if (val < 0) {\n        lower.push(value);\n      } else if (val > 0) {\n        higher.push(value);\n      } else {\n        pivots.push(value);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (nth < lower.length) {\n    return quickSelect(nth, lower, compare);\n  } else if (nth < lower.length + pivots.length) {\n    return pivots[0];\n  } else {\n    return quickSelect(nth - (lower.length + pivots.length), higher, compare);\n  }\n}\n/**\r\n * Like `Array#sort` but always stable. Usually runs a little slower `than Array#sort`\r\n * so only use this when actually needing stable sort.\r\n */\n\nexport function mergeSort(data, compare) {\n  _sort(data, compare, 0, data.length - 1, []);\n\n  return data;\n}\n\nfunction _merge(a, compare, lo, mid, hi, aux) {\n  var leftIdx = lo,\n      rightIdx = mid + 1;\n\n  for (var i = lo; i <= hi; i++) {\n    aux[i] = a[i];\n  }\n\n  for (var _i = lo; _i <= hi; _i++) {\n    if (leftIdx > mid) {\n      // left side consumed\n      a[_i] = aux[rightIdx++];\n    } else if (rightIdx > hi) {\n      // right side consumed\n      a[_i] = aux[leftIdx++];\n    } else if (compare(aux[rightIdx], aux[leftIdx]) < 0) {\n      // right element is less -> comes first\n      a[_i] = aux[rightIdx++];\n    } else {\n      // left element comes first (less or equal)\n      a[_i] = aux[leftIdx++];\n    }\n  }\n}\n\nfunction _sort(a, compare, lo, hi, aux) {\n  if (hi <= lo) {\n    return;\n  }\n\n  var mid = lo + (hi - lo) / 2 | 0;\n\n  _sort(a, compare, lo, mid, aux);\n\n  _sort(a, compare, mid + 1, hi, aux);\n\n  if (compare(a[mid], a[mid + 1]) <= 0) {\n    // left and right are sorted and if the last-left element is less\n    // or equals than the first-right element there is nothing else\n    // to do\n    return;\n  }\n\n  _merge(a, compare, lo, mid, hi, aux);\n}\n\nexport function groupBy(data, compare) {\n  var result = [];\n  var currentGroup = undefined;\n\n  var _iterator2 = _createForOfIteratorHelper(mergeSort(data.slice(0), compare)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var element = _step2.value;\n\n      if (!currentGroup || compare(currentGroup[0], element) !== 0) {\n        currentGroup = [element];\n        result.push(currentGroup);\n      } else {\n        currentGroup.push(element);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return result;\n}\n/**\r\n * @returns New array with all falsy values removed. The original array IS NOT modified.\r\n */\n\nexport function coalesce(array) {\n  return array.filter(function (e) {\n    return !!e;\n  });\n}\n/**\r\n * @returns false if the provided object is an array and not empty.\r\n */\n\nexport function isFalsyOrEmpty(obj) {\n  return !Array.isArray(obj) || obj.length === 0;\n}\nexport function isNonEmptyArray(obj) {\n  return Array.isArray(obj) && obj.length > 0;\n}\n/**\r\n * Removes duplicates from the given array. The optional keyFn allows to specify\r\n * how elements are checked for equalness by returning a unique string for each.\r\n */\n\nexport function distinct(array, keyFn) {\n  if (!keyFn) {\n    return array.filter(function (element, position) {\n      return array.indexOf(element) === position;\n    });\n  }\n\n  var seen = Object.create(null);\n  return array.filter(function (elem) {\n    var key = keyFn(elem);\n\n    if (seen[key]) {\n      return false;\n    }\n\n    seen[key] = true;\n    return true;\n  });\n}\nexport function distinctES6(array) {\n  var seen = new Set();\n  return array.filter(function (element) {\n    if (seen.has(element)) {\n      return false;\n    }\n\n    seen.add(element);\n    return true;\n  });\n}\nexport function firstOrDefault(array, notFoundValue) {\n  return array.length > 0 ? array[0] : notFoundValue;\n}\nexport function flatten(arr) {\n  var _ref;\n\n  return (_ref = []).concat.apply(_ref, _toConsumableArray(arr));\n}\nexport function range(arg, to) {\n  var from = typeof to === 'number' ? arg : 0;\n\n  if (typeof to === 'number') {\n    from = arg;\n  } else {\n    from = 0;\n    to = arg;\n  }\n\n  var result = [];\n\n  if (from <= to) {\n    for (var i = from; i < to; i++) {\n      result.push(i);\n    }\n  } else {\n    for (var _i2 = from; _i2 > to; _i2--) {\n      result.push(_i2);\n    }\n  }\n\n  return result;\n}\n/**\r\n * Insert `insertArr` inside `target` at `insertIndex`.\r\n * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array\r\n */\n\nexport function arrayInsert(target, insertIndex, insertArr) {\n  var before = target.slice(0, insertIndex);\n  var after = target.slice(insertIndex);\n  return before.concat(insertArr, after);\n}\n/**\r\n * Pushes an element to the start of the array, if found.\r\n */\n\nexport function pushToStart(arr, value) {\n  var index = arr.indexOf(value);\n\n  if (index > -1) {\n    arr.splice(index, 1);\n    arr.unshift(value);\n  }\n}\n/**\r\n * Pushes an element to the end of the array, if found.\r\n */\n\nexport function pushToEnd(arr, value) {\n  var index = arr.indexOf(value);\n\n  if (index > -1) {\n    arr.splice(index, 1);\n    arr.push(value);\n  }\n}\nexport function asArray(x) {\n  return Array.isArray(x) ? x : [x];\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/common/arrays.js"],"names":["tail","array","n","length","tail2","arr","Error","slice","equals","one","other","itemEquals","a","b","i","len","binarySearch","key","comparator","low","high","mid","comp","findFirstInSorted","p","Math","floor","quickSelect","nth","data","compare","TypeError","pivotValue","random","lower","higher","pivots","value","val","push","mergeSort","_sort","_merge","lo","hi","aux","leftIdx","rightIdx","groupBy","result","currentGroup","undefined","element","coalesce","filter","e","isFalsyOrEmpty","obj","Array","isArray","isNonEmptyArray","distinct","keyFn","position","indexOf","seen","Object","create","elem","distinctES6","Set","has","add","firstOrDefault","notFoundValue","flatten","concat","range","arg","to","from","arrayInsert","target","insertIndex","insertArr","before","after","pushToStart","index","splice","unshift","pushToEnd","asArray","x"],"mappings":"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","sourcesContent":["/**\r\n * Returns the last element of an array.\r\n * @param array The array.\r\n * @param n Which element from the end (default is zero).\r\n */\r\nexport function tail(array, n = 0) {\r\n    return array[array.length - (1 + n)];\r\n}\r\nexport function tail2(arr) {\r\n    if (arr.length === 0) {\r\n        throw new Error('Invalid tail call');\r\n    }\r\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\r\n}\r\nexport function equals(one, other, itemEquals = (a, b) => a === b) {\r\n    if (one === other) {\r\n        return true;\r\n    }\r\n    if (!one || !other) {\r\n        return false;\r\n    }\r\n    if (one.length !== other.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0, len = one.length; i < len; i++) {\r\n        if (!itemEquals(one[i], other[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexport function binarySearch(array, key, comparator) {\r\n    let low = 0, high = array.length - 1;\r\n    while (low <= high) {\r\n        const mid = ((low + high) / 2) | 0;\r\n        const comp = comparator(array[mid], key);\r\n        if (comp < 0) {\r\n            low = mid + 1;\r\n        }\r\n        else if (comp > 0) {\r\n            high = mid - 1;\r\n        }\r\n        else {\r\n            return mid;\r\n        }\r\n    }\r\n    return -(low + 1);\r\n}\r\n/**\r\n * Takes a sorted array and a function p. The array is sorted in such a way that all elements where p(x) is false\r\n * are located before all elements where p(x) is true.\r\n * @returns the least x for which p(x) is true or array.length if no element fullfills the given function.\r\n */\r\nexport function findFirstInSorted(array, p) {\r\n    let low = 0, high = array.length;\r\n    if (high === 0) {\r\n        return 0; // no children\r\n    }\r\n    while (low < high) {\r\n        const mid = Math.floor((low + high) / 2);\r\n        if (p(array[mid])) {\r\n            high = mid;\r\n        }\r\n        else {\r\n            low = mid + 1;\r\n        }\r\n    }\r\n    return low;\r\n}\r\nexport function quickSelect(nth, data, compare) {\r\n    nth = nth | 0;\r\n    if (nth >= data.length) {\r\n        throw new TypeError('invalid index');\r\n    }\r\n    let pivotValue = data[Math.floor(data.length * Math.random())];\r\n    let lower = [];\r\n    let higher = [];\r\n    let pivots = [];\r\n    for (let value of data) {\r\n        const val = compare(value, pivotValue);\r\n        if (val < 0) {\r\n            lower.push(value);\r\n        }\r\n        else if (val > 0) {\r\n            higher.push(value);\r\n        }\r\n        else {\r\n            pivots.push(value);\r\n        }\r\n    }\r\n    if (nth < lower.length) {\r\n        return quickSelect(nth, lower, compare);\r\n    }\r\n    else if (nth < lower.length + pivots.length) {\r\n        return pivots[0];\r\n    }\r\n    else {\r\n        return quickSelect(nth - (lower.length + pivots.length), higher, compare);\r\n    }\r\n}\r\n/**\r\n * Like `Array#sort` but always stable. Usually runs a little slower `than Array#sort`\r\n * so only use this when actually needing stable sort.\r\n */\r\nexport function mergeSort(data, compare) {\r\n    _sort(data, compare, 0, data.length - 1, []);\r\n    return data;\r\n}\r\nfunction _merge(a, compare, lo, mid, hi, aux) {\r\n    let leftIdx = lo, rightIdx = mid + 1;\r\n    for (let i = lo; i <= hi; i++) {\r\n        aux[i] = a[i];\r\n    }\r\n    for (let i = lo; i <= hi; i++) {\r\n        if (leftIdx > mid) {\r\n            // left side consumed\r\n            a[i] = aux[rightIdx++];\r\n        }\r\n        else if (rightIdx > hi) {\r\n            // right side consumed\r\n            a[i] = aux[leftIdx++];\r\n        }\r\n        else if (compare(aux[rightIdx], aux[leftIdx]) < 0) {\r\n            // right element is less -> comes first\r\n            a[i] = aux[rightIdx++];\r\n        }\r\n        else {\r\n            // left element comes first (less or equal)\r\n            a[i] = aux[leftIdx++];\r\n        }\r\n    }\r\n}\r\nfunction _sort(a, compare, lo, hi, aux) {\r\n    if (hi <= lo) {\r\n        return;\r\n    }\r\n    const mid = lo + ((hi - lo) / 2) | 0;\r\n    _sort(a, compare, lo, mid, aux);\r\n    _sort(a, compare, mid + 1, hi, aux);\r\n    if (compare(a[mid], a[mid + 1]) <= 0) {\r\n        // left and right are sorted and if the last-left element is less\r\n        // or equals than the first-right element there is nothing else\r\n        // to do\r\n        return;\r\n    }\r\n    _merge(a, compare, lo, mid, hi, aux);\r\n}\r\nexport function groupBy(data, compare) {\r\n    const result = [];\r\n    let currentGroup = undefined;\r\n    for (const element of mergeSort(data.slice(0), compare)) {\r\n        if (!currentGroup || compare(currentGroup[0], element) !== 0) {\r\n            currentGroup = [element];\r\n            result.push(currentGroup);\r\n        }\r\n        else {\r\n            currentGroup.push(element);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @returns New array with all falsy values removed. The original array IS NOT modified.\r\n */\r\nexport function coalesce(array) {\r\n    return array.filter(e => !!e);\r\n}\r\n/**\r\n * @returns false if the provided object is an array and not empty.\r\n */\r\nexport function isFalsyOrEmpty(obj) {\r\n    return !Array.isArray(obj) || obj.length === 0;\r\n}\r\nexport function isNonEmptyArray(obj) {\r\n    return Array.isArray(obj) && obj.length > 0;\r\n}\r\n/**\r\n * Removes duplicates from the given array. The optional keyFn allows to specify\r\n * how elements are checked for equalness by returning a unique string for each.\r\n */\r\nexport function distinct(array, keyFn) {\r\n    if (!keyFn) {\r\n        return array.filter((element, position) => {\r\n            return array.indexOf(element) === position;\r\n        });\r\n    }\r\n    const seen = Object.create(null);\r\n    return array.filter((elem) => {\r\n        const key = keyFn(elem);\r\n        if (seen[key]) {\r\n            return false;\r\n        }\r\n        seen[key] = true;\r\n        return true;\r\n    });\r\n}\r\nexport function distinctES6(array) {\r\n    const seen = new Set();\r\n    return array.filter(element => {\r\n        if (seen.has(element)) {\r\n            return false;\r\n        }\r\n        seen.add(element);\r\n        return true;\r\n    });\r\n}\r\nexport function firstOrDefault(array, notFoundValue) {\r\n    return array.length > 0 ? array[0] : notFoundValue;\r\n}\r\nexport function flatten(arr) {\r\n    return [].concat(...arr);\r\n}\r\nexport function range(arg, to) {\r\n    let from = typeof to === 'number' ? arg : 0;\r\n    if (typeof to === 'number') {\r\n        from = arg;\r\n    }\r\n    else {\r\n        from = 0;\r\n        to = arg;\r\n    }\r\n    const result = [];\r\n    if (from <= to) {\r\n        for (let i = from; i < to; i++) {\r\n            result.push(i);\r\n        }\r\n    }\r\n    else {\r\n        for (let i = from; i > to; i--) {\r\n            result.push(i);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Insert `insertArr` inside `target` at `insertIndex`.\r\n * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array\r\n */\r\nexport function arrayInsert(target, insertIndex, insertArr) {\r\n    const before = target.slice(0, insertIndex);\r\n    const after = target.slice(insertIndex);\r\n    return before.concat(insertArr, after);\r\n}\r\n/**\r\n * Pushes an element to the start of the array, if found.\r\n */\r\nexport function pushToStart(arr, value) {\r\n    const index = arr.indexOf(value);\r\n    if (index > -1) {\r\n        arr.splice(index, 1);\r\n        arr.unshift(value);\r\n    }\r\n}\r\n/**\r\n * Pushes an element to the end of the array, if found.\r\n */\r\nexport function pushToEnd(arr, value) {\r\n    const index = arr.indexOf(value);\r\n    if (index > -1) {\r\n        arr.splice(index, 1);\r\n        arr.push(value);\r\n    }\r\n}\r\nexport function asArray(x) {\r\n    return Array.isArray(x) ? x : [x];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}