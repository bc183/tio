{"ast":null,"code":"import _toConsumableArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Iterable } from '../../../common/iterator.js';\nimport { IndexTreeModel } from './indexTreeModel.js';\nimport { TreeError } from './tree.js';\nimport { mergeSort } from '../../../common/arrays.js';\nexport var ObjectTreeModel = /*#__PURE__*/function () {\n  function ObjectTreeModel(user, list) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ObjectTreeModel);\n\n    this.user = user;\n    this.rootRef = null;\n    this.nodes = new Map();\n    this.nodesByIdentity = new Map();\n    this.model = new IndexTreeModel(user, list, null, options);\n    this.onDidSplice = this.model.onDidSplice;\n    this.onDidChangeCollapseState = this.model.onDidChangeCollapseState;\n    this.onDidChangeRenderNodeCount = this.model.onDidChangeRenderNodeCount;\n\n    if (options.sorter) {\n      this.sorter = {\n        compare: function compare(a, b) {\n          return options.sorter.compare(a.element, b.element);\n        }\n      };\n    }\n\n    this.identityProvider = options.identityProvider;\n  }\n\n  _createClass(ObjectTreeModel, [{\n    key: \"setChildren\",\n    value: function setChildren(element) {\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Iterable.empty();\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var location = this.getElementLocation(element);\n\n      this._setChildren(location, this.preserveCollapseState(children), options);\n    }\n  }, {\n    key: \"_setChildren\",\n    value: function _setChildren(location) {\n      var _this = this;\n\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Iterable.empty();\n      var options = arguments.length > 2 ? arguments[2] : undefined;\n      var insertedElements = new Set();\n      var insertedElementIds = new Set();\n\n      var onDidCreateNode = function onDidCreateNode(node) {\n        var _a;\n\n        if (node.element === null) {\n          return;\n        }\n\n        var tnode = node;\n        insertedElements.add(tnode.element);\n\n        _this.nodes.set(tnode.element, tnode);\n\n        if (_this.identityProvider) {\n          var id = _this.identityProvider.getId(tnode.element).toString();\n\n          insertedElementIds.add(id);\n\n          _this.nodesByIdentity.set(id, tnode);\n        }\n\n        (_a = options.onDidCreateNode) === null || _a === void 0 ? void 0 : _a.call(options, tnode);\n      };\n\n      var onDidDeleteNode = function onDidDeleteNode(node) {\n        var _a;\n\n        if (node.element === null) {\n          return;\n        }\n\n        var tnode = node;\n\n        if (!insertedElements.has(tnode.element)) {\n          _this.nodes[\"delete\"](tnode.element);\n        }\n\n        if (_this.identityProvider) {\n          var id = _this.identityProvider.getId(tnode.element).toString();\n\n          if (!insertedElementIds.has(id)) {\n            _this.nodesByIdentity[\"delete\"](id);\n          }\n        }\n\n        (_a = options.onDidDeleteNode) === null || _a === void 0 ? void 0 : _a.call(options, tnode);\n      };\n\n      this.model.splice([].concat(_toConsumableArray(location), [0]), Number.MAX_VALUE, children, Object.assign(Object.assign({}, options), {\n        onDidCreateNode: onDidCreateNode,\n        onDidDeleteNode: onDidDeleteNode\n      }));\n    }\n  }, {\n    key: \"preserveCollapseState\",\n    value: function preserveCollapseState() {\n      var _this2 = this;\n\n      var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Iterable.empty();\n\n      if (this.sorter) {\n        elements = mergeSort(_toConsumableArray(elements), this.sorter.compare.bind(this.sorter));\n      }\n\n      return Iterable.map(elements, function (treeElement) {\n        var node = _this2.nodes.get(treeElement.element);\n\n        if (!node && _this2.identityProvider) {\n          var id = _this2.identityProvider.getId(treeElement.element).toString();\n\n          node = _this2.nodesByIdentity.get(id);\n        }\n\n        if (!node) {\n          return Object.assign(Object.assign({}, treeElement), {\n            children: _this2.preserveCollapseState(treeElement.children)\n          });\n        }\n\n        var collapsible = typeof treeElement.collapsible === 'boolean' ? treeElement.collapsible : node.collapsible;\n        var collapsed = typeof treeElement.collapsed !== 'undefined' ? treeElement.collapsed : node.collapsed;\n        return Object.assign(Object.assign({}, treeElement), {\n          collapsible: collapsible,\n          collapsed: collapsed,\n          children: _this2.preserveCollapseState(treeElement.children)\n        });\n      });\n    }\n  }, {\n    key: \"rerender\",\n    value: function rerender(element) {\n      var location = this.getElementLocation(element);\n      this.model.rerender(location);\n    }\n  }, {\n    key: \"has\",\n    value: function has(element) {\n      return this.nodes.has(element);\n    }\n  }, {\n    key: \"getListIndex\",\n    value: function getListIndex(element) {\n      var location = this.getElementLocation(element);\n      return this.model.getListIndex(location);\n    }\n  }, {\n    key: \"getListRenderCount\",\n    value: function getListRenderCount(element) {\n      var location = this.getElementLocation(element);\n      return this.model.getListRenderCount(location);\n    }\n  }, {\n    key: \"isCollapsible\",\n    value: function isCollapsible(element) {\n      var location = this.getElementLocation(element);\n      return this.model.isCollapsible(location);\n    }\n  }, {\n    key: \"setCollapsible\",\n    value: function setCollapsible(element, collapsible) {\n      var location = this.getElementLocation(element);\n      return this.model.setCollapsible(location, collapsible);\n    }\n  }, {\n    key: \"isCollapsed\",\n    value: function isCollapsed(element) {\n      var location = this.getElementLocation(element);\n      return this.model.isCollapsed(location);\n    }\n  }, {\n    key: \"setCollapsed\",\n    value: function setCollapsed(element, collapsed, recursive) {\n      var location = this.getElementLocation(element);\n      return this.model.setCollapsed(location, collapsed, recursive);\n    }\n  }, {\n    key: \"expandTo\",\n    value: function expandTo(element) {\n      var location = this.getElementLocation(element);\n      this.model.expandTo(location);\n    }\n  }, {\n    key: \"refilter\",\n    value: function refilter() {\n      this.model.refilter();\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode() {\n      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (element === null) {\n        return this.model.getNode(this.model.rootRef);\n      }\n\n      var node = this.nodes.get(element);\n\n      if (!node) {\n        throw new TreeError(this.user, \"Tree element not found: \".concat(element));\n      }\n\n      return node;\n    }\n  }, {\n    key: \"getNodeLocation\",\n    value: function getNodeLocation(node) {\n      return node.element;\n    }\n  }, {\n    key: \"getParentNodeLocation\",\n    value: function getParentNodeLocation(element) {\n      if (element === null) {\n        throw new TreeError(this.user, \"Invalid getParentNodeLocation call\");\n      }\n\n      var node = this.nodes.get(element);\n\n      if (!node) {\n        throw new TreeError(this.user, \"Tree element not found: \".concat(element));\n      }\n\n      var location = this.model.getNodeLocation(node);\n      var parentLocation = this.model.getParentNodeLocation(location);\n      var parent = this.model.getNode(parentLocation);\n      return parent.element;\n    }\n  }, {\n    key: \"getElementLocation\",\n    value: function getElementLocation(element) {\n      if (element === null) {\n        return [];\n      }\n\n      var node = this.nodes.get(element);\n\n      if (!node) {\n        throw new TreeError(this.user, \"Tree element not found: \".concat(element));\n      }\n\n      return this.model.getNodeLocation(node);\n    }\n  }]);\n\n  return ObjectTreeModel;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/objectTreeModel.js"],"names":["Iterable","IndexTreeModel","TreeError","mergeSort","ObjectTreeModel","user","list","options","rootRef","nodes","Map","nodesByIdentity","model","onDidSplice","onDidChangeCollapseState","onDidChangeRenderNodeCount","sorter","compare","a","b","element","identityProvider","children","empty","location","getElementLocation","_setChildren","preserveCollapseState","insertedElements","Set","insertedElementIds","onDidCreateNode","node","_a","tnode","add","set","id","getId","toString","call","onDidDeleteNode","has","splice","Number","MAX_VALUE","Object","assign","elements","bind","map","treeElement","get","collapsible","collapsed","rerender","getListIndex","getListRenderCount","isCollapsible","setCollapsible","isCollapsed","recursive","setCollapsed","expandTo","refilter","getNode","getNodeLocation","parentLocation","getParentNodeLocation","parent"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Iterable } from '../../../common/iterator.js';\r\nimport { IndexTreeModel } from './indexTreeModel.js';\r\nimport { TreeError } from './tree.js';\r\nimport { mergeSort } from '../../../common/arrays.js';\r\nexport class ObjectTreeModel {\r\n    constructor(user, list, options = {}) {\r\n        this.user = user;\r\n        this.rootRef = null;\r\n        this.nodes = new Map();\r\n        this.nodesByIdentity = new Map();\r\n        this.model = new IndexTreeModel(user, list, null, options);\r\n        this.onDidSplice = this.model.onDidSplice;\r\n        this.onDidChangeCollapseState = this.model.onDidChangeCollapseState;\r\n        this.onDidChangeRenderNodeCount = this.model.onDidChangeRenderNodeCount;\r\n        if (options.sorter) {\r\n            this.sorter = {\r\n                compare(a, b) {\r\n                    return options.sorter.compare(a.element, b.element);\r\n                }\r\n            };\r\n        }\r\n        this.identityProvider = options.identityProvider;\r\n    }\r\n    setChildren(element, children = Iterable.empty(), options = {}) {\r\n        const location = this.getElementLocation(element);\r\n        this._setChildren(location, this.preserveCollapseState(children), options);\r\n    }\r\n    _setChildren(location, children = Iterable.empty(), options) {\r\n        const insertedElements = new Set();\r\n        const insertedElementIds = new Set();\r\n        const onDidCreateNode = (node) => {\r\n            var _a;\r\n            if (node.element === null) {\r\n                return;\r\n            }\r\n            const tnode = node;\r\n            insertedElements.add(tnode.element);\r\n            this.nodes.set(tnode.element, tnode);\r\n            if (this.identityProvider) {\r\n                const id = this.identityProvider.getId(tnode.element).toString();\r\n                insertedElementIds.add(id);\r\n                this.nodesByIdentity.set(id, tnode);\r\n            }\r\n            (_a = options.onDidCreateNode) === null || _a === void 0 ? void 0 : _a.call(options, tnode);\r\n        };\r\n        const onDidDeleteNode = (node) => {\r\n            var _a;\r\n            if (node.element === null) {\r\n                return;\r\n            }\r\n            const tnode = node;\r\n            if (!insertedElements.has(tnode.element)) {\r\n                this.nodes.delete(tnode.element);\r\n            }\r\n            if (this.identityProvider) {\r\n                const id = this.identityProvider.getId(tnode.element).toString();\r\n                if (!insertedElementIds.has(id)) {\r\n                    this.nodesByIdentity.delete(id);\r\n                }\r\n            }\r\n            (_a = options.onDidDeleteNode) === null || _a === void 0 ? void 0 : _a.call(options, tnode);\r\n        };\r\n        this.model.splice([...location, 0], Number.MAX_VALUE, children, Object.assign(Object.assign({}, options), { onDidCreateNode, onDidDeleteNode }));\r\n    }\r\n    preserveCollapseState(elements = Iterable.empty()) {\r\n        if (this.sorter) {\r\n            elements = mergeSort([...elements], this.sorter.compare.bind(this.sorter));\r\n        }\r\n        return Iterable.map(elements, treeElement => {\r\n            let node = this.nodes.get(treeElement.element);\r\n            if (!node && this.identityProvider) {\r\n                const id = this.identityProvider.getId(treeElement.element).toString();\r\n                node = this.nodesByIdentity.get(id);\r\n            }\r\n            if (!node) {\r\n                return Object.assign(Object.assign({}, treeElement), { children: this.preserveCollapseState(treeElement.children) });\r\n            }\r\n            const collapsible = typeof treeElement.collapsible === 'boolean' ? treeElement.collapsible : node.collapsible;\r\n            const collapsed = typeof treeElement.collapsed !== 'undefined' ? treeElement.collapsed : node.collapsed;\r\n            return Object.assign(Object.assign({}, treeElement), { collapsible,\r\n                collapsed, children: this.preserveCollapseState(treeElement.children) });\r\n        });\r\n    }\r\n    rerender(element) {\r\n        const location = this.getElementLocation(element);\r\n        this.model.rerender(location);\r\n    }\r\n    has(element) {\r\n        return this.nodes.has(element);\r\n    }\r\n    getListIndex(element) {\r\n        const location = this.getElementLocation(element);\r\n        return this.model.getListIndex(location);\r\n    }\r\n    getListRenderCount(element) {\r\n        const location = this.getElementLocation(element);\r\n        return this.model.getListRenderCount(location);\r\n    }\r\n    isCollapsible(element) {\r\n        const location = this.getElementLocation(element);\r\n        return this.model.isCollapsible(location);\r\n    }\r\n    setCollapsible(element, collapsible) {\r\n        const location = this.getElementLocation(element);\r\n        return this.model.setCollapsible(location, collapsible);\r\n    }\r\n    isCollapsed(element) {\r\n        const location = this.getElementLocation(element);\r\n        return this.model.isCollapsed(location);\r\n    }\r\n    setCollapsed(element, collapsed, recursive) {\r\n        const location = this.getElementLocation(element);\r\n        return this.model.setCollapsed(location, collapsed, recursive);\r\n    }\r\n    expandTo(element) {\r\n        const location = this.getElementLocation(element);\r\n        this.model.expandTo(location);\r\n    }\r\n    refilter() {\r\n        this.model.refilter();\r\n    }\r\n    getNode(element = null) {\r\n        if (element === null) {\r\n            return this.model.getNode(this.model.rootRef);\r\n        }\r\n        const node = this.nodes.get(element);\r\n        if (!node) {\r\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\r\n        }\r\n        return node;\r\n    }\r\n    getNodeLocation(node) {\r\n        return node.element;\r\n    }\r\n    getParentNodeLocation(element) {\r\n        if (element === null) {\r\n            throw new TreeError(this.user, `Invalid getParentNodeLocation call`);\r\n        }\r\n        const node = this.nodes.get(element);\r\n        if (!node) {\r\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\r\n        }\r\n        const location = this.model.getNodeLocation(node);\r\n        const parentLocation = this.model.getParentNodeLocation(location);\r\n        const parent = this.model.getNode(parentLocation);\r\n        return parent.element;\r\n    }\r\n    getElementLocation(element) {\r\n        if (element === null) {\r\n            return [];\r\n        }\r\n        const node = this.nodes.get(element);\r\n        if (!node) {\r\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\r\n        }\r\n        return this.model.getNodeLocation(node);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}