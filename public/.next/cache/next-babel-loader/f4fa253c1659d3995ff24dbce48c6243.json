{"ast":null,"code":"import _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport { editorOptionsRegistry, ValidatedEditorOptions, ConfigurationChangedEvent, EDITOR_MODEL_DEFAULTS, ComputeOptionsMemory } from './editorOptions.js';\nimport { EditorZoom } from './editorZoom.js';\nimport { BareFontInfo } from './fontInfo.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { forEach } from '../../../base/common/collections.js';\nexport var TabFocus = new ( /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n\n    this._tabFocus = false;\n    this._onDidChangeTabFocus = new Emitter();\n    this.onDidChangeTabFocus = this._onDidChangeTabFocus.event;\n  }\n\n  _createClass(_class, [{\n    key: \"getTabFocusMode\",\n    value: function getTabFocusMode() {\n      return this._tabFocus;\n    }\n  }, {\n    key: \"setTabFocusMode\",\n    value: function setTabFocusMode(tabFocusMode) {\n      if (this._tabFocus === tabFocusMode) {\n        return;\n      }\n\n      this._tabFocus = tabFocusMode;\n\n      this._onDidChangeTabFocus.fire(this._tabFocus);\n    }\n  }]);\n\n  return _class;\n}())();\nvar hasOwnProperty = Object.hasOwnProperty;\nexport var ComputedEditorOptions = /*#__PURE__*/function () {\n  function ComputedEditorOptions() {\n    _classCallCheck(this, ComputedEditorOptions);\n\n    this._values = [];\n  }\n\n  _createClass(ComputedEditorOptions, [{\n    key: \"_read\",\n    value: function _read(id) {\n      return this._values[id];\n    }\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      return this._values[id];\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(id, value) {\n      this._values[id] = value;\n    }\n  }]);\n\n  return ComputedEditorOptions;\n}();\n\nvar RawEditorOptions = /*#__PURE__*/function () {\n  function RawEditorOptions() {\n    _classCallCheck(this, RawEditorOptions);\n\n    this._values = [];\n  }\n\n  _createClass(RawEditorOptions, [{\n    key: \"_read\",\n    value: function _read(id) {\n      return this._values[id];\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(id, value) {\n      this._values[id] = value;\n    }\n  }]);\n\n  return RawEditorOptions;\n}();\n\nvar EditorConfiguration2 = /*#__PURE__*/function () {\n  function EditorConfiguration2() {\n    _classCallCheck(this, EditorConfiguration2);\n  }\n\n  _createClass(EditorConfiguration2, null, [{\n    key: \"readOptions\",\n    value: function readOptions(_options) {\n      var options = _options;\n      var result = new RawEditorOptions();\n\n      var _iterator = _createForOfIteratorHelper(editorOptionsRegistry),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var editorOption = _step.value;\n          var value = editorOption.name === '_never_' ? undefined : options[editorOption.name];\n\n          result._write(editorOption.id, value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"validateOptions\",\n    value: function validateOptions(options) {\n      var result = new ValidatedEditorOptions();\n\n      var _iterator2 = _createForOfIteratorHelper(editorOptionsRegistry),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var editorOption = _step2.value;\n\n          result._write(editorOption.id, editorOption.validate(options._read(editorOption.id)));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"computeOptions\",\n    value: function computeOptions(options, env) {\n      var result = new ComputedEditorOptions();\n\n      var _iterator3 = _createForOfIteratorHelper(editorOptionsRegistry),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var editorOption = _step3.value;\n\n          result._write(editorOption.id, editorOption.compute(env, result, options._read(editorOption.id)));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_deepEquals\",\n    value: function _deepEquals(a, b) {\n      if (typeof a !== 'object' || typeof b !== 'object') {\n        return a === b;\n      }\n\n      if (Array.isArray(a) || Array.isArray(b)) {\n        return Array.isArray(a) && Array.isArray(b) ? arrays.equals(a, b) : false;\n      }\n\n      for (var key in a) {\n        if (!EditorConfiguration2._deepEquals(a[key], b[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkEquals\",\n    value: function checkEquals(a, b) {\n      var result = [];\n      var somethingChanged = false;\n\n      var _iterator4 = _createForOfIteratorHelper(editorOptionsRegistry),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var editorOption = _step4.value;\n          var changed = !EditorConfiguration2._deepEquals(a._read(editorOption.id), b._read(editorOption.id));\n          result[editorOption.id] = changed;\n\n          if (changed) {\n            somethingChanged = true;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return somethingChanged ? new ConfigurationChangedEvent(result) : null;\n    }\n  }]);\n\n  return EditorConfiguration2;\n}();\n/**\r\n * Compatibility with old options\r\n */\n\n\nfunction migrateOptions(options) {\n  var wordWrap = options.wordWrap;\n\n  if (wordWrap === true) {\n    options.wordWrap = 'on';\n  } else if (wordWrap === false) {\n    options.wordWrap = 'off';\n  }\n\n  var lineNumbers = options.lineNumbers;\n\n  if (lineNumbers === true) {\n    options.lineNumbers = 'on';\n  } else if (lineNumbers === false) {\n    options.lineNumbers = 'off';\n  }\n\n  var autoClosingBrackets = options.autoClosingBrackets;\n\n  if (autoClosingBrackets === false) {\n    options.autoClosingBrackets = 'never';\n    options.autoClosingQuotes = 'never';\n    options.autoSurround = 'never';\n  }\n\n  var cursorBlinking = options.cursorBlinking;\n\n  if (cursorBlinking === 'visible') {\n    options.cursorBlinking = 'solid';\n  }\n\n  var renderWhitespace = options.renderWhitespace;\n\n  if (renderWhitespace === true) {\n    options.renderWhitespace = 'boundary';\n  } else if (renderWhitespace === false) {\n    options.renderWhitespace = 'none';\n  }\n\n  var renderLineHighlight = options.renderLineHighlight;\n\n  if (renderLineHighlight === true) {\n    options.renderLineHighlight = 'line';\n  } else if (renderLineHighlight === false) {\n    options.renderLineHighlight = 'none';\n  }\n\n  var acceptSuggestionOnEnter = options.acceptSuggestionOnEnter;\n\n  if (acceptSuggestionOnEnter === true) {\n    options.acceptSuggestionOnEnter = 'on';\n  } else if (acceptSuggestionOnEnter === false) {\n    options.acceptSuggestionOnEnter = 'off';\n  }\n\n  var tabCompletion = options.tabCompletion;\n\n  if (tabCompletion === false) {\n    options.tabCompletion = 'off';\n  } else if (tabCompletion === true) {\n    options.tabCompletion = 'onlySnippets';\n  }\n\n  var suggest = options.suggest;\n\n  if (suggest && typeof suggest.filteredTypes === 'object' && suggest.filteredTypes) {\n    var mapping = {};\n    mapping['method'] = 'showMethods';\n    mapping['function'] = 'showFunctions';\n    mapping['constructor'] = 'showConstructors';\n    mapping['field'] = 'showFields';\n    mapping['variable'] = 'showVariables';\n    mapping['class'] = 'showClasses';\n    mapping['struct'] = 'showStructs';\n    mapping['interface'] = 'showInterfaces';\n    mapping['module'] = 'showModules';\n    mapping['property'] = 'showProperties';\n    mapping['event'] = 'showEvents';\n    mapping['operator'] = 'showOperators';\n    mapping['unit'] = 'showUnits';\n    mapping['value'] = 'showValues';\n    mapping['constant'] = 'showConstants';\n    mapping['enum'] = 'showEnums';\n    mapping['enumMember'] = 'showEnumMembers';\n    mapping['keyword'] = 'showKeywords';\n    mapping['text'] = 'showWords';\n    mapping['color'] = 'showColors';\n    mapping['file'] = 'showFiles';\n    mapping['reference'] = 'showReferences';\n    mapping['folder'] = 'showFolders';\n    mapping['typeParameter'] = 'showTypeParameters';\n    mapping['snippet'] = 'showSnippets';\n    forEach(mapping, function (entry) {\n      var value = suggest.filteredTypes[entry.key];\n\n      if (value === false) {\n        suggest[entry.value] = value;\n      }\n    }); // delete (<any>suggest).filteredTypes;\n  }\n\n  var hover = options.hover;\n\n  if (hover === true) {\n    options.hover = {\n      enabled: true\n    };\n  } else if (hover === false) {\n    options.hover = {\n      enabled: false\n    };\n  }\n\n  var parameterHints = options.parameterHints;\n\n  if (parameterHints === true) {\n    options.parameterHints = {\n      enabled: true\n    };\n  } else if (parameterHints === false) {\n    options.parameterHints = {\n      enabled: false\n    };\n  }\n\n  var autoIndent = options.autoIndent;\n\n  if (autoIndent === true) {\n    options.autoIndent = 'full';\n  } else if (autoIndent === false) {\n    options.autoIndent = 'advanced';\n  }\n\n  var matchBrackets = options.matchBrackets;\n\n  if (matchBrackets === true) {\n    options.matchBrackets = 'always';\n  } else if (matchBrackets === false) {\n    options.matchBrackets = 'never';\n  }\n}\n\nfunction deepCloneAndMigrateOptions(_options) {\n  var options = objects.deepClone(_options);\n  migrateOptions(options);\n  return options;\n}\n\nexport var CommonEditorConfiguration = /*#__PURE__*/function (_Disposable) {\n  _inherits(CommonEditorConfiguration, _Disposable);\n\n  var _super = _createSuper(CommonEditorConfiguration);\n\n  function CommonEditorConfiguration(isSimpleWidget, _options) {\n    var _this;\n\n    _classCallCheck(this, CommonEditorConfiguration);\n\n    _this = _super.call(this);\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    _this._onDidChangeFast = _this._register(new Emitter());\n    _this.onDidChangeFast = _this._onDidChangeFast.event;\n    _this.isSimpleWidget = isSimpleWidget;\n    _this._isDominatedByLongLines = false;\n    _this._computeOptionsMemory = new ComputeOptionsMemory();\n    _this._viewLineCount = 1;\n    _this._lineNumbersDigitCount = 1;\n    _this._rawOptions = deepCloneAndMigrateOptions(_options);\n    _this._readOptions = EditorConfiguration2.readOptions(_this._rawOptions);\n    _this._validatedOptions = EditorConfiguration2.validateOptions(_this._readOptions);\n\n    _this._register(EditorZoom.onDidChangeZoomLevel(function (_) {\n      return _this._recomputeOptions();\n    }));\n\n    _this._register(TabFocus.onDidChangeTabFocus(function (_) {\n      return _this._recomputeOptions();\n    }));\n\n    return _this;\n  }\n\n  _createClass(CommonEditorConfiguration, [{\n    key: \"observeReferenceElement\",\n    value: function observeReferenceElement(dimension) {}\n  }, {\n    key: \"updatePixelRatio\",\n    value: function updatePixelRatio() {}\n  }, {\n    key: \"_recomputeOptions\",\n    value: function _recomputeOptions() {\n      var oldOptions = this.options;\n\n      var newOptions = this._computeInternalOptions();\n\n      if (!oldOptions) {\n        this.options = newOptions;\n      } else {\n        var changeEvent = EditorConfiguration2.checkEquals(oldOptions, newOptions);\n\n        if (changeEvent === null) {\n          // nothing changed!\n          return;\n        }\n\n        this.options = newOptions;\n\n        this._onDidChangeFast.fire(changeEvent);\n\n        this._onDidChange.fire(changeEvent);\n      }\n    }\n  }, {\n    key: \"getRawOptions\",\n    value: function getRawOptions() {\n      return this._rawOptions;\n    }\n  }, {\n    key: \"_computeInternalOptions\",\n    value: function _computeInternalOptions() {\n      var partialEnv = this._getEnvConfiguration();\n\n      var bareFontInfo = BareFontInfo.createFromValidatedSettings(this._validatedOptions, partialEnv.zoomLevel, partialEnv.pixelRatio, this.isSimpleWidget);\n      var env = {\n        memory: this._computeOptionsMemory,\n        outerWidth: partialEnv.outerWidth,\n        outerHeight: partialEnv.outerHeight,\n        fontInfo: this.readConfiguration(bareFontInfo),\n        extraEditorClassName: partialEnv.extraEditorClassName,\n        isDominatedByLongLines: this._isDominatedByLongLines,\n        viewLineCount: this._viewLineCount,\n        lineNumbersDigitCount: this._lineNumbersDigitCount,\n        emptySelectionClipboard: partialEnv.emptySelectionClipboard,\n        pixelRatio: partialEnv.pixelRatio,\n        tabFocusMode: TabFocus.getTabFocusMode(),\n        accessibilitySupport: partialEnv.accessibilitySupport\n      };\n      return EditorConfiguration2.computeOptions(this._validatedOptions, env);\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(_newOptions) {\n      if (typeof _newOptions === 'undefined') {\n        return;\n      }\n\n      var newOptions = deepCloneAndMigrateOptions(_newOptions);\n\n      if (CommonEditorConfiguration._subsetEquals(this._rawOptions, newOptions)) {\n        return;\n      }\n\n      this._rawOptions = objects.mixin(this._rawOptions, newOptions || {});\n      this._readOptions = EditorConfiguration2.readOptions(this._rawOptions);\n      this._validatedOptions = EditorConfiguration2.validateOptions(this._readOptions);\n\n      this._recomputeOptions();\n    }\n  }, {\n    key: \"setIsDominatedByLongLines\",\n    value: function setIsDominatedByLongLines(isDominatedByLongLines) {\n      this._isDominatedByLongLines = isDominatedByLongLines;\n\n      this._recomputeOptions();\n    }\n  }, {\n    key: \"setMaxLineNumber\",\n    value: function setMaxLineNumber(maxLineNumber) {\n      var lineNumbersDigitCount = CommonEditorConfiguration._digitCount(maxLineNumber);\n\n      if (this._lineNumbersDigitCount === lineNumbersDigitCount) {\n        return;\n      }\n\n      this._lineNumbersDigitCount = lineNumbersDigitCount;\n\n      this._recomputeOptions();\n    }\n  }, {\n    key: \"setViewLineCount\",\n    value: function setViewLineCount(viewLineCount) {\n      if (this._viewLineCount === viewLineCount) {\n        return;\n      }\n\n      this._viewLineCount = viewLineCount;\n\n      this._recomputeOptions();\n    }\n  }], [{\n    key: \"_subsetEquals\",\n    value: function _subsetEquals(base, subset) {\n      for (var key in subset) {\n        if (hasOwnProperty.call(subset, key)) {\n          var subsetValue = subset[key];\n          var baseValue = base[key];\n\n          if (baseValue === subsetValue) {\n            continue;\n          }\n\n          if (Array.isArray(baseValue) && Array.isArray(subsetValue)) {\n            if (!arrays.equals(baseValue, subsetValue)) {\n              return false;\n            }\n\n            continue;\n          }\n\n          if (baseValue && typeof baseValue === 'object' && subsetValue && typeof subsetValue === 'object') {\n            if (!this._subsetEquals(baseValue, subsetValue)) {\n              return false;\n            }\n\n            continue;\n          }\n\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_digitCount\",\n    value: function _digitCount(n) {\n      var r = 0;\n\n      while (n) {\n        n = Math.floor(n / 10);\n        r++;\n      }\n\n      return r ? r : 1;\n    }\n  }]);\n\n  return CommonEditorConfiguration;\n}(Disposable);\nexport var editorConfigurationBaseNode = Object.freeze({\n  id: 'editor',\n  order: 5,\n  type: 'object',\n  title: nls.localize('editorConfigurationTitle', \"Editor\"),\n  scope: 5\n  /* LANGUAGE_OVERRIDABLE */\n\n});\nvar configurationRegistry = Registry.as(Extensions.Configuration);\nvar editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), {\n  properties: {\n    'editor.tabSize': {\n      type: 'number',\n      \"default\": EDITOR_MODEL_DEFAULTS.tabSize,\n      minimum: 1,\n      markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    },\n    // 'editor.indentSize': {\n    // \t'anyOf': [\n    // \t\t{\n    // \t\t\ttype: 'string',\n    // \t\t\tenum: ['tabSize']\n    // \t\t},\n    // \t\t{\n    // \t\t\ttype: 'number',\n    // \t\t\tminimum: 1\n    // \t\t}\n    // \t],\n    // \tdefault: 'tabSize',\n    // \tmarkdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    // },\n    'editor.insertSpaces': {\n      type: 'boolean',\n      \"default\": EDITOR_MODEL_DEFAULTS.insertSpaces,\n      markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    },\n    'editor.detectIndentation': {\n      type: 'boolean',\n      \"default\": EDITOR_MODEL_DEFAULTS.detectIndentation,\n      markdownDescription: nls.localize('detectIndentation', \"Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.\")\n    },\n    'editor.trimAutoWhitespace': {\n      type: 'boolean',\n      \"default\": EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n      description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\n    },\n    'editor.largeFileOptimizations': {\n      type: 'boolean',\n      \"default\": EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n      description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\n    },\n    'editor.wordBasedSuggestions': {\n      type: 'boolean',\n      \"default\": true,\n      description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\n    },\n    'editor.wordBasedSuggestionsMode': {\n      \"enum\": ['currentDocument', 'matchingDocuments', 'allDocuments'],\n      \"default\": 'matchingDocuments',\n      enumDescriptions: [nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'), nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'), nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')],\n      description: nls.localize('wordBasedSuggestionsMode', \"Controls form what documents word based completions are computed.\")\n    },\n    'editor.semanticHighlighting.enabled': {\n      \"enum\": [true, false, 'configuredByTheme'],\n      enumDescriptions: [nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'), nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'), nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')],\n      \"default\": 'configuredByTheme',\n      description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\n    },\n    'editor.stablePeek': {\n      type: 'boolean',\n      \"default\": false,\n      markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double clicking their content or when hitting `Escape`.\")\n    },\n    'editor.maxTokenizationLineLength': {\n      type: 'integer',\n      \"default\": 20000,\n      description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\n    },\n    'diffEditor.maxComputationTime': {\n      type: 'number',\n      \"default\": 5000,\n      description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\n    },\n    'diffEditor.renderSideBySide': {\n      type: 'boolean',\n      \"default\": true,\n      description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\n    },\n    'diffEditor.ignoreTrimWhitespace': {\n      type: 'boolean',\n      \"default\": true,\n      description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\n    },\n    'diffEditor.renderIndicators': {\n      type: 'boolean',\n      \"default\": true,\n      description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\n    },\n    'diffEditor.codeLens': {\n      type: 'boolean',\n      \"default\": false,\n      description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\n    },\n    'diffEditor.wordWrap': {\n      type: 'string',\n      \"enum\": ['off', 'on', 'inherit'],\n      \"default\": 'inherit',\n      markdownEnumDescriptions: [nls.localize('wordWrap.off', \"Lines will never wrap.\"), nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"), nls.localize('wordWrap.inherit', \"Lines will wrap according to the `#editor.wordWrap#` setting.\")]\n    }\n  }\n});\n\nfunction isConfigurationPropertySchema(x) {\n  return typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined';\n} // Add properties from the Editor Option Registry\n\n\nvar _iterator5 = _createForOfIteratorHelper(editorOptionsRegistry),\n    _step5;\n\ntry {\n  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n    var editorOption = _step5.value;\n    var schema = editorOption.schema;\n\n    if (typeof schema !== 'undefined') {\n      if (isConfigurationPropertySchema(schema)) {\n        // This is a single schema contribution\n        editorConfiguration.properties[\"editor.\".concat(editorOption.name)] = schema;\n      } else {\n        for (var key in schema) {\n          if (hasOwnProperty.call(schema, key)) {\n            editorConfiguration.properties[key] = schema[key];\n          }\n        }\n      }\n    }\n  }\n} catch (err) {\n  _iterator5.e(err);\n} finally {\n  _iterator5.f();\n}\n\nvar cachedEditorConfigurationKeys = null;\n\nfunction getEditorConfigurationKeys() {\n  if (cachedEditorConfigurationKeys === null) {\n    cachedEditorConfigurationKeys = Object.create(null);\n    Object.keys(editorConfiguration.properties).forEach(function (prop) {\n      cachedEditorConfigurationKeys[prop] = true;\n    });\n  }\n\n  return cachedEditorConfigurationKeys;\n}\n\nexport function isEditorConfigurationKey(key) {\n  var editorConfigurationKeys = getEditorConfigurationKeys();\n  return editorConfigurationKeys[\"editor.\".concat(key)] || false;\n}\nexport function isDiffEditorConfigurationKey(key) {\n  var editorConfigurationKeys = getEditorConfigurationKeys();\n  return editorConfigurationKeys[\"diffEditor.\".concat(key)] || false;\n}\nconfigurationRegistry.registerConfiguration(editorConfiguration);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/config/commonEditorConfig.js"],"names":["nls","Emitter","Disposable","objects","arrays","editorOptionsRegistry","ValidatedEditorOptions","ConfigurationChangedEvent","EDITOR_MODEL_DEFAULTS","ComputeOptionsMemory","EditorZoom","BareFontInfo","Extensions","Registry","forEach","TabFocus","_tabFocus","_onDidChangeTabFocus","onDidChangeTabFocus","event","tabFocusMode","fire","hasOwnProperty","Object","ComputedEditorOptions","_values","id","value","RawEditorOptions","EditorConfiguration2","_options","options","result","editorOption","name","undefined","_write","validate","_read","env","compute","a","b","Array","isArray","equals","key","_deepEquals","somethingChanged","changed","migrateOptions","wordWrap","lineNumbers","autoClosingBrackets","autoClosingQuotes","autoSurround","cursorBlinking","renderWhitespace","renderLineHighlight","acceptSuggestionOnEnter","tabCompletion","suggest","filteredTypes","mapping","entry","hover","enabled","parameterHints","autoIndent","matchBrackets","deepCloneAndMigrateOptions","deepClone","CommonEditorConfiguration","isSimpleWidget","_onDidChange","_register","onDidChange","_onDidChangeFast","onDidChangeFast","_isDominatedByLongLines","_computeOptionsMemory","_viewLineCount","_lineNumbersDigitCount","_rawOptions","_readOptions","readOptions","_validatedOptions","validateOptions","onDidChangeZoomLevel","_","_recomputeOptions","dimension","oldOptions","newOptions","_computeInternalOptions","changeEvent","checkEquals","partialEnv","_getEnvConfiguration","bareFontInfo","createFromValidatedSettings","zoomLevel","pixelRatio","memory","outerWidth","outerHeight","fontInfo","readConfiguration","extraEditorClassName","isDominatedByLongLines","viewLineCount","lineNumbersDigitCount","emptySelectionClipboard","getTabFocusMode","accessibilitySupport","computeOptions","_newOptions","_subsetEquals","mixin","maxLineNumber","_digitCount","base","subset","call","subsetValue","baseValue","n","r","Math","floor","editorConfigurationBaseNode","freeze","order","type","title","localize","scope","configurationRegistry","as","Configuration","editorConfiguration","assign","properties","tabSize","minimum","markdownDescription","insertSpaces","detectIndentation","trimAutoWhitespace","description","largeFileOptimizations","enumDescriptions","markdownEnumDescriptions","isConfigurationPropertySchema","x","anyOf","schema","cachedEditorConfigurationKeys","getEditorConfigurationKeys","create","keys","prop","isEditorConfigurationKey","editorConfigurationKeys","isDiffEditorConfigurationKey","registerConfiguration"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport * as objects from '../../../base/common/objects.js';\r\nimport * as arrays from '../../../base/common/arrays.js';\r\nimport { editorOptionsRegistry, ValidatedEditorOptions, ConfigurationChangedEvent, EDITOR_MODEL_DEFAULTS, ComputeOptionsMemory } from './editorOptions.js';\r\nimport { EditorZoom } from './editorZoom.js';\r\nimport { BareFontInfo } from './fontInfo.js';\r\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\r\nimport { Registry } from '../../../platform/registry/common/platform.js';\r\nimport { forEach } from '../../../base/common/collections.js';\r\nexport const TabFocus = new class {\r\n    constructor() {\r\n        this._tabFocus = false;\r\n        this._onDidChangeTabFocus = new Emitter();\r\n        this.onDidChangeTabFocus = this._onDidChangeTabFocus.event;\r\n    }\r\n    getTabFocusMode() {\r\n        return this._tabFocus;\r\n    }\r\n    setTabFocusMode(tabFocusMode) {\r\n        if (this._tabFocus === tabFocusMode) {\r\n            return;\r\n        }\r\n        this._tabFocus = tabFocusMode;\r\n        this._onDidChangeTabFocus.fire(this._tabFocus);\r\n    }\r\n};\r\nconst hasOwnProperty = Object.hasOwnProperty;\r\nexport class ComputedEditorOptions {\r\n    constructor() {\r\n        this._values = [];\r\n    }\r\n    _read(id) {\r\n        return this._values[id];\r\n    }\r\n    get(id) {\r\n        return this._values[id];\r\n    }\r\n    _write(id, value) {\r\n        this._values[id] = value;\r\n    }\r\n}\r\nclass RawEditorOptions {\r\n    constructor() {\r\n        this._values = [];\r\n    }\r\n    _read(id) {\r\n        return this._values[id];\r\n    }\r\n    _write(id, value) {\r\n        this._values[id] = value;\r\n    }\r\n}\r\nclass EditorConfiguration2 {\r\n    static readOptions(_options) {\r\n        const options = _options;\r\n        const result = new RawEditorOptions();\r\n        for (const editorOption of editorOptionsRegistry) {\r\n            const value = (editorOption.name === '_never_' ? undefined : options[editorOption.name]);\r\n            result._write(editorOption.id, value);\r\n        }\r\n        return result;\r\n    }\r\n    static validateOptions(options) {\r\n        const result = new ValidatedEditorOptions();\r\n        for (const editorOption of editorOptionsRegistry) {\r\n            result._write(editorOption.id, editorOption.validate(options._read(editorOption.id)));\r\n        }\r\n        return result;\r\n    }\r\n    static computeOptions(options, env) {\r\n        const result = new ComputedEditorOptions();\r\n        for (const editorOption of editorOptionsRegistry) {\r\n            result._write(editorOption.id, editorOption.compute(env, result, options._read(editorOption.id)));\r\n        }\r\n        return result;\r\n    }\r\n    static _deepEquals(a, b) {\r\n        if (typeof a !== 'object' || typeof b !== 'object') {\r\n            return (a === b);\r\n        }\r\n        if (Array.isArray(a) || Array.isArray(b)) {\r\n            return (Array.isArray(a) && Array.isArray(b) ? arrays.equals(a, b) : false);\r\n        }\r\n        for (let key in a) {\r\n            if (!EditorConfiguration2._deepEquals(a[key], b[key])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static checkEquals(a, b) {\r\n        const result = [];\r\n        let somethingChanged = false;\r\n        for (const editorOption of editorOptionsRegistry) {\r\n            const changed = !EditorConfiguration2._deepEquals(a._read(editorOption.id), b._read(editorOption.id));\r\n            result[editorOption.id] = changed;\r\n            if (changed) {\r\n                somethingChanged = true;\r\n            }\r\n        }\r\n        return (somethingChanged ? new ConfigurationChangedEvent(result) : null);\r\n    }\r\n}\r\n/**\r\n * Compatibility with old options\r\n */\r\nfunction migrateOptions(options) {\r\n    const wordWrap = options.wordWrap;\r\n    if (wordWrap === true) {\r\n        options.wordWrap = 'on';\r\n    }\r\n    else if (wordWrap === false) {\r\n        options.wordWrap = 'off';\r\n    }\r\n    const lineNumbers = options.lineNumbers;\r\n    if (lineNumbers === true) {\r\n        options.lineNumbers = 'on';\r\n    }\r\n    else if (lineNumbers === false) {\r\n        options.lineNumbers = 'off';\r\n    }\r\n    const autoClosingBrackets = options.autoClosingBrackets;\r\n    if (autoClosingBrackets === false) {\r\n        options.autoClosingBrackets = 'never';\r\n        options.autoClosingQuotes = 'never';\r\n        options.autoSurround = 'never';\r\n    }\r\n    const cursorBlinking = options.cursorBlinking;\r\n    if (cursorBlinking === 'visible') {\r\n        options.cursorBlinking = 'solid';\r\n    }\r\n    const renderWhitespace = options.renderWhitespace;\r\n    if (renderWhitespace === true) {\r\n        options.renderWhitespace = 'boundary';\r\n    }\r\n    else if (renderWhitespace === false) {\r\n        options.renderWhitespace = 'none';\r\n    }\r\n    const renderLineHighlight = options.renderLineHighlight;\r\n    if (renderLineHighlight === true) {\r\n        options.renderLineHighlight = 'line';\r\n    }\r\n    else if (renderLineHighlight === false) {\r\n        options.renderLineHighlight = 'none';\r\n    }\r\n    const acceptSuggestionOnEnter = options.acceptSuggestionOnEnter;\r\n    if (acceptSuggestionOnEnter === true) {\r\n        options.acceptSuggestionOnEnter = 'on';\r\n    }\r\n    else if (acceptSuggestionOnEnter === false) {\r\n        options.acceptSuggestionOnEnter = 'off';\r\n    }\r\n    const tabCompletion = options.tabCompletion;\r\n    if (tabCompletion === false) {\r\n        options.tabCompletion = 'off';\r\n    }\r\n    else if (tabCompletion === true) {\r\n        options.tabCompletion = 'onlySnippets';\r\n    }\r\n    const suggest = options.suggest;\r\n    if (suggest && typeof suggest.filteredTypes === 'object' && suggest.filteredTypes) {\r\n        const mapping = {};\r\n        mapping['method'] = 'showMethods';\r\n        mapping['function'] = 'showFunctions';\r\n        mapping['constructor'] = 'showConstructors';\r\n        mapping['field'] = 'showFields';\r\n        mapping['variable'] = 'showVariables';\r\n        mapping['class'] = 'showClasses';\r\n        mapping['struct'] = 'showStructs';\r\n        mapping['interface'] = 'showInterfaces';\r\n        mapping['module'] = 'showModules';\r\n        mapping['property'] = 'showProperties';\r\n        mapping['event'] = 'showEvents';\r\n        mapping['operator'] = 'showOperators';\r\n        mapping['unit'] = 'showUnits';\r\n        mapping['value'] = 'showValues';\r\n        mapping['constant'] = 'showConstants';\r\n        mapping['enum'] = 'showEnums';\r\n        mapping['enumMember'] = 'showEnumMembers';\r\n        mapping['keyword'] = 'showKeywords';\r\n        mapping['text'] = 'showWords';\r\n        mapping['color'] = 'showColors';\r\n        mapping['file'] = 'showFiles';\r\n        mapping['reference'] = 'showReferences';\r\n        mapping['folder'] = 'showFolders';\r\n        mapping['typeParameter'] = 'showTypeParameters';\r\n        mapping['snippet'] = 'showSnippets';\r\n        forEach(mapping, entry => {\r\n            const value = suggest.filteredTypes[entry.key];\r\n            if (value === false) {\r\n                suggest[entry.value] = value;\r\n            }\r\n        });\r\n        // delete (<any>suggest).filteredTypes;\r\n    }\r\n    const hover = options.hover;\r\n    if (hover === true) {\r\n        options.hover = {\r\n            enabled: true\r\n        };\r\n    }\r\n    else if (hover === false) {\r\n        options.hover = {\r\n            enabled: false\r\n        };\r\n    }\r\n    const parameterHints = options.parameterHints;\r\n    if (parameterHints === true) {\r\n        options.parameterHints = {\r\n            enabled: true\r\n        };\r\n    }\r\n    else if (parameterHints === false) {\r\n        options.parameterHints = {\r\n            enabled: false\r\n        };\r\n    }\r\n    const autoIndent = options.autoIndent;\r\n    if (autoIndent === true) {\r\n        options.autoIndent = 'full';\r\n    }\r\n    else if (autoIndent === false) {\r\n        options.autoIndent = 'advanced';\r\n    }\r\n    const matchBrackets = options.matchBrackets;\r\n    if (matchBrackets === true) {\r\n        options.matchBrackets = 'always';\r\n    }\r\n    else if (matchBrackets === false) {\r\n        options.matchBrackets = 'never';\r\n    }\r\n}\r\nfunction deepCloneAndMigrateOptions(_options) {\r\n    const options = objects.deepClone(_options);\r\n    migrateOptions(options);\r\n    return options;\r\n}\r\nexport class CommonEditorConfiguration extends Disposable {\r\n    constructor(isSimpleWidget, _options) {\r\n        super();\r\n        this._onDidChange = this._register(new Emitter());\r\n        this.onDidChange = this._onDidChange.event;\r\n        this._onDidChangeFast = this._register(new Emitter());\r\n        this.onDidChangeFast = this._onDidChangeFast.event;\r\n        this.isSimpleWidget = isSimpleWidget;\r\n        this._isDominatedByLongLines = false;\r\n        this._computeOptionsMemory = new ComputeOptionsMemory();\r\n        this._viewLineCount = 1;\r\n        this._lineNumbersDigitCount = 1;\r\n        this._rawOptions = deepCloneAndMigrateOptions(_options);\r\n        this._readOptions = EditorConfiguration2.readOptions(this._rawOptions);\r\n        this._validatedOptions = EditorConfiguration2.validateOptions(this._readOptions);\r\n        this._register(EditorZoom.onDidChangeZoomLevel(_ => this._recomputeOptions()));\r\n        this._register(TabFocus.onDidChangeTabFocus(_ => this._recomputeOptions()));\r\n    }\r\n    observeReferenceElement(dimension) {\r\n    }\r\n    updatePixelRatio() {\r\n    }\r\n    _recomputeOptions() {\r\n        const oldOptions = this.options;\r\n        const newOptions = this._computeInternalOptions();\r\n        if (!oldOptions) {\r\n            this.options = newOptions;\r\n        }\r\n        else {\r\n            const changeEvent = EditorConfiguration2.checkEquals(oldOptions, newOptions);\r\n            if (changeEvent === null) {\r\n                // nothing changed!\r\n                return;\r\n            }\r\n            this.options = newOptions;\r\n            this._onDidChangeFast.fire(changeEvent);\r\n            this._onDidChange.fire(changeEvent);\r\n        }\r\n    }\r\n    getRawOptions() {\r\n        return this._rawOptions;\r\n    }\r\n    _computeInternalOptions() {\r\n        const partialEnv = this._getEnvConfiguration();\r\n        const bareFontInfo = BareFontInfo.createFromValidatedSettings(this._validatedOptions, partialEnv.zoomLevel, partialEnv.pixelRatio, this.isSimpleWidget);\r\n        const env = {\r\n            memory: this._computeOptionsMemory,\r\n            outerWidth: partialEnv.outerWidth,\r\n            outerHeight: partialEnv.outerHeight,\r\n            fontInfo: this.readConfiguration(bareFontInfo),\r\n            extraEditorClassName: partialEnv.extraEditorClassName,\r\n            isDominatedByLongLines: this._isDominatedByLongLines,\r\n            viewLineCount: this._viewLineCount,\r\n            lineNumbersDigitCount: this._lineNumbersDigitCount,\r\n            emptySelectionClipboard: partialEnv.emptySelectionClipboard,\r\n            pixelRatio: partialEnv.pixelRatio,\r\n            tabFocusMode: TabFocus.getTabFocusMode(),\r\n            accessibilitySupport: partialEnv.accessibilitySupport\r\n        };\r\n        return EditorConfiguration2.computeOptions(this._validatedOptions, env);\r\n    }\r\n    static _subsetEquals(base, subset) {\r\n        for (const key in subset) {\r\n            if (hasOwnProperty.call(subset, key)) {\r\n                const subsetValue = subset[key];\r\n                const baseValue = base[key];\r\n                if (baseValue === subsetValue) {\r\n                    continue;\r\n                }\r\n                if (Array.isArray(baseValue) && Array.isArray(subsetValue)) {\r\n                    if (!arrays.equals(baseValue, subsetValue)) {\r\n                        return false;\r\n                    }\r\n                    continue;\r\n                }\r\n                if (baseValue && typeof baseValue === 'object' && subsetValue && typeof subsetValue === 'object') {\r\n                    if (!this._subsetEquals(baseValue, subsetValue)) {\r\n                        return false;\r\n                    }\r\n                    continue;\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    updateOptions(_newOptions) {\r\n        if (typeof _newOptions === 'undefined') {\r\n            return;\r\n        }\r\n        const newOptions = deepCloneAndMigrateOptions(_newOptions);\r\n        if (CommonEditorConfiguration._subsetEquals(this._rawOptions, newOptions)) {\r\n            return;\r\n        }\r\n        this._rawOptions = objects.mixin(this._rawOptions, newOptions || {});\r\n        this._readOptions = EditorConfiguration2.readOptions(this._rawOptions);\r\n        this._validatedOptions = EditorConfiguration2.validateOptions(this._readOptions);\r\n        this._recomputeOptions();\r\n    }\r\n    setIsDominatedByLongLines(isDominatedByLongLines) {\r\n        this._isDominatedByLongLines = isDominatedByLongLines;\r\n        this._recomputeOptions();\r\n    }\r\n    setMaxLineNumber(maxLineNumber) {\r\n        const lineNumbersDigitCount = CommonEditorConfiguration._digitCount(maxLineNumber);\r\n        if (this._lineNumbersDigitCount === lineNumbersDigitCount) {\r\n            return;\r\n        }\r\n        this._lineNumbersDigitCount = lineNumbersDigitCount;\r\n        this._recomputeOptions();\r\n    }\r\n    setViewLineCount(viewLineCount) {\r\n        if (this._viewLineCount === viewLineCount) {\r\n            return;\r\n        }\r\n        this._viewLineCount = viewLineCount;\r\n        this._recomputeOptions();\r\n    }\r\n    static _digitCount(n) {\r\n        let r = 0;\r\n        while (n) {\r\n            n = Math.floor(n / 10);\r\n            r++;\r\n        }\r\n        return r ? r : 1;\r\n    }\r\n}\r\nexport const editorConfigurationBaseNode = Object.freeze({\r\n    id: 'editor',\r\n    order: 5,\r\n    type: 'object',\r\n    title: nls.localize('editorConfigurationTitle', \"Editor\"),\r\n    scope: 5 /* LANGUAGE_OVERRIDABLE */,\r\n});\r\nconst configurationRegistry = Registry.as(Extensions.Configuration);\r\nconst editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), { properties: {\r\n        'editor.tabSize': {\r\n            type: 'number',\r\n            default: EDITOR_MODEL_DEFAULTS.tabSize,\r\n            minimum: 1,\r\n            markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\r\n        },\r\n        // 'editor.indentSize': {\r\n        // \t'anyOf': [\r\n        // \t\t{\r\n        // \t\t\ttype: 'string',\r\n        // \t\t\tenum: ['tabSize']\r\n        // \t\t},\r\n        // \t\t{\r\n        // \t\t\ttype: 'number',\r\n        // \t\t\tminimum: 1\r\n        // \t\t}\r\n        // \t],\r\n        // \tdefault: 'tabSize',\r\n        // \tmarkdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\r\n        // },\r\n        'editor.insertSpaces': {\r\n            type: 'boolean',\r\n            default: EDITOR_MODEL_DEFAULTS.insertSpaces,\r\n            markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\r\n        },\r\n        'editor.detectIndentation': {\r\n            type: 'boolean',\r\n            default: EDITOR_MODEL_DEFAULTS.detectIndentation,\r\n            markdownDescription: nls.localize('detectIndentation', \"Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.\")\r\n        },\r\n        'editor.trimAutoWhitespace': {\r\n            type: 'boolean',\r\n            default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\r\n            description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\r\n        },\r\n        'editor.largeFileOptimizations': {\r\n            type: 'boolean',\r\n            default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\r\n            description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\r\n        },\r\n        'editor.wordBasedSuggestions': {\r\n            type: 'boolean',\r\n            default: true,\r\n            description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\r\n        },\r\n        'editor.wordBasedSuggestionsMode': {\r\n            enum: ['currentDocument', 'matchingDocuments', 'allDocuments'],\r\n            default: 'matchingDocuments',\r\n            enumDescriptions: [\r\n                nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'),\r\n                nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'),\r\n                nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')\r\n            ],\r\n            description: nls.localize('wordBasedSuggestionsMode', \"Controls form what documents word based completions are computed.\")\r\n        },\r\n        'editor.semanticHighlighting.enabled': {\r\n            enum: [true, false, 'configuredByTheme'],\r\n            enumDescriptions: [\r\n                nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'),\r\n                nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'),\r\n                nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')\r\n            ],\r\n            default: 'configuredByTheme',\r\n            description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\r\n        },\r\n        'editor.stablePeek': {\r\n            type: 'boolean',\r\n            default: false,\r\n            markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double clicking their content or when hitting `Escape`.\")\r\n        },\r\n        'editor.maxTokenizationLineLength': {\r\n            type: 'integer',\r\n            default: 20000,\r\n            description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\r\n        },\r\n        'diffEditor.maxComputationTime': {\r\n            type: 'number',\r\n            default: 5000,\r\n            description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\r\n        },\r\n        'diffEditor.renderSideBySide': {\r\n            type: 'boolean',\r\n            default: true,\r\n            description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\r\n        },\r\n        'diffEditor.ignoreTrimWhitespace': {\r\n            type: 'boolean',\r\n            default: true,\r\n            description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\r\n        },\r\n        'diffEditor.renderIndicators': {\r\n            type: 'boolean',\r\n            default: true,\r\n            description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\r\n        },\r\n        'diffEditor.codeLens': {\r\n            type: 'boolean',\r\n            default: false,\r\n            description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\r\n        },\r\n        'diffEditor.wordWrap': {\r\n            type: 'string',\r\n            enum: ['off', 'on', 'inherit'],\r\n            default: 'inherit',\r\n            markdownEnumDescriptions: [\r\n                nls.localize('wordWrap.off', \"Lines will never wrap.\"),\r\n                nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"),\r\n                nls.localize('wordWrap.inherit', \"Lines will wrap according to the `#editor.wordWrap#` setting.\"),\r\n            ]\r\n        }\r\n    } });\r\nfunction isConfigurationPropertySchema(x) {\r\n    return (typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined');\r\n}\r\n// Add properties from the Editor Option Registry\r\nfor (const editorOption of editorOptionsRegistry) {\r\n    const schema = editorOption.schema;\r\n    if (typeof schema !== 'undefined') {\r\n        if (isConfigurationPropertySchema(schema)) {\r\n            // This is a single schema contribution\r\n            editorConfiguration.properties[`editor.${editorOption.name}`] = schema;\r\n        }\r\n        else {\r\n            for (let key in schema) {\r\n                if (hasOwnProperty.call(schema, key)) {\r\n                    editorConfiguration.properties[key] = schema[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nlet cachedEditorConfigurationKeys = null;\r\nfunction getEditorConfigurationKeys() {\r\n    if (cachedEditorConfigurationKeys === null) {\r\n        cachedEditorConfigurationKeys = Object.create(null);\r\n        Object.keys(editorConfiguration.properties).forEach((prop) => {\r\n            cachedEditorConfigurationKeys[prop] = true;\r\n        });\r\n    }\r\n    return cachedEditorConfigurationKeys;\r\n}\r\nexport function isEditorConfigurationKey(key) {\r\n    const editorConfigurationKeys = getEditorConfigurationKeys();\r\n    return (editorConfigurationKeys[`editor.${key}`] || false);\r\n}\r\nexport function isDiffEditorConfigurationKey(key) {\r\n    const editorConfigurationKeys = getEditorConfigurationKeys();\r\n    return (editorConfigurationKeys[`diffEditor.${key}`] || false);\r\n}\r\nconfigurationRegistry.registerConfiguration(editorConfiguration);\r\n"]},"metadata":{},"sourceType":"module"}