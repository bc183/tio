{"ast":null,"code":"import _assertThisInitialized from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nexport var DecorationToRender = function DecorationToRender(startLineNumber, endLineNumber, className) {\n  _classCallCheck(this, DecorationToRender);\n\n  this.startLineNumber = +startLineNumber;\n  this.endLineNumber = +endLineNumber;\n  this.className = String(className);\n};\nexport var DedupOverlay = /*#__PURE__*/function (_DynamicViewOverlay) {\n  _inherits(DedupOverlay, _DynamicViewOverlay);\n\n  var _super = _createSuper(DedupOverlay);\n\n  function DedupOverlay() {\n    _classCallCheck(this, DedupOverlay);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DedupOverlay, [{\n    key: \"_render\",\n    value: function _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n      var output = [];\n\n      for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n        var lineIndex = lineNumber - visibleStartLineNumber;\n        output[lineIndex] = [];\n      }\n\n      if (decorations.length === 0) {\n        return output;\n      }\n\n      decorations.sort(function (a, b) {\n        if (a.className === b.className) {\n          if (a.startLineNumber === b.startLineNumber) {\n            return a.endLineNumber - b.endLineNumber;\n          }\n\n          return a.startLineNumber - b.startLineNumber;\n        }\n\n        return a.className < b.className ? -1 : 1;\n      });\n      var prevClassName = null;\n      var prevEndLineIndex = 0;\n\n      for (var i = 0, len = decorations.length; i < len; i++) {\n        var d = decorations[i];\n        var className = d.className;\n        var startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n        var endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n\n        if (prevClassName === className) {\n          startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n          prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n        } else {\n          prevClassName = className;\n          prevEndLineIndex = endLineIndex;\n        }\n\n        for (var _i = startLineIndex; _i <= prevEndLineIndex; _i++) {\n          output[_i].push(prevClassName);\n        }\n      }\n\n      return output;\n    }\n  }]);\n\n  return DedupOverlay;\n}(DynamicViewOverlay);\nexport var GlyphMarginOverlay = /*#__PURE__*/function (_DedupOverlay) {\n  _inherits(GlyphMarginOverlay, _DedupOverlay);\n\n  var _super2 = _createSuper(GlyphMarginOverlay);\n\n  function GlyphMarginOverlay(context) {\n    var _this;\n\n    _classCallCheck(this, GlyphMarginOverlay);\n\n    _this = _super2.call(this);\n    _this._context = context;\n    var options = _this._context.configuration.options;\n    var layoutInfo = options.get(124\n    /* layoutInfo */\n    );\n    _this._lineHeight = options.get(53\n    /* lineHeight */\n    );\n    _this._glyphMargin = options.get(44\n    /* glyphMargin */\n    );\n    _this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n    _this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n    _this._renderResult = null;\n\n    _this._context.addEventHandler(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(GlyphMarginOverlay, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._context.removeEventHandler(this);\n\n      this._renderResult = null;\n\n      _get(_getPrototypeOf(GlyphMarginOverlay.prototype), \"dispose\", this).call(this);\n    } // --- begin event handlers\n\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n      var layoutInfo = options.get(124\n      /* layoutInfo */\n      );\n      this._lineHeight = options.get(53\n      /* lineHeight */\n      );\n      this._glyphMargin = options.get(44\n      /* glyphMargin */\n      );\n      this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n      this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n      return true;\n    }\n  }, {\n    key: \"onDecorationsChanged\",\n    value: function onDecorationsChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return e.scrollTopChanged;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    } // --- end event handlers\n\n  }, {\n    key: \"_getDecorations\",\n    value: function _getDecorations(ctx) {\n      var decorations = ctx.getDecorationsInViewport();\n      var r = [],\n          rLen = 0;\n\n      for (var i = 0, len = decorations.length; i < len; i++) {\n        var d = decorations[i];\n        var glyphMarginClassName = d.options.glyphMarginClassName;\n\n        if (glyphMarginClassName) {\n          r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n        }\n      }\n\n      return r;\n    }\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      if (!this._glyphMargin) {\n        this._renderResult = null;\n        return;\n      }\n\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n      var toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n\n      var lineHeight = this._lineHeight.toString();\n\n      var left = this._glyphMarginLeft.toString();\n\n      var width = this._glyphMarginWidth.toString();\n\n      var common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n      var output = [];\n\n      for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n        var lineIndex = lineNumber - visibleStartLineNumber;\n        var classNames = toRender[lineIndex];\n\n        if (classNames.length === 0) {\n          output[lineIndex] = '';\n        } else {\n          output[lineIndex] = '<div class=\"cgmr codicon ' + classNames.join(' ') + common;\n        }\n      }\n\n      this._renderResult = output;\n    }\n  }, {\n    key: \"render\",\n    value: function render(startLineNumber, lineNumber) {\n      if (!this._renderResult) {\n        return '';\n      }\n\n      var lineIndex = lineNumber - startLineNumber;\n\n      if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n        return '';\n      }\n\n      return this._renderResult[lineIndex];\n    }\n  }]);\n\n  return GlyphMarginOverlay;\n}(DedupOverlay);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js"],"names":["DynamicViewOverlay","DecorationToRender","startLineNumber","endLineNumber","className","String","DedupOverlay","visibleStartLineNumber","visibleEndLineNumber","decorations","output","lineNumber","lineIndex","length","sort","a","b","prevClassName","prevEndLineIndex","i","len","d","startLineIndex","Math","max","endLineIndex","min","push","GlyphMarginOverlay","context","_context","options","configuration","layoutInfo","get","_lineHeight","_glyphMargin","_glyphMarginLeft","glyphMarginLeft","_glyphMarginWidth","glyphMarginWidth","_renderResult","addEventHandler","removeEventHandler","e","scrollTopChanged","ctx","getDecorationsInViewport","r","rLen","glyphMarginClassName","range","visibleRange","toRender","_render","_getDecorations","lineHeight","toString","left","width","common","classNames","join"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './glyphMargin.css';\r\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\r\nexport class DecorationToRender {\r\n    constructor(startLineNumber, endLineNumber, className) {\r\n        this.startLineNumber = +startLineNumber;\r\n        this.endLineNumber = +endLineNumber;\r\n        this.className = String(className);\r\n    }\r\n}\r\nexport class DedupOverlay extends DynamicViewOverlay {\r\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\r\n        const output = [];\r\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\r\n            const lineIndex = lineNumber - visibleStartLineNumber;\r\n            output[lineIndex] = [];\r\n        }\r\n        if (decorations.length === 0) {\r\n            return output;\r\n        }\r\n        decorations.sort((a, b) => {\r\n            if (a.className === b.className) {\r\n                if (a.startLineNumber === b.startLineNumber) {\r\n                    return a.endLineNumber - b.endLineNumber;\r\n                }\r\n                return a.startLineNumber - b.startLineNumber;\r\n            }\r\n            return (a.className < b.className ? -1 : 1);\r\n        });\r\n        let prevClassName = null;\r\n        let prevEndLineIndex = 0;\r\n        for (let i = 0, len = decorations.length; i < len; i++) {\r\n            const d = decorations[i];\r\n            const className = d.className;\r\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\r\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\r\n            if (prevClassName === className) {\r\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\r\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\r\n            }\r\n            else {\r\n                prevClassName = className;\r\n                prevEndLineIndex = endLineIndex;\r\n            }\r\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\r\n                output[i].push(prevClassName);\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n}\r\nexport class GlyphMarginOverlay extends DedupOverlay {\r\n    constructor(context) {\r\n        super();\r\n        this._context = context;\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._glyphMargin = options.get(44 /* glyphMargin */);\r\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\r\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\r\n        this._renderResult = null;\r\n        this._context.addEventHandler(this);\r\n    }\r\n    dispose() {\r\n        this._context.removeEventHandler(this);\r\n        this._renderResult = null;\r\n        super.dispose();\r\n    }\r\n    // --- begin event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._glyphMargin = options.get(44 /* glyphMargin */);\r\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\r\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\r\n        return true;\r\n    }\r\n    onDecorationsChanged(e) {\r\n        return true;\r\n    }\r\n    onFlushed(e) {\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return true;\r\n    }\r\n    onLinesDeleted(e) {\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return e.scrollTopChanged;\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    // --- end event handlers\r\n    _getDecorations(ctx) {\r\n        const decorations = ctx.getDecorationsInViewport();\r\n        let r = [], rLen = 0;\r\n        for (let i = 0, len = decorations.length; i < len; i++) {\r\n            const d = decorations[i];\r\n            const glyphMarginClassName = d.options.glyphMarginClassName;\r\n            if (glyphMarginClassName) {\r\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n    prepareRender(ctx) {\r\n        if (!this._glyphMargin) {\r\n            this._renderResult = null;\r\n            return;\r\n        }\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\r\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\r\n        const lineHeight = this._lineHeight.toString();\r\n        const left = this._glyphMarginLeft.toString();\r\n        const width = this._glyphMarginWidth.toString();\r\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\r\n        const output = [];\r\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\r\n            const lineIndex = lineNumber - visibleStartLineNumber;\r\n            const classNames = toRender[lineIndex];\r\n            if (classNames.length === 0) {\r\n                output[lineIndex] = '';\r\n            }\r\n            else {\r\n                output[lineIndex] = ('<div class=\"cgmr codicon '\r\n                    + classNames.join(' ')\r\n                    + common);\r\n            }\r\n        }\r\n        this._renderResult = output;\r\n    }\r\n    render(startLineNumber, lineNumber) {\r\n        if (!this._renderResult) {\r\n            return '';\r\n        }\r\n        const lineIndex = lineNumber - startLineNumber;\r\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\r\n            return '';\r\n        }\r\n        return this._renderResult[lineIndex];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}