{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { LineBreakData } from './viewModel.js';\n\nvar WrappingCharacterClassifier = /*#__PURE__*/function (_CharacterClassifier) {\n  _inherits(WrappingCharacterClassifier, _CharacterClassifier);\n\n  var _super = _createSuper(WrappingCharacterClassifier);\n\n  function WrappingCharacterClassifier(BREAK_BEFORE, BREAK_AFTER) {\n    var _this;\n\n    _classCallCheck(this, WrappingCharacterClassifier);\n\n    _this = _super.call(this, 0\n    /* NONE */\n    );\n\n    for (var i = 0; i < BREAK_BEFORE.length; i++) {\n      _this.set(BREAK_BEFORE.charCodeAt(i), 1\n      /* BREAK_BEFORE */\n      );\n    }\n\n    for (var _i = 0; _i < BREAK_AFTER.length; _i++) {\n      _this.set(BREAK_AFTER.charCodeAt(_i), 2\n      /* BREAK_AFTER */\n      );\n    }\n\n    return _this;\n  }\n\n  _createClass(WrappingCharacterClassifier, [{\n    key: \"get\",\n    value: function get(charCode) {\n      if (charCode >= 0 && charCode < 256) {\n        return this._asciiMap[charCode];\n      } else {\n        // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n        // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n        // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n        // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n        if (charCode >= 0x3040 && charCode <= 0x30FF || charCode >= 0x3400 && charCode <= 0x4DBF || charCode >= 0x4E00 && charCode <= 0x9FFF) {\n          return 3\n          /* BREAK_IDEOGRAPHIC */\n          ;\n        }\n\n        return this._map.get(charCode) || this._defaultValue;\n      }\n    }\n  }]);\n\n  return WrappingCharacterClassifier;\n}(CharacterClassifier);\n\nvar arrPool1 = [];\nvar arrPool2 = [];\nexport var MonospaceLineBreaksComputerFactory = /*#__PURE__*/function () {\n  function MonospaceLineBreaksComputerFactory(breakBeforeChars, breakAfterChars) {\n    _classCallCheck(this, MonospaceLineBreaksComputerFactory);\n\n    this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n  }\n\n  _createClass(MonospaceLineBreaksComputerFactory, [{\n    key: \"createLineBreaksComputer\",\n    value: function createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent) {\n      var _this2 = this;\n\n      tabSize = tabSize | 0; //@perf\n\n      wrappingColumn = +wrappingColumn; //@perf\n\n      var requests = [];\n      var previousBreakingData = [];\n      return {\n        addRequest: function addRequest(lineText, previousLineBreakData) {\n          requests.push(lineText);\n          previousBreakingData.push(previousLineBreakData);\n        },\n        finalize: function finalize() {\n          var columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth; //@perf\n\n          var result = [];\n\n          for (var i = 0, len = requests.length; i < len; i++) {\n            var previousLineBreakData = previousBreakingData[i];\n\n            if (previousLineBreakData) {\n              result[i] = createLineBreaksFromPreviousLineBreaks(_this2.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\n            } else {\n              result[i] = createLineBreaks(_this2.classifier, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\n            }\n          }\n\n          arrPool1.length = 0;\n          arrPool2.length = 0;\n          return result;\n        }\n      };\n    }\n  }], [{\n    key: \"create\",\n    value: function create(options) {\n      return new MonospaceLineBreaksComputerFactory(options.get(113\n      /* wordWrapBreakBeforeCharacters */\n      ), options.get(112\n      /* wordWrapBreakAfterCharacters */\n      ));\n    }\n  }]);\n\n  return MonospaceLineBreaksComputerFactory;\n}();\n\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n  if (firstLineBreakColumn === -1) {\n    return null;\n  }\n\n  var len = lineText.length;\n\n  if (len <= 1) {\n    return null;\n  }\n\n  var prevBreakingOffsets = previousBreakingData.breakOffsets;\n  var prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n  var wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n  var wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n  var breakingOffsets = arrPool1;\n  var breakingOffsetsVisibleColumn = arrPool2;\n  var breakingOffsetsCount = 0;\n  var lastBreakingOffset = 0;\n  var lastBreakingOffsetVisibleColumn = 0;\n  var breakingColumn = firstLineBreakColumn;\n  var prevLen = prevBreakingOffsets.length;\n  var prevIndex = 0;\n\n  if (prevIndex >= 0) {\n    var bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n\n    while (prevIndex + 1 < prevLen) {\n      var distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n\n      if (distance >= bestDistance) {\n        break;\n      }\n\n      bestDistance = distance;\n      prevIndex++;\n    }\n  }\n\n  while (prevIndex < prevLen) {\n    // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n    var prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n    var prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n\n    if (lastBreakingOffset > prevBreakOffset) {\n      prevBreakOffset = lastBreakingOffset;\n      prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n    }\n\n    var breakOffset = 0;\n    var breakOffsetVisibleColumn = 0;\n    var forcedBreakOffset = 0;\n    var forcedBreakOffsetVisibleColumn = 0; // initially, we search as much as possible to the right (if it fits)\n\n    if (prevBreakOffsetVisibleColumn <= breakingColumn) {\n      var visibleColumn = prevBreakOffsetVisibleColumn;\n      var prevCharCode = prevBreakOffset === 0 ? 0\n      /* Null */\n      : lineText.charCodeAt(prevBreakOffset - 1);\n      var prevCharCodeClass = prevBreakOffset === 0 ? 0\n      /* NONE */\n      : classifier.get(prevCharCode);\n      var entireLineFits = true;\n\n      for (var i = prevBreakOffset; i < len; i++) {\n        var charStartOffset = i;\n        var charCode = lineText.charCodeAt(i);\n        var charCodeClass = void 0;\n        var charWidth = void 0;\n\n        if (strings.isHighSurrogate(charCode)) {\n          // A surrogate pair must always be considered as a single unit, so it is never to be broken\n          i++;\n          charCodeClass = 0\n          /* NONE */\n          ;\n          charWidth = 2;\n        } else {\n          charCodeClass = classifier.get(charCode);\n          charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n        }\n\n        if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n          breakOffset = charStartOffset;\n          breakOffsetVisibleColumn = visibleColumn;\n        }\n\n        visibleColumn += charWidth; // check if adding character at `i` will go over the breaking column\n\n        if (visibleColumn > breakingColumn) {\n          // We need to break at least before character at `i`:\n          if (charStartOffset > lastBreakingOffset) {\n            forcedBreakOffset = charStartOffset;\n            forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n          } else {\n            // we need to advance at least by one character\n            forcedBreakOffset = i + 1;\n            forcedBreakOffsetVisibleColumn = visibleColumn;\n          }\n\n          if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n            // Cannot break at `breakOffset` => reset it if it was set\n            breakOffset = 0;\n          }\n\n          entireLineFits = false;\n          break;\n        }\n\n        prevCharCode = charCode;\n        prevCharCodeClass = charCodeClass;\n      }\n\n      if (entireLineFits) {\n        // there is no more need to break => stop the outer loop!\n        if (breakingOffsetsCount > 0) {\n          // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n          breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n          breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n          breakingOffsetsCount++;\n        }\n\n        break;\n      }\n    }\n\n    if (breakOffset === 0) {\n      // must search left\n      var _visibleColumn = prevBreakOffsetVisibleColumn;\n\n      var _charCode = lineText.charCodeAt(prevBreakOffset);\n\n      var _charCodeClass = classifier.get(_charCode);\n\n      var hitATabCharacter = false;\n\n      for (var _i2 = prevBreakOffset - 1; _i2 >= lastBreakingOffset; _i2--) {\n        var _charStartOffset = _i2 + 1;\n\n        var _prevCharCode = lineText.charCodeAt(_i2);\n\n        if (_prevCharCode === 9\n        /* Tab */\n        ) {\n            // cannot determine the width of a tab when going backwards, so we must go forwards\n            hitATabCharacter = true;\n            break;\n          }\n\n        var _prevCharCodeClass = void 0;\n\n        var prevCharWidth = void 0;\n\n        if (strings.isLowSurrogate(_prevCharCode)) {\n          // A surrogate pair must always be considered as a single unit, so it is never to be broken\n          _i2--;\n          _prevCharCodeClass = 0\n          /* NONE */\n          ;\n          prevCharWidth = 2;\n        } else {\n          _prevCharCodeClass = classifier.get(_prevCharCode);\n          prevCharWidth = strings.isFullWidthCharacter(_prevCharCode) ? columnsForFullWidthChar : 1;\n        }\n\n        if (_visibleColumn <= breakingColumn) {\n          if (forcedBreakOffset === 0) {\n            forcedBreakOffset = _charStartOffset;\n            forcedBreakOffsetVisibleColumn = _visibleColumn;\n          }\n\n          if (_visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n            // went too far!\n            break;\n          }\n\n          if (canBreak(_prevCharCode, _prevCharCodeClass, _charCode, _charCodeClass)) {\n            breakOffset = _charStartOffset;\n            breakOffsetVisibleColumn = _visibleColumn;\n            break;\n          }\n        }\n\n        _visibleColumn -= prevCharWidth;\n        _charCode = _prevCharCode;\n        _charCodeClass = _prevCharCodeClass;\n      }\n\n      if (breakOffset !== 0) {\n        var remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n\n        if (remainingWidthOfNextLine <= tabSize) {\n          var charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n\n          var _charWidth = void 0;\n\n          if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\n            _charWidth = 2;\n          } else {\n            _charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n          }\n\n          if (remainingWidthOfNextLine - _charWidth < 0) {\n            // it is not worth it to break at breakOffset, it just introduces an extra needless line!\n            breakOffset = 0;\n          }\n        }\n      }\n\n      if (hitATabCharacter) {\n        // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n        prevIndex--;\n        continue;\n      }\n    }\n\n    if (breakOffset === 0) {\n      // Could not find a good breaking point\n      breakOffset = forcedBreakOffset;\n      breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n    }\n\n    if (breakOffset <= lastBreakingOffset) {\n      // Make sure that we are advancing (at least one character)\n      var _charCode2 = lineText.charCodeAt(lastBreakingOffset);\n\n      if (strings.isHighSurrogate(_charCode2)) {\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n        breakOffset = lastBreakingOffset + 2;\n        breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n      } else {\n        breakOffset = lastBreakingOffset + 1;\n        breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(_charCode2, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n      }\n    }\n\n    lastBreakingOffset = breakOffset;\n    breakingOffsets[breakingOffsetsCount] = breakOffset;\n    lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n    breakingOffsetsCount++;\n    breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n\n    while (prevIndex < 0 || prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn) {\n      prevIndex++;\n    }\n\n    var _bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n\n    while (prevIndex + 1 < prevLen) {\n      var _distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n\n      if (_distance >= _bestDistance) {\n        break;\n      }\n\n      _bestDistance = _distance;\n      prevIndex++;\n    }\n  }\n\n  if (breakingOffsetsCount === 0) {\n    return null;\n  } // Doing here some object reuse which ends up helping a huge deal with GC pauses!\n\n\n  breakingOffsets.length = breakingOffsetsCount;\n  breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n  arrPool1 = previousBreakingData.breakOffsets;\n  arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n  previousBreakingData.breakOffsets = breakingOffsets;\n  previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n  previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n  return previousBreakingData;\n}\n\nfunction createLineBreaks(classifier, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n  if (firstLineBreakColumn === -1) {\n    return null;\n  }\n\n  var len = lineText.length;\n\n  if (len <= 1) {\n    return null;\n  }\n\n  var wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n  var wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n  var breakingOffsets = [];\n  var breakingOffsetsVisibleColumn = [];\n  var breakingOffsetsCount = 0;\n  var breakOffset = 0;\n  var breakOffsetVisibleColumn = 0;\n  var breakingColumn = firstLineBreakColumn;\n  var prevCharCode = lineText.charCodeAt(0);\n  var prevCharCodeClass = classifier.get(prevCharCode);\n  var visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n  var startOffset = 1;\n\n  if (strings.isHighSurrogate(prevCharCode)) {\n    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n    visibleColumn += 1;\n    prevCharCode = lineText.charCodeAt(1);\n    prevCharCodeClass = classifier.get(prevCharCode);\n    startOffset++;\n  }\n\n  for (var i = startOffset; i < len; i++) {\n    var charStartOffset = i;\n    var charCode = lineText.charCodeAt(i);\n    var charCodeClass = void 0;\n    var charWidth = void 0;\n\n    if (strings.isHighSurrogate(charCode)) {\n      // A surrogate pair must always be considered as a single unit, so it is never to be broken\n      i++;\n      charCodeClass = 0\n      /* NONE */\n      ;\n      charWidth = 2;\n    } else {\n      charCodeClass = classifier.get(charCode);\n      charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n    }\n\n    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n      breakOffset = charStartOffset;\n      breakOffsetVisibleColumn = visibleColumn;\n    }\n\n    visibleColumn += charWidth; // check if adding character at `i` will go over the breaking column\n\n    if (visibleColumn > breakingColumn) {\n      // We need to break at least before character at `i`:\n      if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n        // Cannot break at `breakOffset`, must break at `i`\n        breakOffset = charStartOffset;\n        breakOffsetVisibleColumn = visibleColumn - charWidth;\n      }\n\n      breakingOffsets[breakingOffsetsCount] = breakOffset;\n      breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n      breakingOffsetsCount++;\n      breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n      breakOffset = 0;\n    }\n\n    prevCharCode = charCode;\n    prevCharCodeClass = charCodeClass;\n  }\n\n  if (breakingOffsetsCount === 0) {\n    return null;\n  } // Add last segment\n\n\n  breakingOffsets[breakingOffsetsCount] = len;\n  breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n  return new LineBreakData(breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\n\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\n  if (charCode === 9\n  /* Tab */\n  ) {\n      return tabSize - visibleColumn % tabSize;\n    }\n\n  if (strings.isFullWidthCharacter(charCode)) {\n    return columnsForFullWidthChar;\n  }\n\n  if (charCode < 32) {\n    // when using `editor.renderControlCharacters`, the substitutions are often wide\n    return columnsForFullWidthChar;\n  }\n\n  return 1;\n}\n\nfunction tabCharacterWidth(visibleColumn, tabSize) {\n  return tabSize - visibleColumn % tabSize;\n}\n/**\r\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\r\n * Kinsoku Shori : Don't break before a trailing character, like a period\r\n */\n\n\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass) {\n  return charCode !== 32\n  /* Space */\n  && (prevCharCodeClass === 2\n  /* BREAK_AFTER */\n  || prevCharCodeClass === 3\n  /* BREAK_IDEOGRAPHIC */\n  && charCodeClass !== 2\n  /* BREAK_AFTER */\n  || charCodeClass === 1\n  /* BREAK_BEFORE */\n  || charCodeClass === 3\n  /* BREAK_IDEOGRAPHIC */\n  && prevCharCodeClass !== 1\n  /* BREAK_BEFORE */\n  );\n}\n\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n  var wrappedTextIndentLength = 0;\n\n  if (wrappingIndent !== 0\n  /* None */\n  ) {\n      var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n\n      if (firstNonWhitespaceIndex !== -1) {\n        // Track existing indent\n        for (var i = 0; i < firstNonWhitespaceIndex; i++) {\n          var charWidth = lineText.charCodeAt(i) === 9\n          /* Tab */\n          ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1;\n          wrappedTextIndentLength += charWidth;\n        } // Increase indent of continuation lines, if desired\n\n\n        var numberOfAdditionalTabs = wrappingIndent === 3\n        /* DeepIndent */\n        ? 2 : wrappingIndent === 2\n        /* Indent */\n        ? 1 : 0;\n\n        for (var _i3 = 0; _i3 < numberOfAdditionalTabs; _i3++) {\n          var _charWidth2 = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n\n          wrappedTextIndentLength += _charWidth2;\n        } // Force sticking to beginning of line if no character would fit except for the indentation\n\n\n        if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n          wrappedTextIndentLength = 0;\n        }\n      }\n    }\n\n  return wrappedTextIndentLength;\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/viewModel/monospaceLineBreaksComputer.js"],"names":["strings","CharacterClassifier","LineBreakData","WrappingCharacterClassifier","BREAK_BEFORE","BREAK_AFTER","i","length","set","charCodeAt","charCode","_asciiMap","_map","get","_defaultValue","arrPool1","arrPool2","MonospaceLineBreaksComputerFactory","breakBeforeChars","breakAfterChars","classifier","fontInfo","tabSize","wrappingColumn","wrappingIndent","requests","previousBreakingData","addRequest","lineText","previousLineBreakData","push","finalize","columnsForFullWidthChar","typicalFullwidthCharacterWidth","typicalHalfwidthCharacterWidth","result","len","createLineBreaksFromPreviousLineBreaks","createLineBreaks","options","firstLineBreakColumn","prevBreakingOffsets","breakOffsets","prevBreakingOffsetsVisibleColumn","breakOffsetsVisibleColumn","wrappedTextIndentLength","computeWrappedTextIndentLength","wrappedLineBreakColumn","breakingOffsets","breakingOffsetsVisibleColumn","breakingOffsetsCount","lastBreakingOffset","lastBreakingOffsetVisibleColumn","breakingColumn","prevLen","prevIndex","bestDistance","Math","abs","distance","prevBreakOffset","prevBreakOffsetVisibleColumn","breakOffset","breakOffsetVisibleColumn","forcedBreakOffset","forcedBreakOffsetVisibleColumn","visibleColumn","prevCharCode","prevCharCodeClass","entireLineFits","charStartOffset","charCodeClass","charWidth","isHighSurrogate","computeCharWidth","canBreak","hitATabCharacter","prevCharWidth","isLowSurrogate","isFullWidthCharacter","remainingWidthOfNextLine","charCodeAtForcedBreakOffset","startOffset","tabCharacterWidth","firstNonWhitespaceIndex","numberOfAdditionalTabs"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { CharacterClassifier } from '../core/characterClassifier.js';\r\nimport { LineBreakData } from './viewModel.js';\r\nclass WrappingCharacterClassifier extends CharacterClassifier {\r\n    constructor(BREAK_BEFORE, BREAK_AFTER) {\r\n        super(0 /* NONE */);\r\n        for (let i = 0; i < BREAK_BEFORE.length; i++) {\r\n            this.set(BREAK_BEFORE.charCodeAt(i), 1 /* BREAK_BEFORE */);\r\n        }\r\n        for (let i = 0; i < BREAK_AFTER.length; i++) {\r\n            this.set(BREAK_AFTER.charCodeAt(i), 2 /* BREAK_AFTER */);\r\n        }\r\n    }\r\n    get(charCode) {\r\n        if (charCode >= 0 && charCode < 256) {\r\n            return this._asciiMap[charCode];\r\n        }\r\n        else {\r\n            // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\r\n            // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\r\n            // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\r\n            // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\r\n            if ((charCode >= 0x3040 && charCode <= 0x30FF)\r\n                || (charCode >= 0x3400 && charCode <= 0x4DBF)\r\n                || (charCode >= 0x4E00 && charCode <= 0x9FFF)) {\r\n                return 3 /* BREAK_IDEOGRAPHIC */;\r\n            }\r\n            return (this._map.get(charCode) || this._defaultValue);\r\n        }\r\n    }\r\n}\r\nlet arrPool1 = [];\r\nlet arrPool2 = [];\r\nexport class MonospaceLineBreaksComputerFactory {\r\n    constructor(breakBeforeChars, breakAfterChars) {\r\n        this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\r\n    }\r\n    static create(options) {\r\n        return new MonospaceLineBreaksComputerFactory(options.get(113 /* wordWrapBreakBeforeCharacters */), options.get(112 /* wordWrapBreakAfterCharacters */));\r\n    }\r\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent) {\r\n        tabSize = tabSize | 0; //@perf\r\n        wrappingColumn = +wrappingColumn; //@perf\r\n        let requests = [];\r\n        let previousBreakingData = [];\r\n        return {\r\n            addRequest: (lineText, previousLineBreakData) => {\r\n                requests.push(lineText);\r\n                previousBreakingData.push(previousLineBreakData);\r\n            },\r\n            finalize: () => {\r\n                const columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth; //@perf\r\n                let result = [];\r\n                for (let i = 0, len = requests.length; i < len; i++) {\r\n                    const previousLineBreakData = previousBreakingData[i];\r\n                    if (previousLineBreakData) {\r\n                        result[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\r\n                    }\r\n                    else {\r\n                        result[i] = createLineBreaks(this.classifier, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\r\n                    }\r\n                }\r\n                arrPool1.length = 0;\r\n                arrPool2.length = 0;\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}\r\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\r\n    if (firstLineBreakColumn === -1) {\r\n        return null;\r\n    }\r\n    const len = lineText.length;\r\n    if (len <= 1) {\r\n        return null;\r\n    }\r\n    const prevBreakingOffsets = previousBreakingData.breakOffsets;\r\n    const prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\r\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\r\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\r\n    let breakingOffsets = arrPool1;\r\n    let breakingOffsetsVisibleColumn = arrPool2;\r\n    let breakingOffsetsCount = 0;\r\n    let lastBreakingOffset = 0;\r\n    let lastBreakingOffsetVisibleColumn = 0;\r\n    let breakingColumn = firstLineBreakColumn;\r\n    const prevLen = prevBreakingOffsets.length;\r\n    let prevIndex = 0;\r\n    if (prevIndex >= 0) {\r\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\r\n        while (prevIndex + 1 < prevLen) {\r\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\r\n            if (distance >= bestDistance) {\r\n                break;\r\n            }\r\n            bestDistance = distance;\r\n            prevIndex++;\r\n        }\r\n    }\r\n    while (prevIndex < prevLen) {\r\n        // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\r\n        let prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\r\n        let prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\r\n        if (lastBreakingOffset > prevBreakOffset) {\r\n            prevBreakOffset = lastBreakingOffset;\r\n            prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\r\n        }\r\n        let breakOffset = 0;\r\n        let breakOffsetVisibleColumn = 0;\r\n        let forcedBreakOffset = 0;\r\n        let forcedBreakOffsetVisibleColumn = 0;\r\n        // initially, we search as much as possible to the right (if it fits)\r\n        if (prevBreakOffsetVisibleColumn <= breakingColumn) {\r\n            let visibleColumn = prevBreakOffsetVisibleColumn;\r\n            let prevCharCode = prevBreakOffset === 0 ? 0 /* Null */ : lineText.charCodeAt(prevBreakOffset - 1);\r\n            let prevCharCodeClass = prevBreakOffset === 0 ? 0 /* NONE */ : classifier.get(prevCharCode);\r\n            let entireLineFits = true;\r\n            for (let i = prevBreakOffset; i < len; i++) {\r\n                const charStartOffset = i;\r\n                const charCode = lineText.charCodeAt(i);\r\n                let charCodeClass;\r\n                let charWidth;\r\n                if (strings.isHighSurrogate(charCode)) {\r\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n                    i++;\r\n                    charCodeClass = 0 /* NONE */;\r\n                    charWidth = 2;\r\n                }\r\n                else {\r\n                    charCodeClass = classifier.get(charCode);\r\n                    charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\r\n                }\r\n                if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\r\n                    breakOffset = charStartOffset;\r\n                    breakOffsetVisibleColumn = visibleColumn;\r\n                }\r\n                visibleColumn += charWidth;\r\n                // check if adding character at `i` will go over the breaking column\r\n                if (visibleColumn > breakingColumn) {\r\n                    // We need to break at least before character at `i`:\r\n                    if (charStartOffset > lastBreakingOffset) {\r\n                        forcedBreakOffset = charStartOffset;\r\n                        forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\r\n                    }\r\n                    else {\r\n                        // we need to advance at least by one character\r\n                        forcedBreakOffset = i + 1;\r\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\r\n                    }\r\n                    if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\r\n                        // Cannot break at `breakOffset` => reset it if it was set\r\n                        breakOffset = 0;\r\n                    }\r\n                    entireLineFits = false;\r\n                    break;\r\n                }\r\n                prevCharCode = charCode;\r\n                prevCharCodeClass = charCodeClass;\r\n            }\r\n            if (entireLineFits) {\r\n                // there is no more need to break => stop the outer loop!\r\n                if (breakingOffsetsCount > 0) {\r\n                    // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\r\n                    breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\r\n                    breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\r\n                    breakingOffsetsCount++;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if (breakOffset === 0) {\r\n            // must search left\r\n            let visibleColumn = prevBreakOffsetVisibleColumn;\r\n            let charCode = lineText.charCodeAt(prevBreakOffset);\r\n            let charCodeClass = classifier.get(charCode);\r\n            let hitATabCharacter = false;\r\n            for (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\r\n                const charStartOffset = i + 1;\r\n                const prevCharCode = lineText.charCodeAt(i);\r\n                if (prevCharCode === 9 /* Tab */) {\r\n                    // cannot determine the width of a tab when going backwards, so we must go forwards\r\n                    hitATabCharacter = true;\r\n                    break;\r\n                }\r\n                let prevCharCodeClass;\r\n                let prevCharWidth;\r\n                if (strings.isLowSurrogate(prevCharCode)) {\r\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n                    i--;\r\n                    prevCharCodeClass = 0 /* NONE */;\r\n                    prevCharWidth = 2;\r\n                }\r\n                else {\r\n                    prevCharCodeClass = classifier.get(prevCharCode);\r\n                    prevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\r\n                }\r\n                if (visibleColumn <= breakingColumn) {\r\n                    if (forcedBreakOffset === 0) {\r\n                        forcedBreakOffset = charStartOffset;\r\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\r\n                    }\r\n                    if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\r\n                        // went too far!\r\n                        break;\r\n                    }\r\n                    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\r\n                        breakOffset = charStartOffset;\r\n                        breakOffsetVisibleColumn = visibleColumn;\r\n                        break;\r\n                    }\r\n                }\r\n                visibleColumn -= prevCharWidth;\r\n                charCode = prevCharCode;\r\n                charCodeClass = prevCharCodeClass;\r\n            }\r\n            if (breakOffset !== 0) {\r\n                const remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\r\n                if (remainingWidthOfNextLine <= tabSize) {\r\n                    const charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\r\n                    let charWidth;\r\n                    if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\r\n                        // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n                        charWidth = 2;\r\n                    }\r\n                    else {\r\n                        charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\r\n                    }\r\n                    if (remainingWidthOfNextLine - charWidth < 0) {\r\n                        // it is not worth it to break at breakOffset, it just introduces an extra needless line!\r\n                        breakOffset = 0;\r\n                    }\r\n                }\r\n            }\r\n            if (hitATabCharacter) {\r\n                // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\r\n                prevIndex--;\r\n                continue;\r\n            }\r\n        }\r\n        if (breakOffset === 0) {\r\n            // Could not find a good breaking point\r\n            breakOffset = forcedBreakOffset;\r\n            breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\r\n        }\r\n        if (breakOffset <= lastBreakingOffset) {\r\n            // Make sure that we are advancing (at least one character)\r\n            const charCode = lineText.charCodeAt(lastBreakingOffset);\r\n            if (strings.isHighSurrogate(charCode)) {\r\n                // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n                breakOffset = lastBreakingOffset + 2;\r\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\r\n            }\r\n            else {\r\n                breakOffset = lastBreakingOffset + 1;\r\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\r\n            }\r\n        }\r\n        lastBreakingOffset = breakOffset;\r\n        breakingOffsets[breakingOffsetsCount] = breakOffset;\r\n        lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\r\n        breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\r\n        breakingOffsetsCount++;\r\n        breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\r\n        while (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\r\n            prevIndex++;\r\n        }\r\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\r\n        while (prevIndex + 1 < prevLen) {\r\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\r\n            if (distance >= bestDistance) {\r\n                break;\r\n            }\r\n            bestDistance = distance;\r\n            prevIndex++;\r\n        }\r\n    }\r\n    if (breakingOffsetsCount === 0) {\r\n        return null;\r\n    }\r\n    // Doing here some object reuse which ends up helping a huge deal with GC pauses!\r\n    breakingOffsets.length = breakingOffsetsCount;\r\n    breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\r\n    arrPool1 = previousBreakingData.breakOffsets;\r\n    arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\r\n    previousBreakingData.breakOffsets = breakingOffsets;\r\n    previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\r\n    previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\r\n    return previousBreakingData;\r\n}\r\nfunction createLineBreaks(classifier, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\r\n    if (firstLineBreakColumn === -1) {\r\n        return null;\r\n    }\r\n    const len = lineText.length;\r\n    if (len <= 1) {\r\n        return null;\r\n    }\r\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\r\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\r\n    let breakingOffsets = [];\r\n    let breakingOffsetsVisibleColumn = [];\r\n    let breakingOffsetsCount = 0;\r\n    let breakOffset = 0;\r\n    let breakOffsetVisibleColumn = 0;\r\n    let breakingColumn = firstLineBreakColumn;\r\n    let prevCharCode = lineText.charCodeAt(0);\r\n    let prevCharCodeClass = classifier.get(prevCharCode);\r\n    let visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\r\n    let startOffset = 1;\r\n    if (strings.isHighSurrogate(prevCharCode)) {\r\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n        visibleColumn += 1;\r\n        prevCharCode = lineText.charCodeAt(1);\r\n        prevCharCodeClass = classifier.get(prevCharCode);\r\n        startOffset++;\r\n    }\r\n    for (let i = startOffset; i < len; i++) {\r\n        const charStartOffset = i;\r\n        const charCode = lineText.charCodeAt(i);\r\n        let charCodeClass;\r\n        let charWidth;\r\n        if (strings.isHighSurrogate(charCode)) {\r\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n            i++;\r\n            charCodeClass = 0 /* NONE */;\r\n            charWidth = 2;\r\n        }\r\n        else {\r\n            charCodeClass = classifier.get(charCode);\r\n            charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\r\n        }\r\n        if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\r\n            breakOffset = charStartOffset;\r\n            breakOffsetVisibleColumn = visibleColumn;\r\n        }\r\n        visibleColumn += charWidth;\r\n        // check if adding character at `i` will go over the breaking column\r\n        if (visibleColumn > breakingColumn) {\r\n            // We need to break at least before character at `i`:\r\n            if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\r\n                // Cannot break at `breakOffset`, must break at `i`\r\n                breakOffset = charStartOffset;\r\n                breakOffsetVisibleColumn = visibleColumn - charWidth;\r\n            }\r\n            breakingOffsets[breakingOffsetsCount] = breakOffset;\r\n            breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\r\n            breakingOffsetsCount++;\r\n            breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\r\n            breakOffset = 0;\r\n        }\r\n        prevCharCode = charCode;\r\n        prevCharCodeClass = charCodeClass;\r\n    }\r\n    if (breakingOffsetsCount === 0) {\r\n        return null;\r\n    }\r\n    // Add last segment\r\n    breakingOffsets[breakingOffsetsCount] = len;\r\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\r\n    return new LineBreakData(breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\r\n}\r\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\r\n    if (charCode === 9 /* Tab */) {\r\n        return (tabSize - (visibleColumn % tabSize));\r\n    }\r\n    if (strings.isFullWidthCharacter(charCode)) {\r\n        return columnsForFullWidthChar;\r\n    }\r\n    if (charCode < 32) {\r\n        // when using `editor.renderControlCharacters`, the substitutions are often wide\r\n        return columnsForFullWidthChar;\r\n    }\r\n    return 1;\r\n}\r\nfunction tabCharacterWidth(visibleColumn, tabSize) {\r\n    return (tabSize - (visibleColumn % tabSize));\r\n}\r\n/**\r\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\r\n * Kinsoku Shori : Don't break before a trailing character, like a period\r\n */\r\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass) {\r\n    return (charCode !== 32 /* Space */\r\n        && ((prevCharCodeClass === 2 /* BREAK_AFTER */)\r\n            || (prevCharCodeClass === 3 /* BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* BREAK_AFTER */)\r\n            || (charCodeClass === 1 /* BREAK_BEFORE */)\r\n            || (charCodeClass === 3 /* BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* BREAK_BEFORE */)));\r\n}\r\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\r\n    let wrappedTextIndentLength = 0;\r\n    if (wrappingIndent !== 0 /* None */) {\r\n        const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\r\n        if (firstNonWhitespaceIndex !== -1) {\r\n            // Track existing indent\r\n            for (let i = 0; i < firstNonWhitespaceIndex; i++) {\r\n                const charWidth = (lineText.charCodeAt(i) === 9 /* Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\r\n                wrappedTextIndentLength += charWidth;\r\n            }\r\n            // Increase indent of continuation lines, if desired\r\n            const numberOfAdditionalTabs = (wrappingIndent === 3 /* DeepIndent */ ? 2 : wrappingIndent === 2 /* Indent */ ? 1 : 0);\r\n            for (let i = 0; i < numberOfAdditionalTabs; i++) {\r\n                const charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\r\n                wrappedTextIndentLength += charWidth;\r\n            }\r\n            // Force sticking to beginning of line if no character would fit except for the indentation\r\n            if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\r\n                wrappedTextIndentLength = 0;\r\n            }\r\n        }\r\n    }\r\n    return wrappedTextIndentLength;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}