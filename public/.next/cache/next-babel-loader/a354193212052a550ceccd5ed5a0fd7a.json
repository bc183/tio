{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nfunction resetGlobalRegex(reg) {\n  if (reg.global) {\n    reg.lastIndex = 0;\n  }\n\n  return true;\n}\n\nexport var IndentRulesSupport = /*#__PURE__*/function () {\n  function IndentRulesSupport(indentationRules) {\n    _classCallCheck(this, IndentRulesSupport);\n\n    this._indentationRules = indentationRules;\n  }\n\n  _createClass(IndentRulesSupport, [{\n    key: \"shouldIncrease\",\n    value: function shouldIncrease(text) {\n      if (this._indentationRules) {\n        if (this._indentationRules.increaseIndentPattern && resetGlobalRegex(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(text)) {\n          return true;\n        } // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n        // \treturn true;\n        // }\n\n      }\n\n      return false;\n    }\n  }, {\n    key: \"shouldDecrease\",\n    value: function shouldDecrease(text) {\n      if (this._indentationRules && this._indentationRules.decreaseIndentPattern && resetGlobalRegex(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(text)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"shouldIndentNextLine\",\n    value: function shouldIndentNextLine(text) {\n      if (this._indentationRules && this._indentationRules.indentNextLinePattern && resetGlobalRegex(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(text)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"shouldIgnore\",\n    value: function shouldIgnore(text) {\n      // the text matches `unIndentedLinePattern`\n      if (this._indentationRules && this._indentationRules.unIndentedLinePattern && resetGlobalRegex(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(text)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getIndentMetadata\",\n    value: function getIndentMetadata(text) {\n      var ret = 0;\n\n      if (this.shouldIncrease(text)) {\n        ret += 1\n        /* INCREASE_MASK */\n        ;\n      }\n\n      if (this.shouldDecrease(text)) {\n        ret += 2\n        /* DECREASE_MASK */\n        ;\n      }\n\n      if (this.shouldIndentNextLine(text)) {\n        ret += 4\n        /* INDENT_NEXTLINE_MASK */\n        ;\n      }\n\n      if (this.shouldIgnore(text)) {\n        ret += 8\n        /* UNINDENT_MASK */\n        ;\n      }\n\n      return ret;\n    }\n  }]);\n\n  return IndentRulesSupport;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/indentRules.js"],"names":["resetGlobalRegex","reg","global","lastIndex","IndentRulesSupport","indentationRules","_indentationRules","text","increaseIndentPattern","test","decreaseIndentPattern","indentNextLinePattern","unIndentedLinePattern","ret","shouldIncrease","shouldDecrease","shouldIndentNextLine","shouldIgnore"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,SAASA,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,MAAIA,GAAG,CAACC,MAAR,EAAgB;AACZD,IAAAA,GAAG,CAACE,SAAJ,GAAgB,CAAhB;AACH;;AACD,SAAO,IAAP;AACH;;AACD,WAAaC,kBAAb;AACI,8BAAYC,gBAAZ,EAA8B;AAAA;;AAC1B,SAAKC,iBAAL,GAAyBD,gBAAzB;AACH;;AAHL;AAAA;AAAA,mCAImBE,IAJnB,EAIyB;AACjB,UAAI,KAAKD,iBAAT,EAA4B;AACxB,YAAI,KAAKA,iBAAL,CAAuBE,qBAAvB,IAAgDR,gBAAgB,CAAC,KAAKM,iBAAL,CAAuBE,qBAAxB,CAAhE,IAAkH,KAAKF,iBAAL,CAAuBE,qBAAvB,CAA6CC,IAA7C,CAAkDF,IAAlD,CAAtH,EAA+K;AAC3K,iBAAO,IAAP;AACH,SAHuB,CAIxB;AACA;AACA;;AACH;;AACD,aAAO,KAAP;AACH;AAdL;AAAA;AAAA,mCAemBA,IAfnB,EAeyB;AACjB,UAAI,KAAKD,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBI,qBAAjD,IAA0EV,gBAAgB,CAAC,KAAKM,iBAAL,CAAuBI,qBAAxB,CAA1F,IAA4I,KAAKJ,iBAAL,CAAuBI,qBAAvB,CAA6CD,IAA7C,CAAkDF,IAAlD,CAAhJ,EAAyM;AACrM,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;AApBL;AAAA;AAAA,yCAqByBA,IArBzB,EAqB+B;AACvB,UAAI,KAAKD,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBK,qBAAjD,IAA0EX,gBAAgB,CAAC,KAAKM,iBAAL,CAAuBK,qBAAxB,CAA1F,IAA4I,KAAKL,iBAAL,CAAuBK,qBAAvB,CAA6CF,IAA7C,CAAkDF,IAAlD,CAAhJ,EAAyM;AACrM,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;AA1BL;AAAA;AAAA,iCA2BiBA,IA3BjB,EA2BuB;AACf;AACA,UAAI,KAAKD,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBM,qBAAjD,IAA0EZ,gBAAgB,CAAC,KAAKM,iBAAL,CAAuBM,qBAAxB,CAA1F,IAA4I,KAAKN,iBAAL,CAAuBM,qBAAvB,CAA6CH,IAA7C,CAAkDF,IAAlD,CAAhJ,EAAyM;AACrM,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;AAjCL;AAAA;AAAA,sCAkCsBA,IAlCtB,EAkC4B;AACpB,UAAIM,GAAG,GAAG,CAAV;;AACA,UAAI,KAAKC,cAAL,CAAoBP,IAApB,CAAJ,EAA+B;AAC3BM,QAAAA,GAAG,IAAI;AAAE;AAAT;AACH;;AACD,UAAI,KAAKE,cAAL,CAAoBR,IAApB,CAAJ,EAA+B;AAC3BM,QAAAA,GAAG,IAAI;AAAE;AAAT;AACH;;AACD,UAAI,KAAKG,oBAAL,CAA0BT,IAA1B,CAAJ,EAAqC;AACjCM,QAAAA,GAAG,IAAI;AAAE;AAAT;AACH;;AACD,UAAI,KAAKI,YAAL,CAAkBV,IAAlB,CAAJ,EAA6B;AACzBM,QAAAA,GAAG,IAAI;AAAE;AAAT;AACH;;AACD,aAAOA,GAAP;AACH;AAjDL;;AAAA;AAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nfunction resetGlobalRegex(reg) {\r\n    if (reg.global) {\r\n        reg.lastIndex = 0;\r\n    }\r\n    return true;\r\n}\r\nexport class IndentRulesSupport {\r\n    constructor(indentationRules) {\r\n        this._indentationRules = indentationRules;\r\n    }\r\n    shouldIncrease(text) {\r\n        if (this._indentationRules) {\r\n            if (this._indentationRules.increaseIndentPattern && resetGlobalRegex(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(text)) {\r\n                return true;\r\n            }\r\n            // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\r\n            // \treturn true;\r\n            // }\r\n        }\r\n        return false;\r\n    }\r\n    shouldDecrease(text) {\r\n        if (this._indentationRules && this._indentationRules.decreaseIndentPattern && resetGlobalRegex(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(text)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    shouldIndentNextLine(text) {\r\n        if (this._indentationRules && this._indentationRules.indentNextLinePattern && resetGlobalRegex(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(text)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    shouldIgnore(text) {\r\n        // the text matches `unIndentedLinePattern`\r\n        if (this._indentationRules && this._indentationRules.unIndentedLinePattern && resetGlobalRegex(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(text)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getIndentMetadata(text) {\r\n        let ret = 0;\r\n        if (this.shouldIncrease(text)) {\r\n            ret += 1 /* INCREASE_MASK */;\r\n        }\r\n        if (this.shouldDecrease(text)) {\r\n            ret += 2 /* DECREASE_MASK */;\r\n        }\r\n        if (this.shouldIndentNextLine(text)) {\r\n            ret += 4 /* INDENT_NEXTLINE_MASK */;\r\n        }\r\n        if (this.shouldIgnore(text)) {\r\n            ret += 8 /* UNINDENT_MASK */;\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}