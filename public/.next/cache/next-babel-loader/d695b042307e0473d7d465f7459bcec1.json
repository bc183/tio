{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport var ColumnSelection = /*#__PURE__*/function () {\n  function ColumnSelection() {\n    _classCallCheck(this, ColumnSelection);\n  }\n\n  _createClass(ColumnSelection, null, [{\n    key: \"columnSelect\",\n    value: function columnSelect(config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n      var lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n      var reversed = fromLineNumber > toLineNumber;\n      var isRTL = fromVisibleColumn > toVisibleColumn;\n      var isLTR = fromVisibleColumn < toVisibleColumn;\n      var result = []; // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n\n      for (var i = 0; i < lineCount; i++) {\n        var lineNumber = fromLineNumber + (reversed ? -i : i);\n        var startColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, fromVisibleColumn);\n        var endColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, toVisibleColumn);\n        var visibleStartColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, startColumn));\n        var visibleEndColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, endColumn)); // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n\n        if (isLTR) {\n          if (visibleStartColumn > toVisibleColumn) {\n            continue;\n          }\n\n          if (visibleEndColumn < fromVisibleColumn) {\n            continue;\n          }\n        }\n\n        if (isRTL) {\n          if (visibleEndColumn > fromVisibleColumn) {\n            continue;\n          }\n\n          if (visibleStartColumn < toVisibleColumn) {\n            continue;\n          }\n        }\n\n        result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0, new Position(lineNumber, endColumn), 0));\n      }\n\n      if (result.length === 0) {\n        // We are after all the lines, so add cursor at the end of each line\n        for (var _i = 0; _i < lineCount; _i++) {\n          var _lineNumber = fromLineNumber + (reversed ? -_i : _i);\n\n          var maxColumn = model.getLineMaxColumn(_lineNumber);\n          result.push(new SingleCursorState(new Range(_lineNumber, maxColumn, _lineNumber, maxColumn), 0, new Position(_lineNumber, maxColumn), 0));\n        }\n      }\n\n      return {\n        viewStates: result,\n        reversed: reversed,\n        fromLineNumber: fromLineNumber,\n        fromVisualColumn: fromVisibleColumn,\n        toLineNumber: toLineNumber,\n        toVisualColumn: toVisibleColumn\n      };\n    }\n  }, {\n    key: \"columnSelectLeft\",\n    value: function columnSelectLeft(config, model, prevColumnSelectData) {\n      var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\n      if (toViewVisualColumn > 1) {\n        toViewVisualColumn--;\n      }\n\n      return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n  }, {\n    key: \"columnSelectRight\",\n    value: function columnSelectRight(config, model, prevColumnSelectData) {\n      var maxVisualViewColumn = 0;\n      var minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n      var maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n\n      for (var lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n        var lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n        var lineMaxVisualViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, lineMaxViewColumn));\n        maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n      }\n\n      var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\n      if (toViewVisualColumn < maxVisualViewColumn) {\n        toViewVisualColumn++;\n      }\n\n      return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n  }, {\n    key: \"columnSelectUp\",\n    value: function columnSelectUp(config, model, prevColumnSelectData, isPaged) {\n      var linesCount = isPaged ? config.pageSize : 1;\n      var toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n      return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n  }, {\n    key: \"columnSelectDown\",\n    value: function columnSelectDown(config, model, prevColumnSelectData, isPaged) {\n      var linesCount = isPaged ? config.pageSize : 1;\n      var toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n      return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n  }]);\n\n  return ColumnSelection;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorColumnSelection.js"],"names":["CursorColumns","SingleCursorState","Position","Range","ColumnSelection","config","model","fromLineNumber","fromVisibleColumn","toLineNumber","toVisibleColumn","lineCount","Math","abs","reversed","isRTL","isLTR","result","i","lineNumber","startColumn","columnFromVisibleColumn2","endColumn","visibleStartColumn","visibleColumnFromColumn2","visibleEndColumn","push","length","maxColumn","getLineMaxColumn","viewStates","fromVisualColumn","toVisualColumn","prevColumnSelectData","toViewVisualColumn","columnSelect","fromViewLineNumber","fromViewVisualColumn","toViewLineNumber","maxVisualViewColumn","minViewLineNumber","min","maxViewLineNumber","max","lineMaxViewColumn","lineMaxVisualViewColumn","isPaged","linesCount","pageSize","getLineCount"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nexport class ColumnSelection {\r\n    static columnSelect(config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\r\n        let lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\r\n        let reversed = (fromLineNumber > toLineNumber);\r\n        let isRTL = (fromVisibleColumn > toVisibleColumn);\r\n        let isLTR = (fromVisibleColumn < toVisibleColumn);\r\n        let result = [];\r\n        // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\r\n        for (let i = 0; i < lineCount; i++) {\r\n            let lineNumber = fromLineNumber + (reversed ? -i : i);\r\n            let startColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, fromVisibleColumn);\r\n            let endColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, toVisibleColumn);\r\n            let visibleStartColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, startColumn));\r\n            let visibleEndColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, endColumn));\r\n            // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\r\n            if (isLTR) {\r\n                if (visibleStartColumn > toVisibleColumn) {\r\n                    continue;\r\n                }\r\n                if (visibleEndColumn < fromVisibleColumn) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (isRTL) {\r\n                if (visibleEndColumn > fromVisibleColumn) {\r\n                    continue;\r\n                }\r\n                if (visibleStartColumn < toVisibleColumn) {\r\n                    continue;\r\n                }\r\n            }\r\n            result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0, new Position(lineNumber, endColumn), 0));\r\n        }\r\n        if (result.length === 0) {\r\n            // We are after all the lines, so add cursor at the end of each line\r\n            for (let i = 0; i < lineCount; i++) {\r\n                const lineNumber = fromLineNumber + (reversed ? -i : i);\r\n                const maxColumn = model.getLineMaxColumn(lineNumber);\r\n                result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0, new Position(lineNumber, maxColumn), 0));\r\n            }\r\n        }\r\n        return {\r\n            viewStates: result,\r\n            reversed: reversed,\r\n            fromLineNumber: fromLineNumber,\r\n            fromVisualColumn: fromVisibleColumn,\r\n            toLineNumber: toLineNumber,\r\n            toVisualColumn: toVisibleColumn\r\n        };\r\n    }\r\n    static columnSelectLeft(config, model, prevColumnSelectData) {\r\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\r\n        if (toViewVisualColumn > 1) {\r\n            toViewVisualColumn--;\r\n        }\r\n        return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\r\n    }\r\n    static columnSelectRight(config, model, prevColumnSelectData) {\r\n        let maxVisualViewColumn = 0;\r\n        const minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\r\n        const maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\r\n        for (let lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\r\n            const lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\r\n            const lineMaxVisualViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, lineMaxViewColumn));\r\n            maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\r\n        }\r\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\r\n        if (toViewVisualColumn < maxVisualViewColumn) {\r\n            toViewVisualColumn++;\r\n        }\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\r\n    }\r\n    static columnSelectUp(config, model, prevColumnSelectData, isPaged) {\r\n        const linesCount = isPaged ? config.pageSize : 1;\r\n        const toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\r\n    }\r\n    static columnSelectDown(config, model, prevColumnSelectData, isPaged) {\r\n        const linesCount = isPaged ? config.pageSize : 1;\r\n        const toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}