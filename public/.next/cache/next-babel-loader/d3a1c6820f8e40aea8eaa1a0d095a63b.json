{"ast":null,"code":"import _slicedToArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { TokenizationRegistry } from '../modes.js';\nimport { tokenizeLineToHTML } from '../modes/textToHtmlTokenizer.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport * as viewEvents from '../view/viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { IdentityLinesCollection, SplitLinesCollection } from './splitLinesCollection.js';\nimport { MinimapLinesRenderingData, ViewLineRenderingData } from './viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { Cursor } from '../controller/cursor.js';\nimport { CursorConfiguration } from '../controller/cursorCommon.js';\nimport { ViewModelEventDispatcher, FocusChangedEvent, ScrollChangedEvent, ViewZonesChangedEvent, ReadOnlyEditAttemptEvent } from './viewModelEventDispatcher.js';\nvar USE_IDENTITY_LINES_COLLECTION = true;\nexport var ViewModel = /*#__PURE__*/function (_Disposable) {\n  _inherits(ViewModel, _Disposable);\n\n  var _super = _createSuper(ViewModel);\n\n  function ViewModel(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame) {\n    var _this;\n\n    _classCallCheck(this, ViewModel);\n\n    _this = _super.call(this);\n    _this._editorId = editorId;\n    _this._configuration = configuration;\n    _this.model = model;\n    _this._eventDispatcher = new ViewModelEventDispatcher();\n    _this.onEvent = _this._eventDispatcher.onEvent;\n    _this.cursorConfig = new CursorConfiguration(_this.model.getLanguageIdentifier(), _this.model.getOptions(), _this._configuration);\n    _this._tokenizeViewportSoon = _this._register(new RunOnceScheduler(function () {\n      return _this.tokenizeViewport();\n    }, 50));\n    _this._updateConfigurationViewLineCount = _this._register(new RunOnceScheduler(function () {\n      return _this._updateConfigurationViewLineCountNow();\n    }, 0));\n    _this._hasFocus = false;\n    _this._viewportStartLine = -1;\n    _this._viewportStartLineTrackedRange = null;\n    _this._viewportStartLineDelta = 0;\n\n    if (USE_IDENTITY_LINES_COLLECTION && _this.model.isTooLargeForTokenization()) {\n      _this._lines = new IdentityLinesCollection(_this.model);\n    } else {\n      var options = _this._configuration.options;\n      var fontInfo = options.get(38\n      /* fontInfo */\n      );\n      var wrappingStrategy = options.get(118\n      /* wrappingStrategy */\n      );\n      var wrappingInfo = options.get(125\n      /* wrappingInfo */\n      );\n      var wrappingIndent = options.get(117\n      /* wrappingIndent */\n      );\n      _this._lines = new SplitLinesCollection(_this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, _this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent);\n    }\n\n    _this.coordinatesConverter = _this._lines.createCoordinatesConverter();\n    _this._cursor = _this._register(new Cursor(model, _assertThisInitialized(_this), _this.coordinatesConverter, _this.cursorConfig));\n    _this.viewLayout = _this._register(new ViewLayout(_this._configuration, _this.getLineCount(), scheduleAtNextAnimationFrame));\n\n    _this._register(_this.viewLayout.onDidScroll(function (e) {\n      if (e.scrollTopChanged) {\n        _this._tokenizeViewportSoon.schedule();\n      }\n\n      _this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n\n      _this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n    }));\n\n    _this._register(_this.viewLayout.onDidContentSizeChange(function (e) {\n      _this._eventDispatcher.emitOutgoingEvent(e);\n    }));\n\n    _this._decorations = new ViewModelDecorations(_this._editorId, _this.model, _this._configuration, _this._lines, _this.coordinatesConverter);\n\n    _this._registerModelEvents();\n\n    _this._register(_this._configuration.onDidChangeFast(function (e) {\n      try {\n        var eventsCollector = _this._eventDispatcher.beginEmitViewEvents();\n\n        _this._onConfigurationChanged(eventsCollector, e);\n      } finally {\n        _this._eventDispatcher.endEmitViewEvents();\n      }\n    }));\n\n    _this._register(MinimapTokensColorTracker.getInstance().onDidChange(function () {\n      _this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n    }));\n\n    _this._updateConfigurationViewLineCountNow();\n\n    return _this;\n  }\n\n  _createClass(ViewModel, [{\n    key: \"dispose\",\n    value: function dispose() {\n      // First remove listeners, as disposing the lines might end up sending\n      // model decoration changed events ... and we no longer care about them ...\n      _get(_getPrototypeOf(ViewModel.prototype), \"dispose\", this).call(this);\n\n      this._decorations.dispose();\n\n      this._lines.dispose();\n\n      this.invalidateMinimapColorCache();\n      this._viewportStartLineTrackedRange = this.model._setTrackedRange(this._viewportStartLineTrackedRange, null, 1\n      /* NeverGrowsWhenTypingAtEdges */\n      );\n\n      this._eventDispatcher.dispose();\n    }\n  }, {\n    key: \"createLineBreaksComputer\",\n    value: function createLineBreaksComputer() {\n      return this._lines.createLineBreaksComputer();\n    }\n  }, {\n    key: \"addViewEventHandler\",\n    value: function addViewEventHandler(eventHandler) {\n      this._eventDispatcher.addViewEventHandler(eventHandler);\n    }\n  }, {\n    key: \"removeViewEventHandler\",\n    value: function removeViewEventHandler(eventHandler) {\n      this._eventDispatcher.removeViewEventHandler(eventHandler);\n    }\n  }, {\n    key: \"_updateConfigurationViewLineCountNow\",\n    value: function _updateConfigurationViewLineCountNow() {\n      this._configuration.setViewLineCount(this._lines.getViewLineCount());\n    }\n  }, {\n    key: \"tokenizeViewport\",\n    value: function tokenizeViewport() {\n      var linesViewportData = this.viewLayout.getLinesViewportData();\n      var startPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.startLineNumber, 1));\n      var endPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.endLineNumber, 1));\n      this.model.tokenizeViewport(startPosition.lineNumber, endPosition.lineNumber);\n    }\n  }, {\n    key: \"setHasFocus\",\n    value: function setHasFocus(hasFocus) {\n      this._hasFocus = hasFocus;\n\n      this._cursor.setHasFocus(hasFocus);\n\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n\n      this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n    }\n  }, {\n    key: \"onCompositionStart\",\n    value: function onCompositionStart() {\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n    }\n  }, {\n    key: \"onCompositionEnd\",\n    value: function onCompositionEnd() {\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n    }\n  }, {\n    key: \"onDidColorThemeChange\",\n    value: function onDidColorThemeChange() {\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent());\n    }\n  }, {\n    key: \"_onConfigurationChanged\",\n    value: function _onConfigurationChanged(eventsCollector, e) {\n      // We might need to restore the current centered view range, so save it (if available)\n      var previousViewportStartModelPosition = null;\n\n      if (this._viewportStartLine !== -1) {\n        var previousViewportStartViewPosition = new Position(this._viewportStartLine, this.getLineMinColumn(this._viewportStartLine));\n        previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n      }\n\n      var restorePreviousViewportStart = false;\n      var options = this._configuration.options;\n      var fontInfo = options.get(38\n      /* fontInfo */\n      );\n      var wrappingStrategy = options.get(118\n      /* wrappingStrategy */\n      );\n      var wrappingInfo = options.get(125\n      /* wrappingInfo */\n      );\n      var wrappingIndent = options.get(117\n      /* wrappingIndent */\n      );\n\n      if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent)) {\n        eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n        eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n        eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\n        this._cursor.onLineMappingChanged(eventsCollector);\n\n        this._decorations.onLineMappingChanged();\n\n        this.viewLayout.onFlushed(this.getLineCount());\n\n        if (this.viewLayout.getCurrentScrollTop() !== 0) {\n          // Never change the scroll position from 0 to something else...\n          restorePreviousViewportStart = true;\n        }\n\n        this._updateConfigurationViewLineCount.schedule();\n      }\n\n      if (e.hasChanged(75\n      /* readOnly */\n      )) {\n        // Must read again all decorations due to readOnly filtering\n        this._decorations.reset();\n\n        eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n      }\n\n      eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n      this.viewLayout.onConfigurationChanged(e);\n\n      if (restorePreviousViewportStart && previousViewportStartModelPosition) {\n        var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition);\n        var viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n        this.viewLayout.setScrollPosition({\n          scrollTop: viewPositionTop + this._viewportStartLineDelta\n        }, 1\n        /* Immediate */\n        );\n      }\n\n      if (CursorConfiguration.shouldRecreate(e)) {\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), this._configuration);\n\n        this._cursor.updateConfiguration(this.cursorConfig);\n      }\n    }\n  }, {\n    key: \"_registerModelEvents\",\n    value: function _registerModelEvents() {\n      var _this2 = this;\n\n      this._register(this.model.onDidChangeRawContentFast(function (e) {\n        try {\n          var eventsCollector = _this2._eventDispatcher.beginEmitViewEvents();\n\n          var hadOtherModelChange = false;\n          var hadModelLineChangeThatChangedLineMapping = false;\n          var changes = e.changes;\n          var versionId = e.versionId; // Do a first pass to compute line mappings, and a second pass to actually interpret them\n\n          var lineBreaksComputer = _this2._lines.createLineBreaksComputer();\n\n          var _iterator = _createForOfIteratorHelper(changes),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var change = _step.value;\n\n              switch (change.changeType) {\n                case 4\n                /* LinesInserted */\n                :\n                  {\n                    var _iterator3 = _createForOfIteratorHelper(change.detail),\n                        _step3;\n\n                    try {\n                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                        var line = _step3.value;\n                        lineBreaksComputer.addRequest(line, null);\n                      }\n                    } catch (err) {\n                      _iterator3.e(err);\n                    } finally {\n                      _iterator3.f();\n                    }\n\n                    break;\n                  }\n\n                case 2\n                /* LineChanged */\n                :\n                  {\n                    lineBreaksComputer.addRequest(change.detail, null);\n                    break;\n                  }\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var lineBreaks = lineBreaksComputer.finalize();\n          var lineBreaksOffset = 0;\n\n          var _iterator2 = _createForOfIteratorHelper(changes),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _change = _step2.value;\n\n              switch (_change.changeType) {\n                case 1\n                /* Flush */\n                :\n                  {\n                    _this2._lines.onModelFlushed();\n\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\n                    _this2._decorations.reset();\n\n                    _this2.viewLayout.onFlushed(_this2.getLineCount());\n\n                    hadOtherModelChange = true;\n                    break;\n                  }\n\n                case 3\n                /* LinesDeleted */\n                :\n                  {\n                    var linesDeletedEvent = _this2._lines.onModelLinesDeleted(versionId, _change.fromLineNumber, _change.toLineNumber);\n\n                    if (linesDeletedEvent !== null) {\n                      eventsCollector.emitViewEvent(linesDeletedEvent);\n\n                      _this2.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                    }\n\n                    hadOtherModelChange = true;\n                    break;\n                  }\n\n                case 4\n                /* LinesInserted */\n                :\n                  {\n                    var insertedLineBreaks = lineBreaks.slice(lineBreaksOffset, lineBreaksOffset + _change.detail.length);\n                    lineBreaksOffset += _change.detail.length;\n\n                    var linesInsertedEvent = _this2._lines.onModelLinesInserted(versionId, _change.fromLineNumber, _change.toLineNumber, insertedLineBreaks);\n\n                    if (linesInsertedEvent !== null) {\n                      eventsCollector.emitViewEvent(linesInsertedEvent);\n\n                      _this2.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                    }\n\n                    hadOtherModelChange = true;\n                    break;\n                  }\n\n                case 2\n                /* LineChanged */\n                :\n                  {\n                    var changedLineBreakData = lineBreaks[lineBreaksOffset];\n                    lineBreaksOffset++;\n\n                    var _this2$_lines$onModel = _this2._lines.onModelLineChanged(versionId, _change.lineNumber, changedLineBreakData),\n                        _this2$_lines$onModel2 = _slicedToArray(_this2$_lines$onModel, 4),\n                        lineMappingChanged = _this2$_lines$onModel2[0],\n                        linesChangedEvent = _this2$_lines$onModel2[1],\n                        _linesInsertedEvent = _this2$_lines$onModel2[2],\n                        _linesDeletedEvent = _this2$_lines$onModel2[3];\n\n                    hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n\n                    if (linesChangedEvent) {\n                      eventsCollector.emitViewEvent(linesChangedEvent);\n                    }\n\n                    if (_linesInsertedEvent) {\n                      eventsCollector.emitViewEvent(_linesInsertedEvent);\n\n                      _this2.viewLayout.onLinesInserted(_linesInsertedEvent.fromLineNumber, _linesInsertedEvent.toLineNumber);\n                    }\n\n                    if (_linesDeletedEvent) {\n                      eventsCollector.emitViewEvent(_linesDeletedEvent);\n\n                      _this2.viewLayout.onLinesDeleted(_linesDeletedEvent.fromLineNumber, _linesDeletedEvent.toLineNumber);\n                    }\n\n                    break;\n                  }\n\n                case 5\n                /* EOLChanged */\n                :\n                  {\n                    // Nothing to do. The new version will be accepted below\n                    break;\n                  }\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          _this2._lines.acceptVersionId(versionId);\n\n          _this2.viewLayout.onHeightMaybeChanged();\n\n          if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\n            _this2._cursor.onLineMappingChanged(eventsCollector);\n\n            _this2._decorations.onLineMappingChanged();\n          }\n        } finally {\n          _this2._eventDispatcher.endEmitViewEvents();\n        } // Update the configuration and reset the centered view line\n\n\n        _this2._viewportStartLine = -1;\n\n        _this2._configuration.setMaxLineNumber(_this2.model.getLineCount());\n\n        _this2._updateConfigurationViewLineCountNow(); // Recover viewport\n\n\n        if (!_this2._hasFocus && _this2.model.getAttachedEditorCount() >= 2 && _this2._viewportStartLineTrackedRange) {\n          var modelRange = _this2.model._getTrackedRange(_this2._viewportStartLineTrackedRange);\n\n          if (modelRange) {\n            var viewPosition = _this2.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n\n            var viewPositionTop = _this2.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n\n            _this2.viewLayout.setScrollPosition({\n              scrollTop: viewPositionTop + _this2._viewportStartLineDelta\n            }, 1\n            /* Immediate */\n            );\n          }\n        }\n\n        try {\n          var _eventsCollector = _this2._eventDispatcher.beginEmitViewEvents();\n\n          _this2._cursor.onModelContentChanged(_eventsCollector, e);\n        } finally {\n          _this2._eventDispatcher.endEmitViewEvents();\n        }\n      }));\n\n      this._register(this.model.onDidChangeTokens(function (e) {\n        var viewRanges = [];\n\n        for (var j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n          var modelRange = e.ranges[j];\n\n          var viewStartLineNumber = _this2.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n\n          var viewEndLineNumber = _this2.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, _this2.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n\n          viewRanges[j] = {\n            fromLineNumber: viewStartLineNumber,\n            toLineNumber: viewEndLineNumber\n          };\n        }\n\n        _this2._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n\n        if (e.tokenizationSupportChanged) {\n          _this2._tokenizeViewportSoon.schedule();\n        }\n      }));\n\n      this._register(this.model.onDidChangeLanguageConfiguration(function (e) {\n        _this2._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n\n        _this2.cursorConfig = new CursorConfiguration(_this2.model.getLanguageIdentifier(), _this2.model.getOptions(), _this2._configuration);\n\n        _this2._cursor.updateConfiguration(_this2.cursorConfig);\n      }));\n\n      this._register(this.model.onDidChangeLanguage(function (e) {\n        _this2.cursorConfig = new CursorConfiguration(_this2.model.getLanguageIdentifier(), _this2.model.getOptions(), _this2._configuration);\n\n        _this2._cursor.updateConfiguration(_this2.cursorConfig);\n      }));\n\n      this._register(this.model.onDidChangeOptions(function (e) {\n        // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n        if (_this2._lines.setTabSize(_this2.model.getOptions().tabSize)) {\n          try {\n            var eventsCollector = _this2._eventDispatcher.beginEmitViewEvents();\n\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\n            _this2._cursor.onLineMappingChanged(eventsCollector);\n\n            _this2._decorations.onLineMappingChanged();\n\n            _this2.viewLayout.onFlushed(_this2.getLineCount());\n          } finally {\n            _this2._eventDispatcher.endEmitViewEvents();\n          }\n\n          _this2._updateConfigurationViewLineCount.schedule();\n        }\n\n        _this2.cursorConfig = new CursorConfiguration(_this2.model.getLanguageIdentifier(), _this2.model.getOptions(), _this2._configuration);\n\n        _this2._cursor.updateConfiguration(_this2.cursorConfig);\n      }));\n\n      this._register(this.model.onDidChangeDecorations(function (e) {\n        _this2._decorations.onModelDecorationsChanged();\n\n        _this2._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n      }));\n    }\n  }, {\n    key: \"setHiddenAreas\",\n    value: function setHiddenAreas(ranges) {\n      try {\n        var eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\n        var lineMappingChanged = this._lines.setHiddenAreas(ranges);\n\n        if (lineMappingChanged) {\n          eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n          eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n          eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\n          this._cursor.onLineMappingChanged(eventsCollector);\n\n          this._decorations.onLineMappingChanged();\n\n          this.viewLayout.onFlushed(this.getLineCount());\n          this.viewLayout.onHeightMaybeChanged();\n        }\n      } finally {\n        this._eventDispatcher.endEmitViewEvents();\n      }\n\n      this._updateConfigurationViewLineCount.schedule();\n    }\n  }, {\n    key: \"getVisibleRangesPlusViewportAboveBelow\",\n    value: function getVisibleRangesPlusViewportAboveBelow() {\n      var layoutInfo = this._configuration.options.get(124\n      /* layoutInfo */\n      );\n\n      var lineHeight = this._configuration.options.get(53\n      /* lineHeight */\n      );\n\n      var linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n      var partialData = this.viewLayout.getLinesViewportData();\n      var startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n      var endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n      return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n    }\n  }, {\n    key: \"getVisibleRanges\",\n    value: function getVisibleRanges() {\n      var visibleViewRange = this.getCompletelyVisibleViewRange();\n      return this._toModelVisibleRanges(visibleViewRange);\n    }\n  }, {\n    key: \"_toModelVisibleRanges\",\n    value: function _toModelVisibleRanges(visibleViewRange) {\n      var visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n\n      var hiddenAreas = this._lines.getHiddenAreas();\n\n      if (hiddenAreas.length === 0) {\n        return [visibleRange];\n      }\n\n      var result = [],\n          resultLen = 0;\n      var startLineNumber = visibleRange.startLineNumber;\n      var startColumn = visibleRange.startColumn;\n      var endLineNumber = visibleRange.endLineNumber;\n      var endColumn = visibleRange.endColumn;\n\n      for (var i = 0, len = hiddenAreas.length; i < len; i++) {\n        var hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n        var hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n\n        if (hiddenEndLineNumber < startLineNumber) {\n          continue;\n        }\n\n        if (hiddenStartLineNumber > endLineNumber) {\n          continue;\n        }\n\n        if (startLineNumber < hiddenStartLineNumber) {\n          result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n        }\n\n        startLineNumber = hiddenEndLineNumber + 1;\n        startColumn = 1;\n      }\n\n      if (startLineNumber < endLineNumber || startLineNumber === endLineNumber && startColumn < endColumn) {\n        result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getCompletelyVisibleViewRange\",\n    value: function getCompletelyVisibleViewRange() {\n      var partialData = this.viewLayout.getLinesViewportData();\n      var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n      var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n      return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n  }, {\n    key: \"getCompletelyVisibleViewRangeAtScrollTop\",\n    value: function getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n      var partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n      var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n      var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n      return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n  }, {\n    key: \"saveState\",\n    value: function saveState() {\n      var compatViewState = this.viewLayout.saveState();\n      var scrollTop = compatViewState.scrollTop;\n      var firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n      var firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n      var firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n      return {\n        scrollLeft: compatViewState.scrollLeft,\n        firstPosition: firstPosition,\n        firstPositionDeltaTop: firstPositionDeltaTop\n      };\n    }\n  }, {\n    key: \"reduceRestoreState\",\n    value: function reduceRestoreState(state) {\n      if (typeof state.firstPosition === 'undefined') {\n        // This is a view state serialized by an older version\n        return this._reduceRestoreStateCompatibility(state);\n      }\n\n      var modelPosition = this.model.validatePosition(state.firstPosition);\n      var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n      var scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n      return {\n        scrollLeft: state.scrollLeft,\n        scrollTop: scrollTop\n      };\n    }\n  }, {\n    key: \"_reduceRestoreStateCompatibility\",\n    value: function _reduceRestoreStateCompatibility(state) {\n      return {\n        scrollLeft: state.scrollLeft,\n        scrollTop: state.scrollTopWithoutViewZones\n      };\n    }\n  }, {\n    key: \"getTabSize\",\n    value: function getTabSize() {\n      return this.model.getOptions().tabSize;\n    }\n  }, {\n    key: \"getTextModelOptions\",\n    value: function getTextModelOptions() {\n      return this.model.getOptions();\n    }\n  }, {\n    key: \"getLineCount\",\n    value: function getLineCount() {\n      return this._lines.getViewLineCount();\n    }\n    /**\r\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\r\n     */\n\n  }, {\n    key: \"setViewport\",\n    value: function setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n      this._viewportStartLine = startLineNumber;\n      var position = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, this.getLineMinColumn(startLineNumber)));\n      this._viewportStartLineTrackedRange = this.model._setTrackedRange(this._viewportStartLineTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1\n      /* NeverGrowsWhenTypingAtEdges */\n      );\n      var viewportStartLineTop = this.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n      var scrollTop = this.viewLayout.getCurrentScrollTop();\n      this._viewportStartLineDelta = scrollTop - viewportStartLineTop;\n    }\n  }, {\n    key: \"getActiveIndentGuide\",\n    value: function getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n      return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    }\n  }, {\n    key: \"getLinesIndentGuides\",\n    value: function getLinesIndentGuides(startLineNumber, endLineNumber) {\n      return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    }\n  }, {\n    key: \"getLineContent\",\n    value: function getLineContent(lineNumber) {\n      return this._lines.getViewLineContent(lineNumber);\n    }\n  }, {\n    key: \"getLineLength\",\n    value: function getLineLength(lineNumber) {\n      return this._lines.getViewLineLength(lineNumber);\n    }\n  }, {\n    key: \"getLineMinColumn\",\n    value: function getLineMinColumn(lineNumber) {\n      return this._lines.getViewLineMinColumn(lineNumber);\n    }\n  }, {\n    key: \"getLineMaxColumn\",\n    value: function getLineMaxColumn(lineNumber) {\n      return this._lines.getViewLineMaxColumn(lineNumber);\n    }\n  }, {\n    key: \"getLineFirstNonWhitespaceColumn\",\n    value: function getLineFirstNonWhitespaceColumn(lineNumber) {\n      var result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n\n      if (result === -1) {\n        return 0;\n      }\n\n      return result + 1;\n    }\n  }, {\n    key: \"getLineLastNonWhitespaceColumn\",\n    value: function getLineLastNonWhitespaceColumn(lineNumber) {\n      var result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n\n      if (result === -1) {\n        return 0;\n      }\n\n      return result + 2;\n    }\n  }, {\n    key: \"getDecorationsInViewport\",\n    value: function getDecorationsInViewport(visibleRange) {\n      return this._decorations.getDecorationsViewportData(visibleRange).decorations;\n    }\n  }, {\n    key: \"getViewLineRenderingData\",\n    value: function getViewLineRenderingData(visibleRange, lineNumber) {\n      var mightContainRTL = this.model.mightContainRTL();\n      var mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n      var tabSize = this.getTabSize();\n\n      var lineData = this._lines.getViewLineData(lineNumber);\n\n      var allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n\n      var inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n      return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n    }\n  }, {\n    key: \"getViewLineData\",\n    value: function getViewLineData(lineNumber) {\n      return this._lines.getViewLineData(lineNumber);\n    }\n  }, {\n    key: \"getMinimapLinesRenderingData\",\n    value: function getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n      var result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n\n      return new MinimapLinesRenderingData(this.getTabSize(), result);\n    }\n  }, {\n    key: \"getAllOverviewRulerDecorations\",\n    value: function getAllOverviewRulerDecorations(theme) {\n      return this._lines.getAllOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options), theme);\n    }\n  }, {\n    key: \"invalidateOverviewRulerColorCache\",\n    value: function invalidateOverviewRulerColorCache() {\n      var decorations = this.model.getOverviewRulerDecorations();\n\n      var _iterator4 = _createForOfIteratorHelper(decorations),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var decoration = _step4.value;\n          var opts = decoration.options.overviewRuler;\n\n          if (opts) {\n            opts.invalidateCachedColor();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"invalidateMinimapColorCache\",\n    value: function invalidateMinimapColorCache() {\n      var decorations = this.model.getAllDecorations();\n\n      var _iterator5 = _createForOfIteratorHelper(decorations),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var decoration = _step5.value;\n          var opts = decoration.options.minimap;\n\n          if (opts) {\n            opts.invalidateCachedColor();\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"getValueInRange\",\n    value: function getValueInRange(range, eol) {\n      var modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n      return this.model.getValueInRange(modelRange, eol);\n    }\n  }, {\n    key: \"getModelLineMaxColumn\",\n    value: function getModelLineMaxColumn(modelLineNumber) {\n      return this.model.getLineMaxColumn(modelLineNumber);\n    }\n  }, {\n    key: \"validateModelPosition\",\n    value: function validateModelPosition(position) {\n      return this.model.validatePosition(position);\n    }\n  }, {\n    key: \"validateModelRange\",\n    value: function validateModelRange(range) {\n      return this.model.validateRange(range);\n    }\n  }, {\n    key: \"deduceModelPositionRelativeToViewPosition\",\n    value: function deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n      var modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n\n      if (this.model.getEOL().length === 2) {\n        // This model uses CRLF, so the delta must take that into account\n        if (deltaOffset < 0) {\n          deltaOffset -= lineFeedCnt;\n        } else {\n          deltaOffset += lineFeedCnt;\n        }\n      }\n\n      var modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n      var resultOffset = modelAnchorOffset + deltaOffset;\n      return this.model.getPositionAt(resultOffset);\n    }\n  }, {\n    key: \"getEOL\",\n    value: function getEOL() {\n      return this.model.getEOL();\n    }\n  }, {\n    key: \"getPlainTextToCopy\",\n    value: function getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n      var newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n      modelRanges = modelRanges.slice(0);\n      modelRanges.sort(Range.compareRangesUsingStarts);\n      var hasEmptyRange = false;\n      var hasNonEmptyRange = false;\n\n      var _iterator6 = _createForOfIteratorHelper(modelRanges),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var range = _step6.value;\n\n          if (range.isEmpty()) {\n            hasEmptyRange = true;\n          } else {\n            hasNonEmptyRange = true;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      if (!hasNonEmptyRange) {\n        // all ranges are empty\n        if (!emptySelectionClipboard) {\n          return '';\n        }\n\n        var modelLineNumbers = modelRanges.map(function (r) {\n          return r.startLineNumber;\n        });\n        var _result = '';\n\n        for (var i = 0; i < modelLineNumbers.length; i++) {\n          if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n            continue;\n          }\n\n          _result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n        }\n\n        return _result;\n      }\n\n      if (hasEmptyRange && emptySelectionClipboard) {\n        // mixed empty selections and non-empty selections\n        var _result2 = [];\n        var prevModelLineNumber = 0;\n\n        var _iterator7 = _createForOfIteratorHelper(modelRanges),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var modelRange = _step7.value;\n            var modelLineNumber = modelRange.startLineNumber;\n\n            if (modelRange.isEmpty()) {\n              if (modelLineNumber !== prevModelLineNumber) {\n                _result2.push(this.model.getLineContent(modelLineNumber));\n              }\n            } else {\n              _result2.push(this.model.getValueInRange(modelRange, forceCRLF ? 2\n              /* CRLF */\n              : 0\n              /* TextDefined */\n              ));\n            }\n\n            prevModelLineNumber = modelLineNumber;\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n\n        return _result2.length === 1 ? _result2[0] : _result2;\n      }\n\n      var result = [];\n\n      var _iterator8 = _createForOfIteratorHelper(modelRanges),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _modelRange = _step8.value;\n\n          if (!_modelRange.isEmpty()) {\n            result.push(this.model.getValueInRange(_modelRange, forceCRLF ? 2\n            /* CRLF */\n            : 0\n            /* TextDefined */\n            ));\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      return result.length === 1 ? result[0] : result;\n    }\n  }, {\n    key: \"getRichTextToCopy\",\n    value: function getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n      var languageId = this.model.getLanguageIdentifier();\n\n      if (languageId.id === 1\n      /* PlainText */\n      ) {\n          return null;\n        }\n\n      if (modelRanges.length !== 1) {\n        // no multiple selection support at this time\n        return null;\n      }\n\n      var range = modelRanges[0];\n\n      if (range.isEmpty()) {\n        if (!emptySelectionClipboard) {\n          // nothing to copy\n          return null;\n        }\n\n        var lineNumber = range.startLineNumber;\n        range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n      }\n\n      var fontInfo = this._configuration.options.get(38\n      /* fontInfo */\n      );\n\n      var colorMap = this._getColorMap();\n\n      var fontFamily = fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily ? fontInfo.fontFamily : \"'\".concat(fontInfo.fontFamily, \"', \").concat(EDITOR_FONT_DEFAULTS.fontFamily);\n      return {\n        mode: languageId.language,\n        html: \"<div style=\\\"\" + \"color: \".concat(colorMap[1\n        /* DefaultForeground */\n        ], \";\") + \"background-color: \".concat(colorMap[2\n        /* DefaultBackground */\n        ], \";\") + \"font-family: \".concat(fontFamily, \";\") + \"font-weight: \".concat(fontInfo.fontWeight, \";\") + \"font-size: \".concat(fontInfo.fontSize, \"px;\") + \"line-height: \".concat(fontInfo.lineHeight, \"px;\") + \"white-space: pre;\" + \"\\\">\" + this._getHTMLToCopy(range, colorMap) + '</div>'\n      };\n    }\n  }, {\n    key: \"_getHTMLToCopy\",\n    value: function _getHTMLToCopy(modelRange, colorMap) {\n      var startLineNumber = modelRange.startLineNumber;\n      var startColumn = modelRange.startColumn;\n      var endLineNumber = modelRange.endLineNumber;\n      var endColumn = modelRange.endColumn;\n      var tabSize = this.getTabSize();\n      var result = '';\n\n      for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        var lineTokens = this.model.getLineTokens(lineNumber);\n        var lineContent = lineTokens.getLineContent();\n        var startOffset = lineNumber === startLineNumber ? startColumn - 1 : 0;\n        var endOffset = lineNumber === endLineNumber ? endColumn - 1 : lineContent.length;\n\n        if (lineContent === '') {\n          result += '<br>';\n        } else {\n          result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getColorMap\",\n    value: function _getColorMap() {\n      var colorMap = TokenizationRegistry.getColorMap();\n      var result = ['#000000'];\n\n      if (colorMap) {\n        for (var i = 1, len = colorMap.length; i < len; i++) {\n          result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n        }\n      }\n\n      return result;\n    } //#region model\n\n  }, {\n    key: \"pushStackElement\",\n    value: function pushStackElement() {\n      this.model.pushStackElement();\n    } //#endregion\n    //#region cursor operations\n\n  }, {\n    key: \"getPrimaryCursorState\",\n    value: function getPrimaryCursorState() {\n      return this._cursor.getPrimaryCursorState();\n    }\n  }, {\n    key: \"getLastAddedCursorIndex\",\n    value: function getLastAddedCursorIndex() {\n      return this._cursor.getLastAddedCursorIndex();\n    }\n  }, {\n    key: \"getCursorStates\",\n    value: function getCursorStates() {\n      return this._cursor.getCursorStates();\n    }\n  }, {\n    key: \"setCursorStates\",\n    value: function setCursorStates(source, reason, states) {\n      var _this3 = this;\n\n      this._withViewEventsCollector(function (eventsCollector) {\n        return _this3._cursor.setStates(eventsCollector, source, reason, states);\n      });\n    }\n  }, {\n    key: \"getCursorColumnSelectData\",\n    value: function getCursorColumnSelectData() {\n      return this._cursor.getCursorColumnSelectData();\n    }\n  }, {\n    key: \"setCursorColumnSelectData\",\n    value: function setCursorColumnSelectData(columnSelectData) {\n      this._cursor.setCursorColumnSelectData(columnSelectData);\n    }\n  }, {\n    key: \"getPrevEditOperationType\",\n    value: function getPrevEditOperationType() {\n      return this._cursor.getPrevEditOperationType();\n    }\n  }, {\n    key: \"setPrevEditOperationType\",\n    value: function setPrevEditOperationType(type) {\n      this._cursor.setPrevEditOperationType(type);\n    }\n  }, {\n    key: \"getSelection\",\n    value: function getSelection() {\n      return this._cursor.getSelection();\n    }\n  }, {\n    key: \"getSelections\",\n    value: function getSelections() {\n      return this._cursor.getSelections();\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return this._cursor.getPrimaryCursorState().modelState.position;\n    }\n  }, {\n    key: \"setSelections\",\n    value: function setSelections(source, selections)\n    /* NotSet */\n    {\n      var _this4 = this;\n\n      var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      this._withViewEventsCollector(function (eventsCollector) {\n        return _this4._cursor.setSelections(eventsCollector, source, selections, reason);\n      });\n    }\n  }, {\n    key: \"saveCursorState\",\n    value: function saveCursorState() {\n      return this._cursor.saveState();\n    }\n  }, {\n    key: \"restoreCursorState\",\n    value: function restoreCursorState(states) {\n      var _this5 = this;\n\n      this._withViewEventsCollector(function (eventsCollector) {\n        return _this5._cursor.restoreState(eventsCollector, states);\n      });\n    }\n  }, {\n    key: \"_executeCursorEdit\",\n    value: function _executeCursorEdit(callback) {\n      if (this._cursor.context.cursorConfig.readOnly) {\n        // we cannot edit when read only...\n        this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n\n        return;\n      }\n\n      this._withViewEventsCollector(callback);\n    }\n  }, {\n    key: \"executeEdits\",\n    value: function executeEdits(source, edits, cursorStateComputer) {\n      var _this6 = this;\n\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this6._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer);\n      });\n    }\n  }, {\n    key: \"startComposition\",\n    value: function startComposition() {\n      var _this7 = this;\n\n      this._cursor.setIsDoingComposition(true);\n\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this7._cursor.startComposition(eventsCollector);\n      });\n    }\n  }, {\n    key: \"endComposition\",\n    value: function endComposition(source) {\n      var _this8 = this;\n\n      this._cursor.setIsDoingComposition(false);\n\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this8._cursor.endComposition(eventsCollector, source);\n      });\n    }\n  }, {\n    key: \"type\",\n    value: function type(text, source) {\n      var _this9 = this;\n\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this9._cursor.type(eventsCollector, text, source);\n      });\n    }\n  }, {\n    key: \"replacePreviousChar\",\n    value: function replacePreviousChar(text, replaceCharCnt, source) {\n      var _this10 = this;\n\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this10._cursor.replacePreviousChar(eventsCollector, text, replaceCharCnt, source);\n      });\n    }\n  }, {\n    key: \"paste\",\n    value: function paste(text, pasteOnNewLine, multicursorText, source) {\n      var _this11 = this;\n\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this11._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source);\n      });\n    }\n  }, {\n    key: \"cut\",\n    value: function cut(source) {\n      var _this12 = this;\n\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this12._cursor.cut(eventsCollector, source);\n      });\n    }\n  }, {\n    key: \"executeCommand\",\n    value: function executeCommand(command, source) {\n      var _this13 = this;\n\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this13._cursor.executeCommand(eventsCollector, command, source);\n      });\n    }\n  }, {\n    key: \"executeCommands\",\n    value: function executeCommands(commands, source) {\n      var _this14 = this;\n\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this14._cursor.executeCommands(eventsCollector, commands, source);\n      });\n    }\n  }, {\n    key: \"revealPrimaryCursor\",\n    value: function revealPrimaryCursor(source, revealHorizontal) {\n      var _this15 = this;\n\n      this._withViewEventsCollector(function (eventsCollector) {\n        return _this15._cursor.revealPrimary(eventsCollector, source, revealHorizontal, 0\n        /* Smooth */\n        );\n      });\n    }\n  }, {\n    key: \"revealTopMostCursor\",\n    value: function revealTopMostCursor(source) {\n      var viewPosition = this._cursor.getTopMostViewPosition();\n\n      var viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n\n      this._withViewEventsCollector(function (eventsCollector) {\n        return eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, viewRange, null, 0\n        /* Simple */\n        , true, 0\n        /* Smooth */\n        ));\n      });\n    }\n  }, {\n    key: \"revealBottomMostCursor\",\n    value: function revealBottomMostCursor(source) {\n      var viewPosition = this._cursor.getBottomMostViewPosition();\n\n      var viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n\n      this._withViewEventsCollector(function (eventsCollector) {\n        return eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, viewRange, null, 0\n        /* Simple */\n        , true, 0\n        /* Smooth */\n        ));\n      });\n    }\n  }, {\n    key: \"revealRange\",\n    value: function revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n      this._withViewEventsCollector(function (eventsCollector) {\n        return eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, viewRange, null, verticalType, revealHorizontal, scrollType));\n      });\n    } //#endregion\n    //#region viewLayout\n\n  }, {\n    key: \"getVerticalOffsetForLineNumber\",\n    value: function getVerticalOffsetForLineNumber(viewLineNumber) {\n      return this.viewLayout.getVerticalOffsetForLineNumber(viewLineNumber);\n    }\n  }, {\n    key: \"getScrollTop\",\n    value: function getScrollTop() {\n      return this.viewLayout.getCurrentScrollTop();\n    }\n  }, {\n    key: \"setScrollTop\",\n    value: function setScrollTop(newScrollTop, scrollType) {\n      this.viewLayout.setScrollPosition({\n        scrollTop: newScrollTop\n      }, scrollType);\n    }\n  }, {\n    key: \"setScrollPosition\",\n    value: function setScrollPosition(position, type) {\n      this.viewLayout.setScrollPosition(position, type);\n    }\n  }, {\n    key: \"deltaScrollNow\",\n    value: function deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n      this.viewLayout.deltaScrollNow(deltaScrollLeft, deltaScrollTop);\n    }\n  }, {\n    key: \"changeWhitespace\",\n    value: function changeWhitespace(callback) {\n      var hadAChange = this.viewLayout.changeWhitespace(callback);\n\n      if (hadAChange) {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n\n        this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n      }\n    }\n  }, {\n    key: \"setMaxLineWidth\",\n    value: function setMaxLineWidth(maxLineWidth) {\n      this.viewLayout.setMaxLineWidth(maxLineWidth);\n    } //#endregion\n\n  }, {\n    key: \"_withViewEventsCollector\",\n    value: function _withViewEventsCollector(callback) {\n      try {\n        var eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\n        callback(eventsCollector);\n      } finally {\n        this._eventDispatcher.endEmitViewEvents();\n      }\n    }\n  }]);\n\n  return ViewModel;\n}(Disposable);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js"],"names":["Color","Disposable","strings","EDITOR_FONT_DEFAULTS","filterValidationDecorations","Position","Range","TokenizationRegistry","tokenizeLineToHTML","MinimapTokensColorTracker","viewEvents","ViewLayout","IdentityLinesCollection","SplitLinesCollection","MinimapLinesRenderingData","ViewLineRenderingData","ViewModelDecorations","RunOnceScheduler","platform","Cursor","CursorConfiguration","ViewModelEventDispatcher","FocusChangedEvent","ScrollChangedEvent","ViewZonesChangedEvent","ReadOnlyEditAttemptEvent","USE_IDENTITY_LINES_COLLECTION","ViewModel","editorId","configuration","model","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","scheduleAtNextAnimationFrame","_editorId","_configuration","_eventDispatcher","onEvent","cursorConfig","getLanguageIdentifier","getOptions","_tokenizeViewportSoon","_register","tokenizeViewport","_updateConfigurationViewLineCount","_updateConfigurationViewLineCountNow","_hasFocus","_viewportStartLine","_viewportStartLineTrackedRange","_viewportStartLineDelta","isTooLargeForTokenization","_lines","options","fontInfo","get","wrappingStrategy","wrappingInfo","wrappingIndent","tabSize","wrappingColumn","coordinatesConverter","createCoordinatesConverter","_cursor","viewLayout","getLineCount","onDidScroll","e","scrollTopChanged","schedule","emitSingleViewEvent","ViewScrollChangedEvent","emitOutgoingEvent","oldScrollWidth","oldScrollLeft","oldScrollHeight","oldScrollTop","scrollWidth","scrollLeft","scrollHeight","scrollTop","onDidContentSizeChange","_decorations","_registerModelEvents","onDidChangeFast","eventsCollector","beginEmitViewEvents","_onConfigurationChanged","endEmitViewEvents","getInstance","onDidChange","ViewTokensColorsChangedEvent","dispose","invalidateMinimapColorCache","_setTrackedRange","createLineBreaksComputer","eventHandler","addViewEventHandler","removeViewEventHandler","setViewLineCount","getViewLineCount","linesViewportData","getLinesViewportData","startPosition","convertViewPositionToModelPosition","startLineNumber","endPosition","endLineNumber","lineNumber","hasFocus","setHasFocus","ViewFocusChangedEvent","ViewCompositionStartEvent","ViewCompositionEndEvent","ViewThemeChangedEvent","previousViewportStartModelPosition","previousViewportStartViewPosition","getLineMinColumn","restorePreviousViewportStart","setWrappingSettings","emitViewEvent","ViewFlushedEvent","ViewLineMappingChangedEvent","ViewDecorationsChangedEvent","onLineMappingChanged","onFlushed","getCurrentScrollTop","hasChanged","reset","ViewConfigurationChangedEvent","onConfigurationChanged","viewPosition","convertModelPositionToViewPosition","viewPositionTop","getVerticalOffsetForLineNumber","setScrollPosition","shouldRecreate","updateConfiguration","onDidChangeRawContentFast","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","changes","versionId","lineBreaksComputer","change","changeType","detail","line","addRequest","lineBreaks","finalize","lineBreaksOffset","onModelFlushed","linesDeletedEvent","onModelLinesDeleted","fromLineNumber","toLineNumber","onLinesDeleted","insertedLineBreaks","slice","length","linesInsertedEvent","onModelLinesInserted","onLinesInserted","changedLineBreakData","onModelLineChanged","lineMappingChanged","linesChangedEvent","acceptVersionId","onHeightMaybeChanged","setMaxLineNumber","getAttachedEditorCount","modelRange","_getTrackedRange","getStartPosition","onModelContentChanged","onDidChangeTokens","viewRanges","j","lenJ","ranges","viewStartLineNumber","viewEndLineNumber","getLineMaxColumn","ViewTokensChangedEvent","tokenizationSupportChanged","onDidChangeLanguageConfiguration","ViewLanguageConfigurationEvent","onDidChangeLanguage","onDidChangeOptions","setTabSize","onDidChangeDecorations","onModelDecorationsChanged","setHiddenAreas","layoutInfo","lineHeight","linesAround","Math","max","round","height","partialData","startViewLineNumber","completelyVisibleStartLineNumber","endViewLineNumber","min","completelyVisibleEndLineNumber","_toModelVisibleRanges","visibleViewRange","getCompletelyVisibleViewRange","visibleRange","convertViewRangeToModelRange","hiddenAreas","getHiddenAreas","result","resultLen","startColumn","endColumn","i","len","hiddenStartLineNumber","hiddenEndLineNumber","getLinesViewportDataAtScrollTop","compatViewState","saveState","firstViewLineNumber","getLineNumberAtVerticalOffset","firstPosition","firstPositionDeltaTop","state","_reduceRestoreStateCompatibility","modelPosition","validatePosition","scrollTopWithoutViewZones","centeredLineNumber","position","column","viewportStartLineTop","minLineNumber","maxLineNumber","getActiveIndentGuide","getViewLinesIndentGuides","getViewLineContent","getViewLineLength","getViewLineMinColumn","getViewLineMaxColumn","firstNonWhitespaceIndex","getLineContent","lastNonWhitespaceIndex","getDecorationsViewportData","decorations","mightContainRTL","mightContainNonBasicASCII","getTabSize","lineData","getViewLineData","allInlineDecorations","inlineDecorations","minColumn","maxColumn","content","continuesWithWrappedLine","tokens","startVisibleColumn","needed","getViewLinesData","theme","getAllOverviewRulerDecorations","getOverviewRulerDecorations","decoration","opts","overviewRuler","invalidateCachedColor","getAllDecorations","minimap","range","eol","getValueInRange","modelLineNumber","validateRange","viewAnchorPosition","deltaOffset","lineFeedCnt","modelAnchor","getEOL","modelAnchorOffset","getOffsetAt","resultOffset","getPositionAt","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","sort","compareRangesUsingStarts","hasEmptyRange","hasNonEmptyRange","isEmpty","modelLineNumbers","map","r","prevModelLineNumber","push","languageId","id","colorMap","_getColorMap","fontFamily","mode","language","html","fontWeight","fontSize","_getHTMLToCopy","lineTokens","getLineTokens","lineContent","startOffset","endOffset","inflate","isWindows","getColorMap","Format","CSS","formatHex","pushStackElement","getPrimaryCursorState","getLastAddedCursorIndex","getCursorStates","source","reason","states","_withViewEventsCollector","setStates","getCursorColumnSelectData","columnSelectData","setCursorColumnSelectData","getPrevEditOperationType","type","setPrevEditOperationType","getSelection","getSelections","modelState","selections","setSelections","restoreState","callback","context","readOnly","edits","cursorStateComputer","_executeCursorEdit","executeEdits","setIsDoingComposition","startComposition","endComposition","text","replaceCharCnt","replacePreviousChar","pasteOnNewLine","multicursorText","paste","cut","command","executeCommand","commands","executeCommands","revealHorizontal","revealPrimary","getTopMostViewPosition","viewRange","ViewRevealRangeRequestEvent","getBottomMostViewPosition","verticalType","scrollType","viewLineNumber","newScrollTop","deltaScrollLeft","deltaScrollTop","deltaScrollNow","hadAChange","changeWhitespace","maxLineWidth","setMaxLineWidth"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Color } from '../../../base/common/color.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { TokenizationRegistry } from '../modes.js';\r\nimport { tokenizeLineToHTML } from '../modes/textToHtmlTokenizer.js';\r\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\r\nimport * as viewEvents from '../view/viewEvents.js';\r\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\r\nimport { IdentityLinesCollection, SplitLinesCollection } from './splitLinesCollection.js';\r\nimport { MinimapLinesRenderingData, ViewLineRenderingData } from './viewModel.js';\r\nimport { ViewModelDecorations } from './viewModelDecorations.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport { Cursor } from '../controller/cursor.js';\r\nimport { CursorConfiguration } from '../controller/cursorCommon.js';\r\nimport { ViewModelEventDispatcher, FocusChangedEvent, ScrollChangedEvent, ViewZonesChangedEvent, ReadOnlyEditAttemptEvent } from './viewModelEventDispatcher.js';\r\nconst USE_IDENTITY_LINES_COLLECTION = true;\r\nexport class ViewModel extends Disposable {\r\n    constructor(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame) {\r\n        super();\r\n        this._editorId = editorId;\r\n        this._configuration = configuration;\r\n        this.model = model;\r\n        this._eventDispatcher = new ViewModelEventDispatcher();\r\n        this.onEvent = this._eventDispatcher.onEvent;\r\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), this._configuration);\r\n        this._tokenizeViewportSoon = this._register(new RunOnceScheduler(() => this.tokenizeViewport(), 50));\r\n        this._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\r\n        this._hasFocus = false;\r\n        this._viewportStartLine = -1;\r\n        this._viewportStartLineTrackedRange = null;\r\n        this._viewportStartLineDelta = 0;\r\n        if (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\r\n            this._lines = new IdentityLinesCollection(this.model);\r\n        }\r\n        else {\r\n            const options = this._configuration.options;\r\n            const fontInfo = options.get(38 /* fontInfo */);\r\n            const wrappingStrategy = options.get(118 /* wrappingStrategy */);\r\n            const wrappingInfo = options.get(125 /* wrappingInfo */);\r\n            const wrappingIndent = options.get(117 /* wrappingIndent */);\r\n            this._lines = new SplitLinesCollection(this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent);\r\n        }\r\n        this.coordinatesConverter = this._lines.createCoordinatesConverter();\r\n        this._cursor = this._register(new Cursor(model, this, this.coordinatesConverter, this.cursorConfig));\r\n        this.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\r\n        this._register(this.viewLayout.onDidScroll((e) => {\r\n            if (e.scrollTopChanged) {\r\n                this._tokenizeViewportSoon.schedule();\r\n            }\r\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\r\n            this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\r\n        }));\r\n        this._register(this.viewLayout.onDidContentSizeChange((e) => {\r\n            this._eventDispatcher.emitOutgoingEvent(e);\r\n        }));\r\n        this._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\r\n        this._registerModelEvents();\r\n        this._register(this._configuration.onDidChangeFast((e) => {\r\n            try {\r\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\r\n                this._onConfigurationChanged(eventsCollector, e);\r\n            }\r\n            finally {\r\n                this._eventDispatcher.endEmitViewEvents();\r\n            }\r\n        }));\r\n        this._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\r\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\r\n        }));\r\n        this._updateConfigurationViewLineCountNow();\r\n    }\r\n    dispose() {\r\n        // First remove listeners, as disposing the lines might end up sending\r\n        // model decoration changed events ... and we no longer care about them ...\r\n        super.dispose();\r\n        this._decorations.dispose();\r\n        this._lines.dispose();\r\n        this.invalidateMinimapColorCache();\r\n        this._viewportStartLineTrackedRange = this.model._setTrackedRange(this._viewportStartLineTrackedRange, null, 1 /* NeverGrowsWhenTypingAtEdges */);\r\n        this._eventDispatcher.dispose();\r\n    }\r\n    createLineBreaksComputer() {\r\n        return this._lines.createLineBreaksComputer();\r\n    }\r\n    addViewEventHandler(eventHandler) {\r\n        this._eventDispatcher.addViewEventHandler(eventHandler);\r\n    }\r\n    removeViewEventHandler(eventHandler) {\r\n        this._eventDispatcher.removeViewEventHandler(eventHandler);\r\n    }\r\n    _updateConfigurationViewLineCountNow() {\r\n        this._configuration.setViewLineCount(this._lines.getViewLineCount());\r\n    }\r\n    tokenizeViewport() {\r\n        const linesViewportData = this.viewLayout.getLinesViewportData();\r\n        const startPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.startLineNumber, 1));\r\n        const endPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.endLineNumber, 1));\r\n        this.model.tokenizeViewport(startPosition.lineNumber, endPosition.lineNumber);\r\n    }\r\n    setHasFocus(hasFocus) {\r\n        this._hasFocus = hasFocus;\r\n        this._cursor.setHasFocus(hasFocus);\r\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\r\n        this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\r\n    }\r\n    onCompositionStart() {\r\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\r\n    }\r\n    onCompositionEnd() {\r\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\r\n    }\r\n    onDidColorThemeChange() {\r\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent());\r\n    }\r\n    _onConfigurationChanged(eventsCollector, e) {\r\n        // We might need to restore the current centered view range, so save it (if available)\r\n        let previousViewportStartModelPosition = null;\r\n        if (this._viewportStartLine !== -1) {\r\n            let previousViewportStartViewPosition = new Position(this._viewportStartLine, this.getLineMinColumn(this._viewportStartLine));\r\n            previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\r\n        }\r\n        let restorePreviousViewportStart = false;\r\n        const options = this._configuration.options;\r\n        const fontInfo = options.get(38 /* fontInfo */);\r\n        const wrappingStrategy = options.get(118 /* wrappingStrategy */);\r\n        const wrappingInfo = options.get(125 /* wrappingInfo */);\r\n        const wrappingIndent = options.get(117 /* wrappingIndent */);\r\n        if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent)) {\r\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\r\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\r\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\r\n            this._cursor.onLineMappingChanged(eventsCollector);\r\n            this._decorations.onLineMappingChanged();\r\n            this.viewLayout.onFlushed(this.getLineCount());\r\n            if (this.viewLayout.getCurrentScrollTop() !== 0) {\r\n                // Never change the scroll position from 0 to something else...\r\n                restorePreviousViewportStart = true;\r\n            }\r\n            this._updateConfigurationViewLineCount.schedule();\r\n        }\r\n        if (e.hasChanged(75 /* readOnly */)) {\r\n            // Must read again all decorations due to readOnly filtering\r\n            this._decorations.reset();\r\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\r\n        }\r\n        eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\r\n        this.viewLayout.onConfigurationChanged(e);\r\n        if (restorePreviousViewportStart && previousViewportStartModelPosition) {\r\n            const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition);\r\n            const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\r\n            this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStartLineDelta }, 1 /* Immediate */);\r\n        }\r\n        if (CursorConfiguration.shouldRecreate(e)) {\r\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), this._configuration);\r\n            this._cursor.updateConfiguration(this.cursorConfig);\r\n        }\r\n    }\r\n    _registerModelEvents() {\r\n        this._register(this.model.onDidChangeRawContentFast((e) => {\r\n            try {\r\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\r\n                let hadOtherModelChange = false;\r\n                let hadModelLineChangeThatChangedLineMapping = false;\r\n                const changes = e.changes;\r\n                const versionId = e.versionId;\r\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\r\n                const lineBreaksComputer = this._lines.createLineBreaksComputer();\r\n                for (const change of changes) {\r\n                    switch (change.changeType) {\r\n                        case 4 /* LinesInserted */: {\r\n                            for (const line of change.detail) {\r\n                                lineBreaksComputer.addRequest(line, null);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case 2 /* LineChanged */: {\r\n                            lineBreaksComputer.addRequest(change.detail, null);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                const lineBreaks = lineBreaksComputer.finalize();\r\n                let lineBreaksOffset = 0;\r\n                for (const change of changes) {\r\n                    switch (change.changeType) {\r\n                        case 1 /* Flush */: {\r\n                            this._lines.onModelFlushed();\r\n                            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\r\n                            this._decorations.reset();\r\n                            this.viewLayout.onFlushed(this.getLineCount());\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 3 /* LinesDeleted */: {\r\n                            const linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\r\n                            if (linesDeletedEvent !== null) {\r\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\r\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\r\n                            }\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 4 /* LinesInserted */: {\r\n                            const insertedLineBreaks = lineBreaks.slice(lineBreaksOffset, lineBreaksOffset + change.detail.length);\r\n                            lineBreaksOffset += change.detail.length;\r\n                            const linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\r\n                            if (linesInsertedEvent !== null) {\r\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\r\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\r\n                            }\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 2 /* LineChanged */: {\r\n                            const changedLineBreakData = lineBreaks[lineBreaksOffset];\r\n                            lineBreaksOffset++;\r\n                            const [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\r\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\r\n                            if (linesChangedEvent) {\r\n                                eventsCollector.emitViewEvent(linesChangedEvent);\r\n                            }\r\n                            if (linesInsertedEvent) {\r\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\r\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\r\n                            }\r\n                            if (linesDeletedEvent) {\r\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\r\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case 5 /* EOLChanged */: {\r\n                            // Nothing to do. The new version will be accepted below\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                this._lines.acceptVersionId(versionId);\r\n                this.viewLayout.onHeightMaybeChanged();\r\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\r\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\r\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\r\n                    this._cursor.onLineMappingChanged(eventsCollector);\r\n                    this._decorations.onLineMappingChanged();\r\n                }\r\n            }\r\n            finally {\r\n                this._eventDispatcher.endEmitViewEvents();\r\n            }\r\n            // Update the configuration and reset the centered view line\r\n            this._viewportStartLine = -1;\r\n            this._configuration.setMaxLineNumber(this.model.getLineCount());\r\n            this._updateConfigurationViewLineCountNow();\r\n            // Recover viewport\r\n            if (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && this._viewportStartLineTrackedRange) {\r\n                const modelRange = this.model._getTrackedRange(this._viewportStartLineTrackedRange);\r\n                if (modelRange) {\r\n                    const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\r\n                    const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\r\n                    this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStartLineDelta }, 1 /* Immediate */);\r\n                }\r\n            }\r\n            try {\r\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\r\n                this._cursor.onModelContentChanged(eventsCollector, e);\r\n            }\r\n            finally {\r\n                this._eventDispatcher.endEmitViewEvents();\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeTokens((e) => {\r\n            let viewRanges = [];\r\n            for (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\r\n                const modelRange = e.ranges[j];\r\n                const viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\r\n                const viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\r\n                viewRanges[j] = {\r\n                    fromLineNumber: viewStartLineNumber,\r\n                    toLineNumber: viewEndLineNumber\r\n                };\r\n            }\r\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\r\n            if (e.tokenizationSupportChanged) {\r\n                this._tokenizeViewportSoon.schedule();\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeLanguageConfiguration((e) => {\r\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\r\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), this._configuration);\r\n            this._cursor.updateConfiguration(this.cursorConfig);\r\n        }));\r\n        this._register(this.model.onDidChangeLanguage((e) => {\r\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), this._configuration);\r\n            this._cursor.updateConfiguration(this.cursorConfig);\r\n        }));\r\n        this._register(this.model.onDidChangeOptions((e) => {\r\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\r\n            if (this._lines.setTabSize(this.model.getOptions().tabSize)) {\r\n                try {\r\n                    const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\r\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\r\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\r\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\r\n                    this._cursor.onLineMappingChanged(eventsCollector);\r\n                    this._decorations.onLineMappingChanged();\r\n                    this.viewLayout.onFlushed(this.getLineCount());\r\n                }\r\n                finally {\r\n                    this._eventDispatcher.endEmitViewEvents();\r\n                }\r\n                this._updateConfigurationViewLineCount.schedule();\r\n            }\r\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), this._configuration);\r\n            this._cursor.updateConfiguration(this.cursorConfig);\r\n        }));\r\n        this._register(this.model.onDidChangeDecorations((e) => {\r\n            this._decorations.onModelDecorationsChanged();\r\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\r\n        }));\r\n    }\r\n    setHiddenAreas(ranges) {\r\n        try {\r\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\r\n            let lineMappingChanged = this._lines.setHiddenAreas(ranges);\r\n            if (lineMappingChanged) {\r\n                eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\r\n                eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\r\n                eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\r\n                this._cursor.onLineMappingChanged(eventsCollector);\r\n                this._decorations.onLineMappingChanged();\r\n                this.viewLayout.onFlushed(this.getLineCount());\r\n                this.viewLayout.onHeightMaybeChanged();\r\n            }\r\n        }\r\n        finally {\r\n            this._eventDispatcher.endEmitViewEvents();\r\n        }\r\n        this._updateConfigurationViewLineCount.schedule();\r\n    }\r\n    getVisibleRangesPlusViewportAboveBelow() {\r\n        const layoutInfo = this._configuration.options.get(124 /* layoutInfo */);\r\n        const lineHeight = this._configuration.options.get(53 /* lineHeight */);\r\n        const linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\r\n        const partialData = this.viewLayout.getLinesViewportData();\r\n        const startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\r\n        const endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\r\n        return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\r\n    }\r\n    getVisibleRanges() {\r\n        const visibleViewRange = this.getCompletelyVisibleViewRange();\r\n        return this._toModelVisibleRanges(visibleViewRange);\r\n    }\r\n    _toModelVisibleRanges(visibleViewRange) {\r\n        const visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\r\n        const hiddenAreas = this._lines.getHiddenAreas();\r\n        if (hiddenAreas.length === 0) {\r\n            return [visibleRange];\r\n        }\r\n        let result = [], resultLen = 0;\r\n        let startLineNumber = visibleRange.startLineNumber;\r\n        let startColumn = visibleRange.startColumn;\r\n        let endLineNumber = visibleRange.endLineNumber;\r\n        let endColumn = visibleRange.endColumn;\r\n        for (let i = 0, len = hiddenAreas.length; i < len; i++) {\r\n            const hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\r\n            const hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\r\n            if (hiddenEndLineNumber < startLineNumber) {\r\n                continue;\r\n            }\r\n            if (hiddenStartLineNumber > endLineNumber) {\r\n                continue;\r\n            }\r\n            if (startLineNumber < hiddenStartLineNumber) {\r\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\r\n            }\r\n            startLineNumber = hiddenEndLineNumber + 1;\r\n            startColumn = 1;\r\n        }\r\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\r\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n        }\r\n        return result;\r\n    }\r\n    getCompletelyVisibleViewRange() {\r\n        const partialData = this.viewLayout.getLinesViewportData();\r\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\r\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\r\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\r\n    }\r\n    getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\r\n        const partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\r\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\r\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\r\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\r\n    }\r\n    saveState() {\r\n        const compatViewState = this.viewLayout.saveState();\r\n        const scrollTop = compatViewState.scrollTop;\r\n        const firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\r\n        const firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\r\n        const firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\r\n        return {\r\n            scrollLeft: compatViewState.scrollLeft,\r\n            firstPosition: firstPosition,\r\n            firstPositionDeltaTop: firstPositionDeltaTop\r\n        };\r\n    }\r\n    reduceRestoreState(state) {\r\n        if (typeof state.firstPosition === 'undefined') {\r\n            // This is a view state serialized by an older version\r\n            return this._reduceRestoreStateCompatibility(state);\r\n        }\r\n        const modelPosition = this.model.validatePosition(state.firstPosition);\r\n        const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\r\n        const scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\r\n        return {\r\n            scrollLeft: state.scrollLeft,\r\n            scrollTop: scrollTop\r\n        };\r\n    }\r\n    _reduceRestoreStateCompatibility(state) {\r\n        return {\r\n            scrollLeft: state.scrollLeft,\r\n            scrollTop: state.scrollTopWithoutViewZones\r\n        };\r\n    }\r\n    getTabSize() {\r\n        return this.model.getOptions().tabSize;\r\n    }\r\n    getTextModelOptions() {\r\n        return this.model.getOptions();\r\n    }\r\n    getLineCount() {\r\n        return this._lines.getViewLineCount();\r\n    }\r\n    /**\r\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\r\n     */\r\n    setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\r\n        this._viewportStartLine = startLineNumber;\r\n        let position = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, this.getLineMinColumn(startLineNumber)));\r\n        this._viewportStartLineTrackedRange = this.model._setTrackedRange(this._viewportStartLineTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* NeverGrowsWhenTypingAtEdges */);\r\n        const viewportStartLineTop = this.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\r\n        const scrollTop = this.viewLayout.getCurrentScrollTop();\r\n        this._viewportStartLineDelta = scrollTop - viewportStartLineTop;\r\n    }\r\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\r\n        return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\r\n    }\r\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\r\n        return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\r\n    }\r\n    getLineContent(lineNumber) {\r\n        return this._lines.getViewLineContent(lineNumber);\r\n    }\r\n    getLineLength(lineNumber) {\r\n        return this._lines.getViewLineLength(lineNumber);\r\n    }\r\n    getLineMinColumn(lineNumber) {\r\n        return this._lines.getViewLineMinColumn(lineNumber);\r\n    }\r\n    getLineMaxColumn(lineNumber) {\r\n        return this._lines.getViewLineMaxColumn(lineNumber);\r\n    }\r\n    getLineFirstNonWhitespaceColumn(lineNumber) {\r\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\r\n        if (result === -1) {\r\n            return 0;\r\n        }\r\n        return result + 1;\r\n    }\r\n    getLineLastNonWhitespaceColumn(lineNumber) {\r\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\r\n        if (result === -1) {\r\n            return 0;\r\n        }\r\n        return result + 2;\r\n    }\r\n    getDecorationsInViewport(visibleRange) {\r\n        return this._decorations.getDecorationsViewportData(visibleRange).decorations;\r\n    }\r\n    getViewLineRenderingData(visibleRange, lineNumber) {\r\n        let mightContainRTL = this.model.mightContainRTL();\r\n        let mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\r\n        let tabSize = this.getTabSize();\r\n        let lineData = this._lines.getViewLineData(lineNumber);\r\n        let allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\r\n        let inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\r\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\r\n    }\r\n    getViewLineData(lineNumber) {\r\n        return this._lines.getViewLineData(lineNumber);\r\n    }\r\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\r\n        let result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\r\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\r\n    }\r\n    getAllOverviewRulerDecorations(theme) {\r\n        return this._lines.getAllOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options), theme);\r\n    }\r\n    invalidateOverviewRulerColorCache() {\r\n        const decorations = this.model.getOverviewRulerDecorations();\r\n        for (const decoration of decorations) {\r\n            const opts = decoration.options.overviewRuler;\r\n            if (opts) {\r\n                opts.invalidateCachedColor();\r\n            }\r\n        }\r\n    }\r\n    invalidateMinimapColorCache() {\r\n        const decorations = this.model.getAllDecorations();\r\n        for (const decoration of decorations) {\r\n            const opts = decoration.options.minimap;\r\n            if (opts) {\r\n                opts.invalidateCachedColor();\r\n            }\r\n        }\r\n    }\r\n    getValueInRange(range, eol) {\r\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\r\n        return this.model.getValueInRange(modelRange, eol);\r\n    }\r\n    getModelLineMaxColumn(modelLineNumber) {\r\n        return this.model.getLineMaxColumn(modelLineNumber);\r\n    }\r\n    validateModelPosition(position) {\r\n        return this.model.validatePosition(position);\r\n    }\r\n    validateModelRange(range) {\r\n        return this.model.validateRange(range);\r\n    }\r\n    deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\r\n        const modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\r\n        if (this.model.getEOL().length === 2) {\r\n            // This model uses CRLF, so the delta must take that into account\r\n            if (deltaOffset < 0) {\r\n                deltaOffset -= lineFeedCnt;\r\n            }\r\n            else {\r\n                deltaOffset += lineFeedCnt;\r\n            }\r\n        }\r\n        const modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\r\n        const resultOffset = modelAnchorOffset + deltaOffset;\r\n        return this.model.getPositionAt(resultOffset);\r\n    }\r\n    getEOL() {\r\n        return this.model.getEOL();\r\n    }\r\n    getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\r\n        const newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\r\n        modelRanges = modelRanges.slice(0);\r\n        modelRanges.sort(Range.compareRangesUsingStarts);\r\n        let hasEmptyRange = false;\r\n        let hasNonEmptyRange = false;\r\n        for (const range of modelRanges) {\r\n            if (range.isEmpty()) {\r\n                hasEmptyRange = true;\r\n            }\r\n            else {\r\n                hasNonEmptyRange = true;\r\n            }\r\n        }\r\n        if (!hasNonEmptyRange) {\r\n            // all ranges are empty\r\n            if (!emptySelectionClipboard) {\r\n                return '';\r\n            }\r\n            const modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\r\n            let result = '';\r\n            for (let i = 0; i < modelLineNumbers.length; i++) {\r\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\r\n                    continue;\r\n                }\r\n                result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\r\n            }\r\n            return result;\r\n        }\r\n        if (hasEmptyRange && emptySelectionClipboard) {\r\n            // mixed empty selections and non-empty selections\r\n            let result = [];\r\n            let prevModelLineNumber = 0;\r\n            for (const modelRange of modelRanges) {\r\n                const modelLineNumber = modelRange.startLineNumber;\r\n                if (modelRange.isEmpty()) {\r\n                    if (modelLineNumber !== prevModelLineNumber) {\r\n                        result.push(this.model.getLineContent(modelLineNumber));\r\n                    }\r\n                }\r\n                else {\r\n                    result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* CRLF */ : 0 /* TextDefined */));\r\n                }\r\n                prevModelLineNumber = modelLineNumber;\r\n            }\r\n            return result.length === 1 ? result[0] : result;\r\n        }\r\n        let result = [];\r\n        for (const modelRange of modelRanges) {\r\n            if (!modelRange.isEmpty()) {\r\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* CRLF */ : 0 /* TextDefined */));\r\n            }\r\n        }\r\n        return result.length === 1 ? result[0] : result;\r\n    }\r\n    getRichTextToCopy(modelRanges, emptySelectionClipboard) {\r\n        const languageId = this.model.getLanguageIdentifier();\r\n        if (languageId.id === 1 /* PlainText */) {\r\n            return null;\r\n        }\r\n        if (modelRanges.length !== 1) {\r\n            // no multiple selection support at this time\r\n            return null;\r\n        }\r\n        let range = modelRanges[0];\r\n        if (range.isEmpty()) {\r\n            if (!emptySelectionClipboard) {\r\n                // nothing to copy\r\n                return null;\r\n            }\r\n            const lineNumber = range.startLineNumber;\r\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\r\n        }\r\n        const fontInfo = this._configuration.options.get(38 /* fontInfo */);\r\n        const colorMap = this._getColorMap();\r\n        const fontFamily = fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily ? fontInfo.fontFamily : `'${fontInfo.fontFamily}', ${EDITOR_FONT_DEFAULTS.fontFamily}`;\r\n        return {\r\n            mode: languageId.language,\r\n            html: (`<div style=\"`\r\n                + `color: ${colorMap[1 /* DefaultForeground */]};`\r\n                + `background-color: ${colorMap[2 /* DefaultBackground */]};`\r\n                + `font-family: ${fontFamily};`\r\n                + `font-weight: ${fontInfo.fontWeight};`\r\n                + `font-size: ${fontInfo.fontSize}px;`\r\n                + `line-height: ${fontInfo.lineHeight}px;`\r\n                + `white-space: pre;`\r\n                + `\">`\r\n                + this._getHTMLToCopy(range, colorMap)\r\n                + '</div>')\r\n        };\r\n    }\r\n    _getHTMLToCopy(modelRange, colorMap) {\r\n        const startLineNumber = modelRange.startLineNumber;\r\n        const startColumn = modelRange.startColumn;\r\n        const endLineNumber = modelRange.endLineNumber;\r\n        const endColumn = modelRange.endColumn;\r\n        const tabSize = this.getTabSize();\r\n        let result = '';\r\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            const lineTokens = this.model.getLineTokens(lineNumber);\r\n            const lineContent = lineTokens.getLineContent();\r\n            const startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\r\n            const endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\r\n            if (lineContent === '') {\r\n                result += '<br>';\r\n            }\r\n            else {\r\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    _getColorMap() {\r\n        let colorMap = TokenizationRegistry.getColorMap();\r\n        let result = ['#000000'];\r\n        if (colorMap) {\r\n            for (let i = 1, len = colorMap.length; i < len; i++) {\r\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    //#region model\r\n    pushStackElement() {\r\n        this.model.pushStackElement();\r\n    }\r\n    //#endregion\r\n    //#region cursor operations\r\n    getPrimaryCursorState() {\r\n        return this._cursor.getPrimaryCursorState();\r\n    }\r\n    getLastAddedCursorIndex() {\r\n        return this._cursor.getLastAddedCursorIndex();\r\n    }\r\n    getCursorStates() {\r\n        return this._cursor.getCursorStates();\r\n    }\r\n    setCursorStates(source, reason, states) {\r\n        this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\r\n    }\r\n    getCursorColumnSelectData() {\r\n        return this._cursor.getCursorColumnSelectData();\r\n    }\r\n    setCursorColumnSelectData(columnSelectData) {\r\n        this._cursor.setCursorColumnSelectData(columnSelectData);\r\n    }\r\n    getPrevEditOperationType() {\r\n        return this._cursor.getPrevEditOperationType();\r\n    }\r\n    setPrevEditOperationType(type) {\r\n        this._cursor.setPrevEditOperationType(type);\r\n    }\r\n    getSelection() {\r\n        return this._cursor.getSelection();\r\n    }\r\n    getSelections() {\r\n        return this._cursor.getSelections();\r\n    }\r\n    getPosition() {\r\n        return this._cursor.getPrimaryCursorState().modelState.position;\r\n    }\r\n    setSelections(source, selections, reason = 0 /* NotSet */) {\r\n        this._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\r\n    }\r\n    saveCursorState() {\r\n        return this._cursor.saveState();\r\n    }\r\n    restoreCursorState(states) {\r\n        this._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\r\n    }\r\n    _executeCursorEdit(callback) {\r\n        if (this._cursor.context.cursorConfig.readOnly) {\r\n            // we cannot edit when read only...\r\n            this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\r\n            return;\r\n        }\r\n        this._withViewEventsCollector(callback);\r\n    }\r\n    executeEdits(source, edits, cursorStateComputer) {\r\n        this._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\r\n    }\r\n    startComposition() {\r\n        this._cursor.setIsDoingComposition(true);\r\n        this._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\r\n    }\r\n    endComposition(source) {\r\n        this._cursor.setIsDoingComposition(false);\r\n        this._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\r\n    }\r\n    type(text, source) {\r\n        this._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\r\n    }\r\n    replacePreviousChar(text, replaceCharCnt, source) {\r\n        this._executeCursorEdit(eventsCollector => this._cursor.replacePreviousChar(eventsCollector, text, replaceCharCnt, source));\r\n    }\r\n    paste(text, pasteOnNewLine, multicursorText, source) {\r\n        this._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\r\n    }\r\n    cut(source) {\r\n        this._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\r\n    }\r\n    executeCommand(command, source) {\r\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\r\n    }\r\n    executeCommands(commands, source) {\r\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\r\n    }\r\n    revealPrimaryCursor(source, revealHorizontal) {\r\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, revealHorizontal, 0 /* Smooth */));\r\n    }\r\n    revealTopMostCursor(source) {\r\n        const viewPosition = this._cursor.getTopMostViewPosition();\r\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\r\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, viewRange, null, 0 /* Simple */, true, 0 /* Smooth */)));\r\n    }\r\n    revealBottomMostCursor(source) {\r\n        const viewPosition = this._cursor.getBottomMostViewPosition();\r\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\r\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, viewRange, null, 0 /* Simple */, true, 0 /* Smooth */)));\r\n    }\r\n    revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\r\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, viewRange, null, verticalType, revealHorizontal, scrollType)));\r\n    }\r\n    //#endregion\r\n    //#region viewLayout\r\n    getVerticalOffsetForLineNumber(viewLineNumber) {\r\n        return this.viewLayout.getVerticalOffsetForLineNumber(viewLineNumber);\r\n    }\r\n    getScrollTop() {\r\n        return this.viewLayout.getCurrentScrollTop();\r\n    }\r\n    setScrollTop(newScrollTop, scrollType) {\r\n        this.viewLayout.setScrollPosition({ scrollTop: newScrollTop }, scrollType);\r\n    }\r\n    setScrollPosition(position, type) {\r\n        this.viewLayout.setScrollPosition(position, type);\r\n    }\r\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\r\n        this.viewLayout.deltaScrollNow(deltaScrollLeft, deltaScrollTop);\r\n    }\r\n    changeWhitespace(callback) {\r\n        const hadAChange = this.viewLayout.changeWhitespace(callback);\r\n        if (hadAChange) {\r\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\r\n            this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\r\n        }\r\n    }\r\n    setMaxLineWidth(maxLineWidth) {\r\n        this.viewLayout.setMaxLineWidth(maxLineWidth);\r\n    }\r\n    //#endregion\r\n    _withViewEventsCollector(callback) {\r\n        try {\r\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\r\n            callback(eventsCollector);\r\n        }\r\n        finally {\r\n            this._eventDispatcher.endEmitViewEvents();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}