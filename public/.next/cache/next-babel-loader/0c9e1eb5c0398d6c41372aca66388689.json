{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { IndentAction } from '../languageConfiguration.js';\nexport var OnEnterSupport = /*#__PURE__*/function () {\n  function OnEnterSupport(opts) {\n    var _this = this;\n\n    _classCallCheck(this, OnEnterSupport);\n\n    opts = opts || {};\n    opts.brackets = opts.brackets || [['(', ')'], ['{', '}'], ['[', ']']];\n    this._brackets = [];\n    opts.brackets.forEach(function (bracket) {\n      var openRegExp = OnEnterSupport._createOpenBracketRegExp(bracket[0]);\n\n      var closeRegExp = OnEnterSupport._createCloseBracketRegExp(bracket[1]);\n\n      if (openRegExp && closeRegExp) {\n        _this._brackets.push({\n          open: bracket[0],\n          openRegExp: openRegExp,\n          close: bracket[1],\n          closeRegExp: closeRegExp\n        });\n      }\n    });\n    this._regExpRules = opts.onEnterRules || [];\n  }\n\n  _createClass(OnEnterSupport, [{\n    key: \"onEnter\",\n    value: function onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n      // (1): `regExpRules`\n      if (autoIndent >= 3\n      /* Advanced */\n      ) {\n          for (var i = 0, len = this._regExpRules.length; i < len; i++) {\n            var rule = this._regExpRules[i];\n            var regResult = [{\n              reg: rule.beforeText,\n              text: beforeEnterText\n            }, {\n              reg: rule.afterText,\n              text: afterEnterText\n            }, {\n              reg: rule.previousLineText,\n              text: previousLineText\n            }].every(function (obj) {\n              return obj.reg ? obj.reg.test(obj.text) : true;\n            });\n\n            if (regResult) {\n              return rule.action;\n            }\n          }\n        } // (2): Special indent-outdent\n\n\n      if (autoIndent >= 2\n      /* Brackets */\n      ) {\n          if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\n            for (var _i = 0, _len = this._brackets.length; _i < _len; _i++) {\n              var bracket = this._brackets[_i];\n\n              if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\n                return {\n                  indentAction: IndentAction.IndentOutdent\n                };\n              }\n            }\n          }\n        } // (4): Open bracket based logic\n\n\n      if (autoIndent >= 2\n      /* Brackets */\n      ) {\n          if (beforeEnterText.length > 0) {\n            for (var _i2 = 0, _len2 = this._brackets.length; _i2 < _len2; _i2++) {\n              var _bracket = this._brackets[_i2];\n\n              if (_bracket.openRegExp.test(beforeEnterText)) {\n                return {\n                  indentAction: IndentAction.Indent\n                };\n              }\n            }\n          }\n        }\n\n      return null;\n    }\n  }], [{\n    key: \"_createOpenBracketRegExp\",\n    value: function _createOpenBracketRegExp(bracket) {\n      var str = strings.escapeRegExpCharacters(bracket);\n\n      if (!/\\B/.test(str.charAt(0))) {\n        str = '\\\\b' + str;\n      }\n\n      str += '\\\\s*$';\n      return OnEnterSupport._safeRegExp(str);\n    }\n  }, {\n    key: \"_createCloseBracketRegExp\",\n    value: function _createCloseBracketRegExp(bracket) {\n      var str = strings.escapeRegExpCharacters(bracket);\n\n      if (!/\\B/.test(str.charAt(str.length - 1))) {\n        str = str + '\\\\b';\n      }\n\n      str = '^\\\\s*' + str;\n      return OnEnterSupport._safeRegExp(str);\n    }\n  }, {\n    key: \"_safeRegExp\",\n    value: function _safeRegExp(def) {\n      try {\n        return new RegExp(def);\n      } catch (err) {\n        onUnexpectedError(err);\n        return null;\n      }\n    }\n  }]);\n\n  return OnEnterSupport;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/onEnter.js"],"names":["onUnexpectedError","strings","IndentAction","OnEnterSupport","opts","brackets","_brackets","forEach","bracket","openRegExp","_createOpenBracketRegExp","closeRegExp","_createCloseBracketRegExp","push","open","close","_regExpRules","onEnterRules","autoIndent","previousLineText","beforeEnterText","afterEnterText","i","len","length","rule","regResult","reg","beforeText","text","afterText","every","obj","test","action","indentAction","IndentOutdent","Indent","str","escapeRegExpCharacters","charAt","_safeRegExp","def","RegExp","err"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,mCAAlC;AACA,OAAO,KAAKC,OAAZ,MAAyB,oCAAzB;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,WAAaC,cAAb;AACI,0BAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AACdA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAA,IAAAA,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACC,QAAL,IAAiB,CAC7B,CAAC,GAAD,EAAM,GAAN,CAD6B,EAE7B,CAAC,GAAD,EAAM,GAAN,CAF6B,EAG7B,CAAC,GAAD,EAAM,GAAN,CAH6B,CAAjC;AAKA,SAAKC,SAAL,GAAiB,EAAjB;AACAF,IAAAA,IAAI,CAACC,QAAL,CAAcE,OAAd,CAAsB,UAACC,OAAD,EAAa;AAC/B,UAAMC,UAAU,GAAGN,cAAc,CAACO,wBAAf,CAAwCF,OAAO,CAAC,CAAD,CAA/C,CAAnB;;AACA,UAAMG,WAAW,GAAGR,cAAc,CAACS,yBAAf,CAAyCJ,OAAO,CAAC,CAAD,CAAhD,CAApB;;AACA,UAAIC,UAAU,IAAIE,WAAlB,EAA+B;AAC3B,QAAA,KAAI,CAACL,SAAL,CAAeO,IAAf,CAAoB;AAChBC,UAAAA,IAAI,EAAEN,OAAO,CAAC,CAAD,CADG;AAEhBC,UAAAA,UAAU,EAAEA,UAFI;AAGhBM,UAAAA,KAAK,EAAEP,OAAO,CAAC,CAAD,CAHE;AAIhBG,UAAAA,WAAW,EAAEA;AAJG,SAApB;AAMH;AACJ,KAXD;AAYA,SAAKK,YAAL,GAAoBZ,IAAI,CAACa,YAAL,IAAqB,EAAzC;AACH;;AAtBL;AAAA;AAAA,4BAuBYC,UAvBZ,EAuBwBC,gBAvBxB,EAuB0CC,eAvB1C,EAuB2DC,cAvB3D,EAuB2E;AACnE;AACA,UAAIH,UAAU,IAAI;AAAE;AAApB,QAAoC;AAChC,eAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG,KAAKP,YAAL,CAAkBQ,MAAxC,EAAgDF,CAAC,GAAGC,GAApD,EAAyDD,CAAC,EAA1D,EAA8D;AAC1D,gBAAIG,IAAI,GAAG,KAAKT,YAAL,CAAkBM,CAAlB,CAAX;AACA,gBAAMI,SAAS,GAAG,CAAC;AACXC,cAAAA,GAAG,EAAEF,IAAI,CAACG,UADC;AAEXC,cAAAA,IAAI,EAAET;AAFK,aAAD,EAGX;AACCO,cAAAA,GAAG,EAAEF,IAAI,CAACK,SADX;AAECD,cAAAA,IAAI,EAAER;AAFP,aAHW,EAMX;AACCM,cAAAA,GAAG,EAAEF,IAAI,CAACN,gBADX;AAECU,cAAAA,IAAI,EAAEV;AAFP,aANW,EASXY,KATW,CASL,UAACC,GAAD,EAAS;AAClB,qBAAOA,GAAG,CAACL,GAAJ,GAAUK,GAAG,CAACL,GAAJ,CAAQM,IAAR,CAAaD,GAAG,CAACH,IAAjB,CAAV,GAAmC,IAA1C;AACH,aAXiB,CAAlB;;AAYA,gBAAIH,SAAJ,EAAe;AACX,qBAAOD,IAAI,CAACS,MAAZ;AACH;AACJ;AACJ,SArBkE,CAsBnE;;;AACA,UAAIhB,UAAU,IAAI;AAAE;AAApB,QAAoC;AAChC,cAAIE,eAAe,CAACI,MAAhB,GAAyB,CAAzB,IAA8BH,cAAc,CAACG,MAAf,GAAwB,CAA1D,EAA6D;AACzD,iBAAK,IAAIF,EAAC,GAAG,CAAR,EAAWC,IAAG,GAAG,KAAKjB,SAAL,CAAekB,MAArC,EAA6CF,EAAC,GAAGC,IAAjD,EAAsDD,EAAC,EAAvD,EAA2D;AACvD,kBAAId,OAAO,GAAG,KAAKF,SAAL,CAAegB,EAAf,CAAd;;AACA,kBAAId,OAAO,CAACC,UAAR,CAAmBwB,IAAnB,CAAwBb,eAAxB,KAA4CZ,OAAO,CAACG,WAAR,CAAoBsB,IAApB,CAAyBZ,cAAzB,CAAhD,EAA0F;AACtF,uBAAO;AAAEc,kBAAAA,YAAY,EAAEjC,YAAY,CAACkC;AAA7B,iBAAP;AACH;AACJ;AACJ;AACJ,SAhCkE,CAiCnE;;;AACA,UAAIlB,UAAU,IAAI;AAAE;AAApB,QAAoC;AAChC,cAAIE,eAAe,CAACI,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,iBAAK,IAAIF,GAAC,GAAG,CAAR,EAAWC,KAAG,GAAG,KAAKjB,SAAL,CAAekB,MAArC,EAA6CF,GAAC,GAAGC,KAAjD,EAAsDD,GAAC,EAAvD,EAA2D;AACvD,kBAAId,QAAO,GAAG,KAAKF,SAAL,CAAegB,GAAf,CAAd;;AACA,kBAAId,QAAO,CAACC,UAAR,CAAmBwB,IAAnB,CAAwBb,eAAxB,CAAJ,EAA8C;AAC1C,uBAAO;AAAEe,kBAAAA,YAAY,EAAEjC,YAAY,CAACmC;AAA7B,iBAAP;AACH;AACJ;AACJ;AACJ;;AACD,aAAO,IAAP;AACH;AApEL;AAAA;AAAA,6CAqEoC7B,OArEpC,EAqE6C;AACrC,UAAI8B,GAAG,GAAGrC,OAAO,CAACsC,sBAAR,CAA+B/B,OAA/B,CAAV;;AACA,UAAI,CAAC,KAAKyB,IAAL,CAAUK,GAAG,CAACE,MAAJ,CAAW,CAAX,CAAV,CAAL,EAA+B;AAC3BF,QAAAA,GAAG,GAAG,QAAQA,GAAd;AACH;;AACDA,MAAAA,GAAG,IAAI,OAAP;AACA,aAAOnC,cAAc,CAACsC,WAAf,CAA2BH,GAA3B,CAAP;AACH;AA5EL;AAAA;AAAA,8CA6EqC9B,OA7ErC,EA6E8C;AACtC,UAAI8B,GAAG,GAAGrC,OAAO,CAACsC,sBAAR,CAA+B/B,OAA/B,CAAV;;AACA,UAAI,CAAC,KAAKyB,IAAL,CAAUK,GAAG,CAACE,MAAJ,CAAWF,GAAG,CAACd,MAAJ,GAAa,CAAxB,CAAV,CAAL,EAA4C;AACxCc,QAAAA,GAAG,GAAGA,GAAG,GAAG,KAAZ;AACH;;AACDA,MAAAA,GAAG,GAAG,UAAUA,GAAhB;AACA,aAAOnC,cAAc,CAACsC,WAAf,CAA2BH,GAA3B,CAAP;AACH;AApFL;AAAA;AAAA,gCAqFuBI,GArFvB,EAqF4B;AACpB,UAAI;AACA,eAAO,IAAIC,MAAJ,CAAWD,GAAX,CAAP;AACH,OAFD,CAGA,OAAOE,GAAP,EAAY;AACR5C,QAAAA,iBAAiB,CAAC4C,GAAD,CAAjB;AACA,eAAO,IAAP;AACH;AACJ;AA7FL;;AAAA;AAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\r\nimport * as strings from '../../../../base/common/strings.js';\r\nimport { IndentAction } from '../languageConfiguration.js';\r\nexport class OnEnterSupport {\r\n    constructor(opts) {\r\n        opts = opts || {};\r\n        opts.brackets = opts.brackets || [\r\n            ['(', ')'],\r\n            ['{', '}'],\r\n            ['[', ']']\r\n        ];\r\n        this._brackets = [];\r\n        opts.brackets.forEach((bracket) => {\r\n            const openRegExp = OnEnterSupport._createOpenBracketRegExp(bracket[0]);\r\n            const closeRegExp = OnEnterSupport._createCloseBracketRegExp(bracket[1]);\r\n            if (openRegExp && closeRegExp) {\r\n                this._brackets.push({\r\n                    open: bracket[0],\r\n                    openRegExp: openRegExp,\r\n                    close: bracket[1],\r\n                    closeRegExp: closeRegExp,\r\n                });\r\n            }\r\n        });\r\n        this._regExpRules = opts.onEnterRules || [];\r\n    }\r\n    onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\r\n        // (1): `regExpRules`\r\n        if (autoIndent >= 3 /* Advanced */) {\r\n            for (let i = 0, len = this._regExpRules.length; i < len; i++) {\r\n                let rule = this._regExpRules[i];\r\n                const regResult = [{\r\n                        reg: rule.beforeText,\r\n                        text: beforeEnterText\r\n                    }, {\r\n                        reg: rule.afterText,\r\n                        text: afterEnterText\r\n                    }, {\r\n                        reg: rule.previousLineText,\r\n                        text: previousLineText\r\n                    }].every((obj) => {\r\n                    return obj.reg ? obj.reg.test(obj.text) : true;\r\n                });\r\n                if (regResult) {\r\n                    return rule.action;\r\n                }\r\n            }\r\n        }\r\n        // (2): Special indent-outdent\r\n        if (autoIndent >= 2 /* Brackets */) {\r\n            if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\r\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\r\n                    let bracket = this._brackets[i];\r\n                    if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\r\n                        return { indentAction: IndentAction.IndentOutdent };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // (4): Open bracket based logic\r\n        if (autoIndent >= 2 /* Brackets */) {\r\n            if (beforeEnterText.length > 0) {\r\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\r\n                    let bracket = this._brackets[i];\r\n                    if (bracket.openRegExp.test(beforeEnterText)) {\r\n                        return { indentAction: IndentAction.Indent };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    static _createOpenBracketRegExp(bracket) {\r\n        let str = strings.escapeRegExpCharacters(bracket);\r\n        if (!/\\B/.test(str.charAt(0))) {\r\n            str = '\\\\b' + str;\r\n        }\r\n        str += '\\\\s*$';\r\n        return OnEnterSupport._safeRegExp(str);\r\n    }\r\n    static _createCloseBracketRegExp(bracket) {\r\n        let str = strings.escapeRegExpCharacters(bracket);\r\n        if (!/\\B/.test(str.charAt(str.length - 1))) {\r\n            str = str + '\\\\b';\r\n        }\r\n        str = '^\\\\s*' + str;\r\n        return OnEnterSupport._safeRegExp(str);\r\n    }\r\n    static _safeRegExp(def) {\r\n        try {\r\n            return new RegExp(def);\r\n        }\r\n        catch (err) {\r\n            onUnexpectedError(err);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}