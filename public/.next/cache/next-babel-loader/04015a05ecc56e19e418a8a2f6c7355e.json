{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { TextModel } from '../model/textModel.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\n\nvar autoCloseAlways = function autoCloseAlways() {\n  return true;\n};\n\nvar autoCloseNever = function autoCloseNever() {\n  return false;\n};\n\nvar autoCloseBeforeWhitespace = function autoCloseBeforeWhitespace(chr) {\n  return chr === ' ' || chr === '\\t';\n};\n\nexport var CursorConfiguration = /*#__PURE__*/function () {\n  function CursorConfiguration(languageIdentifier, modelOptions, configuration) {\n    _classCallCheck(this, CursorConfiguration);\n\n    this._languageIdentifier = languageIdentifier;\n    var options = configuration.options;\n    var layoutInfo = options.get(124\n    /* layoutInfo */\n    );\n    this.readOnly = options.get(75\n    /* readOnly */\n    );\n    this.tabSize = modelOptions.tabSize;\n    this.indentSize = modelOptions.indentSize;\n    this.insertSpaces = modelOptions.insertSpaces;\n    this.stickyTabStops = options.get(99\n    /* stickyTabStops */\n    );\n    this.lineHeight = options.get(53\n    /* lineHeight */\n    );\n    this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n    this.useTabStops = options.get(109\n    /* useTabStops */\n    );\n    this.wordSeparators = options.get(110\n    /* wordSeparators */\n    );\n    this.emptySelectionClipboard = options.get(28\n    /* emptySelectionClipboard */\n    );\n    this.copyWithSyntaxHighlighting = options.get(18\n    /* copyWithSyntaxHighlighting */\n    );\n    this.multiCursorMergeOverlapping = options.get(63\n    /* multiCursorMergeOverlapping */\n    );\n    this.multiCursorPaste = options.get(65\n    /* multiCursorPaste */\n    );\n    this.autoClosingBrackets = options.get(5\n    /* autoClosingBrackets */\n    );\n    this.autoClosingQuotes = options.get(7\n    /* autoClosingQuotes */\n    );\n    this.autoClosingOvertype = options.get(6\n    /* autoClosingOvertype */\n    );\n    this.autoSurround = options.get(10\n    /* autoSurround */\n    );\n    this.autoIndent = options.get(8\n    /* autoIndent */\n    );\n    this.surroundingPairs = {};\n    this._electricChars = null;\n    this.shouldAutoCloseBefore = {\n      quote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\n      bracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\n    };\n    this.autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\n\n    var surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\n\n    if (surroundingPairs) {\n      var _iterator = _createForOfIteratorHelper(surroundingPairs),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pair = _step.value;\n          this.surroundingPairs[pair.open] = pair.close;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n\n  _createClass(CursorConfiguration, [{\n    key: \"normalizeIndentation\",\n    value: function normalizeIndentation(str) {\n      return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n    }\n  }, {\n    key: \"electricChars\",\n    get: function get() {\n      if (!this._electricChars) {\n        this._electricChars = {};\n\n        var electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\n\n        if (electricChars) {\n          var _iterator2 = _createForOfIteratorHelper(electricChars),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _char = _step2.value;\n              this._electricChars[_char] = true;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n\n      return this._electricChars;\n    }\n  }], [{\n    key: \"shouldRecreate\",\n    value: function shouldRecreate(e) {\n      return e.hasChanged(124\n      /* layoutInfo */\n      ) || e.hasChanged(110\n      /* wordSeparators */\n      ) || e.hasChanged(28\n      /* emptySelectionClipboard */\n      ) || e.hasChanged(63\n      /* multiCursorMergeOverlapping */\n      ) || e.hasChanged(65\n      /* multiCursorPaste */\n      ) || e.hasChanged(5\n      /* autoClosingBrackets */\n      ) || e.hasChanged(7\n      /* autoClosingQuotes */\n      ) || e.hasChanged(6\n      /* autoClosingOvertype */\n      ) || e.hasChanged(10\n      /* autoSurround */\n      ) || e.hasChanged(109\n      /* useTabStops */\n      ) || e.hasChanged(53\n      /* lineHeight */\n      ) || e.hasChanged(75\n      /* readOnly */\n      );\n    }\n  }, {\n    key: \"_getElectricCharacters\",\n    value: function _getElectricCharacters(languageIdentifier) {\n      try {\n        return LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\n      } catch (e) {\n        onUnexpectedError(e);\n        return null;\n      }\n    }\n  }, {\n    key: \"_getShouldAutoClose\",\n    value: function _getShouldAutoClose(languageIdentifier, autoCloseConfig) {\n      switch (autoCloseConfig) {\n        case 'beforeWhitespace':\n          return autoCloseBeforeWhitespace;\n\n        case 'languageDefined':\n          return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\n\n        case 'always':\n          return autoCloseAlways;\n\n        case 'never':\n          return autoCloseNever;\n      }\n    }\n  }, {\n    key: \"_getLanguageDefinedShouldAutoClose\",\n    value: function _getLanguageDefinedShouldAutoClose(languageIdentifier) {\n      try {\n        var autoCloseBeforeSet = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\n        return function (c) {\n          return autoCloseBeforeSet.indexOf(c) !== -1;\n        };\n      } catch (e) {\n        onUnexpectedError(e);\n        return autoCloseNever;\n      }\n    }\n  }, {\n    key: \"_getSurroundingPairs\",\n    value: function _getSurroundingPairs(languageIdentifier) {\n      try {\n        return LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\n      } catch (e) {\n        onUnexpectedError(e);\n        return null;\n      }\n    }\n  }]);\n\n  return CursorConfiguration;\n}();\n/**\r\n * Represents the cursor state on either the model or on the view model.\r\n */\n\nexport var SingleCursorState = /*#__PURE__*/function () {\n  function SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n    _classCallCheck(this, SingleCursorState);\n\n    this.selectionStart = selectionStart;\n    this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n    this.position = position;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n    this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n  }\n\n  _createClass(SingleCursorState, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns && this.leftoverVisibleColumns === other.leftoverVisibleColumns && this.position.equals(other.position) && this.selectionStart.equalsRange(other.selectionStart);\n    }\n  }, {\n    key: \"hasSelection\",\n    value: function hasSelection() {\n      return !this.selection.isEmpty() || !this.selectionStart.isEmpty();\n    }\n  }, {\n    key: \"move\",\n    value: function move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n      if (inSelectionMode) {\n        // move just position\n        return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n      } else {\n        // move everything\n        return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n      }\n    }\n  }], [{\n    key: \"_computeSelection\",\n    value: function _computeSelection(selectionStart, position) {\n      var startLineNumber, startColumn, endLineNumber, endColumn;\n\n      if (selectionStart.isEmpty()) {\n        startLineNumber = selectionStart.startLineNumber;\n        startColumn = selectionStart.startColumn;\n        endLineNumber = position.lineNumber;\n        endColumn = position.column;\n      } else {\n        if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n          startLineNumber = selectionStart.endLineNumber;\n          startColumn = selectionStart.endColumn;\n          endLineNumber = position.lineNumber;\n          endColumn = position.column;\n        } else {\n          startLineNumber = selectionStart.startLineNumber;\n          startColumn = selectionStart.startColumn;\n          endLineNumber = position.lineNumber;\n          endColumn = position.column;\n        }\n      }\n\n      return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n  }]);\n\n  return SingleCursorState;\n}();\nexport var CursorContext = function CursorContext(model, coordinatesConverter, cursorConfig) {\n  _classCallCheck(this, CursorContext);\n\n  this.model = model;\n  this.coordinatesConverter = coordinatesConverter;\n  this.cursorConfig = cursorConfig;\n};\nexport var PartialModelCursorState = function PartialModelCursorState(modelState) {\n  _classCallCheck(this, PartialModelCursorState);\n\n  this.modelState = modelState;\n  this.viewState = null;\n};\nexport var PartialViewCursorState = function PartialViewCursorState(viewState) {\n  _classCallCheck(this, PartialViewCursorState);\n\n  this.modelState = null;\n  this.viewState = viewState;\n};\nexport var CursorState = /*#__PURE__*/function () {\n  function CursorState(modelState, viewState) {\n    _classCallCheck(this, CursorState);\n\n    this.modelState = modelState;\n    this.viewState = viewState;\n  }\n\n  _createClass(CursorState, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState);\n    }\n  }], [{\n    key: \"fromModelState\",\n    value: function fromModelState(modelState) {\n      return new PartialModelCursorState(modelState);\n    }\n  }, {\n    key: \"fromViewState\",\n    value: function fromViewState(viewState) {\n      return new PartialViewCursorState(viewState);\n    }\n  }, {\n    key: \"fromModelSelection\",\n    value: function fromModelSelection(modelSelection) {\n      var selectionStartLineNumber = modelSelection.selectionStartLineNumber;\n      var selectionStartColumn = modelSelection.selectionStartColumn;\n      var positionLineNumber = modelSelection.positionLineNumber;\n      var positionColumn = modelSelection.positionColumn;\n      var modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\n      return CursorState.fromModelState(modelState);\n    }\n  }, {\n    key: \"fromModelSelections\",\n    value: function fromModelSelections(modelSelections) {\n      var states = [];\n\n      for (var i = 0, len = modelSelections.length; i < len; i++) {\n        states[i] = this.fromModelSelection(modelSelections[i]);\n      }\n\n      return states;\n    }\n  }]);\n\n  return CursorState;\n}();\nexport var EditOperationResult = function EditOperationResult(type, commands, opts) {\n  _classCallCheck(this, EditOperationResult);\n\n  this.type = type;\n  this.commands = commands;\n  this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n  this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n};\n/**\r\n * Common operations that work and make sense both on the model and on the view model.\r\n */\n\nexport var CursorColumns = /*#__PURE__*/function () {\n  function CursorColumns() {\n    _classCallCheck(this, CursorColumns);\n  }\n\n  _createClass(CursorColumns, null, [{\n    key: \"visibleColumnFromColumn\",\n    value: function visibleColumnFromColumn(lineContent, column, tabSize) {\n      var lineContentLength = lineContent.length;\n      var endOffset = column - 1 < lineContentLength ? column - 1 : lineContentLength;\n      var result = 0;\n      var i = 0;\n\n      while (i < endOffset) {\n        var codePoint = strings.getNextCodePoint(lineContent, endOffset, i);\n        i += codePoint >= 65536\n        /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */\n        ? 2 : 1;\n\n        if (codePoint === 9\n        /* Tab */\n        ) {\n            result = CursorColumns.nextRenderTabStop(result, tabSize);\n          } else {\n          var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\n\n          while (i < endOffset) {\n            var nextCodePoint = strings.getNextCodePoint(lineContent, endOffset, i);\n            var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\n\n            if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n              break;\n            }\n\n            i += nextCodePoint >= 65536\n            /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */\n            ? 2 : 1;\n            graphemeBreakType = nextGraphemeBreakType;\n          }\n\n          if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n            result = result + 2;\n          } else {\n            result = result + 1;\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"visibleColumnFromColumn2\",\n    value: function visibleColumnFromColumn2(config, model, position) {\n      return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\n    }\n  }, {\n    key: \"columnFromVisibleColumn\",\n    value: function columnFromVisibleColumn(lineContent, visibleColumn, tabSize) {\n      if (visibleColumn <= 0) {\n        return 1;\n      }\n\n      var lineLength = lineContent.length;\n      var beforeVisibleColumn = 0;\n      var beforeColumn = 1;\n      var i = 0;\n\n      while (i < lineLength) {\n        var codePoint = strings.getNextCodePoint(lineContent, lineLength, i);\n        i += codePoint >= 65536\n        /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */\n        ? 2 : 1;\n        var afterVisibleColumn = void 0;\n\n        if (codePoint === 9\n        /* Tab */\n        ) {\n            afterVisibleColumn = CursorColumns.nextRenderTabStop(beforeVisibleColumn, tabSize);\n          } else {\n          var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\n\n          while (i < lineLength) {\n            var nextCodePoint = strings.getNextCodePoint(lineContent, lineLength, i);\n            var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\n\n            if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n              break;\n            }\n\n            i += nextCodePoint >= 65536\n            /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */\n            ? 2 : 1;\n            graphemeBreakType = nextGraphemeBreakType;\n          }\n\n          if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n            afterVisibleColumn = beforeVisibleColumn + 2;\n          } else {\n            afterVisibleColumn = beforeVisibleColumn + 1;\n          }\n        }\n\n        var afterColumn = i + 1;\n\n        if (afterVisibleColumn >= visibleColumn) {\n          var beforeDelta = visibleColumn - beforeVisibleColumn;\n          var afterDelta = afterVisibleColumn - visibleColumn;\n\n          if (afterDelta < beforeDelta) {\n            return afterColumn;\n          } else {\n            return beforeColumn;\n          }\n        }\n\n        beforeVisibleColumn = afterVisibleColumn;\n        beforeColumn = afterColumn;\n      } // walked the entire string\n\n\n      return lineLength + 1;\n    }\n  }, {\n    key: \"columnFromVisibleColumn2\",\n    value: function columnFromVisibleColumn2(config, model, lineNumber, visibleColumn) {\n      var result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\n      var minColumn = model.getLineMinColumn(lineNumber);\n\n      if (result < minColumn) {\n        return minColumn;\n      }\n\n      var maxColumn = model.getLineMaxColumn(lineNumber);\n\n      if (result > maxColumn) {\n        return maxColumn;\n      }\n\n      return result;\n    }\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\n\n  }, {\n    key: \"nextRenderTabStop\",\n    value: function nextRenderTabStop(visibleColumn, tabSize) {\n      return visibleColumn + tabSize - visibleColumn % tabSize;\n    }\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\n\n  }, {\n    key: \"nextIndentTabStop\",\n    value: function nextIndentTabStop(visibleColumn, indentSize) {\n      return visibleColumn + indentSize - visibleColumn % indentSize;\n    }\n    /**\r\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\r\n     */\n\n  }, {\n    key: \"prevRenderTabStop\",\n    value: function prevRenderTabStop(column, tabSize) {\n      return column - 1 - (column - 1) % tabSize;\n    }\n    /**\r\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\r\n     */\n\n  }, {\n    key: \"prevIndentTabStop\",\n    value: function prevIndentTabStop(column, indentSize) {\n      return column - 1 - (column - 1) % indentSize;\n    }\n  }]);\n\n  return CursorColumns;\n}();\nexport function isQuote(ch) {\n  return ch === '\\'' || ch === '\"' || ch === '`';\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCommon.js"],"names":["onUnexpectedError","strings","Position","Range","Selection","TextModel","LanguageConfigurationRegistry","autoCloseAlways","autoCloseNever","autoCloseBeforeWhitespace","chr","CursorConfiguration","languageIdentifier","modelOptions","configuration","_languageIdentifier","options","layoutInfo","get","readOnly","tabSize","indentSize","insertSpaces","stickyTabStops","lineHeight","pageSize","Math","max","floor","height","useTabStops","wordSeparators","emptySelectionClipboard","copyWithSyntaxHighlighting","multiCursorMergeOverlapping","multiCursorPaste","autoClosingBrackets","autoClosingQuotes","autoClosingOvertype","autoSurround","autoIndent","surroundingPairs","_electricChars","shouldAutoCloseBefore","quote","_getShouldAutoClose","bracket","autoClosingPairs","getAutoClosingPairs","id","_getSurroundingPairs","pair","open","close","str","normalizeIndentation","electricChars","_getElectricCharacters","char","e","hasChanged","getElectricCharacters","autoCloseConfig","_getLanguageDefinedShouldAutoClose","autoCloseBeforeSet","getAutoCloseBeforeSet","c","indexOf","getSurroundingPairs","SingleCursorState","selectionStart","selectionStartLeftoverVisibleColumns","position","leftoverVisibleColumns","selection","_computeSelection","other","equals","equalsRange","isEmpty","inSelectionMode","lineNumber","column","startLineNumber","startColumn","endLineNumber","endColumn","isBeforeOrEqual","getStartPosition","CursorContext","model","coordinatesConverter","cursorConfig","PartialModelCursorState","modelState","viewState","PartialViewCursorState","CursorState","modelSelection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","fromModelState","modelSelections","states","i","len","length","fromModelSelection","EditOperationResult","type","commands","opts","shouldPushStackElementBefore","shouldPushStackElementAfter","CursorColumns","lineContent","lineContentLength","endOffset","result","codePoint","getNextCodePoint","nextRenderTabStop","graphemeBreakType","getGraphemeBreakType","nextCodePoint","nextGraphemeBreakType","breakBetweenGraphemeBreakType","isFullWidthCharacter","isEmojiImprecise","config","visibleColumnFromColumn","getLineContent","visibleColumn","lineLength","beforeVisibleColumn","beforeColumn","afterVisibleColumn","afterColumn","beforeDelta","afterDelta","columnFromVisibleColumn","minColumn","getLineMinColumn","maxColumn","getLineMaxColumn","isQuote","ch"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport { TextModel } from '../model/textModel.js';\r\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\r\nconst autoCloseAlways = () => true;\r\nconst autoCloseNever = () => false;\r\nconst autoCloseBeforeWhitespace = (chr) => (chr === ' ' || chr === '\\t');\r\nexport class CursorConfiguration {\r\n    constructor(languageIdentifier, modelOptions, configuration) {\r\n        this._languageIdentifier = languageIdentifier;\r\n        const options = configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this.readOnly = options.get(75 /* readOnly */);\r\n        this.tabSize = modelOptions.tabSize;\r\n        this.indentSize = modelOptions.indentSize;\r\n        this.insertSpaces = modelOptions.insertSpaces;\r\n        this.stickyTabStops = options.get(99 /* stickyTabStops */);\r\n        this.lineHeight = options.get(53 /* lineHeight */);\r\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\r\n        this.useTabStops = options.get(109 /* useTabStops */);\r\n        this.wordSeparators = options.get(110 /* wordSeparators */);\r\n        this.emptySelectionClipboard = options.get(28 /* emptySelectionClipboard */);\r\n        this.copyWithSyntaxHighlighting = options.get(18 /* copyWithSyntaxHighlighting */);\r\n        this.multiCursorMergeOverlapping = options.get(63 /* multiCursorMergeOverlapping */);\r\n        this.multiCursorPaste = options.get(65 /* multiCursorPaste */);\r\n        this.autoClosingBrackets = options.get(5 /* autoClosingBrackets */);\r\n        this.autoClosingQuotes = options.get(7 /* autoClosingQuotes */);\r\n        this.autoClosingOvertype = options.get(6 /* autoClosingOvertype */);\r\n        this.autoSurround = options.get(10 /* autoSurround */);\r\n        this.autoIndent = options.get(8 /* autoIndent */);\r\n        this.surroundingPairs = {};\r\n        this._electricChars = null;\r\n        this.shouldAutoCloseBefore = {\r\n            quote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\r\n            bracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\r\n        };\r\n        this.autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\r\n        let surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\r\n        if (surroundingPairs) {\r\n            for (const pair of surroundingPairs) {\r\n                this.surroundingPairs[pair.open] = pair.close;\r\n            }\r\n        }\r\n    }\r\n    static shouldRecreate(e) {\r\n        return (e.hasChanged(124 /* layoutInfo */)\r\n            || e.hasChanged(110 /* wordSeparators */)\r\n            || e.hasChanged(28 /* emptySelectionClipboard */)\r\n            || e.hasChanged(63 /* multiCursorMergeOverlapping */)\r\n            || e.hasChanged(65 /* multiCursorPaste */)\r\n            || e.hasChanged(5 /* autoClosingBrackets */)\r\n            || e.hasChanged(7 /* autoClosingQuotes */)\r\n            || e.hasChanged(6 /* autoClosingOvertype */)\r\n            || e.hasChanged(10 /* autoSurround */)\r\n            || e.hasChanged(109 /* useTabStops */)\r\n            || e.hasChanged(53 /* lineHeight */)\r\n            || e.hasChanged(75 /* readOnly */));\r\n    }\r\n    get electricChars() {\r\n        if (!this._electricChars) {\r\n            this._electricChars = {};\r\n            let electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\r\n            if (electricChars) {\r\n                for (const char of electricChars) {\r\n                    this._electricChars[char] = true;\r\n                }\r\n            }\r\n        }\r\n        return this._electricChars;\r\n    }\r\n    normalizeIndentation(str) {\r\n        return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\r\n    }\r\n    static _getElectricCharacters(languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    }\r\n    static _getShouldAutoClose(languageIdentifier, autoCloseConfig) {\r\n        switch (autoCloseConfig) {\r\n            case 'beforeWhitespace':\r\n                return autoCloseBeforeWhitespace;\r\n            case 'languageDefined':\r\n                return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\r\n            case 'always':\r\n                return autoCloseAlways;\r\n            case 'never':\r\n                return autoCloseNever;\r\n        }\r\n    }\r\n    static _getLanguageDefinedShouldAutoClose(languageIdentifier) {\r\n        try {\r\n            const autoCloseBeforeSet = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\r\n            return c => autoCloseBeforeSet.indexOf(c) !== -1;\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return autoCloseNever;\r\n        }\r\n    }\r\n    static _getSurroundingPairs(languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents the cursor state on either the model or on the view model.\r\n */\r\nexport class SingleCursorState {\r\n    constructor(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\r\n        this.selectionStart = selectionStart;\r\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\r\n        this.position = position;\r\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\r\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\r\n    }\r\n    equals(other) {\r\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\r\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\r\n            && this.position.equals(other.position)\r\n            && this.selectionStart.equalsRange(other.selectionStart));\r\n    }\r\n    hasSelection() {\r\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\r\n    }\r\n    move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\r\n        if (inSelectionMode) {\r\n            // move just position\r\n            return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\r\n        }\r\n        else {\r\n            // move everything\r\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\r\n        }\r\n    }\r\n    static _computeSelection(selectionStart, position) {\r\n        let startLineNumber, startColumn, endLineNumber, endColumn;\r\n        if (selectionStart.isEmpty()) {\r\n            startLineNumber = selectionStart.startLineNumber;\r\n            startColumn = selectionStart.startColumn;\r\n            endLineNumber = position.lineNumber;\r\n            endColumn = position.column;\r\n        }\r\n        else {\r\n            if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\r\n                startLineNumber = selectionStart.endLineNumber;\r\n                startColumn = selectionStart.endColumn;\r\n                endLineNumber = position.lineNumber;\r\n                endColumn = position.column;\r\n            }\r\n            else {\r\n                startLineNumber = selectionStart.startLineNumber;\r\n                startColumn = selectionStart.startColumn;\r\n                endLineNumber = position.lineNumber;\r\n                endColumn = position.column;\r\n            }\r\n        }\r\n        return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    }\r\n}\r\nexport class CursorContext {\r\n    constructor(model, coordinatesConverter, cursorConfig) {\r\n        this.model = model;\r\n        this.coordinatesConverter = coordinatesConverter;\r\n        this.cursorConfig = cursorConfig;\r\n    }\r\n}\r\nexport class PartialModelCursorState {\r\n    constructor(modelState) {\r\n        this.modelState = modelState;\r\n        this.viewState = null;\r\n    }\r\n}\r\nexport class PartialViewCursorState {\r\n    constructor(viewState) {\r\n        this.modelState = null;\r\n        this.viewState = viewState;\r\n    }\r\n}\r\nexport class CursorState {\r\n    constructor(modelState, viewState) {\r\n        this.modelState = modelState;\r\n        this.viewState = viewState;\r\n    }\r\n    static fromModelState(modelState) {\r\n        return new PartialModelCursorState(modelState);\r\n    }\r\n    static fromViewState(viewState) {\r\n        return new PartialViewCursorState(viewState);\r\n    }\r\n    static fromModelSelection(modelSelection) {\r\n        const selectionStartLineNumber = modelSelection.selectionStartLineNumber;\r\n        const selectionStartColumn = modelSelection.selectionStartColumn;\r\n        const positionLineNumber = modelSelection.positionLineNumber;\r\n        const positionColumn = modelSelection.positionColumn;\r\n        const modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\r\n        return CursorState.fromModelState(modelState);\r\n    }\r\n    static fromModelSelections(modelSelections) {\r\n        let states = [];\r\n        for (let i = 0, len = modelSelections.length; i < len; i++) {\r\n            states[i] = this.fromModelSelection(modelSelections[i]);\r\n        }\r\n        return states;\r\n    }\r\n    equals(other) {\r\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\r\n    }\r\n}\r\nexport class EditOperationResult {\r\n    constructor(type, commands, opts) {\r\n        this.type = type;\r\n        this.commands = commands;\r\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\r\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\r\n    }\r\n}\r\n/**\r\n * Common operations that work and make sense both on the model and on the view model.\r\n */\r\nexport class CursorColumns {\r\n    static visibleColumnFromColumn(lineContent, column, tabSize) {\r\n        const lineContentLength = lineContent.length;\r\n        const endOffset = column - 1 < lineContentLength ? column - 1 : lineContentLength;\r\n        let result = 0;\r\n        let i = 0;\r\n        while (i < endOffset) {\r\n            const codePoint = strings.getNextCodePoint(lineContent, endOffset, i);\r\n            i += (codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n            if (codePoint === 9 /* Tab */) {\r\n                result = CursorColumns.nextRenderTabStop(result, tabSize);\r\n            }\r\n            else {\r\n                let graphemeBreakType = strings.getGraphemeBreakType(codePoint);\r\n                while (i < endOffset) {\r\n                    const nextCodePoint = strings.getNextCodePoint(lineContent, endOffset, i);\r\n                    const nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\r\n                    if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\r\n                        break;\r\n                    }\r\n                    i += (nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n                    graphemeBreakType = nextGraphemeBreakType;\r\n                }\r\n                if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\r\n                    result = result + 2;\r\n                }\r\n                else {\r\n                    result = result + 1;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    static visibleColumnFromColumn2(config, model, position) {\r\n        return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\r\n    }\r\n    static columnFromVisibleColumn(lineContent, visibleColumn, tabSize) {\r\n        if (visibleColumn <= 0) {\r\n            return 1;\r\n        }\r\n        const lineLength = lineContent.length;\r\n        let beforeVisibleColumn = 0;\r\n        let beforeColumn = 1;\r\n        let i = 0;\r\n        while (i < lineLength) {\r\n            const codePoint = strings.getNextCodePoint(lineContent, lineLength, i);\r\n            i += (codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n            let afterVisibleColumn;\r\n            if (codePoint === 9 /* Tab */) {\r\n                afterVisibleColumn = CursorColumns.nextRenderTabStop(beforeVisibleColumn, tabSize);\r\n            }\r\n            else {\r\n                let graphemeBreakType = strings.getGraphemeBreakType(codePoint);\r\n                while (i < lineLength) {\r\n                    const nextCodePoint = strings.getNextCodePoint(lineContent, lineLength, i);\r\n                    const nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\r\n                    if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\r\n                        break;\r\n                    }\r\n                    i += (nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n                    graphemeBreakType = nextGraphemeBreakType;\r\n                }\r\n                if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\r\n                    afterVisibleColumn = beforeVisibleColumn + 2;\r\n                }\r\n                else {\r\n                    afterVisibleColumn = beforeVisibleColumn + 1;\r\n                }\r\n            }\r\n            const afterColumn = i + 1;\r\n            if (afterVisibleColumn >= visibleColumn) {\r\n                const beforeDelta = visibleColumn - beforeVisibleColumn;\r\n                const afterDelta = afterVisibleColumn - visibleColumn;\r\n                if (afterDelta < beforeDelta) {\r\n                    return afterColumn;\r\n                }\r\n                else {\r\n                    return beforeColumn;\r\n                }\r\n            }\r\n            beforeVisibleColumn = afterVisibleColumn;\r\n            beforeColumn = afterColumn;\r\n        }\r\n        // walked the entire string\r\n        return lineLength + 1;\r\n    }\r\n    static columnFromVisibleColumn2(config, model, lineNumber, visibleColumn) {\r\n        let result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\r\n        let minColumn = model.getLineMinColumn(lineNumber);\r\n        if (result < minColumn) {\r\n            return minColumn;\r\n        }\r\n        let maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (result > maxColumn) {\r\n            return maxColumn;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    static nextRenderTabStop(visibleColumn, tabSize) {\r\n        return visibleColumn + tabSize - visibleColumn % tabSize;\r\n    }\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    static nextIndentTabStop(visibleColumn, indentSize) {\r\n        return visibleColumn + indentSize - visibleColumn % indentSize;\r\n    }\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\r\n     */\r\n    static prevRenderTabStop(column, tabSize) {\r\n        return column - 1 - (column - 1) % tabSize;\r\n    }\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\r\n     */\r\n    static prevIndentTabStop(column, indentSize) {\r\n        return column - 1 - (column - 1) % indentSize;\r\n    }\r\n}\r\nexport function isQuote(ch) {\r\n    return (ch === '\\'' || ch === '\"' || ch === '`');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}