{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { AbstractTree } from './abstractTree.js';\nimport { ObjectTreeModel } from './objectTreeModel.js';\nexport var DataTree = /*#__PURE__*/function (_AbstractTree) {\n  _inherits(DataTree, _AbstractTree);\n\n  var _super = _createSuper(DataTree);\n\n  function DataTree(user, container, delegate, renderers, dataSource) {\n    var _this;\n\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n    _classCallCheck(this, DataTree);\n\n    _this = _super.call(this, user, container, delegate, renderers, options);\n    _this.user = user;\n    _this.dataSource = dataSource;\n    _this.identityProvider = options.identityProvider;\n    return _this;\n  }\n\n  _createClass(DataTree, [{\n    key: \"createModel\",\n    value: function createModel(user, view, options) {\n      return new ObjectTreeModel(user, view, options);\n    }\n  }]);\n\n  return DataTree;\n}(AbstractTree);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/dataTree.js"],"names":["AbstractTree","ObjectTreeModel","DataTree","user","container","delegate","renderers","dataSource","options","identityProvider","view"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,WAAaC,QAAb;AAAA;;AAAA;;AACI,oBAAYC,IAAZ,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,UAAlD,EAA4E;AAAA;;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACxE,8BAAML,IAAN,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiCC,SAAjC,EAA4CE,OAA5C;AACA,UAAKL,IAAL,GAAYA,IAAZ;AACA,UAAKI,UAAL,GAAkBA,UAAlB;AACA,UAAKE,gBAAL,GAAwBD,OAAO,CAACC,gBAAhC;AAJwE;AAK3E;;AANL;AAAA;AAAA,gCAOgBN,IAPhB,EAOsBO,IAPtB,EAO4BF,OAP5B,EAOqC;AAC7B,aAAO,IAAIP,eAAJ,CAAoBE,IAApB,EAA0BO,IAA1B,EAAgCF,OAAhC,CAAP;AACH;AATL;;AAAA;AAAA,EAA8BR,YAA9B","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { AbstractTree } from './abstractTree.js';\r\nimport { ObjectTreeModel } from './objectTreeModel.js';\r\nexport class DataTree extends AbstractTree {\r\n    constructor(user, container, delegate, renderers, dataSource, options = {}) {\r\n        super(user, container, delegate, renderers, options);\r\n        this.user = user;\r\n        this.dataSource = dataSource;\r\n        this.identityProvider = options.identityProvider;\r\n    }\r\n    createModel(user, view, options) {\r\n        return new ObjectTreeModel(user, view, options);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}