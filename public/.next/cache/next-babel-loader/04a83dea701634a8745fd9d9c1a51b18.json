{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { URI } from './uri.js';\nimport * as platform from './platform.js';\nexport var Schemas;\n\n(function (Schemas) {\n  /**\r\n   * A schema that is used for models that exist in memory\r\n   * only and that have no correspondence on a server or such.\r\n   */\n  Schemas.inMemory = 'inmemory';\n  /**\r\n   * A schema that is used for setting files\r\n   */\n\n  Schemas.vscode = 'vscode';\n  /**\r\n   * A schema that is used for internal private files\r\n   */\n\n  Schemas.internal = 'private';\n  /**\r\n   * A walk-through document.\r\n   */\n\n  Schemas.walkThrough = 'walkThrough';\n  /**\r\n   * An embedded code snippet.\r\n   */\n\n  Schemas.walkThroughSnippet = 'walkThroughSnippet';\n  Schemas.http = 'http';\n  Schemas.https = 'https';\n  Schemas.file = 'file';\n  Schemas.mailto = 'mailto';\n  Schemas.untitled = 'untitled';\n  Schemas.data = 'data';\n  Schemas.command = 'command';\n  Schemas.vscodeRemote = 'vscode-remote';\n  Schemas.vscodeRemoteResource = 'vscode-remote-resource';\n  Schemas.userData = 'vscode-userdata';\n  Schemas.vscodeCustomEditor = 'vscode-custom-editor';\n  Schemas.vscodeNotebook = 'vscode-notebook';\n  Schemas.vscodeNotebookCell = 'vscode-notebook-cell';\n  Schemas.vscodeNotebookCellMetadata = 'vscode-notebook-cell-metadata';\n  Schemas.vscodeSettings = 'vscode-settings';\n  Schemas.webviewPanel = 'webview-panel';\n  /**\r\n   * Scheme used for loading the wrapper html and script in webviews.\r\n   */\n\n  Schemas.vscodeWebview = 'vscode-webview';\n  /**\r\n   * Scheme used for loading resources inside of webviews.\r\n   */\n\n  Schemas.vscodeWebviewResource = 'vscode-webview-resource';\n  /**\r\n   * Scheme used for extension pages\r\n   */\n\n  Schemas.extension = 'extension';\n  /**\r\n   * Scheme used as a replacement of `file` scheme to load\r\n   * files with our custom protocol handler (desktop only).\r\n   */\n\n  Schemas.vscodeFileResource = 'vscode-file';\n})(Schemas || (Schemas = {}));\n\nvar RemoteAuthoritiesImpl = /*#__PURE__*/function () {\n  function RemoteAuthoritiesImpl() {\n    _classCallCheck(this, RemoteAuthoritiesImpl);\n\n    this._hosts = Object.create(null);\n    this._ports = Object.create(null);\n    this._connectionTokens = Object.create(null);\n    this._preferredWebSchema = 'http';\n    this._delegate = null;\n  }\n\n  _createClass(RemoteAuthoritiesImpl, [{\n    key: \"setPreferredWebSchema\",\n    value: function setPreferredWebSchema(schema) {\n      this._preferredWebSchema = schema;\n    }\n  }, {\n    key: \"rewrite\",\n    value: function rewrite(uri) {\n      if (this._delegate) {\n        return this._delegate(uri);\n      }\n\n      var authority = uri.authority;\n      var host = this._hosts[authority];\n\n      if (host && host.indexOf(':') !== -1) {\n        host = \"[\".concat(host, \"]\");\n      }\n\n      var port = this._ports[authority];\n      var connectionToken = this._connectionTokens[authority];\n      var query = \"path=\".concat(encodeURIComponent(uri.path));\n\n      if (typeof connectionToken === 'string') {\n        query += \"&tkn=\".concat(encodeURIComponent(connectionToken));\n      }\n\n      return URI.from({\n        scheme: platform.isWeb ? this._preferredWebSchema : Schemas.vscodeRemoteResource,\n        authority: \"\".concat(host, \":\").concat(port),\n        path: \"/vscode-remote-resource\",\n        query: query\n      });\n    }\n  }]);\n\n  return RemoteAuthoritiesImpl;\n}();\n\nexport var RemoteAuthorities = new RemoteAuthoritiesImpl();\n\nvar FileAccessImpl = /*#__PURE__*/function () {\n  function FileAccessImpl() {\n    _classCallCheck(this, FileAccessImpl);\n\n    this.FALLBACK_AUTHORITY = 'vscode-app';\n  }\n\n  _createClass(FileAccessImpl, [{\n    key: \"asBrowserUri\",\n    value: function asBrowserUri(uriOrModule, moduleIdToUrl, __forceCodeFileUri) {\n      var uri = this.toUri(uriOrModule, moduleIdToUrl); // Handle remote URIs via `RemoteAuthorities`\n\n      if (uri.scheme === Schemas.vscodeRemote) {\n        return RemoteAuthorities.rewrite(uri);\n      } // Only convert the URI if we are in a native context and it has `file:` scheme\n      // and we have explicitly enabled the conversion (sandbox, or ENABLE_VSCODE_BROWSER_CODE_LOADING)\n\n\n      if (platform.isNative && (__forceCodeFileUri || platform.isPreferringBrowserCodeLoad) && uri.scheme === Schemas.file) {\n        return uri[\"with\"]({\n          scheme: Schemas.vscodeFileResource,\n          // We need to provide an authority here so that it can serve\n          // as origin for network and loading matters in chromium.\n          // If the URI is not coming with an authority already, we\n          // add our own\n          authority: uri.authority || this.FALLBACK_AUTHORITY,\n          query: null,\n          fragment: null\n        });\n      }\n\n      return uri;\n    }\n  }, {\n    key: \"toUri\",\n    value: function toUri(uriOrModule, moduleIdToUrl) {\n      if (URI.isUri(uriOrModule)) {\n        return uriOrModule;\n      }\n\n      return URI.parse(moduleIdToUrl.toUrl(uriOrModule));\n    }\n  }]);\n\n  return FileAccessImpl;\n}();\n\nexport var FileAccess = new FileAccessImpl();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/common/network.js"],"names":["URI","platform","Schemas","inMemory","vscode","internal","walkThrough","walkThroughSnippet","http","https","file","mailto","untitled","data","command","vscodeRemote","vscodeRemoteResource","userData","vscodeCustomEditor","vscodeNotebook","vscodeNotebookCell","vscodeNotebookCellMetadata","vscodeSettings","webviewPanel","vscodeWebview","vscodeWebviewResource","extension","vscodeFileResource","RemoteAuthoritiesImpl","_hosts","Object","create","_ports","_connectionTokens","_preferredWebSchema","_delegate","schema","uri","authority","host","indexOf","port","connectionToken","query","encodeURIComponent","path","from","scheme","isWeb","RemoteAuthorities","FileAccessImpl","FALLBACK_AUTHORITY","uriOrModule","moduleIdToUrl","__forceCodeFileUri","toUri","rewrite","isNative","isPreferringBrowserCodeLoad","fragment","isUri","parse","toUrl","FileAccess"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { URI } from './uri.js';\r\nimport * as platform from './platform.js';\r\nexport var Schemas;\r\n(function (Schemas) {\r\n    /**\r\n     * A schema that is used for models that exist in memory\r\n     * only and that have no correspondence on a server or such.\r\n     */\r\n    Schemas.inMemory = 'inmemory';\r\n    /**\r\n     * A schema that is used for setting files\r\n     */\r\n    Schemas.vscode = 'vscode';\r\n    /**\r\n     * A schema that is used for internal private files\r\n     */\r\n    Schemas.internal = 'private';\r\n    /**\r\n     * A walk-through document.\r\n     */\r\n    Schemas.walkThrough = 'walkThrough';\r\n    /**\r\n     * An embedded code snippet.\r\n     */\r\n    Schemas.walkThroughSnippet = 'walkThroughSnippet';\r\n    Schemas.http = 'http';\r\n    Schemas.https = 'https';\r\n    Schemas.file = 'file';\r\n    Schemas.mailto = 'mailto';\r\n    Schemas.untitled = 'untitled';\r\n    Schemas.data = 'data';\r\n    Schemas.command = 'command';\r\n    Schemas.vscodeRemote = 'vscode-remote';\r\n    Schemas.vscodeRemoteResource = 'vscode-remote-resource';\r\n    Schemas.userData = 'vscode-userdata';\r\n    Schemas.vscodeCustomEditor = 'vscode-custom-editor';\r\n    Schemas.vscodeNotebook = 'vscode-notebook';\r\n    Schemas.vscodeNotebookCell = 'vscode-notebook-cell';\r\n    Schemas.vscodeNotebookCellMetadata = 'vscode-notebook-cell-metadata';\r\n    Schemas.vscodeSettings = 'vscode-settings';\r\n    Schemas.webviewPanel = 'webview-panel';\r\n    /**\r\n     * Scheme used for loading the wrapper html and script in webviews.\r\n     */\r\n    Schemas.vscodeWebview = 'vscode-webview';\r\n    /**\r\n     * Scheme used for loading resources inside of webviews.\r\n     */\r\n    Schemas.vscodeWebviewResource = 'vscode-webview-resource';\r\n    /**\r\n     * Scheme used for extension pages\r\n     */\r\n    Schemas.extension = 'extension';\r\n    /**\r\n     * Scheme used as a replacement of `file` scheme to load\r\n     * files with our custom protocol handler (desktop only).\r\n     */\r\n    Schemas.vscodeFileResource = 'vscode-file';\r\n})(Schemas || (Schemas = {}));\r\nclass RemoteAuthoritiesImpl {\r\n    constructor() {\r\n        this._hosts = Object.create(null);\r\n        this._ports = Object.create(null);\r\n        this._connectionTokens = Object.create(null);\r\n        this._preferredWebSchema = 'http';\r\n        this._delegate = null;\r\n    }\r\n    setPreferredWebSchema(schema) {\r\n        this._preferredWebSchema = schema;\r\n    }\r\n    rewrite(uri) {\r\n        if (this._delegate) {\r\n            return this._delegate(uri);\r\n        }\r\n        const authority = uri.authority;\r\n        let host = this._hosts[authority];\r\n        if (host && host.indexOf(':') !== -1) {\r\n            host = `[${host}]`;\r\n        }\r\n        const port = this._ports[authority];\r\n        const connectionToken = this._connectionTokens[authority];\r\n        let query = `path=${encodeURIComponent(uri.path)}`;\r\n        if (typeof connectionToken === 'string') {\r\n            query += `&tkn=${encodeURIComponent(connectionToken)}`;\r\n        }\r\n        return URI.from({\r\n            scheme: platform.isWeb ? this._preferredWebSchema : Schemas.vscodeRemoteResource,\r\n            authority: `${host}:${port}`,\r\n            path: `/vscode-remote-resource`,\r\n            query\r\n        });\r\n    }\r\n}\r\nexport const RemoteAuthorities = new RemoteAuthoritiesImpl();\r\nclass FileAccessImpl {\r\n    constructor() {\r\n        this.FALLBACK_AUTHORITY = 'vscode-app';\r\n    }\r\n    asBrowserUri(uriOrModule, moduleIdToUrl, __forceCodeFileUri) {\r\n        const uri = this.toUri(uriOrModule, moduleIdToUrl);\r\n        // Handle remote URIs via `RemoteAuthorities`\r\n        if (uri.scheme === Schemas.vscodeRemote) {\r\n            return RemoteAuthorities.rewrite(uri);\r\n        }\r\n        // Only convert the URI if we are in a native context and it has `file:` scheme\r\n        // and we have explicitly enabled the conversion (sandbox, or ENABLE_VSCODE_BROWSER_CODE_LOADING)\r\n        if (platform.isNative && (__forceCodeFileUri || platform.isPreferringBrowserCodeLoad) && uri.scheme === Schemas.file) {\r\n            return uri.with({\r\n                scheme: Schemas.vscodeFileResource,\r\n                // We need to provide an authority here so that it can serve\r\n                // as origin for network and loading matters in chromium.\r\n                // If the URI is not coming with an authority already, we\r\n                // add our own\r\n                authority: uri.authority || this.FALLBACK_AUTHORITY,\r\n                query: null,\r\n                fragment: null\r\n            });\r\n        }\r\n        return uri;\r\n    }\r\n    toUri(uriOrModule, moduleIdToUrl) {\r\n        if (URI.isUri(uriOrModule)) {\r\n            return uriOrModule;\r\n        }\r\n        return URI.parse(moduleIdToUrl.toUrl(uriOrModule));\r\n    }\r\n}\r\nexport const FileAccess = new FileAccessImpl();\r\n"]},"metadata":{},"sourceType":"module"}