{"ast":null,"code":"import _slicedToArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as buffer from '../../../base/common/buffer.js';\nimport { decodeUTF16LE } from '../core/stringBuilder.js';\n\nfunction escapeNewLine(str) {\n  return str.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n}\n\nexport var TextChange = /*#__PURE__*/function () {\n  function TextChange(oldPosition, oldText, newPosition, newText) {\n    _classCallCheck(this, TextChange);\n\n    this.oldPosition = oldPosition;\n    this.oldText = oldText;\n    this.newPosition = newPosition;\n    this.newText = newText;\n  }\n\n  _createClass(TextChange, [{\n    key: \"toString\",\n    value: function toString() {\n      if (this.oldText.length === 0) {\n        return \"(insert@\".concat(this.oldPosition, \" \\\"\").concat(escapeNewLine(this.newText), \"\\\")\");\n      }\n\n      if (this.newText.length === 0) {\n        return \"(delete@\".concat(this.oldPosition, \" \\\"\").concat(escapeNewLine(this.oldText), \"\\\")\");\n      }\n\n      return \"(replace@\".concat(this.oldPosition, \" \\\"\").concat(escapeNewLine(this.oldText), \"\\\" with \\\"\").concat(escapeNewLine(this.newText), \"\\\")\");\n    }\n  }, {\n    key: \"writeSize\",\n    value: function writeSize() {\n      return +4 // oldPosition\n      + 4 // newPosition\n      + TextChange._writeStringSize(this.oldText) + TextChange._writeStringSize(this.newText);\n    }\n  }, {\n    key: \"write\",\n    value: function write(b, offset) {\n      buffer.writeUInt32BE(b, this.oldPosition, offset);\n      offset += 4;\n      buffer.writeUInt32BE(b, this.newPosition, offset);\n      offset += 4;\n      offset = TextChange._writeString(b, this.oldText, offset);\n      offset = TextChange._writeString(b, this.newText, offset);\n      return offset;\n    }\n  }, {\n    key: \"oldLength\",\n    get: function get() {\n      return this.oldText.length;\n    }\n  }, {\n    key: \"oldEnd\",\n    get: function get() {\n      return this.oldPosition + this.oldText.length;\n    }\n  }, {\n    key: \"newLength\",\n    get: function get() {\n      return this.newText.length;\n    }\n  }, {\n    key: \"newEnd\",\n    get: function get() {\n      return this.newPosition + this.newText.length;\n    }\n  }], [{\n    key: \"_writeStringSize\",\n    value: function _writeStringSize(str) {\n      return 4 + 2 * str.length;\n    }\n  }, {\n    key: \"_writeString\",\n    value: function _writeString(b, str, offset) {\n      var len = str.length;\n      buffer.writeUInt32BE(b, len, offset);\n      offset += 4;\n\n      for (var i = 0; i < len; i++) {\n        buffer.writeUInt16LE(b, str.charCodeAt(i), offset);\n        offset += 2;\n      }\n\n      return offset;\n    }\n  }, {\n    key: \"_readString\",\n    value: function _readString(b, offset) {\n      var len = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      return decodeUTF16LE(b, offset, len);\n    }\n  }, {\n    key: \"read\",\n    value: function read(b, offset, dest) {\n      var oldPosition = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      var newPosition = buffer.readUInt32BE(b, offset);\n      offset += 4;\n\n      var oldText = TextChange._readString(b, offset);\n\n      offset += TextChange._writeStringSize(oldText);\n\n      var newText = TextChange._readString(b, offset);\n\n      offset += TextChange._writeStringSize(newText);\n      dest.push(new TextChange(oldPosition, oldText, newPosition, newText));\n      return offset;\n    }\n  }]);\n\n  return TextChange;\n}();\nexport function compressConsecutiveTextChanges(prevEdits, currEdits) {\n  if (prevEdits === null || prevEdits.length === 0) {\n    return currEdits;\n  }\n\n  var compressor = new TextChangeCompressor(prevEdits, currEdits);\n  return compressor.compress();\n}\n\nvar TextChangeCompressor = /*#__PURE__*/function () {\n  function TextChangeCompressor(prevEdits, currEdits) {\n    _classCallCheck(this, TextChangeCompressor);\n\n    this._prevEdits = prevEdits;\n    this._currEdits = currEdits;\n    this._result = [];\n    this._resultLen = 0;\n    this._prevLen = this._prevEdits.length;\n    this._prevDeltaOffset = 0;\n    this._currLen = this._currEdits.length;\n    this._currDeltaOffset = 0;\n  }\n\n  _createClass(TextChangeCompressor, [{\n    key: \"compress\",\n    value: function compress() {\n      var prevIndex = 0;\n      var currIndex = 0;\n\n      var prevEdit = this._getPrev(prevIndex);\n\n      var currEdit = this._getCurr(currIndex);\n\n      while (prevIndex < this._prevLen || currIndex < this._currLen) {\n        if (prevEdit === null) {\n          this._acceptCurr(currEdit);\n\n          currEdit = this._getCurr(++currIndex);\n          continue;\n        }\n\n        if (currEdit === null) {\n          this._acceptPrev(prevEdit);\n\n          prevEdit = this._getPrev(++prevIndex);\n          continue;\n        }\n\n        if (currEdit.oldEnd <= prevEdit.newPosition) {\n          this._acceptCurr(currEdit);\n\n          currEdit = this._getCurr(++currIndex);\n          continue;\n        }\n\n        if (prevEdit.newEnd <= currEdit.oldPosition) {\n          this._acceptPrev(prevEdit);\n\n          prevEdit = this._getPrev(++prevIndex);\n          continue;\n        }\n\n        if (currEdit.oldPosition < prevEdit.newPosition) {\n          var _TextChangeCompressor = TextChangeCompressor._splitCurr(currEdit, prevEdit.newPosition - currEdit.oldPosition),\n              _TextChangeCompressor2 = _slicedToArray(_TextChangeCompressor, 2),\n              e1 = _TextChangeCompressor2[0],\n              e2 = _TextChangeCompressor2[1];\n\n          this._acceptCurr(e1);\n\n          currEdit = e2;\n          continue;\n        }\n\n        if (prevEdit.newPosition < currEdit.oldPosition) {\n          var _TextChangeCompressor3 = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldPosition - prevEdit.newPosition),\n              _TextChangeCompressor4 = _slicedToArray(_TextChangeCompressor3, 2),\n              _e = _TextChangeCompressor4[0],\n              _e2 = _TextChangeCompressor4[1];\n\n          this._acceptPrev(_e);\n\n          prevEdit = _e2;\n          continue;\n        } // At this point, currEdit.oldPosition === prevEdit.newPosition\n\n\n        var mergePrev = void 0;\n        var mergeCurr = void 0;\n\n        if (currEdit.oldEnd === prevEdit.newEnd) {\n          mergePrev = prevEdit;\n          mergeCurr = currEdit;\n          prevEdit = this._getPrev(++prevIndex);\n          currEdit = this._getCurr(++currIndex);\n        } else if (currEdit.oldEnd < prevEdit.newEnd) {\n          var _TextChangeCompressor5 = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldLength),\n              _TextChangeCompressor6 = _slicedToArray(_TextChangeCompressor5, 2),\n              _e3 = _TextChangeCompressor6[0],\n              _e4 = _TextChangeCompressor6[1];\n\n          mergePrev = _e3;\n          mergeCurr = currEdit;\n          prevEdit = _e4;\n          currEdit = this._getCurr(++currIndex);\n        } else {\n          var _TextChangeCompressor7 = TextChangeCompressor._splitCurr(currEdit, prevEdit.newLength),\n              _TextChangeCompressor8 = _slicedToArray(_TextChangeCompressor7, 2),\n              _e5 = _TextChangeCompressor8[0],\n              _e6 = _TextChangeCompressor8[1];\n\n          mergePrev = prevEdit;\n          mergeCurr = _e5;\n          prevEdit = this._getPrev(++prevIndex);\n          currEdit = _e6;\n        }\n\n        this._result[this._resultLen++] = new TextChange(mergePrev.oldPosition, mergePrev.oldText, mergeCurr.newPosition, mergeCurr.newText);\n        this._prevDeltaOffset += mergePrev.newLength - mergePrev.oldLength;\n        this._currDeltaOffset += mergeCurr.newLength - mergeCurr.oldLength;\n      }\n\n      var merged = TextChangeCompressor._merge(this._result);\n\n      var cleaned = TextChangeCompressor._removeNoOps(merged);\n\n      return cleaned;\n    }\n  }, {\n    key: \"_acceptCurr\",\n    value: function _acceptCurr(currEdit) {\n      this._result[this._resultLen++] = TextChangeCompressor._rebaseCurr(this._prevDeltaOffset, currEdit);\n      this._currDeltaOffset += currEdit.newLength - currEdit.oldLength;\n    }\n  }, {\n    key: \"_getCurr\",\n    value: function _getCurr(currIndex) {\n      return currIndex < this._currLen ? this._currEdits[currIndex] : null;\n    }\n  }, {\n    key: \"_acceptPrev\",\n    value: function _acceptPrev(prevEdit) {\n      this._result[this._resultLen++] = TextChangeCompressor._rebasePrev(this._currDeltaOffset, prevEdit);\n      this._prevDeltaOffset += prevEdit.newLength - prevEdit.oldLength;\n    }\n  }, {\n    key: \"_getPrev\",\n    value: function _getPrev(prevIndex) {\n      return prevIndex < this._prevLen ? this._prevEdits[prevIndex] : null;\n    }\n  }], [{\n    key: \"_rebaseCurr\",\n    value: function _rebaseCurr(prevDeltaOffset, currEdit) {\n      return new TextChange(currEdit.oldPosition - prevDeltaOffset, currEdit.oldText, currEdit.newPosition, currEdit.newText);\n    }\n  }, {\n    key: \"_rebasePrev\",\n    value: function _rebasePrev(currDeltaOffset, prevEdit) {\n      return new TextChange(prevEdit.oldPosition, prevEdit.oldText, prevEdit.newPosition + currDeltaOffset, prevEdit.newText);\n    }\n  }, {\n    key: \"_splitPrev\",\n    value: function _splitPrev(edit, offset) {\n      var preText = edit.newText.substr(0, offset);\n      var postText = edit.newText.substr(offset);\n      return [new TextChange(edit.oldPosition, edit.oldText, edit.newPosition, preText), new TextChange(edit.oldEnd, '', edit.newPosition + offset, postText)];\n    }\n  }, {\n    key: \"_splitCurr\",\n    value: function _splitCurr(edit, offset) {\n      var preText = edit.oldText.substr(0, offset);\n      var postText = edit.oldText.substr(offset);\n      return [new TextChange(edit.oldPosition, preText, edit.newPosition, edit.newText), new TextChange(edit.oldPosition + offset, postText, edit.newEnd, '')];\n    }\n  }, {\n    key: \"_merge\",\n    value: function _merge(edits) {\n      if (edits.length === 0) {\n        return edits;\n      }\n\n      var result = [],\n          resultLen = 0;\n      var prev = edits[0];\n\n      for (var i = 1; i < edits.length; i++) {\n        var curr = edits[i];\n\n        if (prev.oldEnd === curr.oldPosition) {\n          // Merge into `prev`\n          prev = new TextChange(prev.oldPosition, prev.oldText + curr.oldText, prev.newPosition, prev.newText + curr.newText);\n        } else {\n          result[resultLen++] = prev;\n          prev = curr;\n        }\n      }\n\n      result[resultLen++] = prev;\n      return result;\n    }\n  }, {\n    key: \"_removeNoOps\",\n    value: function _removeNoOps(edits) {\n      if (edits.length === 0) {\n        return edits;\n      }\n\n      var result = [],\n          resultLen = 0;\n\n      for (var i = 0; i < edits.length; i++) {\n        var edit = edits[i];\n\n        if (edit.oldText === edit.newText) {\n          continue;\n        }\n\n        result[resultLen++] = edit;\n      }\n\n      return result;\n    }\n  }]);\n\n  return TextChangeCompressor;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/model/textChange.js"],"names":["buffer","decodeUTF16LE","escapeNewLine","str","replace","TextChange","oldPosition","oldText","newPosition","newText","length","_writeStringSize","b","offset","writeUInt32BE","_writeString","len","i","writeUInt16LE","charCodeAt","readUInt32BE","dest","_readString","push","compressConsecutiveTextChanges","prevEdits","currEdits","compressor","TextChangeCompressor","compress","_prevEdits","_currEdits","_result","_resultLen","_prevLen","_prevDeltaOffset","_currLen","_currDeltaOffset","prevIndex","currIndex","prevEdit","_getPrev","currEdit","_getCurr","_acceptCurr","_acceptPrev","oldEnd","newEnd","_splitCurr","e1","e2","_splitPrev","mergePrev","mergeCurr","oldLength","newLength","merged","_merge","cleaned","_removeNoOps","_rebaseCurr","_rebasePrev","prevDeltaOffset","currDeltaOffset","edit","preText","substr","postText","edits","result","resultLen","prev","curr"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as buffer from '../../../base/common/buffer.js';\r\nimport { decodeUTF16LE } from '../core/stringBuilder.js';\r\nfunction escapeNewLine(str) {\r\n    return (str\r\n        .replace(/\\n/g, '\\\\n')\r\n        .replace(/\\r/g, '\\\\r'));\r\n}\r\nexport class TextChange {\r\n    constructor(oldPosition, oldText, newPosition, newText) {\r\n        this.oldPosition = oldPosition;\r\n        this.oldText = oldText;\r\n        this.newPosition = newPosition;\r\n        this.newText = newText;\r\n    }\r\n    get oldLength() {\r\n        return this.oldText.length;\r\n    }\r\n    get oldEnd() {\r\n        return this.oldPosition + this.oldText.length;\r\n    }\r\n    get newLength() {\r\n        return this.newText.length;\r\n    }\r\n    get newEnd() {\r\n        return this.newPosition + this.newText.length;\r\n    }\r\n    toString() {\r\n        if (this.oldText.length === 0) {\r\n            return `(insert@${this.oldPosition} \"${escapeNewLine(this.newText)}\")`;\r\n        }\r\n        if (this.newText.length === 0) {\r\n            return `(delete@${this.oldPosition} \"${escapeNewLine(this.oldText)}\")`;\r\n        }\r\n        return `(replace@${this.oldPosition} \"${escapeNewLine(this.oldText)}\" with \"${escapeNewLine(this.newText)}\")`;\r\n    }\r\n    static _writeStringSize(str) {\r\n        return (4 + 2 * str.length);\r\n    }\r\n    static _writeString(b, str, offset) {\r\n        const len = str.length;\r\n        buffer.writeUInt32BE(b, len, offset);\r\n        offset += 4;\r\n        for (let i = 0; i < len; i++) {\r\n            buffer.writeUInt16LE(b, str.charCodeAt(i), offset);\r\n            offset += 2;\r\n        }\r\n        return offset;\r\n    }\r\n    static _readString(b, offset) {\r\n        const len = buffer.readUInt32BE(b, offset);\r\n        offset += 4;\r\n        return decodeUTF16LE(b, offset, len);\r\n    }\r\n    writeSize() {\r\n        return (+4 // oldPosition\r\n            + 4 // newPosition\r\n            + TextChange._writeStringSize(this.oldText)\r\n            + TextChange._writeStringSize(this.newText));\r\n    }\r\n    write(b, offset) {\r\n        buffer.writeUInt32BE(b, this.oldPosition, offset);\r\n        offset += 4;\r\n        buffer.writeUInt32BE(b, this.newPosition, offset);\r\n        offset += 4;\r\n        offset = TextChange._writeString(b, this.oldText, offset);\r\n        offset = TextChange._writeString(b, this.newText, offset);\r\n        return offset;\r\n    }\r\n    static read(b, offset, dest) {\r\n        const oldPosition = buffer.readUInt32BE(b, offset);\r\n        offset += 4;\r\n        const newPosition = buffer.readUInt32BE(b, offset);\r\n        offset += 4;\r\n        const oldText = TextChange._readString(b, offset);\r\n        offset += TextChange._writeStringSize(oldText);\r\n        const newText = TextChange._readString(b, offset);\r\n        offset += TextChange._writeStringSize(newText);\r\n        dest.push(new TextChange(oldPosition, oldText, newPosition, newText));\r\n        return offset;\r\n    }\r\n}\r\nexport function compressConsecutiveTextChanges(prevEdits, currEdits) {\r\n    if (prevEdits === null || prevEdits.length === 0) {\r\n        return currEdits;\r\n    }\r\n    const compressor = new TextChangeCompressor(prevEdits, currEdits);\r\n    return compressor.compress();\r\n}\r\nclass TextChangeCompressor {\r\n    constructor(prevEdits, currEdits) {\r\n        this._prevEdits = prevEdits;\r\n        this._currEdits = currEdits;\r\n        this._result = [];\r\n        this._resultLen = 0;\r\n        this._prevLen = this._prevEdits.length;\r\n        this._prevDeltaOffset = 0;\r\n        this._currLen = this._currEdits.length;\r\n        this._currDeltaOffset = 0;\r\n    }\r\n    compress() {\r\n        let prevIndex = 0;\r\n        let currIndex = 0;\r\n        let prevEdit = this._getPrev(prevIndex);\r\n        let currEdit = this._getCurr(currIndex);\r\n        while (prevIndex < this._prevLen || currIndex < this._currLen) {\r\n            if (prevEdit === null) {\r\n                this._acceptCurr(currEdit);\r\n                currEdit = this._getCurr(++currIndex);\r\n                continue;\r\n            }\r\n            if (currEdit === null) {\r\n                this._acceptPrev(prevEdit);\r\n                prevEdit = this._getPrev(++prevIndex);\r\n                continue;\r\n            }\r\n            if (currEdit.oldEnd <= prevEdit.newPosition) {\r\n                this._acceptCurr(currEdit);\r\n                currEdit = this._getCurr(++currIndex);\r\n                continue;\r\n            }\r\n            if (prevEdit.newEnd <= currEdit.oldPosition) {\r\n                this._acceptPrev(prevEdit);\r\n                prevEdit = this._getPrev(++prevIndex);\r\n                continue;\r\n            }\r\n            if (currEdit.oldPosition < prevEdit.newPosition) {\r\n                const [e1, e2] = TextChangeCompressor._splitCurr(currEdit, prevEdit.newPosition - currEdit.oldPosition);\r\n                this._acceptCurr(e1);\r\n                currEdit = e2;\r\n                continue;\r\n            }\r\n            if (prevEdit.newPosition < currEdit.oldPosition) {\r\n                const [e1, e2] = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldPosition - prevEdit.newPosition);\r\n                this._acceptPrev(e1);\r\n                prevEdit = e2;\r\n                continue;\r\n            }\r\n            // At this point, currEdit.oldPosition === prevEdit.newPosition\r\n            let mergePrev;\r\n            let mergeCurr;\r\n            if (currEdit.oldEnd === prevEdit.newEnd) {\r\n                mergePrev = prevEdit;\r\n                mergeCurr = currEdit;\r\n                prevEdit = this._getPrev(++prevIndex);\r\n                currEdit = this._getCurr(++currIndex);\r\n            }\r\n            else if (currEdit.oldEnd < prevEdit.newEnd) {\r\n                const [e1, e2] = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldLength);\r\n                mergePrev = e1;\r\n                mergeCurr = currEdit;\r\n                prevEdit = e2;\r\n                currEdit = this._getCurr(++currIndex);\r\n            }\r\n            else {\r\n                const [e1, e2] = TextChangeCompressor._splitCurr(currEdit, prevEdit.newLength);\r\n                mergePrev = prevEdit;\r\n                mergeCurr = e1;\r\n                prevEdit = this._getPrev(++prevIndex);\r\n                currEdit = e2;\r\n            }\r\n            this._result[this._resultLen++] = new TextChange(mergePrev.oldPosition, mergePrev.oldText, mergeCurr.newPosition, mergeCurr.newText);\r\n            this._prevDeltaOffset += mergePrev.newLength - mergePrev.oldLength;\r\n            this._currDeltaOffset += mergeCurr.newLength - mergeCurr.oldLength;\r\n        }\r\n        const merged = TextChangeCompressor._merge(this._result);\r\n        const cleaned = TextChangeCompressor._removeNoOps(merged);\r\n        return cleaned;\r\n    }\r\n    _acceptCurr(currEdit) {\r\n        this._result[this._resultLen++] = TextChangeCompressor._rebaseCurr(this._prevDeltaOffset, currEdit);\r\n        this._currDeltaOffset += currEdit.newLength - currEdit.oldLength;\r\n    }\r\n    _getCurr(currIndex) {\r\n        return (currIndex < this._currLen ? this._currEdits[currIndex] : null);\r\n    }\r\n    _acceptPrev(prevEdit) {\r\n        this._result[this._resultLen++] = TextChangeCompressor._rebasePrev(this._currDeltaOffset, prevEdit);\r\n        this._prevDeltaOffset += prevEdit.newLength - prevEdit.oldLength;\r\n    }\r\n    _getPrev(prevIndex) {\r\n        return (prevIndex < this._prevLen ? this._prevEdits[prevIndex] : null);\r\n    }\r\n    static _rebaseCurr(prevDeltaOffset, currEdit) {\r\n        return new TextChange(currEdit.oldPosition - prevDeltaOffset, currEdit.oldText, currEdit.newPosition, currEdit.newText);\r\n    }\r\n    static _rebasePrev(currDeltaOffset, prevEdit) {\r\n        return new TextChange(prevEdit.oldPosition, prevEdit.oldText, prevEdit.newPosition + currDeltaOffset, prevEdit.newText);\r\n    }\r\n    static _splitPrev(edit, offset) {\r\n        const preText = edit.newText.substr(0, offset);\r\n        const postText = edit.newText.substr(offset);\r\n        return [\r\n            new TextChange(edit.oldPosition, edit.oldText, edit.newPosition, preText),\r\n            new TextChange(edit.oldEnd, '', edit.newPosition + offset, postText)\r\n        ];\r\n    }\r\n    static _splitCurr(edit, offset) {\r\n        const preText = edit.oldText.substr(0, offset);\r\n        const postText = edit.oldText.substr(offset);\r\n        return [\r\n            new TextChange(edit.oldPosition, preText, edit.newPosition, edit.newText),\r\n            new TextChange(edit.oldPosition + offset, postText, edit.newEnd, '')\r\n        ];\r\n    }\r\n    static _merge(edits) {\r\n        if (edits.length === 0) {\r\n            return edits;\r\n        }\r\n        let result = [], resultLen = 0;\r\n        let prev = edits[0];\r\n        for (let i = 1; i < edits.length; i++) {\r\n            const curr = edits[i];\r\n            if (prev.oldEnd === curr.oldPosition) {\r\n                // Merge into `prev`\r\n                prev = new TextChange(prev.oldPosition, prev.oldText + curr.oldText, prev.newPosition, prev.newText + curr.newText);\r\n            }\r\n            else {\r\n                result[resultLen++] = prev;\r\n                prev = curr;\r\n            }\r\n        }\r\n        result[resultLen++] = prev;\r\n        return result;\r\n    }\r\n    static _removeNoOps(edits) {\r\n        if (edits.length === 0) {\r\n            return edits;\r\n        }\r\n        let result = [], resultLen = 0;\r\n        for (let i = 0; i < edits.length; i++) {\r\n            const edit = edits[i];\r\n            if (edit.oldText === edit.newText) {\r\n                continue;\r\n            }\r\n            result[resultLen++] = edit;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}