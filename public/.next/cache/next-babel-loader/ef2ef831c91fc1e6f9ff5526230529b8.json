{"ast":null,"code":"import _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { toUint32 } from '../../../base/common/uint.js';\nexport var PrefixSumIndexOfResult = function PrefixSumIndexOfResult(index, remainder) {\n  _classCallCheck(this, PrefixSumIndexOfResult);\n\n  this.index = index;\n  this.remainder = remainder;\n};\nexport var PrefixSumComputer = /*#__PURE__*/function () {\n  function PrefixSumComputer(values) {\n    _classCallCheck(this, PrefixSumComputer);\n\n    this.values = values;\n    this.prefixSum = new Uint32Array(values.length);\n    this.prefixSumValidIndex = new Int32Array(1);\n    this.prefixSumValidIndex[0] = -1;\n  }\n\n  _createClass(PrefixSumComputer, [{\n    key: \"insertValues\",\n    value: function insertValues(insertIndex, _insertValues) {\n      insertIndex = toUint32(insertIndex);\n      var oldValues = this.values;\n      var oldPrefixSum = this.prefixSum;\n      var insertValuesLen = _insertValues.length;\n\n      if (insertValuesLen === 0) {\n        return false;\n      }\n\n      this.values = new Uint32Array(oldValues.length + insertValuesLen);\n      this.values.set(oldValues.subarray(0, insertIndex), 0);\n      this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n      this.values.set(_insertValues, insertIndex);\n\n      if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n        this.prefixSumValidIndex[0] = insertIndex - 1;\n      }\n\n      this.prefixSum = new Uint32Array(this.values.length);\n\n      if (this.prefixSumValidIndex[0] >= 0) {\n        this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n      }\n\n      return true;\n    }\n  }, {\n    key: \"changeValue\",\n    value: function changeValue(index, value) {\n      index = toUint32(index);\n      value = toUint32(value);\n\n      if (this.values[index] === value) {\n        return false;\n      }\n\n      this.values[index] = value;\n\n      if (index - 1 < this.prefixSumValidIndex[0]) {\n        this.prefixSumValidIndex[0] = index - 1;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"removeValues\",\n    value: function removeValues(startIndex, cnt) {\n      startIndex = toUint32(startIndex);\n      cnt = toUint32(cnt);\n      var oldValues = this.values;\n      var oldPrefixSum = this.prefixSum;\n\n      if (startIndex >= oldValues.length) {\n        return false;\n      }\n\n      var maxCnt = oldValues.length - startIndex;\n\n      if (cnt >= maxCnt) {\n        cnt = maxCnt;\n      }\n\n      if (cnt === 0) {\n        return false;\n      }\n\n      this.values = new Uint32Array(oldValues.length - cnt);\n      this.values.set(oldValues.subarray(0, startIndex), 0);\n      this.values.set(oldValues.subarray(startIndex + cnt), startIndex);\n      this.prefixSum = new Uint32Array(this.values.length);\n\n      if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n        this.prefixSumValidIndex[0] = startIndex - 1;\n      }\n\n      if (this.prefixSumValidIndex[0] >= 0) {\n        this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getTotalValue\",\n    value: function getTotalValue() {\n      if (this.values.length === 0) {\n        return 0;\n      }\n\n      return this._getAccumulatedValue(this.values.length - 1);\n    }\n  }, {\n    key: \"getAccumulatedValue\",\n    value: function getAccumulatedValue(index) {\n      if (index < 0) {\n        return 0;\n      }\n\n      index = toUint32(index);\n      return this._getAccumulatedValue(index);\n    }\n  }, {\n    key: \"_getAccumulatedValue\",\n    value: function _getAccumulatedValue(index) {\n      if (index <= this.prefixSumValidIndex[0]) {\n        return this.prefixSum[index];\n      }\n\n      var startIndex = this.prefixSumValidIndex[0] + 1;\n\n      if (startIndex === 0) {\n        this.prefixSum[0] = this.values[0];\n        startIndex++;\n      }\n\n      if (index >= this.values.length) {\n        index = this.values.length - 1;\n      }\n\n      for (var i = startIndex; i <= index; i++) {\n        this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n      }\n\n      this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n      return this.prefixSum[index];\n    }\n  }, {\n    key: \"getIndexOf\",\n    value: function getIndexOf(accumulatedValue) {\n      accumulatedValue = Math.floor(accumulatedValue); //@perf\n      // Compute all sums (to get a fully valid prefixSum)\n\n      this.getTotalValue();\n      var low = 0;\n      var high = this.values.length - 1;\n      var mid = 0;\n      var midStop = 0;\n      var midStart = 0;\n\n      while (low <= high) {\n        mid = low + (high - low) / 2 | 0;\n        midStop = this.prefixSum[mid];\n        midStart = midStop - this.values[mid];\n\n        if (accumulatedValue < midStart) {\n          high = mid - 1;\n        } else if (accumulatedValue >= midStop) {\n          low = mid + 1;\n        } else {\n          break;\n        }\n      }\n\n      return new PrefixSumIndexOfResult(mid, accumulatedValue - midStart);\n    }\n  }]);\n\n  return PrefixSumComputer;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js"],"names":["toUint32","PrefixSumIndexOfResult","index","remainder","PrefixSumComputer","values","prefixSum","Uint32Array","length","prefixSumValidIndex","Int32Array","insertIndex","insertValues","oldValues","oldPrefixSum","insertValuesLen","set","subarray","value","startIndex","cnt","maxCnt","_getAccumulatedValue","i","Math","max","accumulatedValue","floor","getTotalValue","low","high","mid","midStop","midStart"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { toUint32 } from '../../../base/common/uint.js';\r\nexport class PrefixSumIndexOfResult {\r\n    constructor(index, remainder) {\r\n        this.index = index;\r\n        this.remainder = remainder;\r\n    }\r\n}\r\nexport class PrefixSumComputer {\r\n    constructor(values) {\r\n        this.values = values;\r\n        this.prefixSum = new Uint32Array(values.length);\r\n        this.prefixSumValidIndex = new Int32Array(1);\r\n        this.prefixSumValidIndex[0] = -1;\r\n    }\r\n    insertValues(insertIndex, insertValues) {\r\n        insertIndex = toUint32(insertIndex);\r\n        const oldValues = this.values;\r\n        const oldPrefixSum = this.prefixSum;\r\n        const insertValuesLen = insertValues.length;\r\n        if (insertValuesLen === 0) {\r\n            return false;\r\n        }\r\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\r\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\r\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\r\n        this.values.set(insertValues, insertIndex);\r\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = insertIndex - 1;\r\n        }\r\n        this.prefixSum = new Uint32Array(this.values.length);\r\n        if (this.prefixSumValidIndex[0] >= 0) {\r\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\r\n        }\r\n        return true;\r\n    }\r\n    changeValue(index, value) {\r\n        index = toUint32(index);\r\n        value = toUint32(value);\r\n        if (this.values[index] === value) {\r\n            return false;\r\n        }\r\n        this.values[index] = value;\r\n        if (index - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = index - 1;\r\n        }\r\n        return true;\r\n    }\r\n    removeValues(startIndex, cnt) {\r\n        startIndex = toUint32(startIndex);\r\n        cnt = toUint32(cnt);\r\n        const oldValues = this.values;\r\n        const oldPrefixSum = this.prefixSum;\r\n        if (startIndex >= oldValues.length) {\r\n            return false;\r\n        }\r\n        let maxCnt = oldValues.length - startIndex;\r\n        if (cnt >= maxCnt) {\r\n            cnt = maxCnt;\r\n        }\r\n        if (cnt === 0) {\r\n            return false;\r\n        }\r\n        this.values = new Uint32Array(oldValues.length - cnt);\r\n        this.values.set(oldValues.subarray(0, startIndex), 0);\r\n        this.values.set(oldValues.subarray(startIndex + cnt), startIndex);\r\n        this.prefixSum = new Uint32Array(this.values.length);\r\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = startIndex - 1;\r\n        }\r\n        if (this.prefixSumValidIndex[0] >= 0) {\r\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\r\n        }\r\n        return true;\r\n    }\r\n    getTotalValue() {\r\n        if (this.values.length === 0) {\r\n            return 0;\r\n        }\r\n        return this._getAccumulatedValue(this.values.length - 1);\r\n    }\r\n    getAccumulatedValue(index) {\r\n        if (index < 0) {\r\n            return 0;\r\n        }\r\n        index = toUint32(index);\r\n        return this._getAccumulatedValue(index);\r\n    }\r\n    _getAccumulatedValue(index) {\r\n        if (index <= this.prefixSumValidIndex[0]) {\r\n            return this.prefixSum[index];\r\n        }\r\n        let startIndex = this.prefixSumValidIndex[0] + 1;\r\n        if (startIndex === 0) {\r\n            this.prefixSum[0] = this.values[0];\r\n            startIndex++;\r\n        }\r\n        if (index >= this.values.length) {\r\n            index = this.values.length - 1;\r\n        }\r\n        for (let i = startIndex; i <= index; i++) {\r\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\r\n        }\r\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\r\n        return this.prefixSum[index];\r\n    }\r\n    getIndexOf(accumulatedValue) {\r\n        accumulatedValue = Math.floor(accumulatedValue); //@perf\r\n        // Compute all sums (to get a fully valid prefixSum)\r\n        this.getTotalValue();\r\n        let low = 0;\r\n        let high = this.values.length - 1;\r\n        let mid = 0;\r\n        let midStop = 0;\r\n        let midStart = 0;\r\n        while (low <= high) {\r\n            mid = low + ((high - low) / 2) | 0;\r\n            midStop = this.prefixSum[mid];\r\n            midStart = midStop - this.values[mid];\r\n            if (accumulatedValue < midStart) {\r\n                high = mid - 1;\r\n            }\r\n            else if (accumulatedValue >= midStop) {\r\n                low = mid + 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return new PrefixSumIndexOfResult(mid, accumulatedValue - midStart);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}