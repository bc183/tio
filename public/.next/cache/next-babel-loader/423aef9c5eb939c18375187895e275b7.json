{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\nexport var CharacterPairSupport = /*#__PURE__*/function () {\n  function CharacterPairSupport(config) {\n    _classCallCheck(this, CharacterPairSupport);\n\n    if (config.autoClosingPairs) {\n      this._autoClosingPairs = config.autoClosingPairs.map(function (el) {\n        return new StandardAutoClosingPairConditional(el);\n      });\n    } else if (config.brackets) {\n      this._autoClosingPairs = config.brackets.map(function (b) {\n        return new StandardAutoClosingPairConditional({\n          open: b[0],\n          close: b[1]\n        });\n      });\n    } else {\n      this._autoClosingPairs = [];\n    }\n\n    if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n      var docComment = config.__electricCharacterSupport.docComment; // IDocComment is legacy, only partially supported\n\n      this._autoClosingPairs.push(new StandardAutoClosingPairConditional({\n        open: docComment.open,\n        close: docComment.close || ''\n      }));\n    }\n\n    this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n    this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n  }\n\n  _createClass(CharacterPairSupport, [{\n    key: \"getAutoClosingPairs\",\n    value: function getAutoClosingPairs() {\n      return this._autoClosingPairs;\n    }\n  }, {\n    key: \"getAutoCloseBeforeSet\",\n    value: function getAutoCloseBeforeSet() {\n      return this._autoCloseBefore;\n    }\n  }, {\n    key: \"getSurroundingPairs\",\n    value: function getSurroundingPairs() {\n      return this._surroundingPairs;\n    }\n  }], [{\n    key: \"shouldAutoClosePair\",\n    value: function shouldAutoClosePair(autoClosingPair, context, column) {\n      // Always complete on empty line\n      if (context.getTokenCount() === 0) {\n        return true;\n      }\n\n      var tokenIndex = context.findTokenIndexAtOffset(column - 2);\n      var standardTokenType = context.getStandardTokenType(tokenIndex);\n      return autoClosingPair.isOK(standardTokenType);\n    }\n  }]);\n\n  return CharacterPairSupport;\n}();\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/characterPair.js"],"names":["StandardAutoClosingPairConditional","CharacterPairSupport","config","autoClosingPairs","_autoClosingPairs","map","el","brackets","b","open","close","__electricCharacterSupport","docComment","push","_autoCloseBefore","autoCloseBefore","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED","_surroundingPairs","surroundingPairs","autoClosingPair","context","column","getTokenCount","tokenIndex","findTokenIndexAtOffset","standardTokenType","getStandardTokenType","isOK"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,SAASA,kCAAT,QAAmD,6BAAnD;AACA,WAAaC,oBAAb;AACI,gCAAYC,MAAZ,EAAoB;AAAA;;AAChB,QAAIA,MAAM,CAACC,gBAAX,EAA6B;AACzB,WAAKC,iBAAL,GAAyBF,MAAM,CAACC,gBAAP,CAAwBE,GAAxB,CAA4B,UAAAC,EAAE;AAAA,eAAI,IAAIN,kCAAJ,CAAuCM,EAAvC,CAAJ;AAAA,OAA9B,CAAzB;AACH,KAFD,MAGK,IAAIJ,MAAM,CAACK,QAAX,EAAqB;AACtB,WAAKH,iBAAL,GAAyBF,MAAM,CAACK,QAAP,CAAgBF,GAAhB,CAAoB,UAAAG,CAAC;AAAA,eAAI,IAAIR,kCAAJ,CAAuC;AAAES,UAAAA,IAAI,EAAED,CAAC,CAAC,CAAD,CAAT;AAAcE,UAAAA,KAAK,EAAEF,CAAC,CAAC,CAAD;AAAtB,SAAvC,CAAJ;AAAA,OAArB,CAAzB;AACH,KAFI,MAGA;AACD,WAAKJ,iBAAL,GAAyB,EAAzB;AACH;;AACD,QAAIF,MAAM,CAACS,0BAAP,IAAqCT,MAAM,CAACS,0BAAP,CAAkCC,UAA3E,EAAuF;AACnF,UAAMA,UAAU,GAAGV,MAAM,CAACS,0BAAP,CAAkCC,UAArD,CADmF,CAEnF;;AACA,WAAKR,iBAAL,CAAuBS,IAAvB,CAA4B,IAAIb,kCAAJ,CAAuC;AAAES,QAAAA,IAAI,EAAEG,UAAU,CAACH,IAAnB;AAAyBC,QAAAA,KAAK,EAAEE,UAAU,CAACF,KAAX,IAAoB;AAApD,OAAvC,CAA5B;AACH;;AACD,SAAKI,gBAAL,GAAwB,OAAOZ,MAAM,CAACa,eAAd,KAAkC,QAAlC,GAA6Cb,MAAM,CAACa,eAApD,GAAsEd,oBAAoB,CAACe,yCAAnH;AACA,SAAKC,iBAAL,GAAyBf,MAAM,CAACgB,gBAAP,IAA2B,KAAKd,iBAAzD;AACH;;AAlBL;AAAA;AAAA,0CAmB0B;AAClB,aAAO,KAAKA,iBAAZ;AACH;AArBL;AAAA;AAAA,4CAsB4B;AACpB,aAAO,KAAKU,gBAAZ;AACH;AAxBL;AAAA;AAAA,0CAkC0B;AAClB,aAAO,KAAKG,iBAAZ;AACH;AApCL;AAAA;AAAA,wCAyB+BE,eAzB/B,EAyBgDC,OAzBhD,EAyByDC,MAzBzD,EAyBiE;AACzD;AACA,UAAID,OAAO,CAACE,aAAR,OAA4B,CAAhC,EAAmC;AAC/B,eAAO,IAAP;AACH;;AACD,UAAMC,UAAU,GAAGH,OAAO,CAACI,sBAAR,CAA+BH,MAAM,GAAG,CAAxC,CAAnB;AACA,UAAMI,iBAAiB,GAAGL,OAAO,CAACM,oBAAR,CAA6BH,UAA7B,CAA1B;AACA,aAAOJ,eAAe,CAACQ,IAAhB,CAAqBF,iBAArB,CAAP;AACH;AAjCL;;AAAA;AAAA;AAsCAxB,oBAAoB,CAACe,yCAArB,GAAiE,gBAAjE","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\r\nexport class CharacterPairSupport {\r\n    constructor(config) {\r\n        if (config.autoClosingPairs) {\r\n            this._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\r\n        }\r\n        else if (config.brackets) {\r\n            this._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }));\r\n        }\r\n        else {\r\n            this._autoClosingPairs = [];\r\n        }\r\n        if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\r\n            const docComment = config.__electricCharacterSupport.docComment;\r\n            // IDocComment is legacy, only partially supported\r\n            this._autoClosingPairs.push(new StandardAutoClosingPairConditional({ open: docComment.open, close: docComment.close || '' }));\r\n        }\r\n        this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\r\n        this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\r\n    }\r\n    getAutoClosingPairs() {\r\n        return this._autoClosingPairs;\r\n    }\r\n    getAutoCloseBeforeSet() {\r\n        return this._autoCloseBefore;\r\n    }\r\n    static shouldAutoClosePair(autoClosingPair, context, column) {\r\n        // Always complete on empty line\r\n        if (context.getTokenCount() === 0) {\r\n            return true;\r\n        }\r\n        const tokenIndex = context.findTokenIndexAtOffset(column - 2);\r\n        const standardTokenType = context.getStandardTokenType(tokenIndex);\r\n        return autoClosingPair.isOK(standardTokenType);\r\n    }\r\n    getSurroundingPairs() {\r\n        return this._surroundingPairs;\r\n    }\r\n}\r\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\r\n"]},"metadata":{},"sourceType":"module"}