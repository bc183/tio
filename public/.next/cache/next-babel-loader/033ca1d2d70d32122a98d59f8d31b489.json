{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nexport var OneCursor = /*#__PURE__*/function () {\n  function OneCursor(context) {\n    _classCallCheck(this, OneCursor);\n\n    this._selTrackedRange = null;\n    this._trackSelection = true;\n\n    this._setState(context, new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0), new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0));\n  }\n\n  _createClass(OneCursor, [{\n    key: \"dispose\",\n    value: function dispose(context) {\n      this._removeTrackedRange(context);\n    }\n  }, {\n    key: \"startTrackingSelection\",\n    value: function startTrackingSelection(context) {\n      this._trackSelection = true;\n\n      this._updateTrackedRange(context);\n    }\n  }, {\n    key: \"stopTrackingSelection\",\n    value: function stopTrackingSelection(context) {\n      this._trackSelection = false;\n\n      this._removeTrackedRange(context);\n    }\n  }, {\n    key: \"_updateTrackedRange\",\n    value: function _updateTrackedRange(context) {\n      if (!this._trackSelection) {\n        // don't track the selection\n        return;\n      }\n\n      this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0\n      /* AlwaysGrowsWhenTypingAtEdges */\n      );\n    }\n  }, {\n    key: \"_removeTrackedRange\",\n    value: function _removeTrackedRange(context) {\n      this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, 0\n      /* AlwaysGrowsWhenTypingAtEdges */\n      );\n    }\n  }, {\n    key: \"asCursorState\",\n    value: function asCursorState() {\n      return new CursorState(this.modelState, this.viewState);\n    }\n  }, {\n    key: \"readSelectionFromMarkers\",\n    value: function readSelectionFromMarkers(context) {\n      var range = context.model._getTrackedRange(this._selTrackedRange);\n\n      if (this.modelState.selection.getDirection() === 0\n      /* LTR */\n      ) {\n          return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        }\n\n      return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n    }\n  }, {\n    key: \"ensureValidState\",\n    value: function ensureValidState(context) {\n      this._setState(context, this.modelState, this.viewState);\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(context, modelState, viewState) {\n      this._setState(context, modelState, viewState);\n    }\n  }, {\n    key: \"_setState\",\n    value: function _setState(context, modelState, viewState) {\n      if (!modelState) {\n        if (!viewState) {\n          return;\n        } // We only have the view state => compute the model state\n\n\n        var selectionStart = context.model.validateRange(context.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart));\n        var position = context.model.validatePosition(context.coordinatesConverter.convertViewPositionToModelPosition(viewState.position));\n        modelState = new SingleCursorState(selectionStart, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\n      } else {\n        // Validate new model state\n        var _selectionStart = context.model.validateRange(modelState.selectionStart);\n\n        var selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(_selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\n\n        var _position = context.model.validatePosition(modelState.position);\n\n        var leftoverVisibleColumns = modelState.position.equals(_position) ? modelState.leftoverVisibleColumns : 0;\n        modelState = new SingleCursorState(_selectionStart, selectionStartLeftoverVisibleColumns, _position, leftoverVisibleColumns);\n      }\n\n      if (!viewState) {\n        // We only have the model state => compute the view state\n        var viewSelectionStart1 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\n        var viewSelectionStart2 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\n        var viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\n        var viewPosition = context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);\n        viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n      } else {\n        // Validate new view state\n        var _viewSelectionStart = context.coordinatesConverter.validateViewRange(viewState.selectionStart, modelState.selectionStart);\n\n        var _viewPosition = context.coordinatesConverter.validateViewPosition(viewState.position, modelState.position);\n\n        viewState = new SingleCursorState(_viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, _viewPosition, modelState.leftoverVisibleColumns);\n      }\n\n      this.modelState = modelState;\n      this.viewState = viewState;\n\n      this._updateTrackedRange(context);\n    }\n  }]);\n\n  return OneCursor;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/controller/oneCursor.js"],"names":["CursorState","SingleCursorState","Position","Range","Selection","OneCursor","context","_selTrackedRange","_trackSelection","_setState","_removeTrackedRange","_updateTrackedRange","model","_setTrackedRange","modelState","selection","viewState","range","_getTrackedRange","getDirection","startLineNumber","startColumn","endLineNumber","endColumn","selectionStart","validateRange","coordinatesConverter","convertViewRangeToModelRange","position","validatePosition","convertViewPositionToModelPosition","selectionStartLeftoverVisibleColumns","leftoverVisibleColumns","equalsRange","equals","viewSelectionStart1","convertModelPositionToViewPosition","viewSelectionStart2","viewSelectionStart","lineNumber","column","viewPosition","validateViewRange","validateViewPosition"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nexport class OneCursor {\r\n    constructor(context) {\r\n        this._selTrackedRange = null;\r\n        this._trackSelection = true;\r\n        this._setState(context, new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0), new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0));\r\n    }\r\n    dispose(context) {\r\n        this._removeTrackedRange(context);\r\n    }\r\n    startTrackingSelection(context) {\r\n        this._trackSelection = true;\r\n        this._updateTrackedRange(context);\r\n    }\r\n    stopTrackingSelection(context) {\r\n        this._trackSelection = false;\r\n        this._removeTrackedRange(context);\r\n    }\r\n    _updateTrackedRange(context) {\r\n        if (!this._trackSelection) {\r\n            // don't track the selection\r\n            return;\r\n        }\r\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0 /* AlwaysGrowsWhenTypingAtEdges */);\r\n    }\r\n    _removeTrackedRange(context) {\r\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, 0 /* AlwaysGrowsWhenTypingAtEdges */);\r\n    }\r\n    asCursorState() {\r\n        return new CursorState(this.modelState, this.viewState);\r\n    }\r\n    readSelectionFromMarkers(context) {\r\n        const range = context.model._getTrackedRange(this._selTrackedRange);\r\n        if (this.modelState.selection.getDirection() === 0 /* LTR */) {\r\n            return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n        }\r\n        return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\r\n    }\r\n    ensureValidState(context) {\r\n        this._setState(context, this.modelState, this.viewState);\r\n    }\r\n    setState(context, modelState, viewState) {\r\n        this._setState(context, modelState, viewState);\r\n    }\r\n    _setState(context, modelState, viewState) {\r\n        if (!modelState) {\r\n            if (!viewState) {\r\n                return;\r\n            }\r\n            // We only have the view state => compute the model state\r\n            const selectionStart = context.model.validateRange(context.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart));\r\n            const position = context.model.validatePosition(context.coordinatesConverter.convertViewPositionToModelPosition(viewState.position));\r\n            modelState = new SingleCursorState(selectionStart, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\r\n        }\r\n        else {\r\n            // Validate new model state\r\n            const selectionStart = context.model.validateRange(modelState.selectionStart);\r\n            const selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\r\n            const position = context.model.validatePosition(modelState.position);\r\n            const leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\r\n            modelState = new SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\r\n        }\r\n        if (!viewState) {\r\n            // We only have the model state => compute the view state\r\n            const viewSelectionStart1 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\r\n            const viewSelectionStart2 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\r\n            const viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\r\n            const viewPosition = context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);\r\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\r\n        }\r\n        else {\r\n            // Validate new view state\r\n            const viewSelectionStart = context.coordinatesConverter.validateViewRange(viewState.selectionStart, modelState.selectionStart);\r\n            const viewPosition = context.coordinatesConverter.validateViewPosition(viewState.position, modelState.position);\r\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\r\n        }\r\n        this.modelState = modelState;\r\n        this.viewState = viewState;\r\n        this._updateTrackedRange(context);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}