{"ast":null,"code":"import _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { TokenizationRegistry, TokenMetadata } from '../../common/modes.js';\nimport { TokenTheme, generateTokensCSSForColorMap } from '../../common/modes/supports/tokenization.js';\nimport { hc_black, vs, vs_dark } from '../common/themes.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Extensions } from '../../../platform/theme/common/colorRegistry.js';\nimport { Extensions as ThemingExtensions } from '../../../platform/theme/common/themeService.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ColorScheme } from '../../../platform/theme/common/theme.js';\nimport { getIconRegistry } from '../../../platform/theme/common/iconRegistry.js';\nvar VS_THEME_NAME = 'vs';\nvar VS_DARK_THEME_NAME = 'vs-dark';\nvar HC_BLACK_THEME_NAME = 'hc-black';\nvar colorRegistry = Registry.as(Extensions.ColorContribution);\nvar themingRegistry = Registry.as(ThemingExtensions.ThemingContribution);\n\nvar StandaloneTheme = /*#__PURE__*/function () {\n  function StandaloneTheme(name, standaloneThemeData) {\n    _classCallCheck(this, StandaloneTheme);\n\n    this.semanticHighlighting = false;\n    this.themeData = standaloneThemeData;\n    var base = standaloneThemeData.base;\n\n    if (name.length > 0) {\n      if (isBuiltinTheme(name)) {\n        this.id = name;\n      } else {\n        this.id = base + ' ' + name;\n      }\n\n      this.themeName = name;\n    } else {\n      this.id = base;\n      this.themeName = base;\n    }\n\n    this.colors = null;\n    this.defaultColors = Object.create(null);\n    this._tokenTheme = null;\n  }\n\n  _createClass(StandaloneTheme, [{\n    key: \"notifyBaseUpdated\",\n    value: function notifyBaseUpdated() {\n      if (this.themeData.inherit) {\n        this.colors = null;\n        this._tokenTheme = null;\n      }\n    }\n  }, {\n    key: \"getColors\",\n    value: function getColors() {\n      if (!this.colors) {\n        var colors = new Map();\n\n        for (var id in this.themeData.colors) {\n          colors.set(id, Color.fromHex(this.themeData.colors[id]));\n        }\n\n        if (this.themeData.inherit) {\n          var baseData = getBuiltinRules(this.themeData.base);\n\n          for (var _id in baseData.colors) {\n            if (!colors.has(_id)) {\n              colors.set(_id, Color.fromHex(baseData.colors[_id]));\n            }\n          }\n        }\n\n        this.colors = colors;\n      }\n\n      return this.colors;\n    }\n  }, {\n    key: \"getColor\",\n    value: function getColor(colorId, useDefault) {\n      var color = this.getColors().get(colorId);\n\n      if (color) {\n        return color;\n      }\n\n      if (useDefault !== false) {\n        return this.getDefault(colorId);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getDefault\",\n    value: function getDefault(colorId) {\n      var color = this.defaultColors[colorId];\n\n      if (color) {\n        return color;\n      }\n\n      color = colorRegistry.resolveDefaultColor(colorId, this);\n      this.defaultColors[colorId] = color;\n      return color;\n    }\n  }, {\n    key: \"defines\",\n    value: function defines(colorId) {\n      return Object.prototype.hasOwnProperty.call(this.getColors(), colorId);\n    }\n  }, {\n    key: \"getTokenStyleMetadata\",\n    value: function getTokenStyleMetadata(type, modifiers, modelLanguage) {\n      // use theme rules match\n      var style = this.tokenTheme._match([type].concat(modifiers).join('.'));\n\n      var metadata = style.metadata;\n      var foreground = TokenMetadata.getForeground(metadata);\n      var fontStyle = TokenMetadata.getFontStyle(metadata);\n      return {\n        foreground: foreground,\n        italic: Boolean(fontStyle & 1\n        /* Italic */\n        ),\n        bold: Boolean(fontStyle & 2\n        /* Bold */\n        ),\n        underline: Boolean(fontStyle & 4\n        /* Underline */\n        )\n      };\n    }\n  }, {\n    key: \"base\",\n    get: function get() {\n      return this.themeData.base;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      switch (this.base) {\n        case VS_THEME_NAME:\n          return ColorScheme.LIGHT;\n\n        case HC_BLACK_THEME_NAME:\n          return ColorScheme.HIGH_CONTRAST;\n\n        default:\n          return ColorScheme.DARK;\n      }\n    }\n  }, {\n    key: \"tokenTheme\",\n    get: function get() {\n      if (!this._tokenTheme) {\n        var rules = [];\n        var encodedTokensColors = [];\n\n        if (this.themeData.inherit) {\n          var baseData = getBuiltinRules(this.themeData.base);\n          rules = baseData.rules;\n\n          if (baseData.encodedTokensColors) {\n            encodedTokensColors = baseData.encodedTokensColors;\n          }\n        }\n\n        rules = rules.concat(this.themeData.rules);\n\n        if (this.themeData.encodedTokensColors) {\n          encodedTokensColors = this.themeData.encodedTokensColors;\n        }\n\n        this._tokenTheme = TokenTheme.createFromRawTokenTheme(rules, encodedTokensColors);\n      }\n\n      return this._tokenTheme;\n    }\n  }]);\n\n  return StandaloneTheme;\n}();\n\nfunction isBuiltinTheme(themeName) {\n  return themeName === VS_THEME_NAME || themeName === VS_DARK_THEME_NAME || themeName === HC_BLACK_THEME_NAME;\n}\n\nfunction getBuiltinRules(builtinTheme) {\n  switch (builtinTheme) {\n    case VS_THEME_NAME:\n      return vs;\n\n    case VS_DARK_THEME_NAME:\n      return vs_dark;\n\n    case HC_BLACK_THEME_NAME:\n      return hc_black;\n  }\n}\n\nfunction newBuiltInTheme(builtinTheme) {\n  var themeData = getBuiltinRules(builtinTheme);\n  return new StandaloneTheme(builtinTheme, themeData);\n}\n\nexport var StandaloneThemeServiceImpl = /*#__PURE__*/function (_Disposable) {\n  _inherits(StandaloneThemeServiceImpl, _Disposable);\n\n  var _super = _createSuper(StandaloneThemeServiceImpl);\n\n  function StandaloneThemeServiceImpl() {\n    var _this;\n\n    _classCallCheck(this, StandaloneThemeServiceImpl);\n\n    _this = _super.call(this);\n    _this._onColorThemeChange = _this._register(new Emitter());\n    _this.onDidColorThemeChange = _this._onColorThemeChange.event;\n    _this._environment = Object.create(null);\n    _this._knownThemes = new Map();\n\n    _this._knownThemes.set(VS_THEME_NAME, newBuiltInTheme(VS_THEME_NAME));\n\n    _this._knownThemes.set(VS_DARK_THEME_NAME, newBuiltInTheme(VS_DARK_THEME_NAME));\n\n    _this._knownThemes.set(HC_BLACK_THEME_NAME, newBuiltInTheme(HC_BLACK_THEME_NAME));\n\n    var iconRegistry = getIconRegistry();\n    _this._codiconCSS = iconRegistry.getCSS();\n    _this._themeCSS = '';\n    _this._allCSS = \"\".concat(_this._codiconCSS, \"\\n\").concat(_this._themeCSS);\n    _this._globalStyleElement = null;\n    _this._styleElements = [];\n    _this._colorMapOverride = null;\n\n    _this.setTheme(VS_THEME_NAME);\n\n    iconRegistry.onDidChange(function () {\n      _this._codiconCSS = iconRegistry.getCSS();\n\n      _this._updateCSS();\n    });\n    return _this;\n  }\n\n  _createClass(StandaloneThemeServiceImpl, [{\n    key: \"registerEditorContainer\",\n    value: function registerEditorContainer(domNode) {\n      if (dom.isInShadowDOM(domNode)) {\n        return this._registerShadowDomContainer(domNode);\n      }\n\n      return this._registerRegularEditorContainer();\n    }\n  }, {\n    key: \"_registerRegularEditorContainer\",\n    value: function _registerRegularEditorContainer() {\n      if (!this._globalStyleElement) {\n        this._globalStyleElement = dom.createStyleSheet();\n        this._globalStyleElement.className = 'monaco-colors';\n        this._globalStyleElement.textContent = this._allCSS;\n\n        this._styleElements.push(this._globalStyleElement);\n      }\n\n      return Disposable.None;\n    }\n  }, {\n    key: \"_registerShadowDomContainer\",\n    value: function _registerShadowDomContainer(domNode) {\n      var _this2 = this;\n\n      var styleElement = dom.createStyleSheet(domNode);\n      styleElement.className = 'monaco-colors';\n      styleElement.textContent = this._allCSS;\n\n      this._styleElements.push(styleElement);\n\n      return {\n        dispose: function dispose() {\n          for (var i = 0; i < _this2._styleElements.length; i++) {\n            if (_this2._styleElements[i] === styleElement) {\n              _this2._styleElements.splice(i, 1);\n\n              return;\n            }\n          }\n        }\n      };\n    }\n  }, {\n    key: \"defineTheme\",\n    value: function defineTheme(themeName, themeData) {\n      if (!/^[a-z0-9\\-]+$/i.test(themeName)) {\n        throw new Error('Illegal theme name!');\n      }\n\n      if (!isBuiltinTheme(themeData.base) && !isBuiltinTheme(themeName)) {\n        throw new Error('Illegal theme base!');\n      } // set or replace theme\n\n\n      this._knownThemes.set(themeName, new StandaloneTheme(themeName, themeData));\n\n      if (isBuiltinTheme(themeName)) {\n        this._knownThemes.forEach(function (theme) {\n          if (theme.base === themeName) {\n            theme.notifyBaseUpdated();\n          }\n        });\n      }\n\n      if (this._theme && this._theme.themeName === themeName) {\n        this.setTheme(themeName); // refresh theme\n      }\n    }\n  }, {\n    key: \"getColorTheme\",\n    value: function getColorTheme() {\n      return this._theme;\n    }\n  }, {\n    key: \"setColorMapOverride\",\n    value: function setColorMapOverride(colorMapOverride) {\n      this._colorMapOverride = colorMapOverride;\n\n      this._updateThemeOrColorMap();\n    }\n  }, {\n    key: \"setTheme\",\n    value: function setTheme(themeName) {\n      var theme;\n\n      if (this._knownThemes.has(themeName)) {\n        theme = this._knownThemes.get(themeName);\n      } else {\n        theme = this._knownThemes.get(VS_THEME_NAME);\n      }\n\n      if (this._theme === theme) {\n        // Nothing to do\n        return theme.id;\n      }\n\n      this._theme = theme;\n\n      this._updateThemeOrColorMap();\n\n      return theme.id;\n    }\n  }, {\n    key: \"_updateThemeOrColorMap\",\n    value: function _updateThemeOrColorMap() {\n      var _this3 = this;\n\n      var cssRules = [];\n      var hasRule = {};\n      var ruleCollector = {\n        addRule: function addRule(rule) {\n          if (!hasRule[rule]) {\n            cssRules.push(rule);\n            hasRule[rule] = true;\n          }\n        }\n      };\n      themingRegistry.getThemingParticipants().forEach(function (p) {\n        return p(_this3._theme, ruleCollector, _this3._environment);\n      });\n\n      var colorMap = this._colorMapOverride || this._theme.tokenTheme.getColorMap();\n\n      ruleCollector.addRule(generateTokensCSSForColorMap(colorMap));\n      this._themeCSS = cssRules.join('\\n');\n\n      this._updateCSS();\n\n      TokenizationRegistry.setColorMap(colorMap);\n\n      this._onColorThemeChange.fire(this._theme);\n    }\n  }, {\n    key: \"_updateCSS\",\n    value: function _updateCSS() {\n      var _this4 = this;\n\n      this._allCSS = \"\".concat(this._codiconCSS, \"\\n\").concat(this._themeCSS);\n\n      this._styleElements.forEach(function (styleElement) {\n        return styleElement.textContent = _this4._allCSS;\n      });\n    }\n  }, {\n    key: \"getFileIconTheme\",\n    value: function getFileIconTheme() {\n      return {\n        hasFileIcons: false,\n        hasFolderIcons: false,\n        hidesExplorerArrows: false\n      };\n    }\n  }]);\n\n  return StandaloneThemeServiceImpl;\n}(Disposable);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneThemeServiceImpl.js"],"names":["dom","Color","Emitter","TokenizationRegistry","TokenMetadata","TokenTheme","generateTokensCSSForColorMap","hc_black","vs","vs_dark","Registry","Extensions","ThemingExtensions","Disposable","ColorScheme","getIconRegistry","VS_THEME_NAME","VS_DARK_THEME_NAME","HC_BLACK_THEME_NAME","colorRegistry","as","ColorContribution","themingRegistry","ThemingContribution","StandaloneTheme","name","standaloneThemeData","semanticHighlighting","themeData","base","length","isBuiltinTheme","id","themeName","colors","defaultColors","Object","create","_tokenTheme","inherit","Map","set","fromHex","baseData","getBuiltinRules","has","colorId","useDefault","color","getColors","get","getDefault","undefined","resolveDefaultColor","prototype","hasOwnProperty","call","type","modifiers","modelLanguage","style","tokenTheme","_match","concat","join","metadata","foreground","getForeground","fontStyle","getFontStyle","italic","Boolean","bold","underline","LIGHT","HIGH_CONTRAST","DARK","rules","encodedTokensColors","createFromRawTokenTheme","builtinTheme","newBuiltInTheme","StandaloneThemeServiceImpl","_onColorThemeChange","_register","onDidColorThemeChange","event","_environment","_knownThemes","iconRegistry","_codiconCSS","getCSS","_themeCSS","_allCSS","_globalStyleElement","_styleElements","_colorMapOverride","setTheme","onDidChange","_updateCSS","domNode","isInShadowDOM","_registerShadowDomContainer","_registerRegularEditorContainer","createStyleSheet","className","textContent","push","None","styleElement","dispose","i","splice","test","Error","forEach","theme","notifyBaseUpdated","_theme","colorMapOverride","_updateThemeOrColorMap","cssRules","hasRule","ruleCollector","addRule","rule","getThemingParticipants","p","colorMap","getColorMap","setColorMap","fire","hasFileIcons","hasFolderIcons","hidesExplorerArrows"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as dom from '../../../base/browser/dom.js';\r\nimport { Color } from '../../../base/common/color.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { TokenizationRegistry, TokenMetadata } from '../../common/modes.js';\r\nimport { TokenTheme, generateTokensCSSForColorMap } from '../../common/modes/supports/tokenization.js';\r\nimport { hc_black, vs, vs_dark } from '../common/themes.js';\r\nimport { Registry } from '../../../platform/registry/common/platform.js';\r\nimport { Extensions } from '../../../platform/theme/common/colorRegistry.js';\r\nimport { Extensions as ThemingExtensions } from '../../../platform/theme/common/themeService.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { ColorScheme } from '../../../platform/theme/common/theme.js';\r\nimport { getIconRegistry } from '../../../platform/theme/common/iconRegistry.js';\r\nconst VS_THEME_NAME = 'vs';\r\nconst VS_DARK_THEME_NAME = 'vs-dark';\r\nconst HC_BLACK_THEME_NAME = 'hc-black';\r\nconst colorRegistry = Registry.as(Extensions.ColorContribution);\r\nconst themingRegistry = Registry.as(ThemingExtensions.ThemingContribution);\r\nclass StandaloneTheme {\r\n    constructor(name, standaloneThemeData) {\r\n        this.semanticHighlighting = false;\r\n        this.themeData = standaloneThemeData;\r\n        let base = standaloneThemeData.base;\r\n        if (name.length > 0) {\r\n            if (isBuiltinTheme(name)) {\r\n                this.id = name;\r\n            }\r\n            else {\r\n                this.id = base + ' ' + name;\r\n            }\r\n            this.themeName = name;\r\n        }\r\n        else {\r\n            this.id = base;\r\n            this.themeName = base;\r\n        }\r\n        this.colors = null;\r\n        this.defaultColors = Object.create(null);\r\n        this._tokenTheme = null;\r\n    }\r\n    get base() {\r\n        return this.themeData.base;\r\n    }\r\n    notifyBaseUpdated() {\r\n        if (this.themeData.inherit) {\r\n            this.colors = null;\r\n            this._tokenTheme = null;\r\n        }\r\n    }\r\n    getColors() {\r\n        if (!this.colors) {\r\n            const colors = new Map();\r\n            for (let id in this.themeData.colors) {\r\n                colors.set(id, Color.fromHex(this.themeData.colors[id]));\r\n            }\r\n            if (this.themeData.inherit) {\r\n                let baseData = getBuiltinRules(this.themeData.base);\r\n                for (let id in baseData.colors) {\r\n                    if (!colors.has(id)) {\r\n                        colors.set(id, Color.fromHex(baseData.colors[id]));\r\n                    }\r\n                }\r\n            }\r\n            this.colors = colors;\r\n        }\r\n        return this.colors;\r\n    }\r\n    getColor(colorId, useDefault) {\r\n        const color = this.getColors().get(colorId);\r\n        if (color) {\r\n            return color;\r\n        }\r\n        if (useDefault !== false) {\r\n            return this.getDefault(colorId);\r\n        }\r\n        return undefined;\r\n    }\r\n    getDefault(colorId) {\r\n        let color = this.defaultColors[colorId];\r\n        if (color) {\r\n            return color;\r\n        }\r\n        color = colorRegistry.resolveDefaultColor(colorId, this);\r\n        this.defaultColors[colorId] = color;\r\n        return color;\r\n    }\r\n    defines(colorId) {\r\n        return Object.prototype.hasOwnProperty.call(this.getColors(), colorId);\r\n    }\r\n    get type() {\r\n        switch (this.base) {\r\n            case VS_THEME_NAME: return ColorScheme.LIGHT;\r\n            case HC_BLACK_THEME_NAME: return ColorScheme.HIGH_CONTRAST;\r\n            default: return ColorScheme.DARK;\r\n        }\r\n    }\r\n    get tokenTheme() {\r\n        if (!this._tokenTheme) {\r\n            let rules = [];\r\n            let encodedTokensColors = [];\r\n            if (this.themeData.inherit) {\r\n                let baseData = getBuiltinRules(this.themeData.base);\r\n                rules = baseData.rules;\r\n                if (baseData.encodedTokensColors) {\r\n                    encodedTokensColors = baseData.encodedTokensColors;\r\n                }\r\n            }\r\n            rules = rules.concat(this.themeData.rules);\r\n            if (this.themeData.encodedTokensColors) {\r\n                encodedTokensColors = this.themeData.encodedTokensColors;\r\n            }\r\n            this._tokenTheme = TokenTheme.createFromRawTokenTheme(rules, encodedTokensColors);\r\n        }\r\n        return this._tokenTheme;\r\n    }\r\n    getTokenStyleMetadata(type, modifiers, modelLanguage) {\r\n        // use theme rules match\r\n        const style = this.tokenTheme._match([type].concat(modifiers).join('.'));\r\n        const metadata = style.metadata;\r\n        const foreground = TokenMetadata.getForeground(metadata);\r\n        const fontStyle = TokenMetadata.getFontStyle(metadata);\r\n        return {\r\n            foreground: foreground,\r\n            italic: Boolean(fontStyle & 1 /* Italic */),\r\n            bold: Boolean(fontStyle & 2 /* Bold */),\r\n            underline: Boolean(fontStyle & 4 /* Underline */)\r\n        };\r\n    }\r\n}\r\nfunction isBuiltinTheme(themeName) {\r\n    return (themeName === VS_THEME_NAME\r\n        || themeName === VS_DARK_THEME_NAME\r\n        || themeName === HC_BLACK_THEME_NAME);\r\n}\r\nfunction getBuiltinRules(builtinTheme) {\r\n    switch (builtinTheme) {\r\n        case VS_THEME_NAME:\r\n            return vs;\r\n        case VS_DARK_THEME_NAME:\r\n            return vs_dark;\r\n        case HC_BLACK_THEME_NAME:\r\n            return hc_black;\r\n    }\r\n}\r\nfunction newBuiltInTheme(builtinTheme) {\r\n    let themeData = getBuiltinRules(builtinTheme);\r\n    return new StandaloneTheme(builtinTheme, themeData);\r\n}\r\nexport class StandaloneThemeServiceImpl extends Disposable {\r\n    constructor() {\r\n        super();\r\n        this._onColorThemeChange = this._register(new Emitter());\r\n        this.onDidColorThemeChange = this._onColorThemeChange.event;\r\n        this._environment = Object.create(null);\r\n        this._knownThemes = new Map();\r\n        this._knownThemes.set(VS_THEME_NAME, newBuiltInTheme(VS_THEME_NAME));\r\n        this._knownThemes.set(VS_DARK_THEME_NAME, newBuiltInTheme(VS_DARK_THEME_NAME));\r\n        this._knownThemes.set(HC_BLACK_THEME_NAME, newBuiltInTheme(HC_BLACK_THEME_NAME));\r\n        const iconRegistry = getIconRegistry();\r\n        this._codiconCSS = iconRegistry.getCSS();\r\n        this._themeCSS = '';\r\n        this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\r\n        this._globalStyleElement = null;\r\n        this._styleElements = [];\r\n        this._colorMapOverride = null;\r\n        this.setTheme(VS_THEME_NAME);\r\n        iconRegistry.onDidChange(() => {\r\n            this._codiconCSS = iconRegistry.getCSS();\r\n            this._updateCSS();\r\n        });\r\n    }\r\n    registerEditorContainer(domNode) {\r\n        if (dom.isInShadowDOM(domNode)) {\r\n            return this._registerShadowDomContainer(domNode);\r\n        }\r\n        return this._registerRegularEditorContainer();\r\n    }\r\n    _registerRegularEditorContainer() {\r\n        if (!this._globalStyleElement) {\r\n            this._globalStyleElement = dom.createStyleSheet();\r\n            this._globalStyleElement.className = 'monaco-colors';\r\n            this._globalStyleElement.textContent = this._allCSS;\r\n            this._styleElements.push(this._globalStyleElement);\r\n        }\r\n        return Disposable.None;\r\n    }\r\n    _registerShadowDomContainer(domNode) {\r\n        const styleElement = dom.createStyleSheet(domNode);\r\n        styleElement.className = 'monaco-colors';\r\n        styleElement.textContent = this._allCSS;\r\n        this._styleElements.push(styleElement);\r\n        return {\r\n            dispose: () => {\r\n                for (let i = 0; i < this._styleElements.length; i++) {\r\n                    if (this._styleElements[i] === styleElement) {\r\n                        this._styleElements.splice(i, 1);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n    defineTheme(themeName, themeData) {\r\n        if (!/^[a-z0-9\\-]+$/i.test(themeName)) {\r\n            throw new Error('Illegal theme name!');\r\n        }\r\n        if (!isBuiltinTheme(themeData.base) && !isBuiltinTheme(themeName)) {\r\n            throw new Error('Illegal theme base!');\r\n        }\r\n        // set or replace theme\r\n        this._knownThemes.set(themeName, new StandaloneTheme(themeName, themeData));\r\n        if (isBuiltinTheme(themeName)) {\r\n            this._knownThemes.forEach(theme => {\r\n                if (theme.base === themeName) {\r\n                    theme.notifyBaseUpdated();\r\n                }\r\n            });\r\n        }\r\n        if (this._theme && this._theme.themeName === themeName) {\r\n            this.setTheme(themeName); // refresh theme\r\n        }\r\n    }\r\n    getColorTheme() {\r\n        return this._theme;\r\n    }\r\n    setColorMapOverride(colorMapOverride) {\r\n        this._colorMapOverride = colorMapOverride;\r\n        this._updateThemeOrColorMap();\r\n    }\r\n    setTheme(themeName) {\r\n        let theme;\r\n        if (this._knownThemes.has(themeName)) {\r\n            theme = this._knownThemes.get(themeName);\r\n        }\r\n        else {\r\n            theme = this._knownThemes.get(VS_THEME_NAME);\r\n        }\r\n        if (this._theme === theme) {\r\n            // Nothing to do\r\n            return theme.id;\r\n        }\r\n        this._theme = theme;\r\n        this._updateThemeOrColorMap();\r\n        return theme.id;\r\n    }\r\n    _updateThemeOrColorMap() {\r\n        let cssRules = [];\r\n        let hasRule = {};\r\n        let ruleCollector = {\r\n            addRule: (rule) => {\r\n                if (!hasRule[rule]) {\r\n                    cssRules.push(rule);\r\n                    hasRule[rule] = true;\r\n                }\r\n            }\r\n        };\r\n        themingRegistry.getThemingParticipants().forEach(p => p(this._theme, ruleCollector, this._environment));\r\n        const colorMap = this._colorMapOverride || this._theme.tokenTheme.getColorMap();\r\n        ruleCollector.addRule(generateTokensCSSForColorMap(colorMap));\r\n        this._themeCSS = cssRules.join('\\n');\r\n        this._updateCSS();\r\n        TokenizationRegistry.setColorMap(colorMap);\r\n        this._onColorThemeChange.fire(this._theme);\r\n    }\r\n    _updateCSS() {\r\n        this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\r\n        this._styleElements.forEach(styleElement => styleElement.textContent = this._allCSS);\r\n    }\r\n    getFileIconTheme() {\r\n        return {\r\n            hasFileIcons: false,\r\n            hasFolderIcons: false,\r\n            hidesExplorerArrows: false\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}