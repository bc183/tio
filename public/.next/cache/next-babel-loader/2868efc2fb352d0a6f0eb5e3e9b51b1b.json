{"ast":null,"code":"import _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { URI } from './uri.js';\nimport { compareSubstringIgnoreCase, compare, compareSubstring, compareIgnoreCase } from './strings.js';\nexport var StringIterator = /*#__PURE__*/function () {\n  function StringIterator() {\n    _classCallCheck(this, StringIterator);\n\n    this._value = '';\n    this._pos = 0;\n  }\n\n  _createClass(StringIterator, [{\n    key: \"reset\",\n    value: function reset(key) {\n      this._value = key;\n      this._pos = 0;\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this._pos += 1;\n      return this;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this._pos < this._value.length - 1;\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(a) {\n      var aCode = a.charCodeAt(0);\n\n      var thisCode = this._value.charCodeAt(this._pos);\n\n      return aCode - thisCode;\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      return this._value[this._pos];\n    }\n  }]);\n\n  return StringIterator;\n}();\nexport var ConfigKeysIterator = /*#__PURE__*/function () {\n  function ConfigKeysIterator() {\n    var _caseSensitive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    _classCallCheck(this, ConfigKeysIterator);\n\n    this._caseSensitive = _caseSensitive;\n  }\n\n  _createClass(ConfigKeysIterator, [{\n    key: \"reset\",\n    value: function reset(key) {\n      this._value = key;\n      this._from = 0;\n      this._to = 0;\n      return this.next();\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this._to < this._value.length;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // this._data = key.split(/[\\\\/]/).filter(s => !!s);\n      this._from = this._to;\n      var justSeps = true;\n\n      for (; this._to < this._value.length; this._to++) {\n        var ch = this._value.charCodeAt(this._to);\n\n        if (ch === 46\n        /* Period */\n        ) {\n            if (justSeps) {\n              this._from++;\n            } else {\n              break;\n            }\n          } else {\n          justSeps = false;\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(a) {\n      return this._caseSensitive ? compareSubstring(a, this._value, 0, a.length, this._from, this._to) : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      return this._value.substring(this._from, this._to);\n    }\n  }]);\n\n  return ConfigKeysIterator;\n}();\nexport var PathIterator = /*#__PURE__*/function () {\n  function PathIterator() {\n    var _splitOnBackslash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    var _caseSensitive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    _classCallCheck(this, PathIterator);\n\n    this._splitOnBackslash = _splitOnBackslash;\n    this._caseSensitive = _caseSensitive;\n  }\n\n  _createClass(PathIterator, [{\n    key: \"reset\",\n    value: function reset(key) {\n      this._value = key.replace(/\\\\$|\\/$/, '');\n      this._from = 0;\n      this._to = 0;\n      return this.next();\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this._to < this._value.length;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // this._data = key.split(/[\\\\/]/).filter(s => !!s);\n      this._from = this._to;\n      var justSeps = true;\n\n      for (; this._to < this._value.length; this._to++) {\n        var ch = this._value.charCodeAt(this._to);\n\n        if (ch === 47\n        /* Slash */\n        || this._splitOnBackslash && ch === 92\n        /* Backslash */\n        ) {\n            if (justSeps) {\n              this._from++;\n            } else {\n              break;\n            }\n          } else {\n          justSeps = false;\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(a) {\n      return this._caseSensitive ? compareSubstring(a, this._value, 0, a.length, this._from, this._to) : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      return this._value.substring(this._from, this._to);\n    }\n  }]);\n\n  return PathIterator;\n}();\nexport var UriIterator = /*#__PURE__*/function () {\n  function UriIterator(_ignorePathCasing) {\n    _classCallCheck(this, UriIterator);\n\n    this._ignorePathCasing = _ignorePathCasing;\n    this._states = [];\n    this._stateIdx = 0;\n  }\n\n  _createClass(UriIterator, [{\n    key: \"reset\",\n    value: function reset(key) {\n      this._value = key;\n      this._states = [];\n\n      if (this._value.scheme) {\n        this._states.push(1\n        /* Scheme */\n        );\n      }\n\n      if (this._value.authority) {\n        this._states.push(2\n        /* Authority */\n        );\n      }\n\n      if (this._value.path) {\n        this._pathIterator = new PathIterator(false, !this._ignorePathCasing(key));\n\n        this._pathIterator.reset(key.path);\n\n        if (this._pathIterator.value()) {\n          this._states.push(3\n          /* Path */\n          );\n        }\n      }\n\n      if (this._value.query) {\n        this._states.push(4\n        /* Query */\n        );\n      }\n\n      if (this._value.fragment) {\n        this._states.push(5\n        /* Fragment */\n        );\n      }\n\n      this._stateIdx = 0;\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (this._states[this._stateIdx] === 3\n      /* Path */\n      && this._pathIterator.hasNext()) {\n        this._pathIterator.next();\n      } else {\n        this._stateIdx += 1;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this._states[this._stateIdx] === 3\n      /* Path */\n      && this._pathIterator.hasNext() || this._stateIdx < this._states.length - 1;\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(a) {\n      if (this._states[this._stateIdx] === 1\n      /* Scheme */\n      ) {\n          return compareIgnoreCase(a, this._value.scheme);\n        } else if (this._states[this._stateIdx] === 2\n      /* Authority */\n      ) {\n          return compareIgnoreCase(a, this._value.authority);\n        } else if (this._states[this._stateIdx] === 3\n      /* Path */\n      ) {\n          return this._pathIterator.cmp(a);\n        } else if (this._states[this._stateIdx] === 4\n      /* Query */\n      ) {\n          return compare(a, this._value.query);\n        } else if (this._states[this._stateIdx] === 5\n      /* Fragment */\n      ) {\n          return compare(a, this._value.fragment);\n        }\n\n      throw new Error();\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      if (this._states[this._stateIdx] === 1\n      /* Scheme */\n      ) {\n          return this._value.scheme;\n        } else if (this._states[this._stateIdx] === 2\n      /* Authority */\n      ) {\n          return this._value.authority;\n        } else if (this._states[this._stateIdx] === 3\n      /* Path */\n      ) {\n          return this._pathIterator.value();\n        } else if (this._states[this._stateIdx] === 4\n      /* Query */\n      ) {\n          return this._value.query;\n        } else if (this._states[this._stateIdx] === 5\n      /* Fragment */\n      ) {\n          return this._value.fragment;\n        }\n\n      throw new Error();\n    }\n  }]);\n\n  return UriIterator;\n}();\n\nvar TernarySearchTreeNode = /*#__PURE__*/function () {\n  function TernarySearchTreeNode() {\n    _classCallCheck(this, TernarySearchTreeNode);\n  }\n\n  _createClass(TernarySearchTreeNode, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !this.left && !this.mid && !this.right && !this.value;\n    }\n  }]);\n\n  return TernarySearchTreeNode;\n}();\n\nexport var TernarySearchTree = /*#__PURE__*/function () {\n  function TernarySearchTree(segments) {\n    _classCallCheck(this, TernarySearchTree);\n\n    this._iter = segments;\n  }\n\n  _createClass(TernarySearchTree, [{\n    key: \"clear\",\n    value: function clear() {\n      this._root = undefined;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, element) {\n      var iter = this._iter.reset(key);\n\n      var node;\n\n      if (!this._root) {\n        this._root = new TernarySearchTreeNode();\n        this._root.segment = iter.value();\n      }\n\n      node = this._root;\n\n      while (true) {\n        var val = iter.cmp(node.segment);\n\n        if (val > 0) {\n          // left\n          if (!node.left) {\n            node.left = new TernarySearchTreeNode();\n            node.left.segment = iter.value();\n          }\n\n          node = node.left;\n        } else if (val < 0) {\n          // right\n          if (!node.right) {\n            node.right = new TernarySearchTreeNode();\n            node.right.segment = iter.value();\n          }\n\n          node = node.right;\n        } else if (iter.hasNext()) {\n          // mid\n          iter.next();\n\n          if (!node.mid) {\n            node.mid = new TernarySearchTreeNode();\n            node.mid.segment = iter.value();\n          }\n\n          node = node.mid;\n        } else {\n          break;\n        }\n      }\n\n      var oldElement = node.value;\n      node.value = element;\n      node.key = key;\n      return oldElement;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var _a;\n\n      return (_a = this._getNode(key)) === null || _a === void 0 ? void 0 : _a.value;\n    }\n  }, {\n    key: \"_getNode\",\n    value: function _getNode(key) {\n      var iter = this._iter.reset(key);\n\n      var node = this._root;\n\n      while (node) {\n        var val = iter.cmp(node.segment);\n\n        if (val > 0) {\n          // left\n          node = node.left;\n        } else if (val < 0) {\n          // right\n          node = node.right;\n        } else if (iter.hasNext()) {\n          // mid\n          iter.next();\n          node = node.mid;\n        } else {\n          break;\n        }\n      }\n\n      return node;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      var node = this._getNode(key);\n\n      return !((node === null || node === void 0 ? void 0 : node.value) === undefined && (node === null || node === void 0 ? void 0 : node.mid) === undefined);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      return this._delete(key, false);\n    }\n  }, {\n    key: \"deleteSuperstr\",\n    value: function deleteSuperstr(key) {\n      return this._delete(key, true);\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(key, superStr) {\n      var iter = this._iter.reset(key);\n\n      var stack = [];\n      var node = this._root; // find and unset node\n\n      while (node) {\n        var val = iter.cmp(node.segment);\n\n        if (val > 0) {\n          // left\n          stack.push([1, node]);\n          node = node.left;\n        } else if (val < 0) {\n          // right\n          stack.push([-1, node]);\n          node = node.right;\n        } else if (iter.hasNext()) {\n          // mid\n          iter.next();\n          stack.push([0, node]);\n          node = node.mid;\n        } else {\n          if (superStr) {\n            // remove children\n            node.left = undefined;\n            node.mid = undefined;\n            node.right = undefined;\n          } else {\n            // remove element\n            node.value = undefined;\n          } // clean up empty nodes\n\n\n          while (stack.length > 0 && node.isEmpty()) {\n            var _stack$pop = stack.pop(),\n                _stack$pop2 = _slicedToArray(_stack$pop, 2),\n                dir = _stack$pop2[0],\n                parent = _stack$pop2[1];\n\n            switch (dir) {\n              case 1:\n                parent.left = undefined;\n                break;\n\n              case 0:\n                parent.mid = undefined;\n                break;\n\n              case -1:\n                parent.right = undefined;\n                break;\n            }\n\n            node = parent;\n          }\n\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"findSubstr\",\n    value: function findSubstr(key) {\n      var iter = this._iter.reset(key);\n\n      var node = this._root;\n      var candidate = undefined;\n\n      while (node) {\n        var val = iter.cmp(node.segment);\n\n        if (val > 0) {\n          // left\n          node = node.left;\n        } else if (val < 0) {\n          // right\n          node = node.right;\n        } else if (iter.hasNext()) {\n          // mid\n          iter.next();\n          candidate = node.value || candidate;\n          node = node.mid;\n        } else {\n          break;\n        }\n      }\n\n      return node && node.value || candidate;\n    }\n  }, {\n    key: \"findSuperstr\",\n    value: function findSuperstr(key) {\n      var iter = this._iter.reset(key);\n\n      var node = this._root;\n\n      while (node) {\n        var val = iter.cmp(node.segment);\n\n        if (val > 0) {\n          // left\n          node = node.left;\n        } else if (val < 0) {\n          // right\n          node = node.right;\n        } else if (iter.hasNext()) {\n          // mid\n          iter.next();\n          node = node.mid;\n        } else {\n          // collect\n          if (!node.mid) {\n            return undefined;\n          } else {\n            return this._entries(node.mid);\n          }\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      var _iterator = _createForOfIteratorHelper(this),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              key = _step$value[0],\n              value = _step$value[1];\n\n          callback(value, key);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.delegateYield(this._entries(this._root), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"_entries\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function _entries(node) {\n      return _regeneratorRuntime.wrap(function _entries$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!node) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.delegateYield(this._entries(node.left), \"t0\", 2);\n\n            case 2:\n              if (!node.value) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 5;\n              return [node.key, node.value];\n\n            case 5:\n              return _context2.delegateYield(this._entries(node.mid), \"t1\", 6);\n\n            case 6:\n              return _context2.delegateYield(this._entries(node.right), \"t2\", 7);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _entries, this);\n    })\n  }], [{\n    key: \"forUris\",\n    value: function forUris() {\n      var ignorePathCasing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {\n        return false;\n      };\n      return new TernarySearchTree(new UriIterator(ignorePathCasing));\n    }\n  }, {\n    key: \"forStrings\",\n    value: function forStrings() {\n      return new TernarySearchTree(new StringIterator());\n    }\n  }, {\n    key: \"forConfigKeys\",\n    value: function forConfigKeys() {\n      return new TernarySearchTree(new ConfigKeysIterator());\n    }\n  }]);\n\n  return TernarySearchTree;\n}();\nexport var ResourceMap = /*#__PURE__*/function () {\n  function ResourceMap(mapOrKeyFn, toKey) {\n    _classCallCheck(this, ResourceMap);\n\n    this[Symbol.toStringTag] = 'ResourceMap';\n\n    if (mapOrKeyFn instanceof ResourceMap) {\n      this.map = new Map(mapOrKeyFn.map);\n      this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;\n    } else {\n      this.map = new Map();\n      this.toKey = mapOrKeyFn !== null && mapOrKeyFn !== void 0 ? mapOrKeyFn : ResourceMap.defaultToKey;\n    }\n  }\n\n  _createClass(ResourceMap, [{\n    key: \"set\",\n    value: function set(resource, value) {\n      this.map.set(this.toKey(resource), value);\n      return this;\n    }\n  }, {\n    key: \"get\",\n    value: function get(resource) {\n      return this.map.get(this.toKey(resource));\n    }\n  }, {\n    key: \"has\",\n    value: function has(resource) {\n      return this.map.has(this.toKey(resource));\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.map.clear();\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(resource) {\n      return this.map[\"delete\"](this.toKey(resource));\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(clb, thisArg) {\n      if (typeof thisArg !== 'undefined') {\n        clb = clb.bind(thisArg);\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.map),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              index = _step2$value[0],\n              _value = _step2$value[1];\n\n          clb(_value, URI.parse(index), this);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      return this.map.values();\n    }\n  }, {\n    key: \"keys\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function keys() {\n      var _iterator3, _step3, key;\n\n      return _regeneratorRuntime.wrap(function keys$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _iterator3 = _createForOfIteratorHelper(this.map.keys());\n              _context3.prev = 1;\n\n              _iterator3.s();\n\n            case 3:\n              if ((_step3 = _iterator3.n()).done) {\n                _context3.next = 9;\n                break;\n              }\n\n              key = _step3.value;\n              _context3.next = 7;\n              return URI.parse(key);\n\n            case 7:\n              _context3.next = 3;\n              break;\n\n            case 9:\n              _context3.next = 14;\n              break;\n\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](1);\n\n              _iterator3.e(_context3.t0);\n\n            case 14:\n              _context3.prev = 14;\n\n              _iterator3.f();\n\n              return _context3.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, keys, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"entries\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function entries() {\n      var _iterator4, _step4, tuple;\n\n      return _regeneratorRuntime.wrap(function entries$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _iterator4 = _createForOfIteratorHelper(this.map.entries());\n              _context4.prev = 1;\n\n              _iterator4.s();\n\n            case 3:\n              if ((_step4 = _iterator4.n()).done) {\n                _context4.next = 9;\n                break;\n              }\n\n              tuple = _step4.value;\n              _context4.next = 7;\n              return [URI.parse(tuple[0]), tuple[1]];\n\n            case 7:\n              _context4.next = 3;\n              break;\n\n            case 9:\n              _context4.next = 14;\n              break;\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](1);\n\n              _iterator4.e(_context4.t0);\n\n            case 14:\n              _context4.prev = 14;\n\n              _iterator4.f();\n\n              return _context4.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, entries, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var _iterator5, _step5, item;\n\n      return _regeneratorRuntime.wrap(function value$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _iterator5 = _createForOfIteratorHelper(this.map);\n              _context5.prev = 1;\n\n              _iterator5.s();\n\n            case 3:\n              if ((_step5 = _iterator5.n()).done) {\n                _context5.next = 9;\n                break;\n              }\n\n              item = _step5.value;\n              _context5.next = 7;\n              return [URI.parse(item[0]), item[1]];\n\n            case 7:\n              _context5.next = 3;\n              break;\n\n            case 9:\n              _context5.next = 14;\n              break;\n\n            case 11:\n              _context5.prev = 11;\n              _context5.t0 = _context5[\"catch\"](1);\n\n              _iterator5.e(_context5.t0);\n\n            case 14:\n              _context5.prev = 14;\n\n              _iterator5.f();\n\n              return _context5.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, value, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.map.size;\n    }\n  }]);\n\n  return ResourceMap;\n}();\n\nResourceMap.defaultToKey = function (resource) {\n  return resource.toString();\n};\n\nexport var LinkedMap = /*#__PURE__*/function () {\n  function LinkedMap() {\n    _classCallCheck(this, LinkedMap);\n\n    this[Symbol.toStringTag] = 'LinkedMap';\n    this._map = new Map();\n    this._head = undefined;\n    this._tail = undefined;\n    this._size = 0;\n    this._state = 0;\n  }\n\n  _createClass(LinkedMap, [{\n    key: \"clear\",\n    value: function clear() {\n      this._map.clear();\n\n      this._head = undefined;\n      this._tail = undefined;\n      this._size = 0;\n      this._state++;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !this._head && !this._tail;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return this._map.has(key);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key)\n    /* None */\n    {\n      var touch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var item = this._map.get(key);\n\n      if (!item) {\n        return undefined;\n      }\n\n      if (touch !== 0\n      /* None */\n      ) {\n          this.touch(item, touch);\n        }\n\n      return item.value;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value)\n    /* None */\n    {\n      var touch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      var item = this._map.get(key);\n\n      if (item) {\n        item.value = value;\n\n        if (touch !== 0\n        /* None */\n        ) {\n            this.touch(item, touch);\n          }\n      } else {\n        item = {\n          key: key,\n          value: value,\n          next: undefined,\n          previous: undefined\n        };\n\n        switch (touch) {\n          case 0\n          /* None */\n          :\n            this.addItemLast(item);\n            break;\n\n          case 1\n          /* AsOld */\n          :\n            this.addItemFirst(item);\n            break;\n\n          case 2\n          /* AsNew */\n          :\n            this.addItemLast(item);\n            break;\n\n          default:\n            this.addItemLast(item);\n            break;\n        }\n\n        this._map.set(key, item);\n\n        this._size++;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      return !!this.remove(key);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var item = this._map.get(key);\n\n      if (!item) {\n        return undefined;\n      }\n\n      this._map[\"delete\"](key);\n\n      this.removeItem(item);\n      this._size--;\n      return item.value;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (!this._head && !this._tail) {\n        return undefined;\n      }\n\n      if (!this._head || !this._tail) {\n        throw new Error('Invalid list');\n      }\n\n      var item = this._head;\n\n      this._map[\"delete\"](item.key);\n\n      this.removeItem(item);\n      this._size--;\n      return item.value;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callbackfn, thisArg) {\n      var state = this._state;\n      var current = this._head;\n\n      while (current) {\n        if (thisArg) {\n          callbackfn.bind(thisArg)(current.value, current.key, this);\n        } else {\n          callbackfn(current.value, current.key, this);\n        }\n\n        if (this._state !== state) {\n          throw new Error(\"LinkedMap got modified during iteration.\");\n        }\n\n        current = current.next;\n      }\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var _iterator6;\n\n      var map = this;\n      var state = this._state;\n      var current = this._head;\n      var iterator = (_iterator6 = {}, _defineProperty(_iterator6, Symbol.iterator, function () {\n        return iterator;\n      }), _defineProperty(_iterator6, \"next\", function next() {\n        if (map._state !== state) {\n          throw new Error(\"LinkedMap got modified during iteration.\");\n        }\n\n        if (current) {\n          var result = {\n            value: current.key,\n            done: false\n          };\n          current = current.next;\n          return result;\n        } else {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      }), _iterator6);\n      return iterator;\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      var _iterator7;\n\n      var map = this;\n      var state = this._state;\n      var current = this._head;\n      var iterator = (_iterator7 = {}, _defineProperty(_iterator7, Symbol.iterator, function () {\n        return iterator;\n      }), _defineProperty(_iterator7, \"next\", function next() {\n        if (map._state !== state) {\n          throw new Error(\"LinkedMap got modified during iteration.\");\n        }\n\n        if (current) {\n          var result = {\n            value: current.value,\n            done: false\n          };\n          current = current.next;\n          return result;\n        } else {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      }), _iterator7);\n      return iterator;\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      var _iterator8;\n\n      var map = this;\n      var state = this._state;\n      var current = this._head;\n      var iterator = (_iterator8 = {}, _defineProperty(_iterator8, Symbol.iterator, function () {\n        return iterator;\n      }), _defineProperty(_iterator8, \"next\", function next() {\n        if (map._state !== state) {\n          throw new Error(\"LinkedMap got modified during iteration.\");\n        }\n\n        if (current) {\n          var result = {\n            value: [current.key, current.value],\n            done: false\n          };\n          current = current.next;\n          return result;\n        } else {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      }), _iterator8);\n      return iterator;\n    }\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this.entries();\n    }\n  }, {\n    key: \"trimOld\",\n    value: function trimOld(newSize) {\n      if (newSize >= this.size) {\n        return;\n      }\n\n      if (newSize === 0) {\n        this.clear();\n        return;\n      }\n\n      var current = this._head;\n      var currentSize = this.size;\n\n      while (current && currentSize > newSize) {\n        this._map[\"delete\"](current.key);\n\n        current = current.next;\n        currentSize--;\n      }\n\n      this._head = current;\n      this._size = currentSize;\n\n      if (current) {\n        current.previous = undefined;\n      }\n\n      this._state++;\n    }\n  }, {\n    key: \"addItemFirst\",\n    value: function addItemFirst(item) {\n      // First time Insert\n      if (!this._head && !this._tail) {\n        this._tail = item;\n      } else if (!this._head) {\n        throw new Error('Invalid list');\n      } else {\n        item.next = this._head;\n        this._head.previous = item;\n      }\n\n      this._head = item;\n      this._state++;\n    }\n  }, {\n    key: \"addItemLast\",\n    value: function addItemLast(item) {\n      // First time Insert\n      if (!this._head && !this._tail) {\n        this._head = item;\n      } else if (!this._tail) {\n        throw new Error('Invalid list');\n      } else {\n        item.previous = this._tail;\n        this._tail.next = item;\n      }\n\n      this._tail = item;\n      this._state++;\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(item) {\n      if (item === this._head && item === this._tail) {\n        this._head = undefined;\n        this._tail = undefined;\n      } else if (item === this._head) {\n        // This can only happend if size === 1 which is handle\n        // by the case above.\n        if (!item.next) {\n          throw new Error('Invalid list');\n        }\n\n        item.next.previous = undefined;\n        this._head = item.next;\n      } else if (item === this._tail) {\n        // This can only happend if size === 1 which is handle\n        // by the case above.\n        if (!item.previous) {\n          throw new Error('Invalid list');\n        }\n\n        item.previous.next = undefined;\n        this._tail = item.previous;\n      } else {\n        var next = item.next;\n        var previous = item.previous;\n\n        if (!next || !previous) {\n          throw new Error('Invalid list');\n        }\n\n        next.previous = previous;\n        previous.next = next;\n      }\n\n      item.next = undefined;\n      item.previous = undefined;\n      this._state++;\n    }\n  }, {\n    key: \"touch\",\n    value: function touch(item, _touch) {\n      if (!this._head || !this._tail) {\n        throw new Error('Invalid list');\n      }\n\n      if (_touch !== 1\n      /* AsOld */\n      && _touch !== 2\n      /* AsNew */\n      ) {\n          return;\n        }\n\n      if (_touch === 1\n      /* AsOld */\n      ) {\n          if (item === this._head) {\n            return;\n          }\n\n          var next = item.next;\n          var previous = item.previous; // Unlink the item\n\n          if (item === this._tail) {\n            // previous must be defined since item was not head but is tail\n            // So there are more than on item in the map\n            previous.next = undefined;\n            this._tail = previous;\n          } else {\n            // Both next and previous are not undefined since item was neither head nor tail.\n            next.previous = previous;\n            previous.next = next;\n          } // Insert the node at head\n\n\n          item.previous = undefined;\n          item.next = this._head;\n          this._head.previous = item;\n          this._head = item;\n          this._state++;\n        } else if (_touch === 2\n      /* AsNew */\n      ) {\n          if (item === this._tail) {\n            return;\n          }\n\n          var _next = item.next;\n          var _previous = item.previous; // Unlink the item.\n\n          if (item === this._head) {\n            // next must be defined since item was not tail but is head\n            // So there are more than on item in the map\n            _next.previous = undefined;\n            this._head = _next;\n          } else {\n            // Both next and previous are not undefined since item was neither head nor tail.\n            _next.previous = _previous;\n            _previous.next = _next;\n          }\n\n          item.next = undefined;\n          item.previous = this._tail;\n          this._tail.next = item;\n          this._tail = item;\n          this._state++;\n        }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var data = [];\n      this.forEach(function (value, key) {\n        data.push([key, value]);\n      });\n      return data;\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(data) {\n      this.clear();\n\n      var _iterator9 = _createForOfIteratorHelper(data),\n          _step6;\n\n      try {\n        for (_iterator9.s(); !(_step6 = _iterator9.n()).done;) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n              key = _step6$value[0],\n              _value2 = _step6$value[1];\n\n          this.set(key, _value2);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    }\n  }, {\n    key: \"first\",\n    get: function get() {\n      var _a;\n\n      return (_a = this._head) === null || _a === void 0 ? void 0 : _a.value;\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      var _a;\n\n      return (_a = this._tail) === null || _a === void 0 ? void 0 : _a.value;\n    }\n  }]);\n\n  return LinkedMap;\n}();\nexport var LRUCache = /*#__PURE__*/function (_LinkedMap) {\n  _inherits(LRUCache, _LinkedMap);\n\n  var _super = _createSuper(LRUCache);\n\n  function LRUCache(limit) {\n    var _this;\n\n    var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    _classCallCheck(this, LRUCache);\n\n    _this = _super.call(this);\n    _this._limit = limit;\n    _this._ratio = Math.min(Math.max(0, ratio), 1);\n    return _this;\n  }\n\n  _createClass(LRUCache, [{\n    key: \"get\",\n    value: function get(key)\n    /* AsNew */\n    {\n      var touch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      return _get(_getPrototypeOf(LRUCache.prototype), \"get\", this).call(this, key, touch);\n    }\n  }, {\n    key: \"peek\",\n    value: function peek(key) {\n      return _get(_getPrototypeOf(LRUCache.prototype), \"get\", this).call(this, key, 0\n      /* None */\n      );\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      _get(_getPrototypeOf(LRUCache.prototype), \"set\", this).call(this, key, value, 2\n      /* AsNew */\n      );\n\n      this.checkTrim();\n      return this;\n    }\n  }, {\n    key: \"checkTrim\",\n    value: function checkTrim() {\n      if (this.size > this._limit) {\n        this.trimOld(Math.round(this._limit * this._ratio));\n      }\n    }\n  }, {\n    key: \"limit\",\n    get: function get() {\n      return this._limit;\n    },\n    set: function set(limit) {\n      this._limit = limit;\n      this.checkTrim();\n    }\n  }]);\n\n  return LRUCache;\n}(LinkedMap);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/common/map.js"],"names":["URI","compareSubstringIgnoreCase","compare","compareSubstring","compareIgnoreCase","StringIterator","_value","_pos","key","length","a","aCode","charCodeAt","thisCode","ConfigKeysIterator","_caseSensitive","_from","_to","next","justSeps","ch","substring","PathIterator","_splitOnBackslash","replace","UriIterator","_ignorePathCasing","_states","_stateIdx","scheme","push","authority","path","_pathIterator","reset","value","query","fragment","hasNext","cmp","Error","TernarySearchTreeNode","left","mid","right","TernarySearchTree","segments","_iter","_root","undefined","element","iter","node","segment","val","oldElement","_a","_getNode","_delete","superStr","stack","isEmpty","pop","dir","parent","candidate","_entries","callback","Symbol","iterator","ignorePathCasing","ResourceMap","mapOrKeyFn","toKey","toStringTag","map","Map","defaultToKey","resource","set","get","has","clear","clb","thisArg","bind","index","parse","values","keys","entries","tuple","item","size","toString","LinkedMap","_map","_head","_tail","_size","_state","touch","previous","addItemLast","addItemFirst","remove","removeItem","callbackfn","state","current","result","done","newSize","currentSize","data","forEach","LRUCache","limit","ratio","_limit","_ratio","Math","min","max","checkTrim","trimOld","round"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { URI } from './uri.js';\r\nimport { compareSubstringIgnoreCase, compare, compareSubstring, compareIgnoreCase } from './strings.js';\r\nexport class StringIterator {\r\n    constructor() {\r\n        this._value = '';\r\n        this._pos = 0;\r\n    }\r\n    reset(key) {\r\n        this._value = key;\r\n        this._pos = 0;\r\n        return this;\r\n    }\r\n    next() {\r\n        this._pos += 1;\r\n        return this;\r\n    }\r\n    hasNext() {\r\n        return this._pos < this._value.length - 1;\r\n    }\r\n    cmp(a) {\r\n        const aCode = a.charCodeAt(0);\r\n        const thisCode = this._value.charCodeAt(this._pos);\r\n        return aCode - thisCode;\r\n    }\r\n    value() {\r\n        return this._value[this._pos];\r\n    }\r\n}\r\nexport class ConfigKeysIterator {\r\n    constructor(_caseSensitive = true) {\r\n        this._caseSensitive = _caseSensitive;\r\n    }\r\n    reset(key) {\r\n        this._value = key;\r\n        this._from = 0;\r\n        this._to = 0;\r\n        return this.next();\r\n    }\r\n    hasNext() {\r\n        return this._to < this._value.length;\r\n    }\r\n    next() {\r\n        // this._data = key.split(/[\\\\/]/).filter(s => !!s);\r\n        this._from = this._to;\r\n        let justSeps = true;\r\n        for (; this._to < this._value.length; this._to++) {\r\n            const ch = this._value.charCodeAt(this._to);\r\n            if (ch === 46 /* Period */) {\r\n                if (justSeps) {\r\n                    this._from++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                justSeps = false;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    cmp(a) {\r\n        return this._caseSensitive\r\n            ? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\r\n            : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\r\n    }\r\n    value() {\r\n        return this._value.substring(this._from, this._to);\r\n    }\r\n}\r\nexport class PathIterator {\r\n    constructor(_splitOnBackslash = true, _caseSensitive = true) {\r\n        this._splitOnBackslash = _splitOnBackslash;\r\n        this._caseSensitive = _caseSensitive;\r\n    }\r\n    reset(key) {\r\n        this._value = key.replace(/\\\\$|\\/$/, '');\r\n        this._from = 0;\r\n        this._to = 0;\r\n        return this.next();\r\n    }\r\n    hasNext() {\r\n        return this._to < this._value.length;\r\n    }\r\n    next() {\r\n        // this._data = key.split(/[\\\\/]/).filter(s => !!s);\r\n        this._from = this._to;\r\n        let justSeps = true;\r\n        for (; this._to < this._value.length; this._to++) {\r\n            const ch = this._value.charCodeAt(this._to);\r\n            if (ch === 47 /* Slash */ || this._splitOnBackslash && ch === 92 /* Backslash */) {\r\n                if (justSeps) {\r\n                    this._from++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                justSeps = false;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    cmp(a) {\r\n        return this._caseSensitive\r\n            ? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\r\n            : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\r\n    }\r\n    value() {\r\n        return this._value.substring(this._from, this._to);\r\n    }\r\n}\r\nexport class UriIterator {\r\n    constructor(_ignorePathCasing) {\r\n        this._ignorePathCasing = _ignorePathCasing;\r\n        this._states = [];\r\n        this._stateIdx = 0;\r\n    }\r\n    reset(key) {\r\n        this._value = key;\r\n        this._states = [];\r\n        if (this._value.scheme) {\r\n            this._states.push(1 /* Scheme */);\r\n        }\r\n        if (this._value.authority) {\r\n            this._states.push(2 /* Authority */);\r\n        }\r\n        if (this._value.path) {\r\n            this._pathIterator = new PathIterator(false, !this._ignorePathCasing(key));\r\n            this._pathIterator.reset(key.path);\r\n            if (this._pathIterator.value()) {\r\n                this._states.push(3 /* Path */);\r\n            }\r\n        }\r\n        if (this._value.query) {\r\n            this._states.push(4 /* Query */);\r\n        }\r\n        if (this._value.fragment) {\r\n            this._states.push(5 /* Fragment */);\r\n        }\r\n        this._stateIdx = 0;\r\n        return this;\r\n    }\r\n    next() {\r\n        if (this._states[this._stateIdx] === 3 /* Path */ && this._pathIterator.hasNext()) {\r\n            this._pathIterator.next();\r\n        }\r\n        else {\r\n            this._stateIdx += 1;\r\n        }\r\n        return this;\r\n    }\r\n    hasNext() {\r\n        return (this._states[this._stateIdx] === 3 /* Path */ && this._pathIterator.hasNext())\r\n            || this._stateIdx < this._states.length - 1;\r\n    }\r\n    cmp(a) {\r\n        if (this._states[this._stateIdx] === 1 /* Scheme */) {\r\n            return compareIgnoreCase(a, this._value.scheme);\r\n        }\r\n        else if (this._states[this._stateIdx] === 2 /* Authority */) {\r\n            return compareIgnoreCase(a, this._value.authority);\r\n        }\r\n        else if (this._states[this._stateIdx] === 3 /* Path */) {\r\n            return this._pathIterator.cmp(a);\r\n        }\r\n        else if (this._states[this._stateIdx] === 4 /* Query */) {\r\n            return compare(a, this._value.query);\r\n        }\r\n        else if (this._states[this._stateIdx] === 5 /* Fragment */) {\r\n            return compare(a, this._value.fragment);\r\n        }\r\n        throw new Error();\r\n    }\r\n    value() {\r\n        if (this._states[this._stateIdx] === 1 /* Scheme */) {\r\n            return this._value.scheme;\r\n        }\r\n        else if (this._states[this._stateIdx] === 2 /* Authority */) {\r\n            return this._value.authority;\r\n        }\r\n        else if (this._states[this._stateIdx] === 3 /* Path */) {\r\n            return this._pathIterator.value();\r\n        }\r\n        else if (this._states[this._stateIdx] === 4 /* Query */) {\r\n            return this._value.query;\r\n        }\r\n        else if (this._states[this._stateIdx] === 5 /* Fragment */) {\r\n            return this._value.fragment;\r\n        }\r\n        throw new Error();\r\n    }\r\n}\r\nclass TernarySearchTreeNode {\r\n    isEmpty() {\r\n        return !this.left && !this.mid && !this.right && !this.value;\r\n    }\r\n}\r\nexport class TernarySearchTree {\r\n    constructor(segments) {\r\n        this._iter = segments;\r\n    }\r\n    static forUris(ignorePathCasing = () => false) {\r\n        return new TernarySearchTree(new UriIterator(ignorePathCasing));\r\n    }\r\n    static forStrings() {\r\n        return new TernarySearchTree(new StringIterator());\r\n    }\r\n    static forConfigKeys() {\r\n        return new TernarySearchTree(new ConfigKeysIterator());\r\n    }\r\n    clear() {\r\n        this._root = undefined;\r\n    }\r\n    set(key, element) {\r\n        const iter = this._iter.reset(key);\r\n        let node;\r\n        if (!this._root) {\r\n            this._root = new TernarySearchTreeNode();\r\n            this._root.segment = iter.value();\r\n        }\r\n        node = this._root;\r\n        while (true) {\r\n            const val = iter.cmp(node.segment);\r\n            if (val > 0) {\r\n                // left\r\n                if (!node.left) {\r\n                    node.left = new TernarySearchTreeNode();\r\n                    node.left.segment = iter.value();\r\n                }\r\n                node = node.left;\r\n            }\r\n            else if (val < 0) {\r\n                // right\r\n                if (!node.right) {\r\n                    node.right = new TernarySearchTreeNode();\r\n                    node.right.segment = iter.value();\r\n                }\r\n                node = node.right;\r\n            }\r\n            else if (iter.hasNext()) {\r\n                // mid\r\n                iter.next();\r\n                if (!node.mid) {\r\n                    node.mid = new TernarySearchTreeNode();\r\n                    node.mid.segment = iter.value();\r\n                }\r\n                node = node.mid;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        const oldElement = node.value;\r\n        node.value = element;\r\n        node.key = key;\r\n        return oldElement;\r\n    }\r\n    get(key) {\r\n        var _a;\r\n        return (_a = this._getNode(key)) === null || _a === void 0 ? void 0 : _a.value;\r\n    }\r\n    _getNode(key) {\r\n        const iter = this._iter.reset(key);\r\n        let node = this._root;\r\n        while (node) {\r\n            const val = iter.cmp(node.segment);\r\n            if (val > 0) {\r\n                // left\r\n                node = node.left;\r\n            }\r\n            else if (val < 0) {\r\n                // right\r\n                node = node.right;\r\n            }\r\n            else if (iter.hasNext()) {\r\n                // mid\r\n                iter.next();\r\n                node = node.mid;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n    has(key) {\r\n        const node = this._getNode(key);\r\n        return !((node === null || node === void 0 ? void 0 : node.value) === undefined && (node === null || node === void 0 ? void 0 : node.mid) === undefined);\r\n    }\r\n    delete(key) {\r\n        return this._delete(key, false);\r\n    }\r\n    deleteSuperstr(key) {\r\n        return this._delete(key, true);\r\n    }\r\n    _delete(key, superStr) {\r\n        const iter = this._iter.reset(key);\r\n        const stack = [];\r\n        let node = this._root;\r\n        // find and unset node\r\n        while (node) {\r\n            const val = iter.cmp(node.segment);\r\n            if (val > 0) {\r\n                // left\r\n                stack.push([1, node]);\r\n                node = node.left;\r\n            }\r\n            else if (val < 0) {\r\n                // right\r\n                stack.push([-1, node]);\r\n                node = node.right;\r\n            }\r\n            else if (iter.hasNext()) {\r\n                // mid\r\n                iter.next();\r\n                stack.push([0, node]);\r\n                node = node.mid;\r\n            }\r\n            else {\r\n                if (superStr) {\r\n                    // remove children\r\n                    node.left = undefined;\r\n                    node.mid = undefined;\r\n                    node.right = undefined;\r\n                }\r\n                else {\r\n                    // remove element\r\n                    node.value = undefined;\r\n                }\r\n                // clean up empty nodes\r\n                while (stack.length > 0 && node.isEmpty()) {\r\n                    let [dir, parent] = stack.pop();\r\n                    switch (dir) {\r\n                        case 1:\r\n                            parent.left = undefined;\r\n                            break;\r\n                        case 0:\r\n                            parent.mid = undefined;\r\n                            break;\r\n                        case -1:\r\n                            parent.right = undefined;\r\n                            break;\r\n                    }\r\n                    node = parent;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    findSubstr(key) {\r\n        const iter = this._iter.reset(key);\r\n        let node = this._root;\r\n        let candidate = undefined;\r\n        while (node) {\r\n            const val = iter.cmp(node.segment);\r\n            if (val > 0) {\r\n                // left\r\n                node = node.left;\r\n            }\r\n            else if (val < 0) {\r\n                // right\r\n                node = node.right;\r\n            }\r\n            else if (iter.hasNext()) {\r\n                // mid\r\n                iter.next();\r\n                candidate = node.value || candidate;\r\n                node = node.mid;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return node && node.value || candidate;\r\n    }\r\n    findSuperstr(key) {\r\n        const iter = this._iter.reset(key);\r\n        let node = this._root;\r\n        while (node) {\r\n            const val = iter.cmp(node.segment);\r\n            if (val > 0) {\r\n                // left\r\n                node = node.left;\r\n            }\r\n            else if (val < 0) {\r\n                // right\r\n                node = node.right;\r\n            }\r\n            else if (iter.hasNext()) {\r\n                // mid\r\n                iter.next();\r\n                node = node.mid;\r\n            }\r\n            else {\r\n                // collect\r\n                if (!node.mid) {\r\n                    return undefined;\r\n                }\r\n                else {\r\n                    return this._entries(node.mid);\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    forEach(callback) {\r\n        for (const [key, value] of this) {\r\n            callback(value, key);\r\n        }\r\n    }\r\n    *[Symbol.iterator]() {\r\n        yield* this._entries(this._root);\r\n    }\r\n    *_entries(node) {\r\n        if (node) {\r\n            // left\r\n            yield* this._entries(node.left);\r\n            // node\r\n            if (node.value) {\r\n                // callback(node.value, this._iter.join(parts));\r\n                yield [node.key, node.value];\r\n            }\r\n            // mid\r\n            yield* this._entries(node.mid);\r\n            // right\r\n            yield* this._entries(node.right);\r\n        }\r\n    }\r\n}\r\nexport class ResourceMap {\r\n    constructor(mapOrKeyFn, toKey) {\r\n        this[Symbol.toStringTag] = 'ResourceMap';\r\n        if (mapOrKeyFn instanceof ResourceMap) {\r\n            this.map = new Map(mapOrKeyFn.map);\r\n            this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;\r\n        }\r\n        else {\r\n            this.map = new Map();\r\n            this.toKey = mapOrKeyFn !== null && mapOrKeyFn !== void 0 ? mapOrKeyFn : ResourceMap.defaultToKey;\r\n        }\r\n    }\r\n    set(resource, value) {\r\n        this.map.set(this.toKey(resource), value);\r\n        return this;\r\n    }\r\n    get(resource) {\r\n        return this.map.get(this.toKey(resource));\r\n    }\r\n    has(resource) {\r\n        return this.map.has(this.toKey(resource));\r\n    }\r\n    get size() {\r\n        return this.map.size;\r\n    }\r\n    clear() {\r\n        this.map.clear();\r\n    }\r\n    delete(resource) {\r\n        return this.map.delete(this.toKey(resource));\r\n    }\r\n    forEach(clb, thisArg) {\r\n        if (typeof thisArg !== 'undefined') {\r\n            clb = clb.bind(thisArg);\r\n        }\r\n        for (let [index, value] of this.map) {\r\n            clb(value, URI.parse(index), this);\r\n        }\r\n    }\r\n    values() {\r\n        return this.map.values();\r\n    }\r\n    *keys() {\r\n        for (let key of this.map.keys()) {\r\n            yield URI.parse(key);\r\n        }\r\n    }\r\n    *entries() {\r\n        for (let tuple of this.map.entries()) {\r\n            yield [URI.parse(tuple[0]), tuple[1]];\r\n        }\r\n    }\r\n    *[Symbol.iterator]() {\r\n        for (let item of this.map) {\r\n            yield [URI.parse(item[0]), item[1]];\r\n        }\r\n    }\r\n}\r\nResourceMap.defaultToKey = (resource) => resource.toString();\r\nexport class LinkedMap {\r\n    constructor() {\r\n        this[Symbol.toStringTag] = 'LinkedMap';\r\n        this._map = new Map();\r\n        this._head = undefined;\r\n        this._tail = undefined;\r\n        this._size = 0;\r\n        this._state = 0;\r\n    }\r\n    clear() {\r\n        this._map.clear();\r\n        this._head = undefined;\r\n        this._tail = undefined;\r\n        this._size = 0;\r\n        this._state++;\r\n    }\r\n    isEmpty() {\r\n        return !this._head && !this._tail;\r\n    }\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    get first() {\r\n        var _a;\r\n        return (_a = this._head) === null || _a === void 0 ? void 0 : _a.value;\r\n    }\r\n    get last() {\r\n        var _a;\r\n        return (_a = this._tail) === null || _a === void 0 ? void 0 : _a.value;\r\n    }\r\n    has(key) {\r\n        return this._map.has(key);\r\n    }\r\n    get(key, touch = 0 /* None */) {\r\n        const item = this._map.get(key);\r\n        if (!item) {\r\n            return undefined;\r\n        }\r\n        if (touch !== 0 /* None */) {\r\n            this.touch(item, touch);\r\n        }\r\n        return item.value;\r\n    }\r\n    set(key, value, touch = 0 /* None */) {\r\n        let item = this._map.get(key);\r\n        if (item) {\r\n            item.value = value;\r\n            if (touch !== 0 /* None */) {\r\n                this.touch(item, touch);\r\n            }\r\n        }\r\n        else {\r\n            item = { key, value, next: undefined, previous: undefined };\r\n            switch (touch) {\r\n                case 0 /* None */:\r\n                    this.addItemLast(item);\r\n                    break;\r\n                case 1 /* AsOld */:\r\n                    this.addItemFirst(item);\r\n                    break;\r\n                case 2 /* AsNew */:\r\n                    this.addItemLast(item);\r\n                    break;\r\n                default:\r\n                    this.addItemLast(item);\r\n                    break;\r\n            }\r\n            this._map.set(key, item);\r\n            this._size++;\r\n        }\r\n        return this;\r\n    }\r\n    delete(key) {\r\n        return !!this.remove(key);\r\n    }\r\n    remove(key) {\r\n        const item = this._map.get(key);\r\n        if (!item) {\r\n            return undefined;\r\n        }\r\n        this._map.delete(key);\r\n        this.removeItem(item);\r\n        this._size--;\r\n        return item.value;\r\n    }\r\n    shift() {\r\n        if (!this._head && !this._tail) {\r\n            return undefined;\r\n        }\r\n        if (!this._head || !this._tail) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        const item = this._head;\r\n        this._map.delete(item.key);\r\n        this.removeItem(item);\r\n        this._size--;\r\n        return item.value;\r\n    }\r\n    forEach(callbackfn, thisArg) {\r\n        const state = this._state;\r\n        let current = this._head;\r\n        while (current) {\r\n            if (thisArg) {\r\n                callbackfn.bind(thisArg)(current.value, current.key, this);\r\n            }\r\n            else {\r\n                callbackfn(current.value, current.key, this);\r\n            }\r\n            if (this._state !== state) {\r\n                throw new Error(`LinkedMap got modified during iteration.`);\r\n            }\r\n            current = current.next;\r\n        }\r\n    }\r\n    keys() {\r\n        const map = this;\r\n        const state = this._state;\r\n        let current = this._head;\r\n        const iterator = {\r\n            [Symbol.iterator]() {\r\n                return iterator;\r\n            },\r\n            next() {\r\n                if (map._state !== state) {\r\n                    throw new Error(`LinkedMap got modified during iteration.`);\r\n                }\r\n                if (current) {\r\n                    const result = { value: current.key, done: false };\r\n                    current = current.next;\r\n                    return result;\r\n                }\r\n                else {\r\n                    return { value: undefined, done: true };\r\n                }\r\n            }\r\n        };\r\n        return iterator;\r\n    }\r\n    values() {\r\n        const map = this;\r\n        const state = this._state;\r\n        let current = this._head;\r\n        const iterator = {\r\n            [Symbol.iterator]() {\r\n                return iterator;\r\n            },\r\n            next() {\r\n                if (map._state !== state) {\r\n                    throw new Error(`LinkedMap got modified during iteration.`);\r\n                }\r\n                if (current) {\r\n                    const result = { value: current.value, done: false };\r\n                    current = current.next;\r\n                    return result;\r\n                }\r\n                else {\r\n                    return { value: undefined, done: true };\r\n                }\r\n            }\r\n        };\r\n        return iterator;\r\n    }\r\n    entries() {\r\n        const map = this;\r\n        const state = this._state;\r\n        let current = this._head;\r\n        const iterator = {\r\n            [Symbol.iterator]() {\r\n                return iterator;\r\n            },\r\n            next() {\r\n                if (map._state !== state) {\r\n                    throw new Error(`LinkedMap got modified during iteration.`);\r\n                }\r\n                if (current) {\r\n                    const result = { value: [current.key, current.value], done: false };\r\n                    current = current.next;\r\n                    return result;\r\n                }\r\n                else {\r\n                    return { value: undefined, done: true };\r\n                }\r\n            }\r\n        };\r\n        return iterator;\r\n    }\r\n    [Symbol.iterator]() {\r\n        return this.entries();\r\n    }\r\n    trimOld(newSize) {\r\n        if (newSize >= this.size) {\r\n            return;\r\n        }\r\n        if (newSize === 0) {\r\n            this.clear();\r\n            return;\r\n        }\r\n        let current = this._head;\r\n        let currentSize = this.size;\r\n        while (current && currentSize > newSize) {\r\n            this._map.delete(current.key);\r\n            current = current.next;\r\n            currentSize--;\r\n        }\r\n        this._head = current;\r\n        this._size = currentSize;\r\n        if (current) {\r\n            current.previous = undefined;\r\n        }\r\n        this._state++;\r\n    }\r\n    addItemFirst(item) {\r\n        // First time Insert\r\n        if (!this._head && !this._tail) {\r\n            this._tail = item;\r\n        }\r\n        else if (!this._head) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        else {\r\n            item.next = this._head;\r\n            this._head.previous = item;\r\n        }\r\n        this._head = item;\r\n        this._state++;\r\n    }\r\n    addItemLast(item) {\r\n        // First time Insert\r\n        if (!this._head && !this._tail) {\r\n            this._head = item;\r\n        }\r\n        else if (!this._tail) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        else {\r\n            item.previous = this._tail;\r\n            this._tail.next = item;\r\n        }\r\n        this._tail = item;\r\n        this._state++;\r\n    }\r\n    removeItem(item) {\r\n        if (item === this._head && item === this._tail) {\r\n            this._head = undefined;\r\n            this._tail = undefined;\r\n        }\r\n        else if (item === this._head) {\r\n            // This can only happend if size === 1 which is handle\r\n            // by the case above.\r\n            if (!item.next) {\r\n                throw new Error('Invalid list');\r\n            }\r\n            item.next.previous = undefined;\r\n            this._head = item.next;\r\n        }\r\n        else if (item === this._tail) {\r\n            // This can only happend if size === 1 which is handle\r\n            // by the case above.\r\n            if (!item.previous) {\r\n                throw new Error('Invalid list');\r\n            }\r\n            item.previous.next = undefined;\r\n            this._tail = item.previous;\r\n        }\r\n        else {\r\n            const next = item.next;\r\n            const previous = item.previous;\r\n            if (!next || !previous) {\r\n                throw new Error('Invalid list');\r\n            }\r\n            next.previous = previous;\r\n            previous.next = next;\r\n        }\r\n        item.next = undefined;\r\n        item.previous = undefined;\r\n        this._state++;\r\n    }\r\n    touch(item, touch) {\r\n        if (!this._head || !this._tail) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        if ((touch !== 1 /* AsOld */ && touch !== 2 /* AsNew */)) {\r\n            return;\r\n        }\r\n        if (touch === 1 /* AsOld */) {\r\n            if (item === this._head) {\r\n                return;\r\n            }\r\n            const next = item.next;\r\n            const previous = item.previous;\r\n            // Unlink the item\r\n            if (item === this._tail) {\r\n                // previous must be defined since item was not head but is tail\r\n                // So there are more than on item in the map\r\n                previous.next = undefined;\r\n                this._tail = previous;\r\n            }\r\n            else {\r\n                // Both next and previous are not undefined since item was neither head nor tail.\r\n                next.previous = previous;\r\n                previous.next = next;\r\n            }\r\n            // Insert the node at head\r\n            item.previous = undefined;\r\n            item.next = this._head;\r\n            this._head.previous = item;\r\n            this._head = item;\r\n            this._state++;\r\n        }\r\n        else if (touch === 2 /* AsNew */) {\r\n            if (item === this._tail) {\r\n                return;\r\n            }\r\n            const next = item.next;\r\n            const previous = item.previous;\r\n            // Unlink the item.\r\n            if (item === this._head) {\r\n                // next must be defined since item was not tail but is head\r\n                // So there are more than on item in the map\r\n                next.previous = undefined;\r\n                this._head = next;\r\n            }\r\n            else {\r\n                // Both next and previous are not undefined since item was neither head nor tail.\r\n                next.previous = previous;\r\n                previous.next = next;\r\n            }\r\n            item.next = undefined;\r\n            item.previous = this._tail;\r\n            this._tail.next = item;\r\n            this._tail = item;\r\n            this._state++;\r\n        }\r\n    }\r\n    toJSON() {\r\n        const data = [];\r\n        this.forEach((value, key) => {\r\n            data.push([key, value]);\r\n        });\r\n        return data;\r\n    }\r\n    fromJSON(data) {\r\n        this.clear();\r\n        for (const [key, value] of data) {\r\n            this.set(key, value);\r\n        }\r\n    }\r\n}\r\nexport class LRUCache extends LinkedMap {\r\n    constructor(limit, ratio = 1) {\r\n        super();\r\n        this._limit = limit;\r\n        this._ratio = Math.min(Math.max(0, ratio), 1);\r\n    }\r\n    get limit() {\r\n        return this._limit;\r\n    }\r\n    set limit(limit) {\r\n        this._limit = limit;\r\n        this.checkTrim();\r\n    }\r\n    get(key, touch = 2 /* AsNew */) {\r\n        return super.get(key, touch);\r\n    }\r\n    peek(key) {\r\n        return super.get(key, 0 /* None */);\r\n    }\r\n    set(key, value) {\r\n        super.set(key, value, 2 /* AsNew */);\r\n        this.checkTrim();\r\n        return this;\r\n    }\r\n    checkTrim() {\r\n        if (this.size > this._limit) {\r\n            this.trimOld(Math.round(this._limit * this._ratio));\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}