{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../base/common/color.js';\nimport { Range } from '../../common/core/range.js';\nimport { Token, TokenizationResult, TokenizationResult2 } from '../../common/core/token.js';\nimport * as modes from '../../common/modes.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/modes/modesRegistry.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StaticServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { createTokenizationSupport } from '../common/monarch/monarchLexer.js';\n/**\r\n * Register information about a new language.\r\n */\n\nexport function register(language) {\n  ModesRegistry.registerLanguage(language);\n}\n/**\r\n * Get the information of all the registered languages.\r\n */\n\nexport function getLanguages() {\n  var result = [];\n  result = result.concat(ModesRegistry.getLanguages());\n  return result;\n}\nexport function getEncodedLanguageId(languageId) {\n  var lid = StaticServices.modeService.get().getLanguageIdentifier(languageId);\n  return lid ? lid.id : 0;\n}\n/**\r\n * An event emitted when a language is first time needed (e.g. a model has it set).\r\n * @event\r\n */\n\nexport function onLanguage(languageId, callback) {\n  var disposable = StaticServices.modeService.get().onDidCreateMode(function (mode) {\n    if (mode.getId() === languageId) {\n      // stop listening\n      disposable.dispose(); // invoke actual listener\n\n      callback();\n    }\n  });\n  return disposable;\n}\n/**\r\n * Set the editing configuration for a language.\r\n */\n\nexport function setLanguageConfiguration(languageId, configuration) {\n  var languageIdentifier = StaticServices.modeService.get().getLanguageIdentifier(languageId);\n\n  if (!languageIdentifier) {\n    throw new Error(\"Cannot set configuration for unknown language \".concat(languageId));\n  }\n\n  return LanguageConfigurationRegistry.register(languageIdentifier, configuration);\n}\n/**\r\n * @internal\r\n */\n\nexport var EncodedTokenizationSupport2Adapter = /*#__PURE__*/function () {\n  function EncodedTokenizationSupport2Adapter(languageIdentifier, actual) {\n    _classCallCheck(this, EncodedTokenizationSupport2Adapter);\n\n    this._languageIdentifier = languageIdentifier;\n    this._actual = actual;\n  }\n\n  _createClass(EncodedTokenizationSupport2Adapter, [{\n    key: \"getInitialState\",\n    value: function getInitialState() {\n      return this._actual.getInitialState();\n    }\n  }, {\n    key: \"tokenize\",\n    value: function tokenize(line, hasEOL, state, offsetDelta) {\n      if (typeof this._actual.tokenize === 'function') {\n        return TokenizationSupport2Adapter.adaptTokenize(this._languageIdentifier.language, this._actual, line, state, offsetDelta);\n      }\n\n      throw new Error('Not supported!');\n    }\n  }, {\n    key: \"tokenize2\",\n    value: function tokenize2(line, hasEOL, state) {\n      var result = this._actual.tokenizeEncoded(line, state);\n\n      return new TokenizationResult2(result.tokens, result.endState);\n    }\n  }]);\n\n  return EncodedTokenizationSupport2Adapter;\n}();\n/**\r\n * @internal\r\n */\n\nexport var TokenizationSupport2Adapter = /*#__PURE__*/function () {\n  function TokenizationSupport2Adapter(standaloneThemeService, languageIdentifier, actual) {\n    _classCallCheck(this, TokenizationSupport2Adapter);\n\n    this._standaloneThemeService = standaloneThemeService;\n    this._languageIdentifier = languageIdentifier;\n    this._actual = actual;\n  }\n\n  _createClass(TokenizationSupport2Adapter, [{\n    key: \"getInitialState\",\n    value: function getInitialState() {\n      return this._actual.getInitialState();\n    }\n  }, {\n    key: \"tokenize\",\n    value: function tokenize(line, hasEOL, state, offsetDelta) {\n      return TokenizationSupport2Adapter.adaptTokenize(this._languageIdentifier.language, this._actual, line, state, offsetDelta);\n    }\n  }, {\n    key: \"_toBinaryTokens\",\n    value: function _toBinaryTokens(tokens, offsetDelta) {\n      var languageId = this._languageIdentifier.id;\n\n      var tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n\n      var result = [],\n          resultLen = 0;\n      var previousStartIndex = 0;\n\n      for (var i = 0, len = tokens.length; i < len; i++) {\n        var t = tokens[i];\n        var metadata = tokenTheme.match(languageId, t.scopes);\n\n        if (resultLen > 0 && result[resultLen - 1] === metadata) {\n          // same metadata\n          continue;\n        }\n\n        var startIndex = t.startIndex; // Prevent issues stemming from a buggy external tokenizer.\n\n        if (i === 0) {\n          // Force first token to start at first index!\n          startIndex = 0;\n        } else if (startIndex < previousStartIndex) {\n          // Force tokens to be after one another!\n          startIndex = previousStartIndex;\n        }\n\n        result[resultLen++] = startIndex + offsetDelta;\n        result[resultLen++] = metadata;\n        previousStartIndex = startIndex;\n      }\n\n      var actualResult = new Uint32Array(resultLen);\n\n      for (var _i = 0; _i < resultLen; _i++) {\n        actualResult[_i] = result[_i];\n      }\n\n      return actualResult;\n    }\n  }, {\n    key: \"tokenize2\",\n    value: function tokenize2(line, hasEOL, state, offsetDelta) {\n      var actualResult = this._actual.tokenize(line, state);\n\n      var tokens = this._toBinaryTokens(actualResult.tokens, offsetDelta);\n\n      var endState; // try to save an object if possible\n\n      if (actualResult.endState.equals(state)) {\n        endState = state;\n      } else {\n        endState = actualResult.endState;\n      }\n\n      return new TokenizationResult2(tokens, endState);\n    }\n  }], [{\n    key: \"_toClassicTokens\",\n    value: function _toClassicTokens(tokens, language, offsetDelta) {\n      var result = [];\n      var previousStartIndex = 0;\n\n      for (var i = 0, len = tokens.length; i < len; i++) {\n        var t = tokens[i];\n        var startIndex = t.startIndex; // Prevent issues stemming from a buggy external tokenizer.\n\n        if (i === 0) {\n          // Force first token to start at first index!\n          startIndex = 0;\n        } else if (startIndex < previousStartIndex) {\n          // Force tokens to be after one another!\n          startIndex = previousStartIndex;\n        }\n\n        result[i] = new Token(startIndex + offsetDelta, t.scopes, language);\n        previousStartIndex = startIndex;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"adaptTokenize\",\n    value: function adaptTokenize(language, actual, line, state, offsetDelta) {\n      var actualResult = actual.tokenize(line, state);\n\n      var tokens = TokenizationSupport2Adapter._toClassicTokens(actualResult.tokens, language, offsetDelta);\n\n      var endState; // try to save an object if possible\n\n      if (actualResult.endState.equals(state)) {\n        endState = state;\n      } else {\n        endState = actualResult.endState;\n      }\n\n      return new TokenizationResult(tokens, endState);\n    }\n  }]);\n\n  return TokenizationSupport2Adapter;\n}();\n\nfunction isEncodedTokensProvider(provider) {\n  return 'tokenizeEncoded' in provider;\n}\n\nfunction isThenable(obj) {\n  return obj && typeof obj.then === 'function';\n}\n/**\r\n * Change the color map that is used for token colors.\r\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\r\n */\n\n\nexport function setColorMap(colorMap) {\n  if (colorMap) {\n    var result = [null];\n\n    for (var i = 1, len = colorMap.length; i < len; i++) {\n      result[i] = Color.fromHex(colorMap[i]);\n    }\n\n    StaticServices.standaloneThemeService.get().setColorMapOverride(result);\n  } else {\n    StaticServices.standaloneThemeService.get().setColorMapOverride(null);\n  }\n}\n/**\r\n * Set the tokens provider for a language (manual implementation).\r\n */\n\nexport function setTokensProvider(languageId, provider) {\n  var languageIdentifier = StaticServices.modeService.get().getLanguageIdentifier(languageId);\n\n  if (!languageIdentifier) {\n    throw new Error(\"Cannot set tokens provider for unknown language \".concat(languageId));\n  }\n\n  var create = function create(provider) {\n    if (isEncodedTokensProvider(provider)) {\n      return new EncodedTokenizationSupport2Adapter(languageIdentifier, provider);\n    } else {\n      return new TokenizationSupport2Adapter(StaticServices.standaloneThemeService.get(), languageIdentifier, provider);\n    }\n  };\n\n  if (isThenable(provider)) {\n    return modes.TokenizationRegistry.registerPromise(languageId, provider.then(function (provider) {\n      return create(provider);\n    }));\n  }\n\n  return modes.TokenizationRegistry.register(languageId, create(provider));\n}\n/**\r\n * Set the tokens provider for a language (monarch implementation).\r\n */\n\nexport function setMonarchTokensProvider(languageId, languageDef) {\n  var create = function create(languageDef) {\n    return createTokenizationSupport(StaticServices.modeService.get(), StaticServices.standaloneThemeService.get(), languageId, compile(languageId, languageDef));\n  };\n\n  if (isThenable(languageDef)) {\n    return modes.TokenizationRegistry.registerPromise(languageId, languageDef.then(function (languageDef) {\n      return create(languageDef);\n    }));\n  }\n\n  return modes.TokenizationRegistry.register(languageId, create(languageDef));\n}\n/**\r\n * Register a reference provider (used by e.g. reference search).\r\n */\n\nexport function registerReferenceProvider(languageId, provider) {\n  return modes.ReferenceProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a rename provider (used by e.g. rename symbol).\r\n */\n\nexport function registerRenameProvider(languageId, provider) {\n  return modes.RenameProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a signature help provider (used by e.g. parameter hints).\r\n */\n\nexport function registerSignatureHelpProvider(languageId, provider) {\n  return modes.SignatureHelpProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a hover provider (used by e.g. editor hover).\r\n */\n\nexport function registerHoverProvider(languageId, provider) {\n  return modes.HoverProviderRegistry.register(languageId, {\n    provideHover: function provideHover(model, position, token) {\n      var word = model.getWordAtPosition(position);\n      return Promise.resolve(provider.provideHover(model, position, token)).then(function (value) {\n        if (!value) {\n          return undefined;\n        }\n\n        if (!value.range && word) {\n          value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n        }\n\n        if (!value.range) {\n          value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n        }\n\n        return value;\n      });\n    }\n  });\n}\n/**\r\n * Register a document symbol provider (used by e.g. outline).\r\n */\n\nexport function registerDocumentSymbolProvider(languageId, provider) {\n  return modes.DocumentSymbolProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a document highlight provider (used by e.g. highlight occurrences).\r\n */\n\nexport function registerDocumentHighlightProvider(languageId, provider) {\n  return modes.DocumentHighlightProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register an linked editing range provider.\r\n */\n\nexport function registerLinkedEditingRangeProvider(languageId, provider) {\n  return modes.LinkedEditingRangeProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a definition provider (used by e.g. go to definition).\r\n */\n\nexport function registerDefinitionProvider(languageId, provider) {\n  return modes.DefinitionProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a implementation provider (used by e.g. go to implementation).\r\n */\n\nexport function registerImplementationProvider(languageId, provider) {\n  return modes.ImplementationProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a type definition provider (used by e.g. go to type definition).\r\n */\n\nexport function registerTypeDefinitionProvider(languageId, provider) {\n  return modes.TypeDefinitionProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a code lens provider (used by e.g. inline code lenses).\r\n */\n\nexport function registerCodeLensProvider(languageId, provider) {\n  return modes.CodeLensProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a code action provider (used by e.g. quick fix).\r\n */\n\nexport function registerCodeActionProvider(languageId, provider) {\n  return modes.CodeActionProviderRegistry.register(languageId, {\n    provideCodeActions: function provideCodeActions(model, range, context, token) {\n      var markers = StaticServices.markerService.get().read({\n        resource: model.uri\n      }).filter(function (m) {\n        return Range.areIntersectingOrTouching(m, range);\n      });\n      return provider.provideCodeActions(model, range, {\n        markers: markers,\n        only: context.only\n      }, token);\n    }\n  });\n}\n/**\r\n * Register a formatter that can handle only entire models.\r\n */\n\nexport function registerDocumentFormattingEditProvider(languageId, provider) {\n  return modes.DocumentFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a formatter that can handle a range inside a model.\r\n */\n\nexport function registerDocumentRangeFormattingEditProvider(languageId, provider) {\n  return modes.DocumentRangeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a formatter than can do formatting as the user types.\r\n */\n\nexport function registerOnTypeFormattingEditProvider(languageId, provider) {\n  return modes.OnTypeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a link provider that can find links in text.\r\n */\n\nexport function registerLinkProvider(languageId, provider) {\n  return modes.LinkProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a completion item provider (use by e.g. suggestions).\r\n */\n\nexport function registerCompletionItemProvider(languageId, provider) {\n  return modes.CompletionProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a document color provider (used by Color Picker, Color Decorator).\r\n */\n\nexport function registerColorProvider(languageId, provider) {\n  return modes.ColorProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a folding range provider\r\n */\n\nexport function registerFoldingRangeProvider(languageId, provider) {\n  return modes.FoldingRangeProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a declaration provider\r\n */\n\nexport function registerDeclarationProvider(languageId, provider) {\n  return modes.DeclarationProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a selection range provider\r\n */\n\nexport function registerSelectionRangeProvider(languageId, provider) {\n  return modes.SelectionRangeRegistry.register(languageId, provider);\n}\n/**\r\n * Register a document semantic tokens provider\r\n */\n\nexport function registerDocumentSemanticTokensProvider(languageId, provider) {\n  return modes.DocumentSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a document range semantic tokens provider\r\n */\n\nexport function registerDocumentRangeSemanticTokensProvider(languageId, provider) {\n  return modes.DocumentRangeSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\r\n * @internal\r\n */\n\nexport function createMonacoLanguagesAPI() {\n  return {\n    register: register,\n    getLanguages: getLanguages,\n    onLanguage: onLanguage,\n    getEncodedLanguageId: getEncodedLanguageId,\n    // provider methods\n    setLanguageConfiguration: setLanguageConfiguration,\n    setColorMap: setColorMap,\n    setTokensProvider: setTokensProvider,\n    setMonarchTokensProvider: setMonarchTokensProvider,\n    registerReferenceProvider: registerReferenceProvider,\n    registerRenameProvider: registerRenameProvider,\n    registerCompletionItemProvider: registerCompletionItemProvider,\n    registerSignatureHelpProvider: registerSignatureHelpProvider,\n    registerHoverProvider: registerHoverProvider,\n    registerDocumentSymbolProvider: registerDocumentSymbolProvider,\n    registerDocumentHighlightProvider: registerDocumentHighlightProvider,\n    registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\n    registerDefinitionProvider: registerDefinitionProvider,\n    registerImplementationProvider: registerImplementationProvider,\n    registerTypeDefinitionProvider: registerTypeDefinitionProvider,\n    registerCodeLensProvider: registerCodeLensProvider,\n    registerCodeActionProvider: registerCodeActionProvider,\n    registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\n    registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\n    registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\n    registerLinkProvider: registerLinkProvider,\n    registerColorProvider: registerColorProvider,\n    registerFoldingRangeProvider: registerFoldingRangeProvider,\n    registerDeclarationProvider: registerDeclarationProvider,\n    registerSelectionRangeProvider: registerSelectionRangeProvider,\n    registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\n    registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\n    // enums\n    DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n    CompletionItemKind: standaloneEnums.CompletionItemKind,\n    CompletionItemTag: standaloneEnums.CompletionItemTag,\n    CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n    SymbolKind: standaloneEnums.SymbolKind,\n    SymbolTag: standaloneEnums.SymbolTag,\n    IndentAction: standaloneEnums.IndentAction,\n    CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n    SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n    // classes\n    FoldingRangeKind: modes.FoldingRangeKind\n  };\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneLanguages.js"],"names":["Color","Range","Token","TokenizationResult","TokenizationResult2","modes","LanguageConfigurationRegistry","ModesRegistry","standaloneEnums","StaticServices","compile","createTokenizationSupport","register","language","registerLanguage","getLanguages","result","concat","getEncodedLanguageId","languageId","lid","modeService","get","getLanguageIdentifier","id","onLanguage","callback","disposable","onDidCreateMode","mode","getId","dispose","setLanguageConfiguration","configuration","languageIdentifier","Error","EncodedTokenizationSupport2Adapter","actual","_languageIdentifier","_actual","getInitialState","line","hasEOL","state","offsetDelta","tokenize","TokenizationSupport2Adapter","adaptTokenize","tokenizeEncoded","tokens","endState","standaloneThemeService","_standaloneThemeService","tokenTheme","getColorTheme","resultLen","previousStartIndex","i","len","length","t","metadata","match","scopes","startIndex","actualResult","Uint32Array","_toBinaryTokens","equals","_toClassicTokens","isEncodedTokensProvider","provider","isThenable","obj","then","setColorMap","colorMap","fromHex","setColorMapOverride","setTokensProvider","create","TokenizationRegistry","registerPromise","setMonarchTokensProvider","languageDef","registerReferenceProvider","ReferenceProviderRegistry","registerRenameProvider","RenameProviderRegistry","registerSignatureHelpProvider","SignatureHelpProviderRegistry","registerHoverProvider","HoverProviderRegistry","provideHover","model","position","token","word","getWordAtPosition","Promise","resolve","value","undefined","range","lineNumber","startColumn","endColumn","column","registerDocumentSymbolProvider","DocumentSymbolProviderRegistry","registerDocumentHighlightProvider","DocumentHighlightProviderRegistry","registerLinkedEditingRangeProvider","LinkedEditingRangeProviderRegistry","registerDefinitionProvider","DefinitionProviderRegistry","registerImplementationProvider","ImplementationProviderRegistry","registerTypeDefinitionProvider","TypeDefinitionProviderRegistry","registerCodeLensProvider","CodeLensProviderRegistry","registerCodeActionProvider","CodeActionProviderRegistry","provideCodeActions","context","markers","markerService","read","resource","uri","filter","m","areIntersectingOrTouching","only","registerDocumentFormattingEditProvider","DocumentFormattingEditProviderRegistry","registerDocumentRangeFormattingEditProvider","DocumentRangeFormattingEditProviderRegistry","registerOnTypeFormattingEditProvider","OnTypeFormattingEditProviderRegistry","registerLinkProvider","LinkProviderRegistry","registerCompletionItemProvider","CompletionProviderRegistry","registerColorProvider","ColorProviderRegistry","registerFoldingRangeProvider","FoldingRangeProviderRegistry","registerDeclarationProvider","DeclarationProviderRegistry","registerSelectionRangeProvider","SelectionRangeRegistry","registerDocumentSemanticTokensProvider","DocumentSemanticTokensProviderRegistry","registerDocumentRangeSemanticTokensProvider","DocumentRangeSemanticTokensProviderRegistry","createMonacoLanguagesAPI","DocumentHighlightKind","CompletionItemKind","CompletionItemTag","CompletionItemInsertTextRule","SymbolKind","SymbolTag","IndentAction","CompletionTriggerKind","SignatureHelpTriggerKind","FoldingRangeKind"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Color } from '../../../base/common/color.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Token, TokenizationResult, TokenizationResult2 } from '../../common/core/token.js';\r\nimport * as modes from '../../common/modes.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nimport { ModesRegistry } from '../../common/modes/modesRegistry.js';\r\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\r\nimport { StaticServices } from './standaloneServices.js';\r\nimport { compile } from '../common/monarch/monarchCompile.js';\r\nimport { createTokenizationSupport } from '../common/monarch/monarchLexer.js';\r\n/**\r\n * Register information about a new language.\r\n */\r\nexport function register(language) {\r\n    ModesRegistry.registerLanguage(language);\r\n}\r\n/**\r\n * Get the information of all the registered languages.\r\n */\r\nexport function getLanguages() {\r\n    let result = [];\r\n    result = result.concat(ModesRegistry.getLanguages());\r\n    return result;\r\n}\r\nexport function getEncodedLanguageId(languageId) {\r\n    let lid = StaticServices.modeService.get().getLanguageIdentifier(languageId);\r\n    return lid ? lid.id : 0;\r\n}\r\n/**\r\n * An event emitted when a language is first time needed (e.g. a model has it set).\r\n * @event\r\n */\r\nexport function onLanguage(languageId, callback) {\r\n    let disposable = StaticServices.modeService.get().onDidCreateMode((mode) => {\r\n        if (mode.getId() === languageId) {\r\n            // stop listening\r\n            disposable.dispose();\r\n            // invoke actual listener\r\n            callback();\r\n        }\r\n    });\r\n    return disposable;\r\n}\r\n/**\r\n * Set the editing configuration for a language.\r\n */\r\nexport function setLanguageConfiguration(languageId, configuration) {\r\n    let languageIdentifier = StaticServices.modeService.get().getLanguageIdentifier(languageId);\r\n    if (!languageIdentifier) {\r\n        throw new Error(`Cannot set configuration for unknown language ${languageId}`);\r\n    }\r\n    return LanguageConfigurationRegistry.register(languageIdentifier, configuration);\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport class EncodedTokenizationSupport2Adapter {\r\n    constructor(languageIdentifier, actual) {\r\n        this._languageIdentifier = languageIdentifier;\r\n        this._actual = actual;\r\n    }\r\n    getInitialState() {\r\n        return this._actual.getInitialState();\r\n    }\r\n    tokenize(line, hasEOL, state, offsetDelta) {\r\n        if (typeof this._actual.tokenize === 'function') {\r\n            return TokenizationSupport2Adapter.adaptTokenize(this._languageIdentifier.language, this._actual, line, state, offsetDelta);\r\n        }\r\n        throw new Error('Not supported!');\r\n    }\r\n    tokenize2(line, hasEOL, state) {\r\n        let result = this._actual.tokenizeEncoded(line, state);\r\n        return new TokenizationResult2(result.tokens, result.endState);\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport class TokenizationSupport2Adapter {\r\n    constructor(standaloneThemeService, languageIdentifier, actual) {\r\n        this._standaloneThemeService = standaloneThemeService;\r\n        this._languageIdentifier = languageIdentifier;\r\n        this._actual = actual;\r\n    }\r\n    getInitialState() {\r\n        return this._actual.getInitialState();\r\n    }\r\n    static _toClassicTokens(tokens, language, offsetDelta) {\r\n        let result = [];\r\n        let previousStartIndex = 0;\r\n        for (let i = 0, len = tokens.length; i < len; i++) {\r\n            const t = tokens[i];\r\n            let startIndex = t.startIndex;\r\n            // Prevent issues stemming from a buggy external tokenizer.\r\n            if (i === 0) {\r\n                // Force first token to start at first index!\r\n                startIndex = 0;\r\n            }\r\n            else if (startIndex < previousStartIndex) {\r\n                // Force tokens to be after one another!\r\n                startIndex = previousStartIndex;\r\n            }\r\n            result[i] = new Token(startIndex + offsetDelta, t.scopes, language);\r\n            previousStartIndex = startIndex;\r\n        }\r\n        return result;\r\n    }\r\n    static adaptTokenize(language, actual, line, state, offsetDelta) {\r\n        let actualResult = actual.tokenize(line, state);\r\n        let tokens = TokenizationSupport2Adapter._toClassicTokens(actualResult.tokens, language, offsetDelta);\r\n        let endState;\r\n        // try to save an object if possible\r\n        if (actualResult.endState.equals(state)) {\r\n            endState = state;\r\n        }\r\n        else {\r\n            endState = actualResult.endState;\r\n        }\r\n        return new TokenizationResult(tokens, endState);\r\n    }\r\n    tokenize(line, hasEOL, state, offsetDelta) {\r\n        return TokenizationSupport2Adapter.adaptTokenize(this._languageIdentifier.language, this._actual, line, state, offsetDelta);\r\n    }\r\n    _toBinaryTokens(tokens, offsetDelta) {\r\n        const languageId = this._languageIdentifier.id;\r\n        const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\r\n        let result = [], resultLen = 0;\r\n        let previousStartIndex = 0;\r\n        for (let i = 0, len = tokens.length; i < len; i++) {\r\n            const t = tokens[i];\r\n            const metadata = tokenTheme.match(languageId, t.scopes);\r\n            if (resultLen > 0 && result[resultLen - 1] === metadata) {\r\n                // same metadata\r\n                continue;\r\n            }\r\n            let startIndex = t.startIndex;\r\n            // Prevent issues stemming from a buggy external tokenizer.\r\n            if (i === 0) {\r\n                // Force first token to start at first index!\r\n                startIndex = 0;\r\n            }\r\n            else if (startIndex < previousStartIndex) {\r\n                // Force tokens to be after one another!\r\n                startIndex = previousStartIndex;\r\n            }\r\n            result[resultLen++] = startIndex + offsetDelta;\r\n            result[resultLen++] = metadata;\r\n            previousStartIndex = startIndex;\r\n        }\r\n        let actualResult = new Uint32Array(resultLen);\r\n        for (let i = 0; i < resultLen; i++) {\r\n            actualResult[i] = result[i];\r\n        }\r\n        return actualResult;\r\n    }\r\n    tokenize2(line, hasEOL, state, offsetDelta) {\r\n        let actualResult = this._actual.tokenize(line, state);\r\n        let tokens = this._toBinaryTokens(actualResult.tokens, offsetDelta);\r\n        let endState;\r\n        // try to save an object if possible\r\n        if (actualResult.endState.equals(state)) {\r\n            endState = state;\r\n        }\r\n        else {\r\n            endState = actualResult.endState;\r\n        }\r\n        return new TokenizationResult2(tokens, endState);\r\n    }\r\n}\r\nfunction isEncodedTokensProvider(provider) {\r\n    return 'tokenizeEncoded' in provider;\r\n}\r\nfunction isThenable(obj) {\r\n    return obj && typeof obj.then === 'function';\r\n}\r\n/**\r\n * Change the color map that is used for token colors.\r\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\r\n */\r\nexport function setColorMap(colorMap) {\r\n    if (colorMap) {\r\n        const result = [null];\r\n        for (let i = 1, len = colorMap.length; i < len; i++) {\r\n            result[i] = Color.fromHex(colorMap[i]);\r\n        }\r\n        StaticServices.standaloneThemeService.get().setColorMapOverride(result);\r\n    }\r\n    else {\r\n        StaticServices.standaloneThemeService.get().setColorMapOverride(null);\r\n    }\r\n}\r\n/**\r\n * Set the tokens provider for a language (manual implementation).\r\n */\r\nexport function setTokensProvider(languageId, provider) {\r\n    let languageIdentifier = StaticServices.modeService.get().getLanguageIdentifier(languageId);\r\n    if (!languageIdentifier) {\r\n        throw new Error(`Cannot set tokens provider for unknown language ${languageId}`);\r\n    }\r\n    const create = (provider) => {\r\n        if (isEncodedTokensProvider(provider)) {\r\n            return new EncodedTokenizationSupport2Adapter(languageIdentifier, provider);\r\n        }\r\n        else {\r\n            return new TokenizationSupport2Adapter(StaticServices.standaloneThemeService.get(), languageIdentifier, provider);\r\n        }\r\n    };\r\n    if (isThenable(provider)) {\r\n        return modes.TokenizationRegistry.registerPromise(languageId, provider.then(provider => create(provider)));\r\n    }\r\n    return modes.TokenizationRegistry.register(languageId, create(provider));\r\n}\r\n/**\r\n * Set the tokens provider for a language (monarch implementation).\r\n */\r\nexport function setMonarchTokensProvider(languageId, languageDef) {\r\n    const create = (languageDef) => {\r\n        return createTokenizationSupport(StaticServices.modeService.get(), StaticServices.standaloneThemeService.get(), languageId, compile(languageId, languageDef));\r\n    };\r\n    if (isThenable(languageDef)) {\r\n        return modes.TokenizationRegistry.registerPromise(languageId, languageDef.then(languageDef => create(languageDef)));\r\n    }\r\n    return modes.TokenizationRegistry.register(languageId, create(languageDef));\r\n}\r\n/**\r\n * Register a reference provider (used by e.g. reference search).\r\n */\r\nexport function registerReferenceProvider(languageId, provider) {\r\n    return modes.ReferenceProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a rename provider (used by e.g. rename symbol).\r\n */\r\nexport function registerRenameProvider(languageId, provider) {\r\n    return modes.RenameProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a signature help provider (used by e.g. parameter hints).\r\n */\r\nexport function registerSignatureHelpProvider(languageId, provider) {\r\n    return modes.SignatureHelpProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a hover provider (used by e.g. editor hover).\r\n */\r\nexport function registerHoverProvider(languageId, provider) {\r\n    return modes.HoverProviderRegistry.register(languageId, {\r\n        provideHover: (model, position, token) => {\r\n            let word = model.getWordAtPosition(position);\r\n            return Promise.resolve(provider.provideHover(model, position, token)).then((value) => {\r\n                if (!value) {\r\n                    return undefined;\r\n                }\r\n                if (!value.range && word) {\r\n                    value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\r\n                }\r\n                if (!value.range) {\r\n                    value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\r\n                }\r\n                return value;\r\n            });\r\n        }\r\n    });\r\n}\r\n/**\r\n * Register a document symbol provider (used by e.g. outline).\r\n */\r\nexport function registerDocumentSymbolProvider(languageId, provider) {\r\n    return modes.DocumentSymbolProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a document highlight provider (used by e.g. highlight occurrences).\r\n */\r\nexport function registerDocumentHighlightProvider(languageId, provider) {\r\n    return modes.DocumentHighlightProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register an linked editing range provider.\r\n */\r\nexport function registerLinkedEditingRangeProvider(languageId, provider) {\r\n    return modes.LinkedEditingRangeProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a definition provider (used by e.g. go to definition).\r\n */\r\nexport function registerDefinitionProvider(languageId, provider) {\r\n    return modes.DefinitionProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a implementation provider (used by e.g. go to implementation).\r\n */\r\nexport function registerImplementationProvider(languageId, provider) {\r\n    return modes.ImplementationProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a type definition provider (used by e.g. go to type definition).\r\n */\r\nexport function registerTypeDefinitionProvider(languageId, provider) {\r\n    return modes.TypeDefinitionProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a code lens provider (used by e.g. inline code lenses).\r\n */\r\nexport function registerCodeLensProvider(languageId, provider) {\r\n    return modes.CodeLensProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a code action provider (used by e.g. quick fix).\r\n */\r\nexport function registerCodeActionProvider(languageId, provider) {\r\n    return modes.CodeActionProviderRegistry.register(languageId, {\r\n        provideCodeActions: (model, range, context, token) => {\r\n            let markers = StaticServices.markerService.get().read({ resource: model.uri }).filter(m => {\r\n                return Range.areIntersectingOrTouching(m, range);\r\n            });\r\n            return provider.provideCodeActions(model, range, { markers, only: context.only }, token);\r\n        }\r\n    });\r\n}\r\n/**\r\n * Register a formatter that can handle only entire models.\r\n */\r\nexport function registerDocumentFormattingEditProvider(languageId, provider) {\r\n    return modes.DocumentFormattingEditProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a formatter that can handle a range inside a model.\r\n */\r\nexport function registerDocumentRangeFormattingEditProvider(languageId, provider) {\r\n    return modes.DocumentRangeFormattingEditProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a formatter than can do formatting as the user types.\r\n */\r\nexport function registerOnTypeFormattingEditProvider(languageId, provider) {\r\n    return modes.OnTypeFormattingEditProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a link provider that can find links in text.\r\n */\r\nexport function registerLinkProvider(languageId, provider) {\r\n    return modes.LinkProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a completion item provider (use by e.g. suggestions).\r\n */\r\nexport function registerCompletionItemProvider(languageId, provider) {\r\n    return modes.CompletionProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a document color provider (used by Color Picker, Color Decorator).\r\n */\r\nexport function registerColorProvider(languageId, provider) {\r\n    return modes.ColorProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a folding range provider\r\n */\r\nexport function registerFoldingRangeProvider(languageId, provider) {\r\n    return modes.FoldingRangeProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a declaration provider\r\n */\r\nexport function registerDeclarationProvider(languageId, provider) {\r\n    return modes.DeclarationProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a selection range provider\r\n */\r\nexport function registerSelectionRangeProvider(languageId, provider) {\r\n    return modes.SelectionRangeRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a document semantic tokens provider\r\n */\r\nexport function registerDocumentSemanticTokensProvider(languageId, provider) {\r\n    return modes.DocumentSemanticTokensProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a document range semantic tokens provider\r\n */\r\nexport function registerDocumentRangeSemanticTokensProvider(languageId, provider) {\r\n    return modes.DocumentRangeSemanticTokensProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport function createMonacoLanguagesAPI() {\r\n    return {\r\n        register: register,\r\n        getLanguages: getLanguages,\r\n        onLanguage: onLanguage,\r\n        getEncodedLanguageId: getEncodedLanguageId,\r\n        // provider methods\r\n        setLanguageConfiguration: setLanguageConfiguration,\r\n        setColorMap: setColorMap,\r\n        setTokensProvider: setTokensProvider,\r\n        setMonarchTokensProvider: setMonarchTokensProvider,\r\n        registerReferenceProvider: registerReferenceProvider,\r\n        registerRenameProvider: registerRenameProvider,\r\n        registerCompletionItemProvider: registerCompletionItemProvider,\r\n        registerSignatureHelpProvider: registerSignatureHelpProvider,\r\n        registerHoverProvider: registerHoverProvider,\r\n        registerDocumentSymbolProvider: registerDocumentSymbolProvider,\r\n        registerDocumentHighlightProvider: registerDocumentHighlightProvider,\r\n        registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\r\n        registerDefinitionProvider: registerDefinitionProvider,\r\n        registerImplementationProvider: registerImplementationProvider,\r\n        registerTypeDefinitionProvider: registerTypeDefinitionProvider,\r\n        registerCodeLensProvider: registerCodeLensProvider,\r\n        registerCodeActionProvider: registerCodeActionProvider,\r\n        registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\r\n        registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\r\n        registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\r\n        registerLinkProvider: registerLinkProvider,\r\n        registerColorProvider: registerColorProvider,\r\n        registerFoldingRangeProvider: registerFoldingRangeProvider,\r\n        registerDeclarationProvider: registerDeclarationProvider,\r\n        registerSelectionRangeProvider: registerSelectionRangeProvider,\r\n        registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\r\n        registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\r\n        // enums\r\n        DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\r\n        CompletionItemKind: standaloneEnums.CompletionItemKind,\r\n        CompletionItemTag: standaloneEnums.CompletionItemTag,\r\n        CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\r\n        SymbolKind: standaloneEnums.SymbolKind,\r\n        SymbolTag: standaloneEnums.SymbolTag,\r\n        IndentAction: standaloneEnums.IndentAction,\r\n        CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\r\n        SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\r\n        // classes\r\n        FoldingRangeKind: modes.FoldingRangeKind,\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}