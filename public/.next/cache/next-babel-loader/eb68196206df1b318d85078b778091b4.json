{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { validateConstraints } from '../../../base/common/types.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nexport var ICommandService = createDecorator('commandService');\nexport var CommandsRegistry = new ( /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n\n    this._commands = new Map();\n    this._onDidRegisterCommand = new Emitter();\n    this.onDidRegisterCommand = this._onDidRegisterCommand.event;\n  }\n\n  _createClass(_class, [{\n    key: \"registerCommand\",\n    value: function registerCommand(idOrCommand, handler) {\n      var _this = this;\n\n      if (!idOrCommand) {\n        throw new Error(\"invalid command\");\n      }\n\n      if (typeof idOrCommand === 'string') {\n        if (!handler) {\n          throw new Error(\"invalid command\");\n        }\n\n        return this.registerCommand({\n          id: idOrCommand,\n          handler: handler\n        });\n      } // add argument validation if rich command metadata is provided\n\n\n      if (idOrCommand.description) {\n        var constraints = [];\n\n        var _iterator = _createForOfIteratorHelper(idOrCommand.description.args),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var arg = _step.value;\n            constraints.push(arg.constraint);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var actualHandler = idOrCommand.handler;\n\n        idOrCommand.handler = function (accessor) {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          validateConstraints(args, constraints);\n          return actualHandler.apply(void 0, [accessor].concat(args));\n        };\n      } // find a place to store the command\n\n\n      var id = idOrCommand.id;\n\n      var commands = this._commands.get(id);\n\n      if (!commands) {\n        commands = new LinkedList();\n\n        this._commands.set(id, commands);\n      }\n\n      var removeFn = commands.unshift(idOrCommand);\n      var ret = toDisposable(function () {\n        removeFn();\n\n        var command = _this._commands.get(id);\n\n        if (command === null || command === void 0 ? void 0 : command.isEmpty()) {\n          _this._commands[\"delete\"](id);\n        }\n      }); // tell the world about this command\n\n      this._onDidRegisterCommand.fire(id);\n\n      return ret;\n    }\n  }, {\n    key: \"registerCommandAlias\",\n    value: function registerCommandAlias(oldId, newId) {\n      return CommandsRegistry.registerCommand(oldId, function (accessor) {\n        var _accessor$get;\n\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        return (_accessor$get = accessor.get(ICommandService)).executeCommand.apply(_accessor$get, [newId].concat(args));\n      });\n    }\n  }, {\n    key: \"getCommand\",\n    value: function getCommand(id) {\n      var list = this._commands.get(id);\n\n      if (!list || list.isEmpty()) {\n        return undefined;\n      }\n\n      return Iterable.first(list);\n    }\n  }, {\n    key: \"getCommands\",\n    value: function getCommands() {\n      var result = new Map();\n\n      var _iterator2 = _createForOfIteratorHelper(this._commands.keys()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var key = _step2.value;\n          var command = this.getCommand(key);\n\n          if (command) {\n            result.set(key, command);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return result;\n    }\n  }]);\n\n  return _class;\n}())();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js"],"names":["toDisposable","validateConstraints","createDecorator","Emitter","LinkedList","Iterable","ICommandService","CommandsRegistry","_commands","Map","_onDidRegisterCommand","onDidRegisterCommand","event","idOrCommand","handler","Error","registerCommand","id","description","constraints","args","arg","push","constraint","actualHandler","accessor","commands","get","set","removeFn","unshift","ret","command","isEmpty","fire","oldId","newId","executeCommand","list","undefined","first","result","keys","key","getCommand"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { toDisposable } from '../../../base/common/lifecycle.js';\r\nimport { validateConstraints } from '../../../base/common/types.js';\r\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { LinkedList } from '../../../base/common/linkedList.js';\r\nimport { Iterable } from '../../../base/common/iterator.js';\r\nexport const ICommandService = createDecorator('commandService');\r\nexport const CommandsRegistry = new class {\r\n    constructor() {\r\n        this._commands = new Map();\r\n        this._onDidRegisterCommand = new Emitter();\r\n        this.onDidRegisterCommand = this._onDidRegisterCommand.event;\r\n    }\r\n    registerCommand(idOrCommand, handler) {\r\n        if (!idOrCommand) {\r\n            throw new Error(`invalid command`);\r\n        }\r\n        if (typeof idOrCommand === 'string') {\r\n            if (!handler) {\r\n                throw new Error(`invalid command`);\r\n            }\r\n            return this.registerCommand({ id: idOrCommand, handler });\r\n        }\r\n        // add argument validation if rich command metadata is provided\r\n        if (idOrCommand.description) {\r\n            const constraints = [];\r\n            for (let arg of idOrCommand.description.args) {\r\n                constraints.push(arg.constraint);\r\n            }\r\n            const actualHandler = idOrCommand.handler;\r\n            idOrCommand.handler = function (accessor, ...args) {\r\n                validateConstraints(args, constraints);\r\n                return actualHandler(accessor, ...args);\r\n            };\r\n        }\r\n        // find a place to store the command\r\n        const { id } = idOrCommand;\r\n        let commands = this._commands.get(id);\r\n        if (!commands) {\r\n            commands = new LinkedList();\r\n            this._commands.set(id, commands);\r\n        }\r\n        let removeFn = commands.unshift(idOrCommand);\r\n        let ret = toDisposable(() => {\r\n            removeFn();\r\n            const command = this._commands.get(id);\r\n            if (command === null || command === void 0 ? void 0 : command.isEmpty()) {\r\n                this._commands.delete(id);\r\n            }\r\n        });\r\n        // tell the world about this command\r\n        this._onDidRegisterCommand.fire(id);\r\n        return ret;\r\n    }\r\n    registerCommandAlias(oldId, newId) {\r\n        return CommandsRegistry.registerCommand(oldId, (accessor, ...args) => accessor.get(ICommandService).executeCommand(newId, ...args));\r\n    }\r\n    getCommand(id) {\r\n        const list = this._commands.get(id);\r\n        if (!list || list.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return Iterable.first(list);\r\n    }\r\n    getCommands() {\r\n        const result = new Map();\r\n        for (const key of this._commands.keys()) {\r\n            const command = this.getCommand(key);\r\n            if (command) {\r\n                result.set(key, command);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}