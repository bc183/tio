{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as buffer from '../../../base/common/buffer.js';\n\nvar _platformTextDecoder;\n\nexport function getPlatformTextDecoder() {\n  if (!_platformTextDecoder) {\n    _platformTextDecoder = new TextDecoder(platform.isLittleEndian() ? 'UTF-16LE' : 'UTF-16BE');\n  }\n\n  return _platformTextDecoder;\n}\nexport var hasTextDecoder = typeof TextDecoder !== 'undefined';\nexport var createStringBuilder;\nexport var decodeUTF16LE;\n\nif (hasTextDecoder) {\n  createStringBuilder = function createStringBuilder(capacity) {\n    return new StringBuilder(capacity);\n  };\n\n  decodeUTF16LE = standardDecodeUTF16LE;\n} else {\n  createStringBuilder = function createStringBuilder(capacity) {\n    return new CompatStringBuilder();\n  };\n\n  decodeUTF16LE = compatDecodeUTF16LE;\n}\n\nfunction standardDecodeUTF16LE(source, offset, len) {\n  var view = new Uint16Array(source.buffer, offset, len);\n  return getPlatformTextDecoder().decode(view);\n}\n\nfunction compatDecodeUTF16LE(source, offset, len) {\n  var result = [];\n  var resultLen = 0;\n\n  for (var i = 0; i < len; i++) {\n    var charCode = buffer.readUInt16LE(source, offset);\n    offset += 2;\n    result[resultLen++] = String.fromCharCode(charCode);\n  }\n\n  return result.join('');\n}\n\nvar StringBuilder = /*#__PURE__*/function () {\n  function StringBuilder(capacity) {\n    _classCallCheck(this, StringBuilder);\n\n    this._capacity = capacity | 0;\n    this._buffer = new Uint16Array(this._capacity);\n    this._completedStrings = null;\n    this._bufferLength = 0;\n  }\n\n  _createClass(StringBuilder, [{\n    key: \"reset\",\n    value: function reset() {\n      this._completedStrings = null;\n      this._bufferLength = 0;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      if (this._completedStrings !== null) {\n        this._flushBuffer();\n\n        return this._completedStrings.join('');\n      }\n\n      return this._buildBuffer();\n    }\n  }, {\n    key: \"_buildBuffer\",\n    value: function _buildBuffer() {\n      if (this._bufferLength === 0) {\n        return '';\n      }\n\n      var view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\n      return getPlatformTextDecoder().decode(view);\n    }\n  }, {\n    key: \"_flushBuffer\",\n    value: function _flushBuffer() {\n      var bufferString = this._buildBuffer();\n\n      this._bufferLength = 0;\n\n      if (this._completedStrings === null) {\n        this._completedStrings = [bufferString];\n      } else {\n        this._completedStrings[this._completedStrings.length] = bufferString;\n      }\n    }\n  }, {\n    key: \"write1\",\n    value: function write1(charCode) {\n      var remainingSpace = this._capacity - this._bufferLength;\n\n      if (remainingSpace <= 1) {\n        if (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\n          this._flushBuffer();\n        }\n      }\n\n      this._buffer[this._bufferLength++] = charCode;\n    }\n  }, {\n    key: \"appendASCII\",\n    value: function appendASCII(charCode) {\n      if (this._bufferLength === this._capacity) {\n        // buffer is full\n        this._flushBuffer();\n      }\n\n      this._buffer[this._bufferLength++] = charCode;\n    }\n  }, {\n    key: \"appendASCIIString\",\n    value: function appendASCIIString(str) {\n      var strLen = str.length;\n\n      if (this._bufferLength + strLen >= this._capacity) {\n        // This string does not fit in the remaining buffer space\n        this._flushBuffer();\n\n        this._completedStrings[this._completedStrings.length] = str;\n        return;\n      }\n\n      for (var i = 0; i < strLen; i++) {\n        this._buffer[this._bufferLength++] = str.charCodeAt(i);\n      }\n    }\n  }]);\n\n  return StringBuilder;\n}();\n\nvar CompatStringBuilder = /*#__PURE__*/function () {\n  function CompatStringBuilder() {\n    _classCallCheck(this, CompatStringBuilder);\n\n    this._pieces = [];\n    this._piecesLen = 0;\n  }\n\n  _createClass(CompatStringBuilder, [{\n    key: \"reset\",\n    value: function reset() {\n      this._pieces = [];\n      this._piecesLen = 0;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      return this._pieces.join('');\n    }\n  }, {\n    key: \"write1\",\n    value: function write1(charCode) {\n      this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n    }\n  }, {\n    key: \"appendASCII\",\n    value: function appendASCII(charCode) {\n      this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n    }\n  }, {\n    key: \"appendASCIIString\",\n    value: function appendASCIIString(str) {\n      this._pieces[this._piecesLen++] = str;\n    }\n  }]);\n\n  return CompatStringBuilder;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/core/stringBuilder.js"],"names":["strings","platform","buffer","_platformTextDecoder","getPlatformTextDecoder","TextDecoder","isLittleEndian","hasTextDecoder","createStringBuilder","decodeUTF16LE","capacity","StringBuilder","standardDecodeUTF16LE","CompatStringBuilder","compatDecodeUTF16LE","source","offset","len","view","Uint16Array","decode","result","resultLen","i","charCode","readUInt16LE","String","fromCharCode","join","_capacity","_buffer","_completedStrings","_bufferLength","_flushBuffer","_buildBuffer","bufferString","length","remainingSpace","isHighSurrogate","str","strLen","charCodeAt","_pieces","_piecesLen"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport * as buffer from '../../../base/common/buffer.js';\r\nlet _platformTextDecoder;\r\nexport function getPlatformTextDecoder() {\r\n    if (!_platformTextDecoder) {\r\n        _platformTextDecoder = new TextDecoder(platform.isLittleEndian() ? 'UTF-16LE' : 'UTF-16BE');\r\n    }\r\n    return _platformTextDecoder;\r\n}\r\nexport const hasTextDecoder = (typeof TextDecoder !== 'undefined');\r\nexport let createStringBuilder;\r\nexport let decodeUTF16LE;\r\nif (hasTextDecoder) {\r\n    createStringBuilder = (capacity) => new StringBuilder(capacity);\r\n    decodeUTF16LE = standardDecodeUTF16LE;\r\n}\r\nelse {\r\n    createStringBuilder = (capacity) => new CompatStringBuilder();\r\n    decodeUTF16LE = compatDecodeUTF16LE;\r\n}\r\nfunction standardDecodeUTF16LE(source, offset, len) {\r\n    const view = new Uint16Array(source.buffer, offset, len);\r\n    return getPlatformTextDecoder().decode(view);\r\n}\r\nfunction compatDecodeUTF16LE(source, offset, len) {\r\n    let result = [];\r\n    let resultLen = 0;\r\n    for (let i = 0; i < len; i++) {\r\n        const charCode = buffer.readUInt16LE(source, offset);\r\n        offset += 2;\r\n        result[resultLen++] = String.fromCharCode(charCode);\r\n    }\r\n    return result.join('');\r\n}\r\nclass StringBuilder {\r\n    constructor(capacity) {\r\n        this._capacity = capacity | 0;\r\n        this._buffer = new Uint16Array(this._capacity);\r\n        this._completedStrings = null;\r\n        this._bufferLength = 0;\r\n    }\r\n    reset() {\r\n        this._completedStrings = null;\r\n        this._bufferLength = 0;\r\n    }\r\n    build() {\r\n        if (this._completedStrings !== null) {\r\n            this._flushBuffer();\r\n            return this._completedStrings.join('');\r\n        }\r\n        return this._buildBuffer();\r\n    }\r\n    _buildBuffer() {\r\n        if (this._bufferLength === 0) {\r\n            return '';\r\n        }\r\n        const view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\r\n        return getPlatformTextDecoder().decode(view);\r\n    }\r\n    _flushBuffer() {\r\n        const bufferString = this._buildBuffer();\r\n        this._bufferLength = 0;\r\n        if (this._completedStrings === null) {\r\n            this._completedStrings = [bufferString];\r\n        }\r\n        else {\r\n            this._completedStrings[this._completedStrings.length] = bufferString;\r\n        }\r\n    }\r\n    write1(charCode) {\r\n        const remainingSpace = this._capacity - this._bufferLength;\r\n        if (remainingSpace <= 1) {\r\n            if (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\r\n                this._flushBuffer();\r\n            }\r\n        }\r\n        this._buffer[this._bufferLength++] = charCode;\r\n    }\r\n    appendASCII(charCode) {\r\n        if (this._bufferLength === this._capacity) {\r\n            // buffer is full\r\n            this._flushBuffer();\r\n        }\r\n        this._buffer[this._bufferLength++] = charCode;\r\n    }\r\n    appendASCIIString(str) {\r\n        const strLen = str.length;\r\n        if (this._bufferLength + strLen >= this._capacity) {\r\n            // This string does not fit in the remaining buffer space\r\n            this._flushBuffer();\r\n            this._completedStrings[this._completedStrings.length] = str;\r\n            return;\r\n        }\r\n        for (let i = 0; i < strLen; i++) {\r\n            this._buffer[this._bufferLength++] = str.charCodeAt(i);\r\n        }\r\n    }\r\n}\r\nclass CompatStringBuilder {\r\n    constructor() {\r\n        this._pieces = [];\r\n        this._piecesLen = 0;\r\n    }\r\n    reset() {\r\n        this._pieces = [];\r\n        this._piecesLen = 0;\r\n    }\r\n    build() {\r\n        return this._pieces.join('');\r\n    }\r\n    write1(charCode) {\r\n        this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\r\n    }\r\n    appendASCII(charCode) {\r\n        this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\r\n    }\r\n    appendASCIIString(str) {\r\n        this._pieces[this._piecesLen++] = str;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}