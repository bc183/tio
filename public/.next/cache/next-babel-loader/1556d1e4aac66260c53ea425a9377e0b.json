{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { match as matchGlobPattern } from '../../../base/common/glob.js';\nimport { normalize } from '../../../base/common/path.js';\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized) {\n  if (Array.isArray(selector)) {\n    // array -> take max individual value\n    var ret = 0;\n\n    var _iterator = _createForOfIteratorHelper(selector),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var filter = _step.value;\n        var value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized);\n\n        if (value === 10) {\n          return value; // already at the highest\n        }\n\n        if (value > ret) {\n          ret = value;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return ret;\n  } else if (typeof selector === 'string') {\n    if (!candidateIsSynchronized) {\n      return 0;\n    } // short-hand notion, desugars to\n    // 'fooLang' -> { language: 'fooLang'}\n    // '*' -> { language: '*' }\n\n\n    if (selector === '*') {\n      return 5;\n    } else if (selector === candidateLanguage) {\n      return 10;\n    } else {\n      return 0;\n    }\n  } else if (selector) {\n    // filter -> select accordingly, use defaults for scheme\n    var language = selector.language,\n        pattern = selector.pattern,\n        scheme = selector.scheme,\n        hasAccessToAllModels = selector.hasAccessToAllModels;\n\n    if (!candidateIsSynchronized && !hasAccessToAllModels) {\n      return 0;\n    }\n\n    var _ret = 0;\n\n    if (scheme) {\n      if (scheme === candidateUri.scheme) {\n        _ret = 10;\n      } else if (scheme === '*') {\n        _ret = 5;\n      } else {\n        return 0;\n      }\n    }\n\n    if (language) {\n      if (language === candidateLanguage) {\n        _ret = 10;\n      } else if (language === '*') {\n        _ret = Math.max(_ret, 5);\n      } else {\n        return 0;\n      }\n    }\n\n    if (pattern) {\n      var normalizedPattern;\n\n      if (typeof pattern === 'string') {\n        normalizedPattern = pattern;\n      } else {\n        // Since this pattern has a `base` property, we need\n        // to normalize this path first before passing it on\n        // because we will compare it against `Uri.fsPath`\n        // which uses platform specific separators.\n        // Refs: https://github.com/microsoft/vscode/issues/99938\n        normalizedPattern = Object.assign(Object.assign({}, pattern), {\n          base: normalize(pattern.base)\n        });\n      }\n\n      if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n        _ret = 10;\n      } else {\n        return 0;\n      }\n    }\n\n    return _ret;\n  } else {\n    return 0;\n  }\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/modes/languageSelector.js"],"names":["match","matchGlobPattern","normalize","score","selector","candidateUri","candidateLanguage","candidateIsSynchronized","Array","isArray","ret","filter","value","language","pattern","scheme","hasAccessToAllModels","Math","max","normalizedPattern","Object","assign","base","fsPath"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { match as matchGlobPattern } from '../../../base/common/glob.js';\r\nimport { normalize } from '../../../base/common/path.js';\r\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized) {\r\n    if (Array.isArray(selector)) {\r\n        // array -> take max individual value\r\n        let ret = 0;\r\n        for (const filter of selector) {\r\n            const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized);\r\n            if (value === 10) {\r\n                return value; // already at the highest\r\n            }\r\n            if (value > ret) {\r\n                ret = value;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    else if (typeof selector === 'string') {\r\n        if (!candidateIsSynchronized) {\r\n            return 0;\r\n        }\r\n        // short-hand notion, desugars to\r\n        // 'fooLang' -> { language: 'fooLang'}\r\n        // '*' -> { language: '*' }\r\n        if (selector === '*') {\r\n            return 5;\r\n        }\r\n        else if (selector === candidateLanguage) {\r\n            return 10;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    else if (selector) {\r\n        // filter -> select accordingly, use defaults for scheme\r\n        const { language, pattern, scheme, hasAccessToAllModels } = selector;\r\n        if (!candidateIsSynchronized && !hasAccessToAllModels) {\r\n            return 0;\r\n        }\r\n        let ret = 0;\r\n        if (scheme) {\r\n            if (scheme === candidateUri.scheme) {\r\n                ret = 10;\r\n            }\r\n            else if (scheme === '*') {\r\n                ret = 5;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (language) {\r\n            if (language === candidateLanguage) {\r\n                ret = 10;\r\n            }\r\n            else if (language === '*') {\r\n                ret = Math.max(ret, 5);\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (pattern) {\r\n            let normalizedPattern;\r\n            if (typeof pattern === 'string') {\r\n                normalizedPattern = pattern;\r\n            }\r\n            else {\r\n                // Since this pattern has a `base` property, we need\r\n                // to normalize this path first before passing it on\r\n                // because we will compare it against `Uri.fsPath`\r\n                // which uses platform specific separators.\r\n                // Refs: https://github.com/microsoft/vscode/issues/99938\r\n                normalizedPattern = Object.assign(Object.assign({}, pattern), { base: normalize(pattern.base) });\r\n            }\r\n            if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\r\n                ret = 10;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}