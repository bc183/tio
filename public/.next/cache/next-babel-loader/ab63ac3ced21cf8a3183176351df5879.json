{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { KeyCodeUtils } from '../../../base/common/keyCodes.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\n/**\r\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\r\n */\n\nexport var USLayoutResolvedKeybinding = /*#__PURE__*/function (_BaseResolvedKeybindi) {\n  _inherits(USLayoutResolvedKeybinding, _BaseResolvedKeybindi);\n\n  var _super = _createSuper(USLayoutResolvedKeybinding);\n\n  function USLayoutResolvedKeybinding(actual, os) {\n    _classCallCheck(this, USLayoutResolvedKeybinding);\n\n    return _super.call(this, os, actual.parts);\n  }\n\n  _createClass(USLayoutResolvedKeybinding, [{\n    key: \"_keyCodeToUILabel\",\n    value: function _keyCodeToUILabel(keyCode) {\n      if (this._os === 2\n      /* Macintosh */\n      ) {\n          switch (keyCode) {\n            case 15\n            /* LeftArrow */\n            :\n              return '←';\n\n            case 16\n            /* UpArrow */\n            :\n              return '↑';\n\n            case 17\n            /* RightArrow */\n            :\n              return '→';\n\n            case 18\n            /* DownArrow */\n            :\n              return '↓';\n          }\n        }\n\n      return KeyCodeUtils.toString(keyCode);\n    }\n  }, {\n    key: \"_getLabel\",\n    value: function _getLabel(keybinding) {\n      if (keybinding.isDuplicateModifierCase()) {\n        return '';\n      }\n\n      return this._keyCodeToUILabel(keybinding.keyCode);\n    }\n  }, {\n    key: \"_getAriaLabel\",\n    value: function _getAriaLabel(keybinding) {\n      if (keybinding.isDuplicateModifierCase()) {\n        return '';\n      }\n\n      return KeyCodeUtils.toString(keybinding.keyCode);\n    }\n  }, {\n    key: \"_getDispatchPart\",\n    value: function _getDispatchPart(keybinding) {\n      return USLayoutResolvedKeybinding.getDispatchStr(keybinding);\n    }\n  }], [{\n    key: \"getDispatchStr\",\n    value: function getDispatchStr(keybinding) {\n      if (keybinding.isModifierKey()) {\n        return null;\n      }\n\n      var result = '';\n\n      if (keybinding.ctrlKey) {\n        result += 'ctrl+';\n      }\n\n      if (keybinding.shiftKey) {\n        result += 'shift+';\n      }\n\n      if (keybinding.altKey) {\n        result += 'alt+';\n      }\n\n      if (keybinding.metaKey) {\n        result += 'meta+';\n      }\n\n      result += KeyCodeUtils.toString(keybinding.keyCode);\n      return result;\n    }\n  }]);\n\n  return USLayoutResolvedKeybinding;\n}(BaseResolvedKeybinding);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/platform/keybinding/common/usLayoutResolvedKeybinding.js"],"names":["KeyCodeUtils","BaseResolvedKeybinding","USLayoutResolvedKeybinding","actual","os","parts","keyCode","_os","toString","keybinding","isDuplicateModifierCase","_keyCodeToUILabel","getDispatchStr","isModifierKey","result","ctrlKey","shiftKey","altKey","metaKey"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,kCAA7B;AACA,SAASC,sBAAT,QAAuC,6BAAvC;AACA;AACA;AACA;;AACA,WAAaC,0BAAb;AAAA;;AAAA;;AACI,sCAAYC,MAAZ,EAAoBC,EAApB,EAAwB;AAAA;;AAAA,6BACdA,EADc,EACVD,MAAM,CAACE,KADG;AAEvB;;AAHL;AAAA;AAAA,sCAIsBC,OAJtB,EAI+B;AACvB,UAAI,KAAKC,GAAL,KAAa;AAAE;AAAnB,QAAoC;AAChC,kBAAQD,OAAR;AACI,iBAAK;AAAG;AAAR;AACI,qBAAO,GAAP;;AACJ,iBAAK;AAAG;AAAR;AACI,qBAAO,GAAP;;AACJ,iBAAK;AAAG;AAAR;AACI,qBAAO,GAAP;;AACJ,iBAAK;AAAG;AAAR;AACI,qBAAO,GAAP;AARR;AAUH;;AACD,aAAON,YAAY,CAACQ,QAAb,CAAsBF,OAAtB,CAAP;AACH;AAlBL;AAAA;AAAA,8BAmBcG,UAnBd,EAmB0B;AAClB,UAAIA,UAAU,CAACC,uBAAX,EAAJ,EAA0C;AACtC,eAAO,EAAP;AACH;;AACD,aAAO,KAAKC,iBAAL,CAAuBF,UAAU,CAACH,OAAlC,CAAP;AACH;AAxBL;AAAA;AAAA,kCAyBkBG,UAzBlB,EAyB8B;AACtB,UAAIA,UAAU,CAACC,uBAAX,EAAJ,EAA0C;AACtC,eAAO,EAAP;AACH;;AACD,aAAOV,YAAY,CAACQ,QAAb,CAAsBC,UAAU,CAACH,OAAjC,CAAP;AACH;AA9BL;AAAA;AAAA,qCA+BqBG,UA/BrB,EA+BiC;AACzB,aAAOP,0BAA0B,CAACU,cAA3B,CAA0CH,UAA1C,CAAP;AACH;AAjCL;AAAA;AAAA,mCAkC0BA,UAlC1B,EAkCsC;AAC9B,UAAIA,UAAU,CAACI,aAAX,EAAJ,EAAgC;AAC5B,eAAO,IAAP;AACH;;AACD,UAAIC,MAAM,GAAG,EAAb;;AACA,UAAIL,UAAU,CAACM,OAAf,EAAwB;AACpBD,QAAAA,MAAM,IAAI,OAAV;AACH;;AACD,UAAIL,UAAU,CAACO,QAAf,EAAyB;AACrBF,QAAAA,MAAM,IAAI,QAAV;AACH;;AACD,UAAIL,UAAU,CAACQ,MAAf,EAAuB;AACnBH,QAAAA,MAAM,IAAI,MAAV;AACH;;AACD,UAAIL,UAAU,CAACS,OAAf,EAAwB;AACpBJ,QAAAA,MAAM,IAAI,OAAV;AACH;;AACDA,MAAAA,MAAM,IAAId,YAAY,CAACQ,QAAb,CAAsBC,UAAU,CAACH,OAAjC,CAAV;AACA,aAAOQ,MAAP;AACH;AArDL;;AAAA;AAAA,EAAgDb,sBAAhD","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { KeyCodeUtils } from '../../../base/common/keyCodes.js';\r\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\r\n/**\r\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\r\n */\r\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding {\r\n    constructor(actual, os) {\r\n        super(os, actual.parts);\r\n    }\r\n    _keyCodeToUILabel(keyCode) {\r\n        if (this._os === 2 /* Macintosh */) {\r\n            switch (keyCode) {\r\n                case 15 /* LeftArrow */:\r\n                    return '←';\r\n                case 16 /* UpArrow */:\r\n                    return '↑';\r\n                case 17 /* RightArrow */:\r\n                    return '→';\r\n                case 18 /* DownArrow */:\r\n                    return '↓';\r\n            }\r\n        }\r\n        return KeyCodeUtils.toString(keyCode);\r\n    }\r\n    _getLabel(keybinding) {\r\n        if (keybinding.isDuplicateModifierCase()) {\r\n            return '';\r\n        }\r\n        return this._keyCodeToUILabel(keybinding.keyCode);\r\n    }\r\n    _getAriaLabel(keybinding) {\r\n        if (keybinding.isDuplicateModifierCase()) {\r\n            return '';\r\n        }\r\n        return KeyCodeUtils.toString(keybinding.keyCode);\r\n    }\r\n    _getDispatchPart(keybinding) {\r\n        return USLayoutResolvedKeybinding.getDispatchStr(keybinding);\r\n    }\r\n    static getDispatchStr(keybinding) {\r\n        if (keybinding.isModifierKey()) {\r\n            return null;\r\n        }\r\n        let result = '';\r\n        if (keybinding.ctrlKey) {\r\n            result += 'ctrl+';\r\n        }\r\n        if (keybinding.shiftKey) {\r\n            result += 'shift+';\r\n        }\r\n        if (keybinding.altKey) {\r\n            result += 'alt+';\r\n        }\r\n        if (keybinding.metaKey) {\r\n            result += 'meta+';\r\n        }\r\n        result += KeyCodeUtils.toString(keybinding.keyCode);\r\n        return result;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}