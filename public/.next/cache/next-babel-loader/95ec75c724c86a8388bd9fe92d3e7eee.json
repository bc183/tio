{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState } from './cursorCommon.js';\nimport { OneCursor } from './oneCursor.js';\nimport { Selection } from '../core/selection.js';\nexport var CursorCollection = /*#__PURE__*/function () {\n  function CursorCollection(context) {\n    _classCallCheck(this, CursorCollection);\n\n    this.context = context;\n    this.primaryCursor = new OneCursor(context);\n    this.secondaryCursors = [];\n    this.lastAddedCursorIndex = 0;\n  }\n\n  _createClass(CursorCollection, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.primaryCursor.dispose(this.context);\n      this.killSecondaryCursors();\n    }\n  }, {\n    key: \"startTrackingSelections\",\n    value: function startTrackingSelections() {\n      this.primaryCursor.startTrackingSelection(this.context);\n\n      for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n        this.secondaryCursors[i].startTrackingSelection(this.context);\n      }\n    }\n  }, {\n    key: \"stopTrackingSelections\",\n    value: function stopTrackingSelections() {\n      this.primaryCursor.stopTrackingSelection(this.context);\n\n      for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n        this.secondaryCursors[i].stopTrackingSelection(this.context);\n      }\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext(context) {\n      this.context = context;\n    }\n  }, {\n    key: \"ensureValidState\",\n    value: function ensureValidState() {\n      this.primaryCursor.ensureValidState(this.context);\n\n      for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n        this.secondaryCursors[i].ensureValidState(this.context);\n      }\n    }\n  }, {\n    key: \"readSelectionFromMarkers\",\n    value: function readSelectionFromMarkers() {\n      var result = [];\n      result[0] = this.primaryCursor.readSelectionFromMarkers(this.context);\n\n      for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n        result[i + 1] = this.secondaryCursors[i].readSelectionFromMarkers(this.context);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var result = [];\n      result[0] = this.primaryCursor.asCursorState();\n\n      for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n        result[i + 1] = this.secondaryCursors[i].asCursorState();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getViewPositions\",\n    value: function getViewPositions() {\n      var result = [];\n      result[0] = this.primaryCursor.viewState.position;\n\n      for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n        result[i + 1] = this.secondaryCursors[i].viewState.position;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getTopMostViewPosition\",\n    value: function getTopMostViewPosition() {\n      var result = this.primaryCursor.viewState.position;\n\n      for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n        var viewPosition = this.secondaryCursors[i].viewState.position;\n\n        if (viewPosition.isBefore(result)) {\n          result = viewPosition;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getBottomMostViewPosition\",\n    value: function getBottomMostViewPosition() {\n      var result = this.primaryCursor.viewState.position;\n\n      for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n        var viewPosition = this.secondaryCursors[i].viewState.position;\n\n        if (result.isBeforeOrEqual(viewPosition)) {\n          result = viewPosition;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getSelections\",\n    value: function getSelections() {\n      var result = [];\n      result[0] = this.primaryCursor.modelState.selection;\n\n      for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n        result[i + 1] = this.secondaryCursors[i].modelState.selection;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getViewSelections\",\n    value: function getViewSelections() {\n      var result = [];\n      result[0] = this.primaryCursor.viewState.selection;\n\n      for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n        result[i + 1] = this.secondaryCursors[i].viewState.selection;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setSelections\",\n    value: function setSelections(selections) {\n      this.setStates(CursorState.fromModelSelections(selections));\n    }\n  }, {\n    key: \"getPrimaryCursor\",\n    value: function getPrimaryCursor() {\n      return this.primaryCursor.asCursorState();\n    }\n  }, {\n    key: \"setStates\",\n    value: function setStates(states) {\n      if (states === null) {\n        return;\n      }\n\n      this.primaryCursor.setState(this.context, states[0].modelState, states[0].viewState);\n\n      this._setSecondaryStates(states.slice(1));\n    }\n    /**\r\n     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\r\n     */\n\n  }, {\n    key: \"_setSecondaryStates\",\n    value: function _setSecondaryStates(secondaryStates) {\n      var secondaryCursorsLength = this.secondaryCursors.length;\n      var secondaryStatesLength = secondaryStates.length;\n\n      if (secondaryCursorsLength < secondaryStatesLength) {\n        var createCnt = secondaryStatesLength - secondaryCursorsLength;\n\n        for (var i = 0; i < createCnt; i++) {\n          this._addSecondaryCursor();\n        }\n      } else if (secondaryCursorsLength > secondaryStatesLength) {\n        var removeCnt = secondaryCursorsLength - secondaryStatesLength;\n\n        for (var _i = 0; _i < removeCnt; _i++) {\n          this._removeSecondaryCursor(this.secondaryCursors.length - 1);\n        }\n      }\n\n      for (var _i2 = 0; _i2 < secondaryStatesLength; _i2++) {\n        this.secondaryCursors[_i2].setState(this.context, secondaryStates[_i2].modelState, secondaryStates[_i2].viewState);\n      }\n    }\n  }, {\n    key: \"killSecondaryCursors\",\n    value: function killSecondaryCursors() {\n      this._setSecondaryStates([]);\n    }\n  }, {\n    key: \"_addSecondaryCursor\",\n    value: function _addSecondaryCursor() {\n      this.secondaryCursors.push(new OneCursor(this.context));\n      this.lastAddedCursorIndex = this.secondaryCursors.length;\n    }\n  }, {\n    key: \"getLastAddedCursorIndex\",\n    value: function getLastAddedCursorIndex() {\n      if (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {\n        return 0;\n      }\n\n      return this.lastAddedCursorIndex;\n    }\n  }, {\n    key: \"_removeSecondaryCursor\",\n    value: function _removeSecondaryCursor(removeIndex) {\n      if (this.lastAddedCursorIndex >= removeIndex + 1) {\n        this.lastAddedCursorIndex--;\n      }\n\n      this.secondaryCursors[removeIndex].dispose(this.context);\n      this.secondaryCursors.splice(removeIndex, 1);\n    }\n  }, {\n    key: \"_getAll\",\n    value: function _getAll() {\n      var result = [];\n      result[0] = this.primaryCursor;\n\n      for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n        result[i + 1] = this.secondaryCursors[i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      if (this.secondaryCursors.length === 0) {\n        return;\n      }\n\n      var cursors = this._getAll();\n\n      var sortedCursors = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        sortedCursors.push({\n          index: i,\n          selection: cursors[i].modelState.selection\n        });\n      }\n\n      sortedCursors.sort(function (a, b) {\n        if (a.selection.startLineNumber === b.selection.startLineNumber) {\n          return a.selection.startColumn - b.selection.startColumn;\n        }\n\n        return a.selection.startLineNumber - b.selection.startLineNumber;\n      });\n\n      for (var sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n        var current = sortedCursors[sortedCursorIndex];\n        var next = sortedCursors[sortedCursorIndex + 1];\n        var currentSelection = current.selection;\n        var nextSelection = next.selection;\n\n        if (!this.context.cursorConfig.multiCursorMergeOverlapping) {\n          continue;\n        }\n\n        var shouldMergeCursors = void 0;\n\n        if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n          // Merge touching cursors if one of them is collapsed\n          shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n        } else {\n          // Merge only overlapping cursors (i.e. allow touching ranges)\n          shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n        }\n\n        if (shouldMergeCursors) {\n          var winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n          var looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n          var looserIndex = sortedCursors[looserSortedCursorIndex].index;\n          var winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n          var looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n          var winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n\n          if (!looserSelection.equalsSelection(winnerSelection)) {\n            var resultingRange = looserSelection.plusRange(winnerSelection);\n            var looserSelectionIsLTR = looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn;\n            var winnerSelectionIsLTR = winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn; // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n\n            var resultingSelectionIsLTR = void 0;\n\n            if (looserIndex === this.lastAddedCursorIndex) {\n              resultingSelectionIsLTR = looserSelectionIsLTR;\n              this.lastAddedCursorIndex = winnerIndex;\n            } else {\n              // Winner takes it all\n              resultingSelectionIsLTR = winnerSelectionIsLTR;\n            }\n\n            var resultingSelection = void 0;\n\n            if (resultingSelectionIsLTR) {\n              resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n            } else {\n              resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n            }\n\n            sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n            var resultingState = CursorState.fromModelSelection(resultingSelection);\n            cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n          }\n\n          var _iterator = _createForOfIteratorHelper(sortedCursors),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var sortedCursor = _step.value;\n\n              if (sortedCursor.index > looserIndex) {\n                sortedCursor.index--;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          cursors.splice(looserIndex, 1);\n          sortedCursors.splice(looserSortedCursorIndex, 1);\n\n          this._removeSecondaryCursor(looserIndex - 1);\n\n          sortedCursorIndex--;\n        }\n      }\n    }\n  }]);\n\n  return CursorCollection;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCollection.js"],"names":["CursorState","OneCursor","Selection","CursorCollection","context","primaryCursor","secondaryCursors","lastAddedCursorIndex","dispose","killSecondaryCursors","startTrackingSelection","i","len","length","stopTrackingSelection","ensureValidState","result","readSelectionFromMarkers","asCursorState","viewState","position","viewPosition","isBefore","isBeforeOrEqual","modelState","selection","selections","setStates","fromModelSelections","states","setState","_setSecondaryStates","slice","secondaryStates","secondaryCursorsLength","secondaryStatesLength","createCnt","_addSecondaryCursor","removeCnt","_removeSecondaryCursor","push","removeIndex","splice","cursors","_getAll","sortedCursors","index","sort","a","b","startLineNumber","startColumn","sortedCursorIndex","current","next","currentSelection","nextSelection","cursorConfig","multiCursorMergeOverlapping","shouldMergeCursors","isEmpty","getStartPosition","getEndPosition","winnerSortedCursorIndex","looserSortedCursorIndex","looserIndex","winnerIndex","looserSelection","winnerSelection","equalsSelection","resultingRange","plusRange","looserSelectionIsLTR","selectionStartLineNumber","selectionStartColumn","winnerSelectionIsLTR","resultingSelectionIsLTR","resultingSelection","endLineNumber","endColumn","resultingState","fromModelSelection","sortedCursor"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorState } from './cursorCommon.js';\r\nimport { OneCursor } from './oneCursor.js';\r\nimport { Selection } from '../core/selection.js';\r\nexport class CursorCollection {\r\n    constructor(context) {\r\n        this.context = context;\r\n        this.primaryCursor = new OneCursor(context);\r\n        this.secondaryCursors = [];\r\n        this.lastAddedCursorIndex = 0;\r\n    }\r\n    dispose() {\r\n        this.primaryCursor.dispose(this.context);\r\n        this.killSecondaryCursors();\r\n    }\r\n    startTrackingSelections() {\r\n        this.primaryCursor.startTrackingSelection(this.context);\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            this.secondaryCursors[i].startTrackingSelection(this.context);\r\n        }\r\n    }\r\n    stopTrackingSelections() {\r\n        this.primaryCursor.stopTrackingSelection(this.context);\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            this.secondaryCursors[i].stopTrackingSelection(this.context);\r\n        }\r\n    }\r\n    updateContext(context) {\r\n        this.context = context;\r\n    }\r\n    ensureValidState() {\r\n        this.primaryCursor.ensureValidState(this.context);\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            this.secondaryCursors[i].ensureValidState(this.context);\r\n        }\r\n    }\r\n    readSelectionFromMarkers() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor.readSelectionFromMarkers(this.context);\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].readSelectionFromMarkers(this.context);\r\n        }\r\n        return result;\r\n    }\r\n    getAll() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor.asCursorState();\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].asCursorState();\r\n        }\r\n        return result;\r\n    }\r\n    getViewPositions() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor.viewState.position;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].viewState.position;\r\n        }\r\n        return result;\r\n    }\r\n    getTopMostViewPosition() {\r\n        let result = this.primaryCursor.viewState.position;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            const viewPosition = this.secondaryCursors[i].viewState.position;\r\n            if (viewPosition.isBefore(result)) {\r\n                result = viewPosition;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    getBottomMostViewPosition() {\r\n        let result = this.primaryCursor.viewState.position;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            const viewPosition = this.secondaryCursors[i].viewState.position;\r\n            if (result.isBeforeOrEqual(viewPosition)) {\r\n                result = viewPosition;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    getSelections() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor.modelState.selection;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].modelState.selection;\r\n        }\r\n        return result;\r\n    }\r\n    getViewSelections() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor.viewState.selection;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].viewState.selection;\r\n        }\r\n        return result;\r\n    }\r\n    setSelections(selections) {\r\n        this.setStates(CursorState.fromModelSelections(selections));\r\n    }\r\n    getPrimaryCursor() {\r\n        return this.primaryCursor.asCursorState();\r\n    }\r\n    setStates(states) {\r\n        if (states === null) {\r\n            return;\r\n        }\r\n        this.primaryCursor.setState(this.context, states[0].modelState, states[0].viewState);\r\n        this._setSecondaryStates(states.slice(1));\r\n    }\r\n    /**\r\n     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\r\n     */\r\n    _setSecondaryStates(secondaryStates) {\r\n        const secondaryCursorsLength = this.secondaryCursors.length;\r\n        const secondaryStatesLength = secondaryStates.length;\r\n        if (secondaryCursorsLength < secondaryStatesLength) {\r\n            let createCnt = secondaryStatesLength - secondaryCursorsLength;\r\n            for (let i = 0; i < createCnt; i++) {\r\n                this._addSecondaryCursor();\r\n            }\r\n        }\r\n        else if (secondaryCursorsLength > secondaryStatesLength) {\r\n            let removeCnt = secondaryCursorsLength - secondaryStatesLength;\r\n            for (let i = 0; i < removeCnt; i++) {\r\n                this._removeSecondaryCursor(this.secondaryCursors.length - 1);\r\n            }\r\n        }\r\n        for (let i = 0; i < secondaryStatesLength; i++) {\r\n            this.secondaryCursors[i].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\r\n        }\r\n    }\r\n    killSecondaryCursors() {\r\n        this._setSecondaryStates([]);\r\n    }\r\n    _addSecondaryCursor() {\r\n        this.secondaryCursors.push(new OneCursor(this.context));\r\n        this.lastAddedCursorIndex = this.secondaryCursors.length;\r\n    }\r\n    getLastAddedCursorIndex() {\r\n        if (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {\r\n            return 0;\r\n        }\r\n        return this.lastAddedCursorIndex;\r\n    }\r\n    _removeSecondaryCursor(removeIndex) {\r\n        if (this.lastAddedCursorIndex >= removeIndex + 1) {\r\n            this.lastAddedCursorIndex--;\r\n        }\r\n        this.secondaryCursors[removeIndex].dispose(this.context);\r\n        this.secondaryCursors.splice(removeIndex, 1);\r\n    }\r\n    _getAll() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i];\r\n        }\r\n        return result;\r\n    }\r\n    normalize() {\r\n        if (this.secondaryCursors.length === 0) {\r\n            return;\r\n        }\r\n        let cursors = this._getAll();\r\n        let sortedCursors = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            sortedCursors.push({\r\n                index: i,\r\n                selection: cursors[i].modelState.selection,\r\n            });\r\n        }\r\n        sortedCursors.sort((a, b) => {\r\n            if (a.selection.startLineNumber === b.selection.startLineNumber) {\r\n                return a.selection.startColumn - b.selection.startColumn;\r\n            }\r\n            return a.selection.startLineNumber - b.selection.startLineNumber;\r\n        });\r\n        for (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\r\n            const current = sortedCursors[sortedCursorIndex];\r\n            const next = sortedCursors[sortedCursorIndex + 1];\r\n            const currentSelection = current.selection;\r\n            const nextSelection = next.selection;\r\n            if (!this.context.cursorConfig.multiCursorMergeOverlapping) {\r\n                continue;\r\n            }\r\n            let shouldMergeCursors;\r\n            if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\r\n                // Merge touching cursors if one of them is collapsed\r\n                shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\r\n            }\r\n            else {\r\n                // Merge only overlapping cursors (i.e. allow touching ranges)\r\n                shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\r\n            }\r\n            if (shouldMergeCursors) {\r\n                const winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\r\n                const looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\r\n                const looserIndex = sortedCursors[looserSortedCursorIndex].index;\r\n                const winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\r\n                const looserSelection = sortedCursors[looserSortedCursorIndex].selection;\r\n                const winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\r\n                if (!looserSelection.equalsSelection(winnerSelection)) {\r\n                    const resultingRange = looserSelection.plusRange(winnerSelection);\r\n                    const looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\r\n                    const winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\r\n                    // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\r\n                    let resultingSelectionIsLTR;\r\n                    if (looserIndex === this.lastAddedCursorIndex) {\r\n                        resultingSelectionIsLTR = looserSelectionIsLTR;\r\n                        this.lastAddedCursorIndex = winnerIndex;\r\n                    }\r\n                    else {\r\n                        // Winner takes it all\r\n                        resultingSelectionIsLTR = winnerSelectionIsLTR;\r\n                    }\r\n                    let resultingSelection;\r\n                    if (resultingSelectionIsLTR) {\r\n                        resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\r\n                    }\r\n                    else {\r\n                        resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\r\n                    }\r\n                    sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\r\n                    const resultingState = CursorState.fromModelSelection(resultingSelection);\r\n                    cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\r\n                }\r\n                for (const sortedCursor of sortedCursors) {\r\n                    if (sortedCursor.index > looserIndex) {\r\n                        sortedCursor.index--;\r\n                    }\r\n                }\r\n                cursors.splice(looserIndex, 1);\r\n                sortedCursors.splice(looserSortedCursorIndex, 1);\r\n                this._removeSecondaryCursor(looserIndex - 1);\r\n                sortedCursorIndex--;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}