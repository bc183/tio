{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { EventType, Gesture } from '../../../base/browser/touch.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { MouseHandler, createMouseMoveEventMerger } from './mouseHandler.js';\nimport { EditorMouseEvent, EditorPointerEventFactory } from '../editorDom.js';\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\n\nfunction gestureChangeEventMerger(lastEvent, currentEvent) {\n  var r = {\n    translationY: currentEvent.translationY,\n    translationX: currentEvent.translationX\n  };\n\n  if (lastEvent) {\n    r.translationY += lastEvent.translationY;\n    r.translationX += lastEvent.translationX;\n  }\n\n  return r;\n}\n/**\r\n * Basically Edge but should be modified to handle any pointerEnabled, even without support of MSGesture\r\n */\n\n\nvar StandardPointerHandler = /*#__PURE__*/function (_MouseHandler) {\n  _inherits(StandardPointerHandler, _MouseHandler);\n\n  var _super = _createSuper(StandardPointerHandler);\n\n  function StandardPointerHandler(context, viewController, viewHelper) {\n    var _this;\n\n    _classCallCheck(this, StandardPointerHandler);\n\n    _this = _super.call(this, context, viewController, viewHelper);\n    _this.viewHelper.linesContentDomNode.style.touchAction = 'none'; // TODO@Alex -> this expects that the view is added in 100 ms, might not be the case\n    // This handler should be added when the dom node is in the dom tree\n\n    _this._installGestureHandlerTimeout = window.setTimeout(function () {\n      _this._installGestureHandlerTimeout = -1; // TODO@Alex: replace the usage of MSGesture here with something that works across all browsers\n\n      if (window.MSGesture) {\n        var touchGesture = new MSGesture();\n        var penGesture = new MSGesture();\n        touchGesture.target = _this.viewHelper.linesContentDomNode;\n        penGesture.target = _this.viewHelper.linesContentDomNode;\n\n        _this.viewHelper.linesContentDomNode.addEventListener('pointerdown', function (e) {\n          var pointerType = e.pointerType;\n\n          if (pointerType === 'mouse') {\n            _this._lastPointerType = 'mouse';\n            return;\n          } else if (pointerType === 'touch') {\n            _this._lastPointerType = 'touch';\n            touchGesture.addPointer(e.pointerId);\n          } else {\n            _this._lastPointerType = 'pen';\n            penGesture.addPointer(e.pointerId);\n          }\n        });\n\n        _this._register(dom.addDisposableThrottledListener(_this.viewHelper.linesContentDomNode, 'MSGestureChange', function (e) {\n          return _this._onGestureChange(e);\n        }, gestureChangeEventMerger));\n\n        _this._register(dom.addDisposableListener(_this.viewHelper.linesContentDomNode, 'MSGestureTap', function (e) {\n          return _this._onCaptureGestureTap(e);\n        }, true));\n      }\n    }, 100);\n    _this._lastPointerType = 'mouse';\n    return _this;\n  }\n\n  _createClass(StandardPointerHandler, [{\n    key: \"_onMouseDown\",\n    value: function _onMouseDown(e) {\n      if (this._lastPointerType === 'mouse') {\n        _get(_getPrototypeOf(StandardPointerHandler.prototype), \"_onMouseDown\", this).call(this, e);\n      }\n    }\n  }, {\n    key: \"_onCaptureGestureTap\",\n    value: function _onCaptureGestureTap(rawEvent) {\n      var _this2 = this;\n\n      var e = new EditorMouseEvent(rawEvent, this.viewHelper.viewDomNode);\n\n      var t = this._createMouseTarget(e, false);\n\n      if (t.position) {\n        this.viewController.moveTo(t.position);\n      } // IE does not want to focus when coming in from the browser's address bar\n\n\n      if (e.browserEvent.fromElement) {\n        e.preventDefault();\n        this.viewHelper.focusTextArea();\n      } else {\n        // TODO@Alex -> cancel this is focus is lost\n        setTimeout(function () {\n          _this2.viewHelper.focusTextArea();\n        });\n      }\n    }\n  }, {\n    key: \"_onGestureChange\",\n    value: function _onGestureChange(e) {\n      this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      window.clearTimeout(this._installGestureHandlerTimeout);\n\n      _get(_getPrototypeOf(StandardPointerHandler.prototype), \"dispose\", this).call(this);\n    }\n  }]);\n\n  return StandardPointerHandler;\n}(MouseHandler);\n/**\r\n * Currently only tested on iOS 13/ iPadOS.\r\n */\n\n\nexport var PointerEventHandler = /*#__PURE__*/function (_MouseHandler2) {\n  _inherits(PointerEventHandler, _MouseHandler2);\n\n  var _super2 = _createSuper(PointerEventHandler);\n\n  function PointerEventHandler(context, viewController, viewHelper) {\n    var _this3;\n\n    _classCallCheck(this, PointerEventHandler);\n\n    _this3 = _super2.call(this, context, viewController, viewHelper);\n\n    _this3._register(Gesture.addTarget(_this3.viewHelper.linesContentDomNode));\n\n    _this3._register(dom.addDisposableListener(_this3.viewHelper.linesContentDomNode, EventType.Tap, function (e) {\n      return _this3.onTap(e);\n    }));\n\n    _this3._register(dom.addDisposableListener(_this3.viewHelper.linesContentDomNode, EventType.Change, function (e) {\n      return _this3.onChange(e);\n    }));\n\n    _this3._register(dom.addDisposableListener(_this3.viewHelper.linesContentDomNode, EventType.Contextmenu, function (e) {\n      return _this3._onContextMenu(new EditorMouseEvent(e, _this3.viewHelper.viewDomNode), false);\n    }));\n\n    _this3._lastPointerType = 'mouse';\n\n    _this3._register(dom.addDisposableListener(_this3.viewHelper.linesContentDomNode, 'pointerdown', function (e) {\n      var pointerType = e.pointerType;\n\n      if (pointerType === 'mouse') {\n        _this3._lastPointerType = 'mouse';\n        return;\n      } else if (pointerType === 'touch') {\n        _this3._lastPointerType = 'touch';\n      } else {\n        _this3._lastPointerType = 'pen';\n      }\n    })); // PonterEvents\n\n\n    var pointerEvents = new EditorPointerEventFactory(_this3.viewHelper.viewDomNode);\n\n    _this3._register(pointerEvents.onPointerMoveThrottled(_this3.viewHelper.viewDomNode, function (e) {\n      return _this3._onMouseMove(e);\n    }, createMouseMoveEventMerger(_this3.mouseTargetFactory), MouseHandler.MOUSE_MOVE_MINIMUM_TIME));\n\n    _this3._register(pointerEvents.onPointerUp(_this3.viewHelper.viewDomNode, function (e) {\n      return _this3._onMouseUp(e);\n    }));\n\n    _this3._register(pointerEvents.onPointerLeave(_this3.viewHelper.viewDomNode, function (e) {\n      return _this3._onMouseLeave(e);\n    }));\n\n    _this3._register(pointerEvents.onPointerDown(_this3.viewHelper.viewDomNode, function (e) {\n      return _this3._onMouseDown(e);\n    }));\n\n    return _this3;\n  }\n\n  _createClass(PointerEventHandler, [{\n    key: \"onTap\",\n    value: function onTap(event) {\n      if (!event.initialTarget || !this.viewHelper.linesContentDomNode.contains(event.initialTarget)) {\n        return;\n      }\n\n      event.preventDefault();\n      this.viewHelper.focusTextArea();\n\n      var target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\n\n      if (target.position) {\n        // this.viewController.moveTo(target.position);\n        this.viewController.dispatchMouse({\n          position: target.position,\n          mouseColumn: target.position.column,\n          startedOnLineNumbers: false,\n          mouseDownCount: event.tapCount,\n          inSelectionMode: false,\n          altKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          shiftKey: false,\n          leftButton: false,\n          middleButton: false\n        });\n      }\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(e) {\n      if (this._lastPointerType === 'touch') {\n        this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\n      }\n    }\n  }, {\n    key: \"_onMouseDown\",\n    value: function _onMouseDown(e) {\n      if (e.browserEvent.pointerType === 'touch') {\n        return;\n      }\n\n      _get(_getPrototypeOf(PointerEventHandler.prototype), \"_onMouseDown\", this).call(this, e);\n    }\n  }]);\n\n  return PointerEventHandler;\n}(MouseHandler);\n\nvar TouchHandler = /*#__PURE__*/function (_MouseHandler3) {\n  _inherits(TouchHandler, _MouseHandler3);\n\n  var _super3 = _createSuper(TouchHandler);\n\n  function TouchHandler(context, viewController, viewHelper) {\n    var _this4;\n\n    _classCallCheck(this, TouchHandler);\n\n    _this4 = _super3.call(this, context, viewController, viewHelper);\n\n    _this4._register(Gesture.addTarget(_this4.viewHelper.linesContentDomNode));\n\n    _this4._register(dom.addDisposableListener(_this4.viewHelper.linesContentDomNode, EventType.Tap, function (e) {\n      return _this4.onTap(e);\n    }));\n\n    _this4._register(dom.addDisposableListener(_this4.viewHelper.linesContentDomNode, EventType.Change, function (e) {\n      return _this4.onChange(e);\n    }));\n\n    _this4._register(dom.addDisposableListener(_this4.viewHelper.linesContentDomNode, EventType.Contextmenu, function (e) {\n      return _this4._onContextMenu(new EditorMouseEvent(e, _this4.viewHelper.viewDomNode), false);\n    }));\n\n    return _this4;\n  }\n\n  _createClass(TouchHandler, [{\n    key: \"onTap\",\n    value: function onTap(event) {\n      event.preventDefault();\n      this.viewHelper.focusTextArea();\n\n      var target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\n\n      if (target.position) {\n        this.viewController.moveTo(target.position);\n      }\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(e) {\n      this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\n    }\n  }]);\n\n  return TouchHandler;\n}(MouseHandler);\n\nexport var PointerHandler = /*#__PURE__*/function (_Disposable) {\n  _inherits(PointerHandler, _Disposable);\n\n  var _super4 = _createSuper(PointerHandler);\n\n  function PointerHandler(context, viewController, viewHelper) {\n    var _this5;\n\n    _classCallCheck(this, PointerHandler);\n\n    _this5 = _super4.call(this);\n\n    if (platform.isIOS && BrowserFeatures.pointerEvents) {\n      _this5.handler = _this5._register(new PointerEventHandler(context, viewController, viewHelper));\n    } else if (window.TouchEvent) {\n      _this5.handler = _this5._register(new TouchHandler(context, viewController, viewHelper));\n    } else if (window.navigator.pointerEnabled || window.PointerEvent) {\n      _this5.handler = _this5._register(new StandardPointerHandler(context, viewController, viewHelper));\n    } else {\n      _this5.handler = _this5._register(new MouseHandler(context, viewController, viewHelper));\n    }\n\n    return _this5;\n  }\n\n  _createClass(PointerHandler, [{\n    key: \"getTargetAtClientPoint\",\n    value: function getTargetAtClientPoint(clientX, clientY) {\n      return this.handler.getTargetAtClientPoint(clientX, clientY);\n    }\n  }]);\n\n  return PointerHandler;\n}(Disposable);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/controller/pointerHandler.js"],"names":["dom","platform","EventType","Gesture","Disposable","MouseHandler","createMouseMoveEventMerger","EditorMouseEvent","EditorPointerEventFactory","BrowserFeatures","gestureChangeEventMerger","lastEvent","currentEvent","r","translationY","translationX","StandardPointerHandler","context","viewController","viewHelper","linesContentDomNode","style","touchAction","_installGestureHandlerTimeout","window","setTimeout","MSGesture","touchGesture","penGesture","target","addEventListener","e","pointerType","_lastPointerType","addPointer","pointerId","_register","addDisposableThrottledListener","_onGestureChange","addDisposableListener","_onCaptureGestureTap","rawEvent","viewDomNode","t","_createMouseTarget","position","moveTo","browserEvent","fromElement","preventDefault","focusTextArea","_context","model","deltaScrollNow","clearTimeout","PointerEventHandler","addTarget","Tap","onTap","Change","onChange","Contextmenu","_onContextMenu","pointerEvents","onPointerMoveThrottled","_onMouseMove","mouseTargetFactory","MOUSE_MOVE_MINIMUM_TIME","onPointerUp","_onMouseUp","onPointerLeave","_onMouseLeave","onPointerDown","_onMouseDown","event","initialTarget","contains","dispatchMouse","mouseColumn","column","startedOnLineNumbers","mouseDownCount","tapCount","inSelectionMode","altKey","ctrlKey","metaKey","shiftKey","leftButton","middleButton","TouchHandler","PointerHandler","isIOS","handler","TouchEvent","navigator","pointerEnabled","PointerEvent","clientX","clientY","getTargetAtClientPoint"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as dom from '../../../base/browser/dom.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport { EventType, Gesture } from '../../../base/browser/touch.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { MouseHandler, createMouseMoveEventMerger } from './mouseHandler.js';\r\nimport { EditorMouseEvent, EditorPointerEventFactory } from '../editorDom.js';\r\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\r\nfunction gestureChangeEventMerger(lastEvent, currentEvent) {\r\n    const r = {\r\n        translationY: currentEvent.translationY,\r\n        translationX: currentEvent.translationX\r\n    };\r\n    if (lastEvent) {\r\n        r.translationY += lastEvent.translationY;\r\n        r.translationX += lastEvent.translationX;\r\n    }\r\n    return r;\r\n}\r\n/**\r\n * Basically Edge but should be modified to handle any pointerEnabled, even without support of MSGesture\r\n */\r\nclass StandardPointerHandler extends MouseHandler {\r\n    constructor(context, viewController, viewHelper) {\r\n        super(context, viewController, viewHelper);\r\n        this.viewHelper.linesContentDomNode.style.touchAction = 'none';\r\n        // TODO@Alex -> this expects that the view is added in 100 ms, might not be the case\r\n        // This handler should be added when the dom node is in the dom tree\r\n        this._installGestureHandlerTimeout = window.setTimeout(() => {\r\n            this._installGestureHandlerTimeout = -1;\r\n            // TODO@Alex: replace the usage of MSGesture here with something that works across all browsers\r\n            if (window.MSGesture) {\r\n                const touchGesture = new MSGesture();\r\n                const penGesture = new MSGesture();\r\n                touchGesture.target = this.viewHelper.linesContentDomNode;\r\n                penGesture.target = this.viewHelper.linesContentDomNode;\r\n                this.viewHelper.linesContentDomNode.addEventListener('pointerdown', (e) => {\r\n                    const pointerType = e.pointerType;\r\n                    if (pointerType === 'mouse') {\r\n                        this._lastPointerType = 'mouse';\r\n                        return;\r\n                    }\r\n                    else if (pointerType === 'touch') {\r\n                        this._lastPointerType = 'touch';\r\n                        touchGesture.addPointer(e.pointerId);\r\n                    }\r\n                    else {\r\n                        this._lastPointerType = 'pen';\r\n                        penGesture.addPointer(e.pointerId);\r\n                    }\r\n                });\r\n                this._register(dom.addDisposableThrottledListener(this.viewHelper.linesContentDomNode, 'MSGestureChange', (e) => this._onGestureChange(e), gestureChangeEventMerger));\r\n                this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'MSGestureTap', (e) => this._onCaptureGestureTap(e), true));\r\n            }\r\n        }, 100);\r\n        this._lastPointerType = 'mouse';\r\n    }\r\n    _onMouseDown(e) {\r\n        if (this._lastPointerType === 'mouse') {\r\n            super._onMouseDown(e);\r\n        }\r\n    }\r\n    _onCaptureGestureTap(rawEvent) {\r\n        const e = new EditorMouseEvent(rawEvent, this.viewHelper.viewDomNode);\r\n        const t = this._createMouseTarget(e, false);\r\n        if (t.position) {\r\n            this.viewController.moveTo(t.position);\r\n        }\r\n        // IE does not want to focus when coming in from the browser's address bar\r\n        if (e.browserEvent.fromElement) {\r\n            e.preventDefault();\r\n            this.viewHelper.focusTextArea();\r\n        }\r\n        else {\r\n            // TODO@Alex -> cancel this is focus is lost\r\n            setTimeout(() => {\r\n                this.viewHelper.focusTextArea();\r\n            });\r\n        }\r\n    }\r\n    _onGestureChange(e) {\r\n        this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\r\n    }\r\n    dispose() {\r\n        window.clearTimeout(this._installGestureHandlerTimeout);\r\n        super.dispose();\r\n    }\r\n}\r\n/**\r\n * Currently only tested on iOS 13/ iPadOS.\r\n */\r\nexport class PointerEventHandler extends MouseHandler {\r\n    constructor(context, viewController, viewHelper) {\r\n        super(context, viewController, viewHelper);\r\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, this.viewHelper.viewDomNode), false)));\r\n        this._lastPointerType = 'mouse';\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'pointerdown', (e) => {\r\n            const pointerType = e.pointerType;\r\n            if (pointerType === 'mouse') {\r\n                this._lastPointerType = 'mouse';\r\n                return;\r\n            }\r\n            else if (pointerType === 'touch') {\r\n                this._lastPointerType = 'touch';\r\n            }\r\n            else {\r\n                this._lastPointerType = 'pen';\r\n            }\r\n        }));\r\n        // PonterEvents\r\n        const pointerEvents = new EditorPointerEventFactory(this.viewHelper.viewDomNode);\r\n        this._register(pointerEvents.onPointerMoveThrottled(this.viewHelper.viewDomNode, (e) => this._onMouseMove(e), createMouseMoveEventMerger(this.mouseTargetFactory), MouseHandler.MOUSE_MOVE_MINIMUM_TIME));\r\n        this._register(pointerEvents.onPointerUp(this.viewHelper.viewDomNode, (e) => this._onMouseUp(e)));\r\n        this._register(pointerEvents.onPointerLeave(this.viewHelper.viewDomNode, (e) => this._onMouseLeave(e)));\r\n        this._register(pointerEvents.onPointerDown(this.viewHelper.viewDomNode, (e) => this._onMouseDown(e)));\r\n    }\r\n    onTap(event) {\r\n        if (!event.initialTarget || !this.viewHelper.linesContentDomNode.contains(event.initialTarget)) {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        this.viewHelper.focusTextArea();\r\n        const target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\r\n        if (target.position) {\r\n            // this.viewController.moveTo(target.position);\r\n            this.viewController.dispatchMouse({\r\n                position: target.position,\r\n                mouseColumn: target.position.column,\r\n                startedOnLineNumbers: false,\r\n                mouseDownCount: event.tapCount,\r\n                inSelectionMode: false,\r\n                altKey: false,\r\n                ctrlKey: false,\r\n                metaKey: false,\r\n                shiftKey: false,\r\n                leftButton: false,\r\n                middleButton: false,\r\n            });\r\n        }\r\n    }\r\n    onChange(e) {\r\n        if (this._lastPointerType === 'touch') {\r\n            this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\r\n        }\r\n    }\r\n    _onMouseDown(e) {\r\n        if (e.browserEvent.pointerType === 'touch') {\r\n            return;\r\n        }\r\n        super._onMouseDown(e);\r\n    }\r\n}\r\nclass TouchHandler extends MouseHandler {\r\n    constructor(context, viewController, viewHelper) {\r\n        super(context, viewController, viewHelper);\r\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, this.viewHelper.viewDomNode), false)));\r\n    }\r\n    onTap(event) {\r\n        event.preventDefault();\r\n        this.viewHelper.focusTextArea();\r\n        const target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\r\n        if (target.position) {\r\n            this.viewController.moveTo(target.position);\r\n        }\r\n    }\r\n    onChange(e) {\r\n        this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\r\n    }\r\n}\r\nexport class PointerHandler extends Disposable {\r\n    constructor(context, viewController, viewHelper) {\r\n        super();\r\n        if ((platform.isIOS && BrowserFeatures.pointerEvents)) {\r\n            this.handler = this._register(new PointerEventHandler(context, viewController, viewHelper));\r\n        }\r\n        else if (window.TouchEvent) {\r\n            this.handler = this._register(new TouchHandler(context, viewController, viewHelper));\r\n        }\r\n        else if (window.navigator.pointerEnabled || window.PointerEvent) {\r\n            this.handler = this._register(new StandardPointerHandler(context, viewController, viewHelper));\r\n        }\r\n        else {\r\n            this.handler = this._register(new MouseHandler(context, viewController, viewHelper));\r\n        }\r\n    }\r\n    getTargetAtClientPoint(clientX, clientY) {\r\n        return this.handler.getTargetAtClientPoint(clientX, clientY);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}