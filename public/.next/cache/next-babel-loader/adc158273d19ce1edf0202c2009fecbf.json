{"ast":null,"code":"import _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../../base/common/color.js';\nexport var ParsedTokenThemeRule = function ParsedTokenThemeRule(token, index, fontStyle, foreground, background) {\n  _classCallCheck(this, ParsedTokenThemeRule);\n\n  this.token = token;\n  this.index = index;\n  this.fontStyle = fontStyle;\n  this.foreground = foreground;\n  this.background = background;\n};\n/**\r\n * Parse a raw theme into rules.\r\n */\n\nexport function parseTokenTheme(source) {\n  if (!source || !Array.isArray(source)) {\n    return [];\n  }\n\n  var result = [],\n      resultLen = 0;\n\n  for (var i = 0, len = source.length; i < len; i++) {\n    var entry = source[i];\n    var fontStyle = -1\n    /* NotSet */\n    ;\n\n    if (typeof entry.fontStyle === 'string') {\n      fontStyle = 0\n      /* None */\n      ;\n      var segments = entry.fontStyle.split(' ');\n\n      for (var j = 0, lenJ = segments.length; j < lenJ; j++) {\n        var segment = segments[j];\n\n        switch (segment) {\n          case 'italic':\n            fontStyle = fontStyle | 1\n            /* Italic */\n            ;\n            break;\n\n          case 'bold':\n            fontStyle = fontStyle | 2\n            /* Bold */\n            ;\n            break;\n\n          case 'underline':\n            fontStyle = fontStyle | 4\n            /* Underline */\n            ;\n            break;\n        }\n      }\n    }\n\n    var foreground = null;\n\n    if (typeof entry.foreground === 'string') {\n      foreground = entry.foreground;\n    }\n\n    var background = null;\n\n    if (typeof entry.background === 'string') {\n      background = entry.background;\n    }\n\n    result[resultLen++] = new ParsedTokenThemeRule(entry.token || '', i, fontStyle, foreground, background);\n  }\n\n  return result;\n}\n/**\r\n * Resolve rules (i.e. inheritance).\r\n */\n\nfunction resolveParsedTokenThemeRules(parsedThemeRules, customTokenColors) {\n  // Sort rules lexicographically, and then by index if necessary\n  parsedThemeRules.sort(function (a, b) {\n    var r = strcmp(a.token, b.token);\n\n    if (r !== 0) {\n      return r;\n    }\n\n    return a.index - b.index;\n  }); // Determine defaults\n\n  var defaultFontStyle = 0\n  /* None */\n  ;\n  var defaultForeground = '000000';\n  var defaultBackground = 'ffffff';\n\n  while (parsedThemeRules.length >= 1 && parsedThemeRules[0].token === '') {\n    var incomingDefaults = parsedThemeRules.shift();\n\n    if (incomingDefaults.fontStyle !== -1\n    /* NotSet */\n    ) {\n        defaultFontStyle = incomingDefaults.fontStyle;\n      }\n\n    if (incomingDefaults.foreground !== null) {\n      defaultForeground = incomingDefaults.foreground;\n    }\n\n    if (incomingDefaults.background !== null) {\n      defaultBackground = incomingDefaults.background;\n    }\n  }\n\n  var colorMap = new ColorMap(); // start with token colors from custom token themes\n\n  var _iterator = _createForOfIteratorHelper(customTokenColors),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var color = _step.value;\n      colorMap.getId(color);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var foregroundColorId = colorMap.getId(defaultForeground);\n  var backgroundColorId = colorMap.getId(defaultBackground);\n  var defaults = new ThemeTrieElementRule(defaultFontStyle, foregroundColorId, backgroundColorId);\n  var root = new ThemeTrieElement(defaults);\n\n  for (var i = 0, len = parsedThemeRules.length; i < len; i++) {\n    var rule = parsedThemeRules[i];\n    root.insert(rule.token, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n  }\n\n  return new TokenTheme(colorMap, root);\n}\n\nvar colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\nexport var ColorMap = /*#__PURE__*/function () {\n  function ColorMap() {\n    _classCallCheck(this, ColorMap);\n\n    this._lastColorId = 0;\n    this._id2color = [];\n    this._color2id = new Map();\n  }\n\n  _createClass(ColorMap, [{\n    key: \"getId\",\n    value: function getId(color) {\n      if (color === null) {\n        return 0;\n      }\n\n      var match = color.match(colorRegExp);\n\n      if (!match) {\n        throw new Error('Illegal value for token color: ' + color);\n      }\n\n      color = match[1].toUpperCase();\n\n      var value = this._color2id.get(color);\n\n      if (value) {\n        return value;\n      }\n\n      value = ++this._lastColorId;\n\n      this._color2id.set(color, value);\n\n      this._id2color[value] = Color.fromHex('#' + color);\n      return value;\n    }\n  }, {\n    key: \"getColorMap\",\n    value: function getColorMap() {\n      return this._id2color.slice(0);\n    }\n  }]);\n\n  return ColorMap;\n}();\nexport var TokenTheme = /*#__PURE__*/function () {\n  function TokenTheme(colorMap, root) {\n    _classCallCheck(this, TokenTheme);\n\n    this._colorMap = colorMap;\n    this._root = root;\n    this._cache = new Map();\n  }\n\n  _createClass(TokenTheme, [{\n    key: \"getColorMap\",\n    value: function getColorMap() {\n      return this._colorMap.getColorMap();\n    }\n  }, {\n    key: \"_match\",\n    value: function _match(token) {\n      return this._root.match(token);\n    }\n  }, {\n    key: \"match\",\n    value: function match(languageId, token) {\n      // The cache contains the metadata without the language bits set.\n      var result = this._cache.get(token);\n\n      if (typeof result === 'undefined') {\n        var rule = this._match(token);\n\n        var standardToken = toStandardTokenType(token);\n        result = (rule.metadata | standardToken << 8\n        /* TOKEN_TYPE_OFFSET */\n        ) >>> 0;\n\n        this._cache.set(token, result);\n      }\n\n      return (result | languageId << 0\n      /* LANGUAGEID_OFFSET */\n      ) >>> 0;\n    }\n  }], [{\n    key: \"createFromRawTokenTheme\",\n    value: function createFromRawTokenTheme(source, customTokenColors) {\n      return this.createFromParsedTokenTheme(parseTokenTheme(source), customTokenColors);\n    }\n  }, {\n    key: \"createFromParsedTokenTheme\",\n    value: function createFromParsedTokenTheme(source, customTokenColors) {\n      return resolveParsedTokenThemeRules(source, customTokenColors);\n    }\n  }]);\n\n  return TokenTheme;\n}();\nvar STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|regexp)\\b/;\nexport function toStandardTokenType(tokenType) {\n  var m = tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);\n\n  if (!m) {\n    return 0\n    /* Other */\n    ;\n  }\n\n  switch (m[1]) {\n    case 'comment':\n      return 1\n      /* Comment */\n      ;\n\n    case 'string':\n      return 2\n      /* String */\n      ;\n\n    case 'regex':\n      return 4\n      /* RegEx */\n      ;\n\n    case 'regexp':\n      return 4\n      /* RegEx */\n      ;\n  }\n\n  throw new Error('Unexpected match for standard token type!');\n}\nexport function strcmp(a, b) {\n  if (a < b) {\n    return -1;\n  }\n\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n}\nexport var ThemeTrieElementRule = /*#__PURE__*/function () {\n  function ThemeTrieElementRule(fontStyle, foreground, background) {\n    _classCallCheck(this, ThemeTrieElementRule);\n\n    this._fontStyle = fontStyle;\n    this._foreground = foreground;\n    this._background = background;\n    this.metadata = (this._fontStyle << 11\n    /* FONT_STYLE_OFFSET */\n    | this._foreground << 14\n    /* FOREGROUND_OFFSET */\n    | this._background << 23\n    /* BACKGROUND_OFFSET */\n    ) >>> 0;\n  }\n\n  _createClass(ThemeTrieElementRule, [{\n    key: \"clone\",\n    value: function clone() {\n      return new ThemeTrieElementRule(this._fontStyle, this._foreground, this._background);\n    }\n  }, {\n    key: \"acceptOverwrite\",\n    value: function acceptOverwrite(fontStyle, foreground, background) {\n      if (fontStyle !== -1\n      /* NotSet */\n      ) {\n          this._fontStyle = fontStyle;\n        }\n\n      if (foreground !== 0\n      /* None */\n      ) {\n          this._foreground = foreground;\n        }\n\n      if (background !== 0\n      /* None */\n      ) {\n          this._background = background;\n        }\n\n      this.metadata = (this._fontStyle << 11\n      /* FONT_STYLE_OFFSET */\n      | this._foreground << 14\n      /* FOREGROUND_OFFSET */\n      | this._background << 23\n      /* BACKGROUND_OFFSET */\n      ) >>> 0;\n    }\n  }]);\n\n  return ThemeTrieElementRule;\n}();\nexport var ThemeTrieElement = /*#__PURE__*/function () {\n  function ThemeTrieElement(mainRule) {\n    _classCallCheck(this, ThemeTrieElement);\n\n    this._mainRule = mainRule;\n    this._children = new Map();\n  }\n\n  _createClass(ThemeTrieElement, [{\n    key: \"match\",\n    value: function match(token) {\n      if (token === '') {\n        return this._mainRule;\n      }\n\n      var dotIndex = token.indexOf('.');\n      var head;\n      var tail;\n\n      if (dotIndex === -1) {\n        head = token;\n        tail = '';\n      } else {\n        head = token.substring(0, dotIndex);\n        tail = token.substring(dotIndex + 1);\n      }\n\n      var child = this._children.get(head);\n\n      if (typeof child !== 'undefined') {\n        return child.match(tail);\n      }\n\n      return this._mainRule;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(token, fontStyle, foreground, background) {\n      if (token === '') {\n        // Merge into the main rule\n        this._mainRule.acceptOverwrite(fontStyle, foreground, background);\n\n        return;\n      }\n\n      var dotIndex = token.indexOf('.');\n      var head;\n      var tail;\n\n      if (dotIndex === -1) {\n        head = token;\n        tail = '';\n      } else {\n        head = token.substring(0, dotIndex);\n        tail = token.substring(dotIndex + 1);\n      }\n\n      var child = this._children.get(head);\n\n      if (typeof child === 'undefined') {\n        child = new ThemeTrieElement(this._mainRule.clone());\n\n        this._children.set(head, child);\n      }\n\n      child.insert(tail, fontStyle, foreground, background);\n    }\n  }]);\n\n  return ThemeTrieElement;\n}();\nexport function generateTokensCSSForColorMap(colorMap) {\n  var rules = [];\n\n  for (var i = 1, len = colorMap.length; i < len; i++) {\n    var color = colorMap[i];\n    rules[i] = \".mtk\".concat(i, \" { color: \").concat(color, \"; }\");\n  }\n\n  rules.push('.mtki { font-style: italic; }');\n  rules.push('.mtkb { font-weight: bold; }');\n  rules.push('.mtku { text-decoration: underline; text-underline-position: under; }');\n  return rules.join('\\n');\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/tokenization.js"],"names":["Color","ParsedTokenThemeRule","token","index","fontStyle","foreground","background","parseTokenTheme","source","Array","isArray","result","resultLen","i","len","length","entry","segments","split","j","lenJ","segment","resolveParsedTokenThemeRules","parsedThemeRules","customTokenColors","sort","a","b","r","strcmp","defaultFontStyle","defaultForeground","defaultBackground","incomingDefaults","shift","colorMap","ColorMap","color","getId","foregroundColorId","backgroundColorId","defaults","ThemeTrieElementRule","root","ThemeTrieElement","rule","insert","TokenTheme","colorRegExp","_lastColorId","_id2color","_color2id","Map","match","Error","toUpperCase","value","get","set","fromHex","slice","_colorMap","_root","_cache","getColorMap","languageId","_match","standardToken","toStandardTokenType","metadata","createFromParsedTokenTheme","STANDARD_TOKEN_TYPE_REGEXP","tokenType","m","_fontStyle","_foreground","_background","mainRule","_mainRule","_children","dotIndex","indexOf","head","tail","substring","child","acceptOverwrite","clone","generateTokensCSSForColorMap","rules","push","join"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Color } from '../../../../base/common/color.js';\r\nexport class ParsedTokenThemeRule {\r\n    constructor(token, index, fontStyle, foreground, background) {\r\n        this.token = token;\r\n        this.index = index;\r\n        this.fontStyle = fontStyle;\r\n        this.foreground = foreground;\r\n        this.background = background;\r\n    }\r\n}\r\n/**\r\n * Parse a raw theme into rules.\r\n */\r\nexport function parseTokenTheme(source) {\r\n    if (!source || !Array.isArray(source)) {\r\n        return [];\r\n    }\r\n    let result = [], resultLen = 0;\r\n    for (let i = 0, len = source.length; i < len; i++) {\r\n        let entry = source[i];\r\n        let fontStyle = -1 /* NotSet */;\r\n        if (typeof entry.fontStyle === 'string') {\r\n            fontStyle = 0 /* None */;\r\n            let segments = entry.fontStyle.split(' ');\r\n            for (let j = 0, lenJ = segments.length; j < lenJ; j++) {\r\n                let segment = segments[j];\r\n                switch (segment) {\r\n                    case 'italic':\r\n                        fontStyle = fontStyle | 1 /* Italic */;\r\n                        break;\r\n                    case 'bold':\r\n                        fontStyle = fontStyle | 2 /* Bold */;\r\n                        break;\r\n                    case 'underline':\r\n                        fontStyle = fontStyle | 4 /* Underline */;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let foreground = null;\r\n        if (typeof entry.foreground === 'string') {\r\n            foreground = entry.foreground;\r\n        }\r\n        let background = null;\r\n        if (typeof entry.background === 'string') {\r\n            background = entry.background;\r\n        }\r\n        result[resultLen++] = new ParsedTokenThemeRule(entry.token || '', i, fontStyle, foreground, background);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Resolve rules (i.e. inheritance).\r\n */\r\nfunction resolveParsedTokenThemeRules(parsedThemeRules, customTokenColors) {\r\n    // Sort rules lexicographically, and then by index if necessary\r\n    parsedThemeRules.sort((a, b) => {\r\n        let r = strcmp(a.token, b.token);\r\n        if (r !== 0) {\r\n            return r;\r\n        }\r\n        return a.index - b.index;\r\n    });\r\n    // Determine defaults\r\n    let defaultFontStyle = 0 /* None */;\r\n    let defaultForeground = '000000';\r\n    let defaultBackground = 'ffffff';\r\n    while (parsedThemeRules.length >= 1 && parsedThemeRules[0].token === '') {\r\n        let incomingDefaults = parsedThemeRules.shift();\r\n        if (incomingDefaults.fontStyle !== -1 /* NotSet */) {\r\n            defaultFontStyle = incomingDefaults.fontStyle;\r\n        }\r\n        if (incomingDefaults.foreground !== null) {\r\n            defaultForeground = incomingDefaults.foreground;\r\n        }\r\n        if (incomingDefaults.background !== null) {\r\n            defaultBackground = incomingDefaults.background;\r\n        }\r\n    }\r\n    let colorMap = new ColorMap();\r\n    // start with token colors from custom token themes\r\n    for (let color of customTokenColors) {\r\n        colorMap.getId(color);\r\n    }\r\n    let foregroundColorId = colorMap.getId(defaultForeground);\r\n    let backgroundColorId = colorMap.getId(defaultBackground);\r\n    let defaults = new ThemeTrieElementRule(defaultFontStyle, foregroundColorId, backgroundColorId);\r\n    let root = new ThemeTrieElement(defaults);\r\n    for (let i = 0, len = parsedThemeRules.length; i < len; i++) {\r\n        let rule = parsedThemeRules[i];\r\n        root.insert(rule.token, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\r\n    }\r\n    return new TokenTheme(colorMap, root);\r\n}\r\nconst colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\r\nexport class ColorMap {\r\n    constructor() {\r\n        this._lastColorId = 0;\r\n        this._id2color = [];\r\n        this._color2id = new Map();\r\n    }\r\n    getId(color) {\r\n        if (color === null) {\r\n            return 0;\r\n        }\r\n        const match = color.match(colorRegExp);\r\n        if (!match) {\r\n            throw new Error('Illegal value for token color: ' + color);\r\n        }\r\n        color = match[1].toUpperCase();\r\n        let value = this._color2id.get(color);\r\n        if (value) {\r\n            return value;\r\n        }\r\n        value = ++this._lastColorId;\r\n        this._color2id.set(color, value);\r\n        this._id2color[value] = Color.fromHex('#' + color);\r\n        return value;\r\n    }\r\n    getColorMap() {\r\n        return this._id2color.slice(0);\r\n    }\r\n}\r\nexport class TokenTheme {\r\n    constructor(colorMap, root) {\r\n        this._colorMap = colorMap;\r\n        this._root = root;\r\n        this._cache = new Map();\r\n    }\r\n    static createFromRawTokenTheme(source, customTokenColors) {\r\n        return this.createFromParsedTokenTheme(parseTokenTheme(source), customTokenColors);\r\n    }\r\n    static createFromParsedTokenTheme(source, customTokenColors) {\r\n        return resolveParsedTokenThemeRules(source, customTokenColors);\r\n    }\r\n    getColorMap() {\r\n        return this._colorMap.getColorMap();\r\n    }\r\n    _match(token) {\r\n        return this._root.match(token);\r\n    }\r\n    match(languageId, token) {\r\n        // The cache contains the metadata without the language bits set.\r\n        let result = this._cache.get(token);\r\n        if (typeof result === 'undefined') {\r\n            let rule = this._match(token);\r\n            let standardToken = toStandardTokenType(token);\r\n            result = (rule.metadata\r\n                | (standardToken << 8 /* TOKEN_TYPE_OFFSET */)) >>> 0;\r\n            this._cache.set(token, result);\r\n        }\r\n        return (result\r\n            | (languageId << 0 /* LANGUAGEID_OFFSET */)) >>> 0;\r\n    }\r\n}\r\nconst STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|regexp)\\b/;\r\nexport function toStandardTokenType(tokenType) {\r\n    let m = tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);\r\n    if (!m) {\r\n        return 0 /* Other */;\r\n    }\r\n    switch (m[1]) {\r\n        case 'comment':\r\n            return 1 /* Comment */;\r\n        case 'string':\r\n            return 2 /* String */;\r\n        case 'regex':\r\n            return 4 /* RegEx */;\r\n        case 'regexp':\r\n            return 4 /* RegEx */;\r\n    }\r\n    throw new Error('Unexpected match for standard token type!');\r\n}\r\nexport function strcmp(a, b) {\r\n    if (a < b) {\r\n        return -1;\r\n    }\r\n    if (a > b) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nexport class ThemeTrieElementRule {\r\n    constructor(fontStyle, foreground, background) {\r\n        this._fontStyle = fontStyle;\r\n        this._foreground = foreground;\r\n        this._background = background;\r\n        this.metadata = ((this._fontStyle << 11 /* FONT_STYLE_OFFSET */)\r\n            | (this._foreground << 14 /* FOREGROUND_OFFSET */)\r\n            | (this._background << 23 /* BACKGROUND_OFFSET */)) >>> 0;\r\n    }\r\n    clone() {\r\n        return new ThemeTrieElementRule(this._fontStyle, this._foreground, this._background);\r\n    }\r\n    acceptOverwrite(fontStyle, foreground, background) {\r\n        if (fontStyle !== -1 /* NotSet */) {\r\n            this._fontStyle = fontStyle;\r\n        }\r\n        if (foreground !== 0 /* None */) {\r\n            this._foreground = foreground;\r\n        }\r\n        if (background !== 0 /* None */) {\r\n            this._background = background;\r\n        }\r\n        this.metadata = ((this._fontStyle << 11 /* FONT_STYLE_OFFSET */)\r\n            | (this._foreground << 14 /* FOREGROUND_OFFSET */)\r\n            | (this._background << 23 /* BACKGROUND_OFFSET */)) >>> 0;\r\n    }\r\n}\r\nexport class ThemeTrieElement {\r\n    constructor(mainRule) {\r\n        this._mainRule = mainRule;\r\n        this._children = new Map();\r\n    }\r\n    match(token) {\r\n        if (token === '') {\r\n            return this._mainRule;\r\n        }\r\n        let dotIndex = token.indexOf('.');\r\n        let head;\r\n        let tail;\r\n        if (dotIndex === -1) {\r\n            head = token;\r\n            tail = '';\r\n        }\r\n        else {\r\n            head = token.substring(0, dotIndex);\r\n            tail = token.substring(dotIndex + 1);\r\n        }\r\n        let child = this._children.get(head);\r\n        if (typeof child !== 'undefined') {\r\n            return child.match(tail);\r\n        }\r\n        return this._mainRule;\r\n    }\r\n    insert(token, fontStyle, foreground, background) {\r\n        if (token === '') {\r\n            // Merge into the main rule\r\n            this._mainRule.acceptOverwrite(fontStyle, foreground, background);\r\n            return;\r\n        }\r\n        let dotIndex = token.indexOf('.');\r\n        let head;\r\n        let tail;\r\n        if (dotIndex === -1) {\r\n            head = token;\r\n            tail = '';\r\n        }\r\n        else {\r\n            head = token.substring(0, dotIndex);\r\n            tail = token.substring(dotIndex + 1);\r\n        }\r\n        let child = this._children.get(head);\r\n        if (typeof child === 'undefined') {\r\n            child = new ThemeTrieElement(this._mainRule.clone());\r\n            this._children.set(head, child);\r\n        }\r\n        child.insert(tail, fontStyle, foreground, background);\r\n    }\r\n}\r\nexport function generateTokensCSSForColorMap(colorMap) {\r\n    let rules = [];\r\n    for (let i = 1, len = colorMap.length; i < len; i++) {\r\n        let color = colorMap[i];\r\n        rules[i] = `.mtk${i} { color: ${color}; }`;\r\n    }\r\n    rules.push('.mtki { font-style: italic; }');\r\n    rules.push('.mtkb { font-weight: bold; }');\r\n    rules.push('.mtku { text-decoration: underline; text-underline-position: under; }');\r\n    return rules.join('\\n');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}