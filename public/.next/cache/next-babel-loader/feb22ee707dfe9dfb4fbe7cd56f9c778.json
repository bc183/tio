{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar _a;\n\nimport { globals } from '../common/platform.js';\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\nvar ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('defaultWorkerFactory', {\n  createScriptURL: function createScriptURL(value) {\n    return value;\n  }\n});\n\nfunction getWorker(workerId, label) {\n  // Option for hosts to overwrite the worker script (used in the standalone editor)\n  if (globals.MonacoEnvironment) {\n    if (typeof globals.MonacoEnvironment.getWorker === 'function') {\n      return globals.MonacoEnvironment.getWorker(workerId, label);\n    }\n\n    if (typeof globals.MonacoEnvironment.getWorkerUrl === 'function') {\n      var wokerUrl = globals.MonacoEnvironment.getWorkerUrl(workerId, label);\n      return new Worker(ttPolicy ? ttPolicy.createScriptURL(wokerUrl) : wokerUrl, {\n        name: label\n      });\n    }\n  } // ESM-comment-begin\n  // \tif (typeof require === 'function') {\n  // \t\t// check if the JS lives on a different origin\n  // \t\tconst workerMain = require.toUrl('./' + workerId); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n  // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\n  // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label });\n  // \t}\n  // ESM-comment-end\n\n\n  throw new Error(\"You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker\");\n} // ESM-comment-begin\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string, forceDataUri: boolean = false): string {\n// \tif (forceDataUri || /^((http:)|(https:)|(file:))/.test(scriptPath)) {\n// \t\tconst currentUrl = String(window.location);\n// \t\tconst currentOrigin = currentUrl.substr(0, currentUrl.length - window.location.hash.length - window.location.search.length - window.location.pathname.length);\n// \t\tif (forceDataUri || scriptPath.substring(0, currentOrigin.length) !== currentOrigin) {\n// \t\t\t// this is the cross-origin case\n// \t\t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n// \t\t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\n// \t\t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n// \t\t\tconst js = `/*${label}*/self.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};importScripts('${scriptPath}');/*${label}*/`;\n// \t\t\tif (forceDataUri) {\n// \t\t\t\tconst url = `data:text/javascript;charset=utf-8,${encodeURIComponent(js)}`;\n// \t\t\t\treturn url;\n// \t\t\t}\n// \t\t\tconst blob = new Blob([js], { type: 'application/javascript' });\n// \t\t\treturn URL.createObjectURL(blob);\n// \t\t}\n// \t}\n// \treturn scriptPath + '#' + label;\n// }\n// ESM-comment-end\n\n\nfunction isPromiseLike(obj) {\n  if (typeof obj.then === 'function') {\n    return true;\n  }\n\n  return false;\n}\n/**\r\n * A worker that uses HTML5 web workers so that is has\r\n * its own global scope and its own thread.\r\n */\n\n\nvar WebWorker = /*#__PURE__*/function () {\n  function WebWorker(moduleId, id, label, onMessageCallback, onErrorCallback) {\n    _classCallCheck(this, WebWorker);\n\n    this.id = id;\n    var workerOrPromise = getWorker('workerMain.js', label);\n\n    if (isPromiseLike(workerOrPromise)) {\n      this.worker = workerOrPromise;\n    } else {\n      this.worker = Promise.resolve(workerOrPromise);\n    }\n\n    this.postMessage(moduleId, []);\n    this.worker.then(function (w) {\n      w.onmessage = function (ev) {\n        onMessageCallback(ev.data);\n      };\n\n      w.onmessageerror = onErrorCallback;\n\n      if (typeof w.addEventListener === 'function') {\n        w.addEventListener('error', onErrorCallback);\n      }\n    });\n  }\n\n  _createClass(WebWorker, [{\n    key: \"getId\",\n    value: function getId() {\n      return this.id;\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(message, transfer) {\n      if (this.worker) {\n        this.worker.then(function (w) {\n          return w.postMessage(message, transfer);\n        });\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.worker) {\n        this.worker.then(function (w) {\n          return w.terminate();\n        });\n      }\n\n      this.worker = null;\n    }\n  }]);\n\n  return WebWorker;\n}();\n\nexport var DefaultWorkerFactory = /*#__PURE__*/function () {\n  function DefaultWorkerFactory(label) {\n    _classCallCheck(this, DefaultWorkerFactory);\n\n    this._label = label;\n    this._webWorkerFailedBeforeError = false;\n  }\n\n  _createClass(DefaultWorkerFactory, [{\n    key: \"create\",\n    value: function create(moduleId, onMessageCallback, onErrorCallback) {\n      var _this = this;\n\n      var workerId = ++DefaultWorkerFactory.LAST_WORKER_ID;\n\n      if (this._webWorkerFailedBeforeError) {\n        throw this._webWorkerFailedBeforeError;\n      }\n\n      return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, function (err) {\n        logOnceWebWorkerWarning(err);\n        _this._webWorkerFailedBeforeError = err;\n        onErrorCallback(err);\n      });\n    }\n  }]);\n\n  return DefaultWorkerFactory;\n}();\nDefaultWorkerFactory.LAST_WORKER_ID = 0;","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/worker/defaultWorkerFactory.js"],"names":["_a","globals","logOnceWebWorkerWarning","ttPolicy","window","trustedTypes","createPolicy","createScriptURL","value","getWorker","workerId","label","MonacoEnvironment","getWorkerUrl","wokerUrl","Worker","name","Error","isPromiseLike","obj","then","WebWorker","moduleId","id","onMessageCallback","onErrorCallback","workerOrPromise","worker","Promise","resolve","postMessage","w","onmessage","ev","data","onmessageerror","addEventListener","message","transfer","terminate","DefaultWorkerFactory","_label","_webWorkerFailedBeforeError","LAST_WORKER_ID","err"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _a;\r\nimport { globals } from '../common/platform.js';\r\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\r\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });\r\nfunction getWorker(workerId, label) {\r\n    // Option for hosts to overwrite the worker script (used in the standalone editor)\r\n    if (globals.MonacoEnvironment) {\r\n        if (typeof globals.MonacoEnvironment.getWorker === 'function') {\r\n            return globals.MonacoEnvironment.getWorker(workerId, label);\r\n        }\r\n        if (typeof globals.MonacoEnvironment.getWorkerUrl === 'function') {\r\n            const wokerUrl = globals.MonacoEnvironment.getWorkerUrl(workerId, label);\r\n            return new Worker(ttPolicy ? ttPolicy.createScriptURL(wokerUrl) : wokerUrl, { name: label });\r\n        }\r\n    }\r\n    // ESM-comment-begin\r\n    // \tif (typeof require === 'function') {\r\n    // \t\t// check if the JS lives on a different origin\r\n    // \t\tconst workerMain = require.toUrl('./' + workerId); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\r\n    // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\r\n    // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label });\r\n    // \t}\r\n    // ESM-comment-end\r\n    throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\r\n}\r\n// ESM-comment-begin\r\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string, forceDataUri: boolean = false): string {\r\n// \tif (forceDataUri || /^((http:)|(https:)|(file:))/.test(scriptPath)) {\r\n// \t\tconst currentUrl = String(window.location);\r\n// \t\tconst currentOrigin = currentUrl.substr(0, currentUrl.length - window.location.hash.length - window.location.search.length - window.location.pathname.length);\r\n// \t\tif (forceDataUri || scriptPath.substring(0, currentOrigin.length) !== currentOrigin) {\r\n// \t\t\t// this is the cross-origin case\r\n// \t\t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\r\n// \t\t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\r\n// \t\t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\r\n// \t\t\tconst js = `/*${label}*/self.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};importScripts('${scriptPath}');/*${label}*/`;\r\n// \t\t\tif (forceDataUri) {\r\n// \t\t\t\tconst url = `data:text/javascript;charset=utf-8,${encodeURIComponent(js)}`;\r\n// \t\t\t\treturn url;\r\n// \t\t\t}\r\n// \t\t\tconst blob = new Blob([js], { type: 'application/javascript' });\r\n// \t\t\treturn URL.createObjectURL(blob);\r\n// \t\t}\r\n// \t}\r\n// \treturn scriptPath + '#' + label;\r\n// }\r\n// ESM-comment-end\r\nfunction isPromiseLike(obj) {\r\n    if (typeof obj.then === 'function') {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * A worker that uses HTML5 web workers so that is has\r\n * its own global scope and its own thread.\r\n */\r\nclass WebWorker {\r\n    constructor(moduleId, id, label, onMessageCallback, onErrorCallback) {\r\n        this.id = id;\r\n        const workerOrPromise = getWorker('workerMain.js', label);\r\n        if (isPromiseLike(workerOrPromise)) {\r\n            this.worker = workerOrPromise;\r\n        }\r\n        else {\r\n            this.worker = Promise.resolve(workerOrPromise);\r\n        }\r\n        this.postMessage(moduleId, []);\r\n        this.worker.then((w) => {\r\n            w.onmessage = function (ev) {\r\n                onMessageCallback(ev.data);\r\n            };\r\n            w.onmessageerror = onErrorCallback;\r\n            if (typeof w.addEventListener === 'function') {\r\n                w.addEventListener('error', onErrorCallback);\r\n            }\r\n        });\r\n    }\r\n    getId() {\r\n        return this.id;\r\n    }\r\n    postMessage(message, transfer) {\r\n        if (this.worker) {\r\n            this.worker.then(w => w.postMessage(message, transfer));\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this.worker) {\r\n            this.worker.then(w => w.terminate());\r\n        }\r\n        this.worker = null;\r\n    }\r\n}\r\nexport class DefaultWorkerFactory {\r\n    constructor(label) {\r\n        this._label = label;\r\n        this._webWorkerFailedBeforeError = false;\r\n    }\r\n    create(moduleId, onMessageCallback, onErrorCallback) {\r\n        let workerId = (++DefaultWorkerFactory.LAST_WORKER_ID);\r\n        if (this._webWorkerFailedBeforeError) {\r\n            throw this._webWorkerFailedBeforeError;\r\n        }\r\n        return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, (err) => {\r\n            logOnceWebWorkerWarning(err);\r\n            this._webWorkerFailedBeforeError = err;\r\n            onErrorCallback(err);\r\n        });\r\n    }\r\n}\r\nDefaultWorkerFactory.LAST_WORKER_ID = 0;\r\n"]},"metadata":{},"sourceType":"module"}