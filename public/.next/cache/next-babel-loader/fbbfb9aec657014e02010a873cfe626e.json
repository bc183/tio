{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport var TreeNode = /*#__PURE__*/function () {\n  function TreeNode(piece, color) {\n    _classCallCheck(this, TreeNode);\n\n    this.piece = piece;\n    this.color = color;\n    this.size_left = 0;\n    this.lf_left = 0;\n    this.parent = this;\n    this.left = this;\n    this.right = this;\n  }\n\n  _createClass(TreeNode, [{\n    key: \"next\",\n    value: function next() {\n      if (this.right !== SENTINEL) {\n        return leftest(this.right);\n      }\n\n      var node = this;\n\n      while (node.parent !== SENTINEL) {\n        if (node.parent.left === node) {\n          break;\n        }\n\n        node = node.parent;\n      }\n\n      if (node.parent === SENTINEL) {\n        return SENTINEL;\n      } else {\n        return node.parent;\n      }\n    }\n  }, {\n    key: \"prev\",\n    value: function prev() {\n      if (this.left !== SENTINEL) {\n        return righttest(this.left);\n      }\n\n      var node = this;\n\n      while (node.parent !== SENTINEL) {\n        if (node.parent.right === node) {\n          break;\n        }\n\n        node = node.parent;\n      }\n\n      if (node.parent === SENTINEL) {\n        return SENTINEL;\n      } else {\n        return node.parent;\n      }\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.parent = null;\n      this.left = null;\n      this.right = null;\n    }\n  }]);\n\n  return TreeNode;\n}();\nexport var SENTINEL = new TreeNode(null, 0\n/* Black */\n);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nSENTINEL.color = 0\n/* Black */\n;\nexport function leftest(node) {\n  while (node.left !== SENTINEL) {\n    node = node.left;\n  }\n\n  return node;\n}\nexport function righttest(node) {\n  while (node.right !== SENTINEL) {\n    node = node.right;\n  }\n\n  return node;\n}\nexport function calculateSize(node) {\n  if (node === SENTINEL) {\n    return 0;\n  }\n\n  return node.size_left + node.piece.length + calculateSize(node.right);\n}\nexport function calculateLF(node) {\n  if (node === SENTINEL) {\n    return 0;\n  }\n\n  return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\nexport function resetSentinel() {\n  SENTINEL.parent = SENTINEL;\n}\nexport function leftRotate(tree, x) {\n  var y = x.right; // fix size_left\n\n  y.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n  y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n  x.right = y.left;\n\n  if (y.left !== SENTINEL) {\n    y.left.parent = x;\n  }\n\n  y.parent = x.parent;\n\n  if (x.parent === SENTINEL) {\n    tree.root = y;\n  } else if (x.parent.left === x) {\n    x.parent.left = y;\n  } else {\n    x.parent.right = y;\n  }\n\n  y.left = x;\n  x.parent = y;\n}\nexport function rightRotate(tree, y) {\n  var x = y.left;\n  y.left = x.right;\n\n  if (x.right !== SENTINEL) {\n    x.right.parent = y;\n  }\n\n  x.parent = y.parent; // fix size_left\n\n  y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n  y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n\n  if (y.parent === SENTINEL) {\n    tree.root = x;\n  } else if (y === y.parent.right) {\n    y.parent.right = x;\n  } else {\n    y.parent.left = x;\n  }\n\n  x.right = y;\n  y.parent = x;\n}\nexport function rbDelete(tree, z) {\n  var x;\n  var y;\n\n  if (z.left === SENTINEL) {\n    y = z;\n    x = y.right;\n  } else if (z.right === SENTINEL) {\n    y = z;\n    x = y.left;\n  } else {\n    y = leftest(z.right);\n    x = y.right;\n  }\n\n  if (y === tree.root) {\n    tree.root = x; // if x is null, we are removing the only node\n\n    x.color = 0\n    /* Black */\n    ;\n    z.detach();\n    resetSentinel();\n    tree.root.parent = SENTINEL;\n    return;\n  }\n\n  var yWasRed = y.color === 1\n  /* Red */\n  ;\n\n  if (y === y.parent.left) {\n    y.parent.left = x;\n  } else {\n    y.parent.right = x;\n  }\n\n  if (y === z) {\n    x.parent = y.parent;\n    recomputeTreeMetadata(tree, x);\n  } else {\n    if (y.parent === z) {\n      x.parent = y;\n    } else {\n      x.parent = y.parent;\n    } // as we make changes to x's hierarchy, update size_left of subtree first\n\n\n    recomputeTreeMetadata(tree, x);\n    y.left = z.left;\n    y.right = z.right;\n    y.parent = z.parent;\n    y.color = z.color;\n\n    if (z === tree.root) {\n      tree.root = y;\n    } else {\n      if (z === z.parent.left) {\n        z.parent.left = y;\n      } else {\n        z.parent.right = y;\n      }\n    }\n\n    if (y.left !== SENTINEL) {\n      y.left.parent = y;\n    }\n\n    if (y.right !== SENTINEL) {\n      y.right.parent = y;\n    } // update metadata\n    // we replace z with y, so in this sub tree, the length change is z.item.length\n\n\n    y.size_left = z.size_left;\n    y.lf_left = z.lf_left;\n    recomputeTreeMetadata(tree, y);\n  }\n\n  z.detach();\n\n  if (x.parent.left === x) {\n    var newSizeLeft = calculateSize(x);\n    var newLFLeft = calculateLF(x);\n\n    if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\n      var delta = newSizeLeft - x.parent.size_left;\n      var lf_delta = newLFLeft - x.parent.lf_left;\n      x.parent.size_left = newSizeLeft;\n      x.parent.lf_left = newLFLeft;\n      updateTreeMetadata(tree, x.parent, delta, lf_delta);\n    }\n  }\n\n  recomputeTreeMetadata(tree, x.parent);\n\n  if (yWasRed) {\n    resetSentinel();\n    return;\n  } // RB-DELETE-FIXUP\n\n\n  var w;\n\n  while (x !== tree.root && x.color === 0\n  /* Black */\n  ) {\n    if (x === x.parent.left) {\n      w = x.parent.right;\n\n      if (w.color === 1\n      /* Red */\n      ) {\n          w.color = 0\n          /* Black */\n          ;\n          x.parent.color = 1\n          /* Red */\n          ;\n          leftRotate(tree, x.parent);\n          w = x.parent.right;\n        }\n\n      if (w.left.color === 0\n      /* Black */\n      && w.right.color === 0\n      /* Black */\n      ) {\n          w.color = 1\n          /* Red */\n          ;\n          x = x.parent;\n        } else {\n        if (w.right.color === 0\n        /* Black */\n        ) {\n            w.left.color = 0\n            /* Black */\n            ;\n            w.color = 1\n            /* Red */\n            ;\n            rightRotate(tree, w);\n            w = x.parent.right;\n          }\n\n        w.color = x.parent.color;\n        x.parent.color = 0\n        /* Black */\n        ;\n        w.right.color = 0\n        /* Black */\n        ;\n        leftRotate(tree, x.parent);\n        x = tree.root;\n      }\n    } else {\n      w = x.parent.left;\n\n      if (w.color === 1\n      /* Red */\n      ) {\n          w.color = 0\n          /* Black */\n          ;\n          x.parent.color = 1\n          /* Red */\n          ;\n          rightRotate(tree, x.parent);\n          w = x.parent.left;\n        }\n\n      if (w.left.color === 0\n      /* Black */\n      && w.right.color === 0\n      /* Black */\n      ) {\n          w.color = 1\n          /* Red */\n          ;\n          x = x.parent;\n        } else {\n        if (w.left.color === 0\n        /* Black */\n        ) {\n            w.right.color = 0\n            /* Black */\n            ;\n            w.color = 1\n            /* Red */\n            ;\n            leftRotate(tree, w);\n            w = x.parent.left;\n          }\n\n        w.color = x.parent.color;\n        x.parent.color = 0\n        /* Black */\n        ;\n        w.left.color = 0\n        /* Black */\n        ;\n        rightRotate(tree, x.parent);\n        x = tree.root;\n      }\n    }\n  }\n\n  x.color = 0\n  /* Black */\n  ;\n  resetSentinel();\n}\nexport function fixInsert(tree, x) {\n  recomputeTreeMetadata(tree, x);\n\n  while (x !== tree.root && x.parent.color === 1\n  /* Red */\n  ) {\n    if (x.parent === x.parent.parent.left) {\n      var y = x.parent.parent.right;\n\n      if (y.color === 1\n      /* Red */\n      ) {\n          x.parent.color = 0\n          /* Black */\n          ;\n          y.color = 0\n          /* Black */\n          ;\n          x.parent.parent.color = 1\n          /* Red */\n          ;\n          x = x.parent.parent;\n        } else {\n        if (x === x.parent.right) {\n          x = x.parent;\n          leftRotate(tree, x);\n        }\n\n        x.parent.color = 0\n        /* Black */\n        ;\n        x.parent.parent.color = 1\n        /* Red */\n        ;\n        rightRotate(tree, x.parent.parent);\n      }\n    } else {\n      var _y = x.parent.parent.left;\n\n      if (_y.color === 1\n      /* Red */\n      ) {\n          x.parent.color = 0\n          /* Black */\n          ;\n          _y.color = 0\n          /* Black */\n          ;\n          x.parent.parent.color = 1\n          /* Red */\n          ;\n          x = x.parent.parent;\n        } else {\n        if (x === x.parent.left) {\n          x = x.parent;\n          rightRotate(tree, x);\n        }\n\n        x.parent.color = 0\n        /* Black */\n        ;\n        x.parent.parent.color = 1\n        /* Red */\n        ;\n        leftRotate(tree, x.parent.parent);\n      }\n    }\n  }\n\n  tree.root.color = 0\n  /* Black */\n  ;\n}\nexport function updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {\n  // node length change or line feed count change\n  while (x !== tree.root && x !== SENTINEL) {\n    if (x.parent.left === x) {\n      x.parent.size_left += delta;\n      x.parent.lf_left += lineFeedCntDelta;\n    }\n\n    x = x.parent;\n  }\n}\nexport function recomputeTreeMetadata(tree, x) {\n  var delta = 0;\n  var lf_delta = 0;\n\n  if (x === tree.root) {\n    return;\n  }\n\n  if (delta === 0) {\n    // go upwards till the node whose left subtree is changed.\n    while (x !== tree.root && x === x.parent.right) {\n      x = x.parent;\n    }\n\n    if (x === tree.root) {\n      // well, it means we add a node to the end (inorder)\n      return;\n    } // x is the node whose right subtree is changed.\n\n\n    x = x.parent;\n    delta = calculateSize(x.left) - x.size_left;\n    lf_delta = calculateLF(x.left) - x.lf_left;\n    x.size_left += delta;\n    x.lf_left += lf_delta;\n  } // go upwards till root. O(logN)\n\n\n  while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n    if (x.parent.left === x) {\n      x.parent.size_left += delta;\n      x.parent.lf_left += lf_delta;\n    }\n\n    x = x.parent;\n  }\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.js"],"names":["TreeNode","piece","color","size_left","lf_left","parent","left","right","SENTINEL","leftest","node","righttest","calculateSize","length","calculateLF","lineFeedCnt","resetSentinel","leftRotate","tree","x","y","root","rightRotate","rbDelete","z","detach","yWasRed","recomputeTreeMetadata","newSizeLeft","newLFLeft","delta","lf_delta","updateTreeMetadata","w","fixInsert","lineFeedCntDelta"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport class TreeNode {\r\n    constructor(piece, color) {\r\n        this.piece = piece;\r\n        this.color = color;\r\n        this.size_left = 0;\r\n        this.lf_left = 0;\r\n        this.parent = this;\r\n        this.left = this;\r\n        this.right = this;\r\n    }\r\n    next() {\r\n        if (this.right !== SENTINEL) {\r\n            return leftest(this.right);\r\n        }\r\n        let node = this;\r\n        while (node.parent !== SENTINEL) {\r\n            if (node.parent.left === node) {\r\n                break;\r\n            }\r\n            node = node.parent;\r\n        }\r\n        if (node.parent === SENTINEL) {\r\n            return SENTINEL;\r\n        }\r\n        else {\r\n            return node.parent;\r\n        }\r\n    }\r\n    prev() {\r\n        if (this.left !== SENTINEL) {\r\n            return righttest(this.left);\r\n        }\r\n        let node = this;\r\n        while (node.parent !== SENTINEL) {\r\n            if (node.parent.right === node) {\r\n                break;\r\n            }\r\n            node = node.parent;\r\n        }\r\n        if (node.parent === SENTINEL) {\r\n            return SENTINEL;\r\n        }\r\n        else {\r\n            return node.parent;\r\n        }\r\n    }\r\n    detach() {\r\n        this.parent = null;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\nexport const SENTINEL = new TreeNode(null, 0 /* Black */);\r\nSENTINEL.parent = SENTINEL;\r\nSENTINEL.left = SENTINEL;\r\nSENTINEL.right = SENTINEL;\r\nSENTINEL.color = 0 /* Black */;\r\nexport function leftest(node) {\r\n    while (node.left !== SENTINEL) {\r\n        node = node.left;\r\n    }\r\n    return node;\r\n}\r\nexport function righttest(node) {\r\n    while (node.right !== SENTINEL) {\r\n        node = node.right;\r\n    }\r\n    return node;\r\n}\r\nexport function calculateSize(node) {\r\n    if (node === SENTINEL) {\r\n        return 0;\r\n    }\r\n    return node.size_left + node.piece.length + calculateSize(node.right);\r\n}\r\nexport function calculateLF(node) {\r\n    if (node === SENTINEL) {\r\n        return 0;\r\n    }\r\n    return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\r\n}\r\nexport function resetSentinel() {\r\n    SENTINEL.parent = SENTINEL;\r\n}\r\nexport function leftRotate(tree, x) {\r\n    let y = x.right;\r\n    // fix size_left\r\n    y.size_left += x.size_left + (x.piece ? x.piece.length : 0);\r\n    y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\r\n    x.right = y.left;\r\n    if (y.left !== SENTINEL) {\r\n        y.left.parent = x;\r\n    }\r\n    y.parent = x.parent;\r\n    if (x.parent === SENTINEL) {\r\n        tree.root = y;\r\n    }\r\n    else if (x.parent.left === x) {\r\n        x.parent.left = y;\r\n    }\r\n    else {\r\n        x.parent.right = y;\r\n    }\r\n    y.left = x;\r\n    x.parent = y;\r\n}\r\nexport function rightRotate(tree, y) {\r\n    let x = y.left;\r\n    y.left = x.right;\r\n    if (x.right !== SENTINEL) {\r\n        x.right.parent = y;\r\n    }\r\n    x.parent = y.parent;\r\n    // fix size_left\r\n    y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\r\n    y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\r\n    if (y.parent === SENTINEL) {\r\n        tree.root = x;\r\n    }\r\n    else if (y === y.parent.right) {\r\n        y.parent.right = x;\r\n    }\r\n    else {\r\n        y.parent.left = x;\r\n    }\r\n    x.right = y;\r\n    y.parent = x;\r\n}\r\nexport function rbDelete(tree, z) {\r\n    let x;\r\n    let y;\r\n    if (z.left === SENTINEL) {\r\n        y = z;\r\n        x = y.right;\r\n    }\r\n    else if (z.right === SENTINEL) {\r\n        y = z;\r\n        x = y.left;\r\n    }\r\n    else {\r\n        y = leftest(z.right);\r\n        x = y.right;\r\n    }\r\n    if (y === tree.root) {\r\n        tree.root = x;\r\n        // if x is null, we are removing the only node\r\n        x.color = 0 /* Black */;\r\n        z.detach();\r\n        resetSentinel();\r\n        tree.root.parent = SENTINEL;\r\n        return;\r\n    }\r\n    let yWasRed = (y.color === 1 /* Red */);\r\n    if (y === y.parent.left) {\r\n        y.parent.left = x;\r\n    }\r\n    else {\r\n        y.parent.right = x;\r\n    }\r\n    if (y === z) {\r\n        x.parent = y.parent;\r\n        recomputeTreeMetadata(tree, x);\r\n    }\r\n    else {\r\n        if (y.parent === z) {\r\n            x.parent = y;\r\n        }\r\n        else {\r\n            x.parent = y.parent;\r\n        }\r\n        // as we make changes to x's hierarchy, update size_left of subtree first\r\n        recomputeTreeMetadata(tree, x);\r\n        y.left = z.left;\r\n        y.right = z.right;\r\n        y.parent = z.parent;\r\n        y.color = z.color;\r\n        if (z === tree.root) {\r\n            tree.root = y;\r\n        }\r\n        else {\r\n            if (z === z.parent.left) {\r\n                z.parent.left = y;\r\n            }\r\n            else {\r\n                z.parent.right = y;\r\n            }\r\n        }\r\n        if (y.left !== SENTINEL) {\r\n            y.left.parent = y;\r\n        }\r\n        if (y.right !== SENTINEL) {\r\n            y.right.parent = y;\r\n        }\r\n        // update metadata\r\n        // we replace z with y, so in this sub tree, the length change is z.item.length\r\n        y.size_left = z.size_left;\r\n        y.lf_left = z.lf_left;\r\n        recomputeTreeMetadata(tree, y);\r\n    }\r\n    z.detach();\r\n    if (x.parent.left === x) {\r\n        let newSizeLeft = calculateSize(x);\r\n        let newLFLeft = calculateLF(x);\r\n        if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\r\n            let delta = newSizeLeft - x.parent.size_left;\r\n            let lf_delta = newLFLeft - x.parent.lf_left;\r\n            x.parent.size_left = newSizeLeft;\r\n            x.parent.lf_left = newLFLeft;\r\n            updateTreeMetadata(tree, x.parent, delta, lf_delta);\r\n        }\r\n    }\r\n    recomputeTreeMetadata(tree, x.parent);\r\n    if (yWasRed) {\r\n        resetSentinel();\r\n        return;\r\n    }\r\n    // RB-DELETE-FIXUP\r\n    let w;\r\n    while (x !== tree.root && x.color === 0 /* Black */) {\r\n        if (x === x.parent.left) {\r\n            w = x.parent.right;\r\n            if (w.color === 1 /* Red */) {\r\n                w.color = 0 /* Black */;\r\n                x.parent.color = 1 /* Red */;\r\n                leftRotate(tree, x.parent);\r\n                w = x.parent.right;\r\n            }\r\n            if (w.left.color === 0 /* Black */ && w.right.color === 0 /* Black */) {\r\n                w.color = 1 /* Red */;\r\n                x = x.parent;\r\n            }\r\n            else {\r\n                if (w.right.color === 0 /* Black */) {\r\n                    w.left.color = 0 /* Black */;\r\n                    w.color = 1 /* Red */;\r\n                    rightRotate(tree, w);\r\n                    w = x.parent.right;\r\n                }\r\n                w.color = x.parent.color;\r\n                x.parent.color = 0 /* Black */;\r\n                w.right.color = 0 /* Black */;\r\n                leftRotate(tree, x.parent);\r\n                x = tree.root;\r\n            }\r\n        }\r\n        else {\r\n            w = x.parent.left;\r\n            if (w.color === 1 /* Red */) {\r\n                w.color = 0 /* Black */;\r\n                x.parent.color = 1 /* Red */;\r\n                rightRotate(tree, x.parent);\r\n                w = x.parent.left;\r\n            }\r\n            if (w.left.color === 0 /* Black */ && w.right.color === 0 /* Black */) {\r\n                w.color = 1 /* Red */;\r\n                x = x.parent;\r\n            }\r\n            else {\r\n                if (w.left.color === 0 /* Black */) {\r\n                    w.right.color = 0 /* Black */;\r\n                    w.color = 1 /* Red */;\r\n                    leftRotate(tree, w);\r\n                    w = x.parent.left;\r\n                }\r\n                w.color = x.parent.color;\r\n                x.parent.color = 0 /* Black */;\r\n                w.left.color = 0 /* Black */;\r\n                rightRotate(tree, x.parent);\r\n                x = tree.root;\r\n            }\r\n        }\r\n    }\r\n    x.color = 0 /* Black */;\r\n    resetSentinel();\r\n}\r\nexport function fixInsert(tree, x) {\r\n    recomputeTreeMetadata(tree, x);\r\n    while (x !== tree.root && x.parent.color === 1 /* Red */) {\r\n        if (x.parent === x.parent.parent.left) {\r\n            const y = x.parent.parent.right;\r\n            if (y.color === 1 /* Red */) {\r\n                x.parent.color = 0 /* Black */;\r\n                y.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                x = x.parent.parent;\r\n            }\r\n            else {\r\n                if (x === x.parent.right) {\r\n                    x = x.parent;\r\n                    leftRotate(tree, x);\r\n                }\r\n                x.parent.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                rightRotate(tree, x.parent.parent);\r\n            }\r\n        }\r\n        else {\r\n            const y = x.parent.parent.left;\r\n            if (y.color === 1 /* Red */) {\r\n                x.parent.color = 0 /* Black */;\r\n                y.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                x = x.parent.parent;\r\n            }\r\n            else {\r\n                if (x === x.parent.left) {\r\n                    x = x.parent;\r\n                    rightRotate(tree, x);\r\n                }\r\n                x.parent.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                leftRotate(tree, x.parent.parent);\r\n            }\r\n        }\r\n    }\r\n    tree.root.color = 0 /* Black */;\r\n}\r\nexport function updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {\r\n    // node length change or line feed count change\r\n    while (x !== tree.root && x !== SENTINEL) {\r\n        if (x.parent.left === x) {\r\n            x.parent.size_left += delta;\r\n            x.parent.lf_left += lineFeedCntDelta;\r\n        }\r\n        x = x.parent;\r\n    }\r\n}\r\nexport function recomputeTreeMetadata(tree, x) {\r\n    let delta = 0;\r\n    let lf_delta = 0;\r\n    if (x === tree.root) {\r\n        return;\r\n    }\r\n    if (delta === 0) {\r\n        // go upwards till the node whose left subtree is changed.\r\n        while (x !== tree.root && x === x.parent.right) {\r\n            x = x.parent;\r\n        }\r\n        if (x === tree.root) {\r\n            // well, it means we add a node to the end (inorder)\r\n            return;\r\n        }\r\n        // x is the node whose right subtree is changed.\r\n        x = x.parent;\r\n        delta = calculateSize(x.left) - x.size_left;\r\n        lf_delta = calculateLF(x.left) - x.lf_left;\r\n        x.size_left += delta;\r\n        x.lf_left += lf_delta;\r\n    }\r\n    // go upwards till root. O(logN)\r\n    while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\r\n        if (x.parent.left === x) {\r\n            x.parent.size_left += delta;\r\n            x.parent.lf_left += lf_delta;\r\n        }\r\n        x = x.parent;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}