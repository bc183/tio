{"ast":null,"code":"import _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { transformErrorForSerialization } from '../errors.js';\nimport { Disposable } from '../lifecycle.js';\nimport { isWeb } from '../platform.js';\nimport * as types from '../types.js';\nvar INITIALIZE = '$initialize';\nvar webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err) {\n  if (!isWeb) {\n    // running tests\n    return;\n  }\n\n  if (!webWorkerWarningLogged) {\n    webWorkerWarningLogged = true;\n    console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n  }\n\n  console.warn(err.message);\n}\n\nvar SimpleWorkerProtocol = /*#__PURE__*/function () {\n  function SimpleWorkerProtocol(handler) {\n    _classCallCheck(this, SimpleWorkerProtocol);\n\n    this._workerId = -1;\n    this._handler = handler;\n    this._lastSentReq = 0;\n    this._pendingReplies = Object.create(null);\n  }\n\n  _createClass(SimpleWorkerProtocol, [{\n    key: \"setWorkerId\",\n    value: function setWorkerId(workerId) {\n      this._workerId = workerId;\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(method, args) {\n      var _this = this;\n\n      var req = String(++this._lastSentReq);\n      return new Promise(function (resolve, reject) {\n        _this._pendingReplies[req] = {\n          resolve: resolve,\n          reject: reject\n        };\n\n        _this._send({\n          vsWorker: _this._workerId,\n          req: req,\n          method: method,\n          args: args\n        });\n      });\n    }\n  }, {\n    key: \"handleMessage\",\n    value: function handleMessage(message) {\n      if (!message || !message.vsWorker) {\n        return;\n      }\n\n      if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n        return;\n      }\n\n      this._handleMessage(message);\n    }\n  }, {\n    key: \"_handleMessage\",\n    value: function _handleMessage(msg) {\n      var _this2 = this;\n\n      if (msg.seq) {\n        var replyMessage = msg;\n\n        if (!this._pendingReplies[replyMessage.seq]) {\n          console.warn('Got reply to unknown seq');\n          return;\n        }\n\n        var reply = this._pendingReplies[replyMessage.seq];\n        delete this._pendingReplies[replyMessage.seq];\n\n        if (replyMessage.err) {\n          var err = replyMessage.err;\n\n          if (replyMessage.err.$isError) {\n            err = new Error();\n            err.name = replyMessage.err.name;\n            err.message = replyMessage.err.message;\n            err.stack = replyMessage.err.stack;\n          }\n\n          reply.reject(err);\n          return;\n        }\n\n        reply.resolve(replyMessage.res);\n        return;\n      }\n\n      var requestMessage = msg;\n      var req = requestMessage.req;\n\n      var result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n\n      result.then(function (r) {\n        _this2._send({\n          vsWorker: _this2._workerId,\n          seq: req,\n          res: r,\n          err: undefined\n        });\n      }, function (e) {\n        if (e.detail instanceof Error) {\n          // Loading errors have a detail property that points to the actual error\n          e.detail = transformErrorForSerialization(e.detail);\n        }\n\n        _this2._send({\n          vsWorker: _this2._workerId,\n          seq: req,\n          res: undefined,\n          err: transformErrorForSerialization(e)\n        });\n      });\n    }\n  }, {\n    key: \"_send\",\n    value: function _send(msg) {\n      var transfer = [];\n\n      if (msg.req) {\n        var m = msg;\n\n        for (var i = 0; i < m.args.length; i++) {\n          if (m.args[i] instanceof ArrayBuffer) {\n            transfer.push(m.args[i]);\n          }\n        }\n      } else {\n        var _m = msg;\n\n        if (_m.res instanceof ArrayBuffer) {\n          transfer.push(_m.res);\n        }\n      }\n\n      this._handler.sendMessage(msg, transfer);\n    }\n  }]);\n\n  return SimpleWorkerProtocol;\n}();\n/**\r\n * Main thread side\r\n */\n\n\nexport var SimpleWorkerClient = /*#__PURE__*/function (_Disposable) {\n  _inherits(SimpleWorkerClient, _Disposable);\n\n  var _super = _createSuper(SimpleWorkerClient);\n\n  function SimpleWorkerClient(workerFactory, moduleId, host) {\n    var _this3;\n\n    _classCallCheck(this, SimpleWorkerClient);\n\n    _this3 = _super.call(this);\n    var lazyProxyReject = null;\n    _this3._worker = _this3._register(workerFactory.create('vs/base/common/worker/simpleWorker', function (msg) {\n      _this3._protocol.handleMessage(msg);\n    }, function (err) {\n      // in Firefox, web workers fail lazily :(\n      // we will reject the proxy\n      if (lazyProxyReject) {\n        lazyProxyReject(err);\n      }\n    }));\n    _this3._protocol = new SimpleWorkerProtocol({\n      sendMessage: function sendMessage(msg, transfer) {\n        _this3._worker.postMessage(msg, transfer);\n      },\n      handleMessage: function handleMessage(method, args) {\n        if (typeof host[method] !== 'function') {\n          return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n        }\n\n        try {\n          return Promise.resolve(host[method].apply(host, args));\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      }\n    });\n\n    _this3._protocol.setWorkerId(_this3._worker.getId()); // Gather loader configuration\n\n\n    var loaderConfiguration = null;\n\n    if (typeof self.require !== 'undefined' && typeof self.require.getConfig === 'function') {\n      // Get the configuration from the Monaco AMD Loader\n      loaderConfiguration = self.require.getConfig();\n    } else if (typeof self.requirejs !== 'undefined') {\n      // Get the configuration from requirejs\n      loaderConfiguration = self.requirejs.s.contexts._.config;\n    }\n\n    var hostMethods = types.getAllMethodNames(host); // Send initialize message\n\n    _this3._onModuleLoaded = _this3._protocol.sendMessage(INITIALIZE, [_this3._worker.getId(), JSON.parse(JSON.stringify(loaderConfiguration)), moduleId, hostMethods]); // Create proxy to loaded code\n\n    var proxyMethodRequest = function proxyMethodRequest(method, args) {\n      return _this3._request(method, args);\n    };\n\n    _this3._lazyProxy = new Promise(function (resolve, reject) {\n      lazyProxyReject = reject;\n\n      _this3._onModuleLoaded.then(function (availableMethods) {\n        resolve(types.createProxyObject(availableMethods, proxyMethodRequest));\n      }, function (e) {\n        reject(e);\n\n        _this3._onError('Worker failed to load ' + moduleId, e);\n      });\n    });\n    return _this3;\n  }\n\n  _createClass(SimpleWorkerClient, [{\n    key: \"getProxyObject\",\n    value: function getProxyObject() {\n      return this._lazyProxy;\n    }\n  }, {\n    key: \"_request\",\n    value: function _request(method, args) {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this4._onModuleLoaded.then(function () {\n          _this4._protocol.sendMessage(method, args).then(resolve, reject);\n        }, reject);\n      });\n    }\n  }, {\n    key: \"_onError\",\n    value: function _onError(message, error) {\n      console.error(message);\n      console.info(error);\n    }\n  }]);\n\n  return SimpleWorkerClient;\n}(Disposable);\n/**\r\n * Worker side\r\n */\n\nexport var SimpleWorkerServer = /*#__PURE__*/function () {\n  function SimpleWorkerServer(postMessage, requestHandlerFactory) {\n    var _this5 = this;\n\n    _classCallCheck(this, SimpleWorkerServer);\n\n    this._requestHandlerFactory = requestHandlerFactory;\n    this._requestHandler = null;\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: function sendMessage(msg, transfer) {\n        postMessage(msg, transfer);\n      },\n      handleMessage: function handleMessage(method, args) {\n        return _this5._handleMessage(method, args);\n      }\n    });\n  }\n\n  _createClass(SimpleWorkerServer, [{\n    key: \"onmessage\",\n    value: function onmessage(msg) {\n      this._protocol.handleMessage(msg);\n    }\n  }, {\n    key: \"_handleMessage\",\n    value: function _handleMessage(method, args) {\n      if (method === INITIALIZE) {\n        return this.initialize(args[0], args[1], args[2], args[3]);\n      }\n\n      if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n        return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n      }\n\n      try {\n        return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(workerId, loaderConfig, moduleId, hostMethods) {\n      var _this6 = this;\n\n      this._protocol.setWorkerId(workerId);\n\n      var proxyMethodRequest = function proxyMethodRequest(method, args) {\n        return _this6._protocol.sendMessage(method, args);\n      };\n\n      var hostProxy = types.createProxyObject(hostMethods, proxyMethodRequest);\n\n      if (this._requestHandlerFactory) {\n        // static request handler\n        this._requestHandler = this._requestHandlerFactory(hostProxy);\n        return Promise.resolve(types.getAllMethodNames(this._requestHandler));\n      }\n\n      if (loaderConfig) {\n        // Remove 'baseUrl', handling it is beyond scope for now\n        if (typeof loaderConfig.baseUrl !== 'undefined') {\n          delete loaderConfig['baseUrl'];\n        }\n\n        if (typeof loaderConfig.paths !== 'undefined') {\n          if (typeof loaderConfig.paths.vs !== 'undefined') {\n            delete loaderConfig.paths['vs'];\n          }\n        }\n\n        if (typeof loaderConfig.trustedTypesPolicy !== undefined) {\n          // don't use, it has been destroyed during serialize\n          delete loaderConfig['trustedTypesPolicy'];\n        } // Since this is in a web worker, enable catching errors\n\n\n        loaderConfig.catchError = true;\n\n        self.require.config(loaderConfig);\n      }\n\n      return new Promise(function (resolve, reject) {\n        // Use the global require to be sure to get the global config\n        self.require([moduleId], function (module) {\n          _this6._requestHandler = module.create(hostProxy);\n\n          if (!_this6._requestHandler) {\n            reject(new Error(\"No RequestHandler!\"));\n            return;\n          }\n\n          resolve(types.getAllMethodNames(_this6._requestHandler));\n        }, reject);\n      });\n    }\n  }]);\n\n  return SimpleWorkerServer;\n}();\n/**\r\n * Called on the worker side\r\n */\n\nexport function create(postMessage) {\n  return new SimpleWorkerServer(postMessage, null);\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js"],"names":["transformErrorForSerialization","Disposable","isWeb","types","INITIALIZE","webWorkerWarningLogged","logOnceWebWorkerWarning","err","console","warn","message","SimpleWorkerProtocol","handler","_workerId","_handler","_lastSentReq","_pendingReplies","Object","create","workerId","method","args","req","String","Promise","resolve","reject","_send","vsWorker","_handleMessage","msg","seq","replyMessage","reply","$isError","Error","name","stack","res","requestMessage","result","handleMessage","then","r","undefined","e","detail","transfer","m","i","length","ArrayBuffer","push","sendMessage","SimpleWorkerClient","workerFactory","moduleId","host","lazyProxyReject","_worker","_register","_protocol","postMessage","apply","setWorkerId","getId","loaderConfiguration","self","require","getConfig","requirejs","s","contexts","_","config","hostMethods","getAllMethodNames","_onModuleLoaded","JSON","parse","stringify","proxyMethodRequest","_request","_lazyProxy","availableMethods","createProxyObject","_onError","error","info","SimpleWorkerServer","requestHandlerFactory","_requestHandlerFactory","_requestHandler","initialize","loaderConfig","hostProxy","baseUrl","paths","vs","trustedTypesPolicy","catchError","module"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { transformErrorForSerialization } from '../errors.js';\r\nimport { Disposable } from '../lifecycle.js';\r\nimport { isWeb } from '../platform.js';\r\nimport * as types from '../types.js';\r\nconst INITIALIZE = '$initialize';\r\nlet webWorkerWarningLogged = false;\r\nexport function logOnceWebWorkerWarning(err) {\r\n    if (!isWeb) {\r\n        // running tests\r\n        return;\r\n    }\r\n    if (!webWorkerWarningLogged) {\r\n        webWorkerWarningLogged = true;\r\n        console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\r\n    }\r\n    console.warn(err.message);\r\n}\r\nclass SimpleWorkerProtocol {\r\n    constructor(handler) {\r\n        this._workerId = -1;\r\n        this._handler = handler;\r\n        this._lastSentReq = 0;\r\n        this._pendingReplies = Object.create(null);\r\n    }\r\n    setWorkerId(workerId) {\r\n        this._workerId = workerId;\r\n    }\r\n    sendMessage(method, args) {\r\n        let req = String(++this._lastSentReq);\r\n        return new Promise((resolve, reject) => {\r\n            this._pendingReplies[req] = {\r\n                resolve: resolve,\r\n                reject: reject\r\n            };\r\n            this._send({\r\n                vsWorker: this._workerId,\r\n                req: req,\r\n                method: method,\r\n                args: args\r\n            });\r\n        });\r\n    }\r\n    handleMessage(message) {\r\n        if (!message || !message.vsWorker) {\r\n            return;\r\n        }\r\n        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\r\n            return;\r\n        }\r\n        this._handleMessage(message);\r\n    }\r\n    _handleMessage(msg) {\r\n        if (msg.seq) {\r\n            let replyMessage = msg;\r\n            if (!this._pendingReplies[replyMessage.seq]) {\r\n                console.warn('Got reply to unknown seq');\r\n                return;\r\n            }\r\n            let reply = this._pendingReplies[replyMessage.seq];\r\n            delete this._pendingReplies[replyMessage.seq];\r\n            if (replyMessage.err) {\r\n                let err = replyMessage.err;\r\n                if (replyMessage.err.$isError) {\r\n                    err = new Error();\r\n                    err.name = replyMessage.err.name;\r\n                    err.message = replyMessage.err.message;\r\n                    err.stack = replyMessage.err.stack;\r\n                }\r\n                reply.reject(err);\r\n                return;\r\n            }\r\n            reply.resolve(replyMessage.res);\r\n            return;\r\n        }\r\n        let requestMessage = msg;\r\n        let req = requestMessage.req;\r\n        let result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\r\n        result.then((r) => {\r\n            this._send({\r\n                vsWorker: this._workerId,\r\n                seq: req,\r\n                res: r,\r\n                err: undefined\r\n            });\r\n        }, (e) => {\r\n            if (e.detail instanceof Error) {\r\n                // Loading errors have a detail property that points to the actual error\r\n                e.detail = transformErrorForSerialization(e.detail);\r\n            }\r\n            this._send({\r\n                vsWorker: this._workerId,\r\n                seq: req,\r\n                res: undefined,\r\n                err: transformErrorForSerialization(e)\r\n            });\r\n        });\r\n    }\r\n    _send(msg) {\r\n        let transfer = [];\r\n        if (msg.req) {\r\n            const m = msg;\r\n            for (let i = 0; i < m.args.length; i++) {\r\n                if (m.args[i] instanceof ArrayBuffer) {\r\n                    transfer.push(m.args[i]);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const m = msg;\r\n            if (m.res instanceof ArrayBuffer) {\r\n                transfer.push(m.res);\r\n            }\r\n        }\r\n        this._handler.sendMessage(msg, transfer);\r\n    }\r\n}\r\n/**\r\n * Main thread side\r\n */\r\nexport class SimpleWorkerClient extends Disposable {\r\n    constructor(workerFactory, moduleId, host) {\r\n        super();\r\n        let lazyProxyReject = null;\r\n        this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', (msg) => {\r\n            this._protocol.handleMessage(msg);\r\n        }, (err) => {\r\n            // in Firefox, web workers fail lazily :(\r\n            // we will reject the proxy\r\n            if (lazyProxyReject) {\r\n                lazyProxyReject(err);\r\n            }\r\n        }));\r\n        this._protocol = new SimpleWorkerProtocol({\r\n            sendMessage: (msg, transfer) => {\r\n                this._worker.postMessage(msg, transfer);\r\n            },\r\n            handleMessage: (method, args) => {\r\n                if (typeof host[method] !== 'function') {\r\n                    return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\r\n                }\r\n                try {\r\n                    return Promise.resolve(host[method].apply(host, args));\r\n                }\r\n                catch (e) {\r\n                    return Promise.reject(e);\r\n                }\r\n            }\r\n        });\r\n        this._protocol.setWorkerId(this._worker.getId());\r\n        // Gather loader configuration\r\n        let loaderConfiguration = null;\r\n        if (typeof self.require !== 'undefined' && typeof self.require.getConfig === 'function') {\r\n            // Get the configuration from the Monaco AMD Loader\r\n            loaderConfiguration = self.require.getConfig();\r\n        }\r\n        else if (typeof self.requirejs !== 'undefined') {\r\n            // Get the configuration from requirejs\r\n            loaderConfiguration = self.requirejs.s.contexts._.config;\r\n        }\r\n        const hostMethods = types.getAllMethodNames(host);\r\n        // Send initialize message\r\n        this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [\r\n            this._worker.getId(),\r\n            JSON.parse(JSON.stringify(loaderConfiguration)),\r\n            moduleId,\r\n            hostMethods,\r\n        ]);\r\n        // Create proxy to loaded code\r\n        const proxyMethodRequest = (method, args) => {\r\n            return this._request(method, args);\r\n        };\r\n        this._lazyProxy = new Promise((resolve, reject) => {\r\n            lazyProxyReject = reject;\r\n            this._onModuleLoaded.then((availableMethods) => {\r\n                resolve(types.createProxyObject(availableMethods, proxyMethodRequest));\r\n            }, (e) => {\r\n                reject(e);\r\n                this._onError('Worker failed to load ' + moduleId, e);\r\n            });\r\n        });\r\n    }\r\n    getProxyObject() {\r\n        return this._lazyProxy;\r\n    }\r\n    _request(method, args) {\r\n        return new Promise((resolve, reject) => {\r\n            this._onModuleLoaded.then(() => {\r\n                this._protocol.sendMessage(method, args).then(resolve, reject);\r\n            }, reject);\r\n        });\r\n    }\r\n    _onError(message, error) {\r\n        console.error(message);\r\n        console.info(error);\r\n    }\r\n}\r\n/**\r\n * Worker side\r\n */\r\nexport class SimpleWorkerServer {\r\n    constructor(postMessage, requestHandlerFactory) {\r\n        this._requestHandlerFactory = requestHandlerFactory;\r\n        this._requestHandler = null;\r\n        this._protocol = new SimpleWorkerProtocol({\r\n            sendMessage: (msg, transfer) => {\r\n                postMessage(msg, transfer);\r\n            },\r\n            handleMessage: (method, args) => this._handleMessage(method, args)\r\n        });\r\n    }\r\n    onmessage(msg) {\r\n        this._protocol.handleMessage(msg);\r\n    }\r\n    _handleMessage(method, args) {\r\n        if (method === INITIALIZE) {\r\n            return this.initialize(args[0], args[1], args[2], args[3]);\r\n        }\r\n        if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\r\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\r\n        }\r\n        try {\r\n            return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    initialize(workerId, loaderConfig, moduleId, hostMethods) {\r\n        this._protocol.setWorkerId(workerId);\r\n        const proxyMethodRequest = (method, args) => {\r\n            return this._protocol.sendMessage(method, args);\r\n        };\r\n        const hostProxy = types.createProxyObject(hostMethods, proxyMethodRequest);\r\n        if (this._requestHandlerFactory) {\r\n            // static request handler\r\n            this._requestHandler = this._requestHandlerFactory(hostProxy);\r\n            return Promise.resolve(types.getAllMethodNames(this._requestHandler));\r\n        }\r\n        if (loaderConfig) {\r\n            // Remove 'baseUrl', handling it is beyond scope for now\r\n            if (typeof loaderConfig.baseUrl !== 'undefined') {\r\n                delete loaderConfig['baseUrl'];\r\n            }\r\n            if (typeof loaderConfig.paths !== 'undefined') {\r\n                if (typeof loaderConfig.paths.vs !== 'undefined') {\r\n                    delete loaderConfig.paths['vs'];\r\n                }\r\n            }\r\n            if (typeof loaderConfig.trustedTypesPolicy !== undefined) {\r\n                // don't use, it has been destroyed during serialize\r\n                delete loaderConfig['trustedTypesPolicy'];\r\n            }\r\n            // Since this is in a web worker, enable catching errors\r\n            loaderConfig.catchError = true;\r\n            self.require.config(loaderConfig);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            // Use the global require to be sure to get the global config\r\n            self.require([moduleId], (module) => {\r\n                this._requestHandler = module.create(hostProxy);\r\n                if (!this._requestHandler) {\r\n                    reject(new Error(`No RequestHandler!`));\r\n                    return;\r\n                }\r\n                resolve(types.getAllMethodNames(this._requestHandler));\r\n            }, reject);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Called on the worker side\r\n */\r\nexport function create(postMessage) {\r\n    return new SimpleWorkerServer(postMessage, null);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}