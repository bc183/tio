{"ast":null,"code":"import _slicedToArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { alert } from '../../../base/browser/ui/aria/aria.js';\nimport { asArray, isNonEmptyArray } from '../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { illegalArgument, onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { EditorStateCancellationTokenSource, TextModelCancellationTokenSource } from '../../browser/core/editorState.js';\nimport { isCodeEditor } from '../../browser/editorBrowser.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { DocumentFormattingEditProviderRegistry, DocumentRangeFormattingEditProviderRegistry, OnTypeFormattingEditProviderRegistry } from '../../common/modes.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\nimport { IModelService } from '../../common/services/modelService.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport * as nls from '../../../nls.js';\nimport { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { assertType } from '../../../base/common/types.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nexport function alertFormattingEdits(edits) {\n  edits = edits.filter(function (edit) {\n    return edit.range;\n  });\n\n  if (!edits.length) {\n    return;\n  }\n\n  var range = edits[0].range;\n\n  for (var i = 1; i < edits.length; i++) {\n    range = Range.plusRange(range, edits[i].range);\n  }\n\n  var _range = range,\n      startLineNumber = _range.startLineNumber,\n      endLineNumber = _range.endLineNumber;\n\n  if (startLineNumber === endLineNumber) {\n    if (edits.length === 1) {\n      alert(nls.localize('hint11', \"Made 1 formatting edit on line {0}\", startLineNumber));\n    } else {\n      alert(nls.localize('hintn1', \"Made {0} formatting edits on line {1}\", edits.length, startLineNumber));\n    }\n  } else {\n    if (edits.length === 1) {\n      alert(nls.localize('hint1n', \"Made 1 formatting edit between lines {0} and {1}\", startLineNumber, endLineNumber));\n    } else {\n      alert(nls.localize('hintnn', \"Made {0} formatting edits between lines {1} and {2}\", edits.length, startLineNumber, endLineNumber));\n    }\n  }\n}\nexport function getRealAndSyntheticDocumentFormattersOrdered(model) {\n  var result = [];\n  var seen = new Set(); // (1) add all document formatter\n\n  var docFormatter = DocumentFormattingEditProviderRegistry.ordered(model);\n\n  var _iterator = _createForOfIteratorHelper(docFormatter),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var formatter = _step.value;\n      result.push(formatter);\n\n      if (formatter.extensionId) {\n        seen.add(ExtensionIdentifier.toKey(formatter.extensionId));\n      }\n    } // (2) add all range formatter as document formatter (unless the same extension already did that)\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var rangeFormatter = DocumentRangeFormattingEditProviderRegistry.ordered(model);\n\n  var _iterator2 = _createForOfIteratorHelper(rangeFormatter),\n      _step2;\n\n  try {\n    var _loop = function _loop() {\n      var formatter = _step2.value;\n\n      if (formatter.extensionId) {\n        if (seen.has(ExtensionIdentifier.toKey(formatter.extensionId))) {\n          return \"continue\";\n        }\n\n        seen.add(ExtensionIdentifier.toKey(formatter.extensionId));\n      }\n\n      result.push({\n        displayName: formatter.displayName,\n        extensionId: formatter.extensionId,\n        provideDocumentFormattingEdits: function provideDocumentFormattingEdits(model, options, token) {\n          return formatter.provideDocumentRangeFormattingEdits(model, model.getFullModelRange(), options, token);\n        }\n      });\n    };\n\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return result;\n}\nexport var FormattingConflicts = /*#__PURE__*/function () {\n  function FormattingConflicts() {\n    _classCallCheck(this, FormattingConflicts);\n  }\n\n  _createClass(FormattingConflicts, null, [{\n    key: \"setFormatterSelector\",\n    value: function setFormatterSelector(selector) {\n      var remove = FormattingConflicts._selectors.unshift(selector);\n\n      return {\n        dispose: remove\n      };\n    }\n  }, {\n    key: \"select\",\n    value: function select(formatter, document, mode) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var selector;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(formatter.length === 0)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", undefined);\n\n              case 2:\n                selector = Iterable.first(FormattingConflicts._selectors);\n\n                if (!selector) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return selector(formatter, document, mode);\n\n              case 6:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 7:\n                return _context.abrupt(\"return\", undefined);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }]);\n\n  return FormattingConflicts;\n}();\nFormattingConflicts._selectors = new LinkedList();\nexport function formatDocumentRangesWithSelectedProvider(accessor, editorOrModel, rangeOrRanges, mode, progress, token) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var instaService, model, provider, selected;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            instaService = accessor.get(IInstantiationService);\n            model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n            provider = DocumentRangeFormattingEditProviderRegistry.ordered(model);\n            _context2.next = 5;\n            return FormattingConflicts.select(provider, model, mode);\n\n          case 5:\n            selected = _context2.sent;\n\n            if (!selected) {\n              _context2.next = 10;\n              break;\n            }\n\n            progress.report(selected);\n            _context2.next = 10;\n            return instaService.invokeFunction(formatDocumentRangesWithProvider, selected, editorOrModel, rangeOrRanges, token);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\nexport function formatDocumentRangesWithProvider(accessor, provider, editorOrModel, rangeOrRanges, token) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var workerService, model, cts, ranges, len, _iterator3, _step3, _range4, allEdits, _i, _ranges, range, rawEdits, minEdits, _range2, initialSelection;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            workerService = accessor.get(IEditorWorkerService);\n\n            if (isCodeEditor(editorOrModel)) {\n              model = editorOrModel.getModel();\n              cts = new EditorStateCancellationTokenSource(editorOrModel, 1\n              /* Value */\n              | 4\n              /* Position */\n              , undefined, token);\n            } else {\n              model = editorOrModel;\n              cts = new TextModelCancellationTokenSource(editorOrModel, token);\n            } // make sure that ranges don't overlap nor touch each other\n\n\n            ranges = [];\n            len = 0;\n            _iterator3 = _createForOfIteratorHelper(asArray(rangeOrRanges).sort(Range.compareRangesUsingStarts));\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                _range4 = _step3.value;\n\n                if (len > 0 && Range.areIntersectingOrTouching(ranges[len - 1], _range4)) {\n                  ranges[len - 1] = Range.fromPositions(ranges[len - 1].getStartPosition(), _range4.getEndPosition());\n                } else {\n                  len = ranges.push(_range4);\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            allEdits = [];\n            _i = 0, _ranges = ranges;\n\n          case 8:\n            if (!(_i < _ranges.length)) {\n              _context3.next = 26;\n              break;\n            }\n\n            range = _ranges[_i];\n            _context3.prev = 10;\n            _context3.next = 13;\n            return provider.provideDocumentRangeFormattingEdits(model, range, model.getFormattingOptions(), cts.token);\n\n          case 13:\n            rawEdits = _context3.sent;\n            _context3.next = 16;\n            return workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n\n          case 16:\n            minEdits = _context3.sent;\n\n            if (minEdits) {\n              allEdits.push.apply(allEdits, _toConsumableArray(minEdits));\n            }\n\n            if (!cts.token.isCancellationRequested) {\n              _context3.next = 20;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", true);\n\n          case 20:\n            _context3.prev = 20;\n            cts.dispose();\n            return _context3.finish(20);\n\n          case 23:\n            _i++;\n            _context3.next = 8;\n            break;\n\n          case 26:\n            if (!(allEdits.length === 0)) {\n              _context3.next = 28;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", false);\n\n          case 28:\n            if (isCodeEditor(editorOrModel)) {\n              // use editor to apply edits\n              FormattingEdit.execute(editorOrModel, allEdits, true);\n              alertFormattingEdits(allEdits);\n              editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1\n              /* Immediate */\n              );\n            } else {\n              // use model to apply edits\n              _range2 = allEdits[0].range;\n              initialSelection = new Selection(_range2.startLineNumber, _range2.startColumn, _range2.endLineNumber, _range2.endColumn);\n              model.pushEditOperations([initialSelection], allEdits.map(function (edit) {\n                return {\n                  text: edit.text,\n                  range: Range.lift(edit.range),\n                  forceMoveMarkers: true\n                };\n              }), function (undoEdits) {\n                var _iterator4 = _createForOfIteratorHelper(undoEdits),\n                    _step4;\n\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var _range3 = _step4.value.range;\n\n                    if (Range.areIntersectingOrTouching(_range3, initialSelection)) {\n                      return [new Selection(_range3.startLineNumber, _range3.startColumn, _range3.endLineNumber, _range3.endColumn)];\n                    }\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n\n                return null;\n              });\n            }\n\n            return _context3.abrupt(\"return\", true);\n\n          case 30:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[10,, 20, 23]]);\n  }));\n}\nexport function formatDocumentWithSelectedProvider(accessor, editorOrModel, mode, progress, token) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var instaService, model, provider, selected;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            instaService = accessor.get(IInstantiationService);\n            model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n            provider = getRealAndSyntheticDocumentFormattersOrdered(model);\n            _context4.next = 5;\n            return FormattingConflicts.select(provider, model, mode);\n\n          case 5:\n            selected = _context4.sent;\n\n            if (!selected) {\n              _context4.next = 10;\n              break;\n            }\n\n            progress.report(selected);\n            _context4.next = 10;\n            return instaService.invokeFunction(formatDocumentWithProvider, selected, editorOrModel, mode, token);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\nexport function formatDocumentWithProvider(accessor, provider, editorOrModel, mode, token) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var workerService, model, cts, edits, rawEdits, _edits, _edits2, range, initialSelection;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            workerService = accessor.get(IEditorWorkerService);\n\n            if (isCodeEditor(editorOrModel)) {\n              model = editorOrModel.getModel();\n              cts = new EditorStateCancellationTokenSource(editorOrModel, 1\n              /* Value */\n              | 4\n              /* Position */\n              , undefined, token);\n            } else {\n              model = editorOrModel;\n              cts = new TextModelCancellationTokenSource(editorOrModel, token);\n            }\n\n            _context5.prev = 2;\n            _context5.next = 5;\n            return provider.provideDocumentFormattingEdits(model, model.getFormattingOptions(), cts.token);\n\n          case 5:\n            rawEdits = _context5.sent;\n            _context5.next = 8;\n            return workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n\n          case 8:\n            edits = _context5.sent;\n\n            if (!cts.token.isCancellationRequested) {\n              _context5.next = 11;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", true);\n\n          case 11:\n            _context5.prev = 11;\n            cts.dispose();\n            return _context5.finish(11);\n\n          case 14:\n            if (!(!edits || edits.length === 0)) {\n              _context5.next = 16;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", false);\n\n          case 16:\n            if (isCodeEditor(editorOrModel)) {\n              // use editor to apply edits\n              FormattingEdit.execute(editorOrModel, edits, mode !== 2\n              /* Silent */\n              );\n\n              if (mode !== 2\n              /* Silent */\n              ) {\n                  alertFormattingEdits(edits);\n                  editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1\n                  /* Immediate */\n                  );\n                }\n            } else {\n              // use model to apply edits\n              _edits = edits, _edits2 = _slicedToArray(_edits, 1), range = _edits2[0].range;\n              initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n              model.pushEditOperations([initialSelection], edits.map(function (edit) {\n                return {\n                  text: edit.text,\n                  range: Range.lift(edit.range),\n                  forceMoveMarkers: true\n                };\n              }), function (undoEdits) {\n                var _iterator5 = _createForOfIteratorHelper(undoEdits),\n                    _step5;\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var _range5 = _step5.value.range;\n\n                    if (Range.areIntersectingOrTouching(_range5, initialSelection)) {\n                      return [new Selection(_range5.startLineNumber, _range5.startColumn, _range5.endLineNumber, _range5.endColumn)];\n                    }\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n\n                return null;\n              });\n            }\n\n            return _context5.abrupt(\"return\", true);\n\n          case 18:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[2,, 11, 14]]);\n  }));\n}\nexport function getDocumentRangeFormattingEditsUntilResult(workerService, model, range, options, token) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n    var providers, _iterator6, _step6, provider, rawEdits;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            providers = DocumentRangeFormattingEditProviderRegistry.ordered(model);\n            _iterator6 = _createForOfIteratorHelper(providers);\n            _context6.prev = 2;\n\n            _iterator6.s();\n\n          case 4:\n            if ((_step6 = _iterator6.n()).done) {\n              _context6.next = 15;\n              break;\n            }\n\n            provider = _step6.value;\n            _context6.next = 8;\n            return Promise.resolve(provider.provideDocumentRangeFormattingEdits(model, range, options, token))[\"catch\"](onUnexpectedExternalError);\n\n          case 8:\n            rawEdits = _context6.sent;\n\n            if (!isNonEmptyArray(rawEdits)) {\n              _context6.next = 13;\n              break;\n            }\n\n            _context6.next = 12;\n            return workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n\n          case 12:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 13:\n            _context6.next = 4;\n            break;\n\n          case 15:\n            _context6.next = 20;\n            break;\n\n          case 17:\n            _context6.prev = 17;\n            _context6.t0 = _context6[\"catch\"](2);\n\n            _iterator6.e(_context6.t0);\n\n          case 20:\n            _context6.prev = 20;\n\n            _iterator6.f();\n\n            return _context6.finish(20);\n\n          case 23:\n            return _context6.abrupt(\"return\", undefined);\n\n          case 24:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[2, 17, 20, 23]]);\n  }));\n}\nexport function getDocumentFormattingEditsUntilResult(workerService, model, options, token) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n    var providers, _iterator7, _step7, provider, rawEdits;\n\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            providers = getRealAndSyntheticDocumentFormattersOrdered(model);\n            _iterator7 = _createForOfIteratorHelper(providers);\n            _context7.prev = 2;\n\n            _iterator7.s();\n\n          case 4:\n            if ((_step7 = _iterator7.n()).done) {\n              _context7.next = 15;\n              break;\n            }\n\n            provider = _step7.value;\n            _context7.next = 8;\n            return Promise.resolve(provider.provideDocumentFormattingEdits(model, options, token))[\"catch\"](onUnexpectedExternalError);\n\n          case 8:\n            rawEdits = _context7.sent;\n\n            if (!isNonEmptyArray(rawEdits)) {\n              _context7.next = 13;\n              break;\n            }\n\n            _context7.next = 12;\n            return workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n\n          case 12:\n            return _context7.abrupt(\"return\", _context7.sent);\n\n          case 13:\n            _context7.next = 4;\n            break;\n\n          case 15:\n            _context7.next = 20;\n            break;\n\n          case 17:\n            _context7.prev = 17;\n            _context7.t0 = _context7[\"catch\"](2);\n\n            _iterator7.e(_context7.t0);\n\n          case 20:\n            _context7.prev = 20;\n\n            _iterator7.f();\n\n            return _context7.finish(20);\n\n          case 23:\n            return _context7.abrupt(\"return\", undefined);\n\n          case 24:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[2, 17, 20, 23]]);\n  }));\n}\nexport function getOnTypeFormattingEdits(workerService, model, position, ch, options) {\n  var providers = OnTypeFormattingEditProviderRegistry.ordered(model);\n\n  if (providers.length === 0) {\n    return Promise.resolve(undefined);\n  }\n\n  if (providers[0].autoFormatTriggerCharacters.indexOf(ch) < 0) {\n    return Promise.resolve(undefined);\n  }\n\n  return Promise.resolve(providers[0].provideOnTypeFormattingEdits(model, position, ch, options, CancellationToken.None))[\"catch\"](onUnexpectedExternalError).then(function (edits) {\n    return workerService.computeMoreMinimalEdits(model.uri, edits);\n  });\n}\nCommandsRegistry.registerCommand('_executeFormatRangeProvider', function (accessor) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  var resource = args[0],\n      range = args[1],\n      options = args[2];\n  assertType(URI.isUri(resource));\n  assertType(Range.isIRange(range));\n  var model = accessor.get(IModelService).getModel(resource);\n\n  if (!model) {\n    throw illegalArgument('resource');\n  }\n\n  return getDocumentRangeFormattingEditsUntilResult(accessor.get(IEditorWorkerService), model, Range.lift(range), options, CancellationToken.None);\n});\nCommandsRegistry.registerCommand('_executeFormatDocumentProvider', function (accessor) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  var resource = args[0],\n      options = args[1];\n  assertType(URI.isUri(resource));\n  var model = accessor.get(IModelService).getModel(resource);\n\n  if (!model) {\n    throw illegalArgument('resource');\n  }\n\n  return getDocumentFormattingEditsUntilResult(accessor.get(IEditorWorkerService), model, options, CancellationToken.None);\n});\nCommandsRegistry.registerCommand('_executeFormatOnTypeProvider', function (accessor) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n\n  var resource = args[0],\n      position = args[1],\n      ch = args[2],\n      options = args[3];\n  assertType(URI.isUri(resource));\n  assertType(Position.isIPosition(position));\n  assertType(typeof ch === 'string');\n  var model = accessor.get(IModelService).getModel(resource);\n\n  if (!model) {\n    throw illegalArgument('resource');\n  }\n\n  return getOnTypeFormattingEdits(accessor.get(IEditorWorkerService), model, Position.lift(position), ch, options);\n});","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/contrib/format/format.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","alert","asArray","isNonEmptyArray","CancellationToken","illegalArgument","onUnexpectedExternalError","URI","EditorStateCancellationTokenSource","TextModelCancellationTokenSource","isCodeEditor","Position","Range","Selection","DocumentFormattingEditProviderRegistry","DocumentRangeFormattingEditProviderRegistry","OnTypeFormattingEditProviderRegistry","IEditorWorkerService","IModelService","FormattingEdit","nls","ExtensionIdentifier","IInstantiationService","LinkedList","CommandsRegistry","assertType","Iterable","alertFormattingEdits","edits","filter","edit","range","length","i","plusRange","startLineNumber","endLineNumber","localize","getRealAndSyntheticDocumentFormattersOrdered","model","seen","Set","docFormatter","ordered","formatter","push","extensionId","add","toKey","rangeFormatter","has","displayName","provideDocumentFormattingEdits","options","token","provideDocumentRangeFormattingEdits","getFullModelRange","FormattingConflicts","selector","remove","_selectors","unshift","dispose","document","mode","undefined","first","formatDocumentRangesWithSelectedProvider","accessor","editorOrModel","rangeOrRanges","progress","instaService","get","getModel","provider","select","selected","report","invokeFunction","formatDocumentRangesWithProvider","workerService","cts","ranges","len","sort","compareRangesUsingStarts","areIntersectingOrTouching","fromPositions","getStartPosition","getEndPosition","allEdits","getFormattingOptions","rawEdits","computeMoreMinimalEdits","uri","minEdits","isCancellationRequested","execute","revealPositionInCenterIfOutsideViewport","getPosition","initialSelection","startColumn","endColumn","pushEditOperations","map","text","lift","forceMoveMarkers","undoEdits","formatDocumentWithSelectedProvider","formatDocumentWithProvider","getDocumentRangeFormattingEditsUntilResult","providers","getDocumentFormattingEditsUntilResult","getOnTypeFormattingEdits","position","ch","autoFormatTriggerCharacters","indexOf","provideOnTypeFormattingEdits","None","registerCommand","args","resource","isUri","isIRange","isIPosition"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,MAAAA,OAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,IAAAA,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,SAASO,KAAT,QAAsB,uCAAtB;AACA,SAASC,OAAT,EAAkBC,eAAlB,QAAyC,gCAAzC;AACA,SAASC,iBAAT,QAAkC,sCAAlC;AACA,SAASC,eAAT,EAA0BC,yBAA1B,QAA2D,gCAA3D;AACA,SAASC,GAAT,QAAoB,6BAApB;AACA,SAASC,kCAAT,EAA6CC,gCAA7C,QAAqF,mCAArF;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,SAASC,QAAT,QAAyB,+BAAzB;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,sCAAT,EAAiDC,2CAAjD,EAA8FC,oCAA9F,QAA0I,uBAA1I;AACA,SAASC,oBAAT,QAAqC,8CAArC;AACA,SAASC,aAAT,QAA8B,uCAA9B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;AACA,SAASC,mBAAT,QAAoC,mDAApC;AACA,SAASC,qBAAT,QAAsC,yDAAtC;AACA,SAASC,UAAT,QAA2B,oCAA3B;AACA,SAASC,gBAAT,QAAiC,+CAAjC;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,SAASC,QAAT,QAAyB,kCAAzB;AACA,OAAO,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AACxCA,EAAAA,KAAK,GAAGA,KAAK,CAACC,MAAN,CAAa,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,KAAT;AAAA,GAAjB,CAAR;;AACA,MAAI,CAACH,KAAK,CAACI,MAAX,EAAmB;AACf;AACH;;AAJuC,MAKlCD,KALkC,GAKxBH,KAAK,CAAC,CAAD,CALmB,CAKlCG,KALkC;;AAMxC,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACI,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnCF,IAAAA,KAAK,GAAGnB,KAAK,CAACsB,SAAN,CAAgBH,KAAhB,EAAuBH,KAAK,CAACK,CAAD,CAAL,CAASF,KAAhC,CAAR;AACH;;AARuC,eASGA,KATH;AAAA,MAShCI,eATgC,UAShCA,eATgC;AAAA,MASfC,aATe,UASfA,aATe;;AAUxC,MAAID,eAAe,KAAKC,aAAxB,EAAuC;AACnC,QAAIR,KAAK,CAACI,MAAN,KAAiB,CAArB,EAAwB;AACpB/B,MAAAA,KAAK,CAACmB,GAAG,CAACiB,QAAJ,CAAa,QAAb,EAAuB,oCAAvB,EAA6DF,eAA7D,CAAD,CAAL;AACH,KAFD,MAGK;AACDlC,MAAAA,KAAK,CAACmB,GAAG,CAACiB,QAAJ,CAAa,QAAb,EAAuB,uCAAvB,EAAgET,KAAK,CAACI,MAAtE,EAA8EG,eAA9E,CAAD,CAAL;AACH;AACJ,GAPD,MAQK;AACD,QAAIP,KAAK,CAACI,MAAN,KAAiB,CAArB,EAAwB;AACpB/B,MAAAA,KAAK,CAACmB,GAAG,CAACiB,QAAJ,CAAa,QAAb,EAAuB,kDAAvB,EAA2EF,eAA3E,EAA4FC,aAA5F,CAAD,CAAL;AACH,KAFD,MAGK;AACDnC,MAAAA,KAAK,CAACmB,GAAG,CAACiB,QAAJ,CAAa,QAAb,EAAuB,qDAAvB,EAA8ET,KAAK,CAACI,MAApF,EAA4FG,eAA5F,EAA6GC,aAA7G,CAAD,CAAL;AACH;AACJ;AACJ;AACD,OAAO,SAASE,4CAAT,CAAsDC,KAAtD,EAA6D;AAChE,MAAM1C,MAAM,GAAG,EAAf;AACA,MAAM2C,IAAI,GAAG,IAAIC,GAAJ,EAAb,CAFgE,CAGhE;;AACA,MAAMC,YAAY,GAAG5B,sCAAsC,CAAC6B,OAAvC,CAA+CJ,KAA/C,CAArB;;AAJgE,6CAKxCG,YALwC;AAAA;;AAAA;AAKhE,wDAAsC;AAAA,UAA3BE,SAA2B;AAClC/C,MAAAA,MAAM,CAACgD,IAAP,CAAYD,SAAZ;;AACA,UAAIA,SAAS,CAACE,WAAd,EAA2B;AACvBN,QAAAA,IAAI,CAACO,GAAL,CAAS1B,mBAAmB,CAAC2B,KAApB,CAA0BJ,SAAS,CAACE,WAApC,CAAT;AACH;AACJ,KAV+D,CAWhE;;AAXgE;AAAA;AAAA;AAAA;AAAA;;AAYhE,MAAMG,cAAc,GAAGlC,2CAA2C,CAAC4B,OAA5C,CAAoDJ,KAApD,CAAvB;;AAZgE,8CAaxCU,cAbwC;AAAA;;AAAA;AAAA;AAAA,UAarDL,SAbqD;;AAc5D,UAAIA,SAAS,CAACE,WAAd,EAA2B;AACvB,YAAIN,IAAI,CAACU,GAAL,CAAS7B,mBAAmB,CAAC2B,KAApB,CAA0BJ,SAAS,CAACE,WAApC,CAAT,CAAJ,EAAgE;AAC5D;AACH;;AACDN,QAAAA,IAAI,CAACO,GAAL,CAAS1B,mBAAmB,CAAC2B,KAApB,CAA0BJ,SAAS,CAACE,WAApC,CAAT;AACH;;AACDjD,MAAAA,MAAM,CAACgD,IAAP,CAAY;AACRM,QAAAA,WAAW,EAAEP,SAAS,CAACO,WADf;AAERL,QAAAA,WAAW,EAAEF,SAAS,CAACE,WAFf;AAGRM,QAAAA,8BAHQ,0CAGuBb,KAHvB,EAG8Bc,OAH9B,EAGuCC,KAHvC,EAG8C;AAClD,iBAAOV,SAAS,CAACW,mCAAV,CAA8ChB,KAA9C,EAAqDA,KAAK,CAACiB,iBAAN,EAArD,EAAgFH,OAAhF,EAAyFC,KAAzF,CAAP;AACH;AALO,OAAZ;AApB4D;;AAahE,2DAAwC;AAAA;;AAAA,+BAG5B;AAWX;AA3B+D;AAAA;AAAA;AAAA;AAAA;;AA4BhE,SAAOzD,MAAP;AACH;AACD,WAAa4D,mBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yCACgCC,QADhC,EAC0C;AAClC,UAAMC,MAAM,GAAGF,mBAAmB,CAACG,UAApB,CAA+BC,OAA/B,CAAuCH,QAAvC,CAAf;;AACA,aAAO;AAAEI,QAAAA,OAAO,EAAEH;AAAX,OAAP;AACH;AAJL;AAAA;AAAA,2BAKkBf,SALlB,EAK6BmB,QAL7B,EAKuCC,IALvC,EAK6C;AACrC,aAAOlF,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAC/B8D,SAAS,CAACZ,MAAV,KAAqB,CADU;AAAA;AAAA;AAAA;;AAAA,iDAExBiC,SAFwB;;AAAA;AAI7BP,gBAAAA,QAJ6B,GAIlBhC,QAAQ,CAACwC,KAAT,CAAeT,mBAAmB,CAACG,UAAnC,CAJkB;;AAAA,qBAK/BF,QAL+B;AAAA;AAAA;AAAA;;AAAA;AAMxB,uBAAMA,QAAQ,CAACd,SAAD,EAAYmB,QAAZ,EAAsBC,IAAtB,CAAd;;AANwB;AAAA;;AAAA;AAAA,iDAQ5BC,SAR4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB,EAAhB;AAUH;AAhBL;;AAAA;AAAA;AAkBAR,mBAAmB,CAACG,UAApB,GAAiC,IAAIrC,UAAJ,EAAjC;AACA,OAAO,SAAS4C,wCAAT,CAAkDC,QAAlD,EAA4DC,aAA5D,EAA2EC,aAA3E,EAA0FN,IAA1F,EAAgGO,QAAhG,EAA0GjB,KAA1G,EAAiH;AACpH,SAAOxE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7B0F,YAAAA,YAD6B,GACdJ,QAAQ,CAACK,GAAT,CAAanD,qBAAb,CADc;AAE7BiB,YAAAA,KAF6B,GAErB7B,YAAY,CAAC2D,aAAD,CAAZ,GAA8BA,aAAa,CAACK,QAAd,EAA9B,GAAyDL,aAFpC;AAG7BM,YAAAA,QAH6B,GAGlB5D,2CAA2C,CAAC4B,OAA5C,CAAoDJ,KAApD,CAHkB;AAAA;AAIlB,mBAAMkB,mBAAmB,CAACmB,MAApB,CAA2BD,QAA3B,EAAqCpC,KAArC,EAA4CyB,IAA5C,CAAN;;AAJkB;AAI7Ba,YAAAA,QAJ6B;;AAAA,iBAK/BA,QAL+B;AAAA;AAAA;AAAA;;AAM/BN,YAAAA,QAAQ,CAACO,MAAT,CAAgBD,QAAhB;AAN+B;AAO/B,mBAAML,YAAY,CAACO,cAAb,CAA4BC,gCAA5B,EAA8DH,QAA9D,EAAwER,aAAxE,EAAuFC,aAAvF,EAAsGhB,KAAtG,CAAN;;AAP+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB,EAAhB;AAUH;AACD,OAAO,SAAS0B,gCAAT,CAA0CZ,QAA1C,EAAoDO,QAApD,EAA8DN,aAA9D,EAA6EC,aAA7E,EAA4FhB,KAA5F,EAAmG;AACtG,SAAOxE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC7BmG,YAAAA,aAD6B,GACbb,QAAQ,CAACK,GAAT,CAAaxD,oBAAb,CADa;;AAInC,gBAAIP,YAAY,CAAC2D,aAAD,CAAhB,EAAiC;AAC7B9B,cAAAA,KAAK,GAAG8B,aAAa,CAACK,QAAd,EAAR;AACAQ,cAAAA,GAAG,GAAG,IAAI1E,kCAAJ,CAAuC6D,aAAvC,EAAsD;AAAE;AAAF,gBAAgB;AAAE;AAAxE,gBAAwFJ,SAAxF,EAAmGX,KAAnG,CAAN;AACH,aAHD,MAIK;AACDf,cAAAA,KAAK,GAAG8B,aAAR;AACAa,cAAAA,GAAG,GAAG,IAAIzE,gCAAJ,CAAqC4D,aAArC,EAAoDf,KAApD,CAAN;AACH,aAXkC,CAYnC;;;AACI6B,YAAAA,MAb+B,GAatB,EAbsB;AAc/BC,YAAAA,GAd+B,GAczB,CAdyB;AAAA,oDAejBlF,OAAO,CAACoE,aAAD,CAAP,CAAuBe,IAAvB,CAA4BzE,KAAK,CAAC0E,wBAAlC,CAfiB;;AAAA;AAenC,qEAA+E;AAAtEvD,gBAAAA,OAAsE;;AAC3E,oBAAIqD,GAAG,GAAG,CAAN,IAAWxE,KAAK,CAAC2E,yBAAN,CAAgCJ,MAAM,CAACC,GAAG,GAAG,CAAP,CAAtC,EAAiDrD,OAAjD,CAAf,EAAwE;AACpEoD,kBAAAA,MAAM,CAACC,GAAG,GAAG,CAAP,CAAN,GAAkBxE,KAAK,CAAC4E,aAAN,CAAoBL,MAAM,CAACC,GAAG,GAAG,CAAP,CAAN,CAAgBK,gBAAhB,EAApB,EAAwD1D,OAAK,CAAC2D,cAAN,EAAxD,CAAlB;AACH,iBAFD,MAGK;AACDN,kBAAAA,GAAG,GAAGD,MAAM,CAACtC,IAAP,CAAYd,OAAZ,CAAN;AACH;AACJ;AAtBkC;AAAA;AAAA;AAAA;AAAA;;AAuB7B4D,YAAAA,QAvB6B,GAuBlB,EAvBkB;AAAA,8BAwBjBR,MAxBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwB1BpD,YAAAA,KAxB0B;AAAA;AAAA;AA0BV,mBAAM4C,QAAQ,CAACpB,mCAAT,CAA6ChB,KAA7C,EAAoDR,KAApD,EAA2DQ,KAAK,CAACqD,oBAAN,EAA3D,EAAyFV,GAAG,CAAC5B,KAA7F,CAAN;;AA1BU;AA0BrBuC,YAAAA,QA1BqB;AAAA;AA2BV,mBAAMZ,aAAa,CAACa,uBAAd,CAAsCvD,KAAK,CAACwD,GAA5C,EAAiDF,QAAjD,CAAN;;AA3BU;AA2BrBG,YAAAA,QA3BqB;;AA4B3B,gBAAIA,QAAJ,EAAc;AACVL,cAAAA,QAAQ,CAAC9C,IAAT,OAAA8C,QAAQ,qBAASK,QAAT,EAAR;AACH;;AA9B0B,iBA+BvBd,GAAG,CAAC5B,KAAJ,CAAU2C,uBA/Ba;AAAA;AAAA;AAAA;;AAAA,8CAgChB,IAhCgB;;AAAA;AAAA;AAoC3Bf,YAAAA,GAAG,CAACpB,OAAJ;AApC2B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAuC/B6B,QAAQ,CAAC3D,MAAT,KAAoB,CAvCW;AAAA;AAAA;AAAA;;AAAA,8CAwCxB,KAxCwB;;AAAA;AA0CnC,gBAAItB,YAAY,CAAC2D,aAAD,CAAhB,EAAiC;AAC7B;AACAlD,cAAAA,cAAc,CAAC+E,OAAf,CAAuB7B,aAAvB,EAAsCsB,QAAtC,EAAgD,IAAhD;AACAhE,cAAAA,oBAAoB,CAACgE,QAAD,CAApB;AACAtB,cAAAA,aAAa,CAAC8B,uCAAd,CAAsD9B,aAAa,CAAC+B,WAAd,EAAtD,EAAmF;AAAE;AAArF;AACH,aALD,MAMK;AACD;AACSrE,cAAAA,OAFR,GAEmB4D,QAFnB,IAEQ5D,KAFR;AAGKsE,cAAAA,gBAHL,GAGwB,IAAIxF,SAAJ,CAAckB,OAAK,CAACI,eAApB,EAAqCJ,OAAK,CAACuE,WAA3C,EAAwDvE,OAAK,CAACK,aAA9D,EAA6EL,OAAK,CAACwE,SAAnF,CAHxB;AAIDhE,cAAAA,KAAK,CAACiE,kBAAN,CAAyB,CAACH,gBAAD,CAAzB,EAA6CV,QAAQ,CAACc,GAAT,CAAa,UAAA3E,IAAI,EAAI;AAC9D,uBAAO;AACH4E,kBAAAA,IAAI,EAAE5E,IAAI,CAAC4E,IADR;AAEH3E,kBAAAA,KAAK,EAAEnB,KAAK,CAAC+F,IAAN,CAAW7E,IAAI,CAACC,KAAhB,CAFJ;AAGH6E,kBAAAA,gBAAgB,EAAE;AAHf,iBAAP;AAKH,eAN4C,CAA7C,EAMI,UAAAC,SAAS,EAAI;AAAA,4DACWA,SADX;AAAA;;AAAA;AACb,yEAAmC;AAAA,wBAAtB9E,OAAsB,gBAAtBA,KAAsB;;AAC/B,wBAAInB,KAAK,CAAC2E,yBAAN,CAAgCxD,OAAhC,EAAuCsE,gBAAvC,CAAJ,EAA8D;AAC1D,6BAAO,CAAC,IAAIxF,SAAJ,CAAckB,OAAK,CAACI,eAApB,EAAqCJ,OAAK,CAACuE,WAA3C,EAAwDvE,OAAK,CAACK,aAA9D,EAA6EL,OAAK,CAACwE,SAAnF,CAAD,CAAP;AACH;AACJ;AALY;AAAA;AAAA;AAAA;AAAA;;AAMb,uBAAO,IAAP;AACH,eAbD;AAcH;;AAlEkC,8CAmE5B,IAnE4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB,EAAhB;AAqEH;AACD,OAAO,SAASO,kCAAT,CAA4C1C,QAA5C,EAAsDC,aAAtD,EAAqEL,IAArE,EAA2EO,QAA3E,EAAqFjB,KAArF,EAA4F;AAC/F,SAAOxE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7B0F,YAAAA,YAD6B,GACdJ,QAAQ,CAACK,GAAT,CAAanD,qBAAb,CADc;AAE7BiB,YAAAA,KAF6B,GAErB7B,YAAY,CAAC2D,aAAD,CAAZ,GAA8BA,aAAa,CAACK,QAAd,EAA9B,GAAyDL,aAFpC;AAG7BM,YAAAA,QAH6B,GAGlBrC,4CAA4C,CAACC,KAAD,CAH1B;AAAA;AAIlB,mBAAMkB,mBAAmB,CAACmB,MAApB,CAA2BD,QAA3B,EAAqCpC,KAArC,EAA4CyB,IAA5C,CAAN;;AAJkB;AAI7Ba,YAAAA,QAJ6B;;AAAA,iBAK/BA,QAL+B;AAAA;AAAA;AAAA;;AAM/BN,YAAAA,QAAQ,CAACO,MAAT,CAAgBD,QAAhB;AAN+B;AAO/B,mBAAML,YAAY,CAACO,cAAb,CAA4BgC,0BAA5B,EAAwDlC,QAAxD,EAAkER,aAAlE,EAAiFL,IAAjF,EAAuFV,KAAvF,CAAN;;AAP+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB,EAAhB;AAUH;AACD,OAAO,SAASyD,0BAAT,CAAoC3C,QAApC,EAA8CO,QAA9C,EAAwDN,aAAxD,EAAuEL,IAAvE,EAA6EV,KAA7E,EAAoF;AACvF,SAAOxE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC7BmG,YAAAA,aAD6B,GACbb,QAAQ,CAACK,GAAT,CAAaxD,oBAAb,CADa;;AAInC,gBAAIP,YAAY,CAAC2D,aAAD,CAAhB,EAAiC;AAC7B9B,cAAAA,KAAK,GAAG8B,aAAa,CAACK,QAAd,EAAR;AACAQ,cAAAA,GAAG,GAAG,IAAI1E,kCAAJ,CAAuC6D,aAAvC,EAAsD;AAAE;AAAF,gBAAgB;AAAE;AAAxE,gBAAwFJ,SAAxF,EAAmGX,KAAnG,CAAN;AACH,aAHD,MAIK;AACDf,cAAAA,KAAK,GAAG8B,aAAR;AACAa,cAAAA,GAAG,GAAG,IAAIzE,gCAAJ,CAAqC4D,aAArC,EAAoDf,KAApD,CAAN;AACH;;AAXkC;AAAA;AAcd,mBAAMqB,QAAQ,CAACvB,8BAAT,CAAwCb,KAAxC,EAA+CA,KAAK,CAACqD,oBAAN,EAA/C,EAA6EV,GAAG,CAAC5B,KAAjF,CAAN;;AAdc;AAczBuC,YAAAA,QAdyB;AAAA;AAevB,mBAAMZ,aAAa,CAACa,uBAAd,CAAsCvD,KAAK,CAACwD,GAA5C,EAAiDF,QAAjD,CAAN;;AAfuB;AAe/BjE,YAAAA,KAf+B;;AAAA,iBAgB3BsD,GAAG,CAAC5B,KAAJ,CAAU2C,uBAhBiB;AAAA;AAAA;AAAA;;AAAA,8CAiBpB,IAjBoB;;AAAA;AAAA;AAqB/Bf,YAAAA,GAAG,CAACpB,OAAJ;AArB+B;;AAAA;AAAA,kBAuB/B,CAAClC,KAAD,IAAUA,KAAK,CAACI,MAAN,KAAiB,CAvBI;AAAA;AAAA;AAAA;;AAAA,8CAwBxB,KAxBwB;;AAAA;AA0BnC,gBAAItB,YAAY,CAAC2D,aAAD,CAAhB,EAAiC;AAC7B;AACAlD,cAAAA,cAAc,CAAC+E,OAAf,CAAuB7B,aAAvB,EAAsCzC,KAAtC,EAA6CoC,IAAI,KAAK;AAAE;AAAxD;;AACA,kBAAIA,IAAI,KAAK;AAAE;AAAf,gBAA6B;AACzBrC,kBAAAA,oBAAoB,CAACC,KAAD,CAApB;AACAyC,kBAAAA,aAAa,CAAC8B,uCAAd,CAAsD9B,aAAa,CAAC+B,WAAd,EAAtD,EAAmF;AAAE;AAArF;AACH;AACJ,aAPD,MAQK;AACD;AADC,uBAEmBxE,KAFnB,uCAEQG,KAFR,cAEQA,KAFR;AAGKsE,cAAAA,gBAHL,GAGwB,IAAIxF,SAAJ,CAAckB,KAAK,CAACI,eAApB,EAAqCJ,KAAK,CAACuE,WAA3C,EAAwDvE,KAAK,CAACK,aAA9D,EAA6EL,KAAK,CAACwE,SAAnF,CAHxB;AAIDhE,cAAAA,KAAK,CAACiE,kBAAN,CAAyB,CAACH,gBAAD,CAAzB,EAA6CzE,KAAK,CAAC6E,GAAN,CAAU,UAAA3E,IAAI,EAAI;AAC3D,uBAAO;AACH4E,kBAAAA,IAAI,EAAE5E,IAAI,CAAC4E,IADR;AAEH3E,kBAAAA,KAAK,EAAEnB,KAAK,CAAC+F,IAAN,CAAW7E,IAAI,CAACC,KAAhB,CAFJ;AAGH6E,kBAAAA,gBAAgB,EAAE;AAHf,iBAAP;AAKH,eAN4C,CAA7C,EAMI,UAAAC,SAAS,EAAI;AAAA,4DACWA,SADX;AAAA;;AAAA;AACb,yEAAmC;AAAA,wBAAtB9E,OAAsB,gBAAtBA,KAAsB;;AAC/B,wBAAInB,KAAK,CAAC2E,yBAAN,CAAgCxD,OAAhC,EAAuCsE,gBAAvC,CAAJ,EAA8D;AAC1D,6BAAO,CAAC,IAAIxF,SAAJ,CAAckB,OAAK,CAACI,eAApB,EAAqCJ,OAAK,CAACuE,WAA3C,EAAwDvE,OAAK,CAACK,aAA9D,EAA6EL,OAAK,CAACwE,SAAnF,CAAD,CAAP;AACH;AACJ;AALY;AAAA;AAAA;AAAA;AAAA;;AAMb,uBAAO,IAAP;AACH,eAbD;AAcH;;AApDkC,8CAqD5B,IArD4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB,EAAhB;AAuDH;AACD,OAAO,SAASS,0CAAT,CAAoD/B,aAApD,EAAmE1C,KAAnE,EAA0ER,KAA1E,EAAiFsB,OAAjF,EAA0FC,KAA1F,EAAiG;AACpG,SAAOxE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC7BmI,YAAAA,SAD6B,GACjBlG,2CAA2C,CAAC4B,OAA5C,CAAoDJ,KAApD,CADiB;AAAA,oDAEZ0E,SAFY;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAExBtC,YAAAA,QAFwB;AAAA;AAGhB,mBAAMrF,OAAO,CAACD,OAAR,CAAgBsF,QAAQ,CAACpB,mCAAT,CAA6ChB,KAA7C,EAAoDR,KAApD,EAA2DsB,OAA3D,EAAoEC,KAApE,CAAhB,WAAkGhD,yBAAlG,CAAN;;AAHgB;AAG3BuF,YAAAA,QAH2B;;AAAA,iBAI3B1F,eAAe,CAAC0F,QAAD,CAJY;AAAA;AAAA;AAAA;;AAAA;AAKpB,mBAAMZ,aAAa,CAACa,uBAAd,CAAsCvD,KAAK,CAACwD,GAA5C,EAAiDF,QAAjD,CAAN;;AALoB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA,8CAQ5B5B,SAR4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB,EAAhB;AAUH;AACD,OAAO,SAASiD,qCAAT,CAA+CjC,aAA/C,EAA8D1C,KAA9D,EAAqEc,OAArE,EAA8EC,KAA9E,EAAqF;AACxF,SAAOxE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC7BmI,YAAAA,SAD6B,GACjB3E,4CAA4C,CAACC,KAAD,CAD3B;AAAA,oDAEZ0E,SAFY;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAExBtC,YAAAA,QAFwB;AAAA;AAGhB,mBAAMrF,OAAO,CAACD,OAAR,CAAgBsF,QAAQ,CAACvB,8BAAT,CAAwCb,KAAxC,EAA+Cc,OAA/C,EAAwDC,KAAxD,CAAhB,WAAsFhD,yBAAtF,CAAN;;AAHgB;AAG3BuF,YAAAA,QAH2B;;AAAA,iBAI3B1F,eAAe,CAAC0F,QAAD,CAJY;AAAA;AAAA;AAAA;;AAAA;AAKpB,mBAAMZ,aAAa,CAACa,uBAAd,CAAsCvD,KAAK,CAACwD,GAA5C,EAAiDF,QAAjD,CAAN;;AALoB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA,8CAQ5B5B,SAR4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB,EAAhB;AAUH;AACD,OAAO,SAASkD,wBAAT,CAAkClC,aAAlC,EAAiD1C,KAAjD,EAAwD6E,QAAxD,EAAkEC,EAAlE,EAAsEhE,OAAtE,EAA+E;AAClF,MAAM4D,SAAS,GAAGjG,oCAAoC,CAAC2B,OAArC,CAA6CJ,KAA7C,CAAlB;;AACA,MAAI0E,SAAS,CAACjF,MAAV,KAAqB,CAAzB,EAA4B;AACxB,WAAO1C,OAAO,CAACD,OAAR,CAAgB4E,SAAhB,CAAP;AACH;;AACD,MAAIgD,SAAS,CAAC,CAAD,CAAT,CAAaK,2BAAb,CAAyCC,OAAzC,CAAiDF,EAAjD,IAAuD,CAA3D,EAA8D;AAC1D,WAAO/H,OAAO,CAACD,OAAR,CAAgB4E,SAAhB,CAAP;AACH;;AACD,SAAO3E,OAAO,CAACD,OAAR,CAAgB4H,SAAS,CAAC,CAAD,CAAT,CAAaO,4BAAb,CAA0CjF,KAA1C,EAAiD6E,QAAjD,EAA2DC,EAA3D,EAA+DhE,OAA/D,EAAwEjD,iBAAiB,CAACqH,IAA1F,CAAhB,WAAuHnH,yBAAvH,EAAkJP,IAAlJ,CAAuJ,UAAA6B,KAAK,EAAI;AACnK,WAAOqD,aAAa,CAACa,uBAAd,CAAsCvD,KAAK,CAACwD,GAA5C,EAAiDnE,KAAjD,CAAP;AACH,GAFM,CAAP;AAGH;AACDJ,gBAAgB,CAACkG,eAAjB,CAAiC,6BAAjC,EAAgE,UAAUtD,QAAV,EAA6B;AAAA,oCAANuD,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAAA,MAClFC,QADkF,GACtDD,IADsD;AAAA,MACxE5F,KADwE,GACtD4F,IADsD;AAAA,MACjEtE,OADiE,GACtDsE,IADsD;AAEzFlG,EAAAA,UAAU,CAAClB,GAAG,CAACsH,KAAJ,CAAUD,QAAV,CAAD,CAAV;AACAnG,EAAAA,UAAU,CAACb,KAAK,CAACkH,QAAN,CAAe/F,KAAf,CAAD,CAAV;AACA,MAAMQ,KAAK,GAAG6B,QAAQ,CAACK,GAAT,CAAavD,aAAb,EAA4BwD,QAA5B,CAAqCkD,QAArC,CAAd;;AACA,MAAI,CAACrF,KAAL,EAAY;AACR,UAAMlC,eAAe,CAAC,UAAD,CAArB;AACH;;AACD,SAAO2G,0CAA0C,CAAC5C,QAAQ,CAACK,GAAT,CAAaxD,oBAAb,CAAD,EAAqCsB,KAArC,EAA4C3B,KAAK,CAAC+F,IAAN,CAAW5E,KAAX,CAA5C,EAA+DsB,OAA/D,EAAwEjD,iBAAiB,CAACqH,IAA1F,CAAjD;AACH,CATD;AAUAjG,gBAAgB,CAACkG,eAAjB,CAAiC,gCAAjC,EAAmE,UAAUtD,QAAV,EAA6B;AAAA,qCAANuD,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAAA,MACrFC,QADqF,GAChED,IADgE;AAAA,MAC3EtE,OAD2E,GAChEsE,IADgE;AAE5FlG,EAAAA,UAAU,CAAClB,GAAG,CAACsH,KAAJ,CAAUD,QAAV,CAAD,CAAV;AACA,MAAMrF,KAAK,GAAG6B,QAAQ,CAACK,GAAT,CAAavD,aAAb,EAA4BwD,QAA5B,CAAqCkD,QAArC,CAAd;;AACA,MAAI,CAACrF,KAAL,EAAY;AACR,UAAMlC,eAAe,CAAC,UAAD,CAArB;AACH;;AACD,SAAO6G,qCAAqC,CAAC9C,QAAQ,CAACK,GAAT,CAAaxD,oBAAb,CAAD,EAAqCsB,KAArC,EAA4Cc,OAA5C,EAAqDjD,iBAAiB,CAACqH,IAAvE,CAA5C;AACH,CARD;AASAjG,gBAAgB,CAACkG,eAAjB,CAAiC,8BAAjC,EAAiE,UAAUtD,QAAV,EAA6B;AAAA,qCAANuD,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAAA,MACnFC,QADmF,GAChDD,IADgD;AAAA,MACzEP,QADyE,GAChDO,IADgD;AAAA,MAC/DN,EAD+D,GAChDM,IADgD;AAAA,MAC3DtE,OAD2D,GAChDsE,IADgD;AAE1FlG,EAAAA,UAAU,CAAClB,GAAG,CAACsH,KAAJ,CAAUD,QAAV,CAAD,CAAV;AACAnG,EAAAA,UAAU,CAACd,QAAQ,CAACoH,WAAT,CAAqBX,QAArB,CAAD,CAAV;AACA3F,EAAAA,UAAU,CAAC,OAAO4F,EAAP,KAAc,QAAf,CAAV;AACA,MAAM9E,KAAK,GAAG6B,QAAQ,CAACK,GAAT,CAAavD,aAAb,EAA4BwD,QAA5B,CAAqCkD,QAArC,CAAd;;AACA,MAAI,CAACrF,KAAL,EAAY;AACR,UAAMlC,eAAe,CAAC,UAAD,CAArB;AACH;;AACD,SAAO8G,wBAAwB,CAAC/C,QAAQ,CAACK,GAAT,CAAaxD,oBAAb,CAAD,EAAqCsB,KAArC,EAA4C5B,QAAQ,CAACgG,IAAT,CAAcS,QAAd,CAA5C,EAAqEC,EAArE,EAAyEhE,OAAzE,CAA/B;AACH,CAVD","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { alert } from '../../../base/browser/ui/aria/aria.js';\r\nimport { asArray, isNonEmptyArray } from '../../../base/common/arrays.js';\r\nimport { CancellationToken } from '../../../base/common/cancellation.js';\r\nimport { illegalArgument, onUnexpectedExternalError } from '../../../base/common/errors.js';\r\nimport { URI } from '../../../base/common/uri.js';\r\nimport { EditorStateCancellationTokenSource, TextModelCancellationTokenSource } from '../../browser/core/editorState.js';\r\nimport { isCodeEditor } from '../../browser/editorBrowser.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { DocumentFormattingEditProviderRegistry, DocumentRangeFormattingEditProviderRegistry, OnTypeFormattingEditProviderRegistry } from '../../common/modes.js';\r\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\r\nimport { IModelService } from '../../common/services/modelService.js';\r\nimport { FormattingEdit } from './formattingEdit.js';\r\nimport * as nls from '../../../nls.js';\r\nimport { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';\r\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\r\nimport { LinkedList } from '../../../base/common/linkedList.js';\r\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\r\nimport { assertType } from '../../../base/common/types.js';\r\nimport { Iterable } from '../../../base/common/iterator.js';\r\nexport function alertFormattingEdits(edits) {\r\n    edits = edits.filter(edit => edit.range);\r\n    if (!edits.length) {\r\n        return;\r\n    }\r\n    let { range } = edits[0];\r\n    for (let i = 1; i < edits.length; i++) {\r\n        range = Range.plusRange(range, edits[i].range);\r\n    }\r\n    const { startLineNumber, endLineNumber } = range;\r\n    if (startLineNumber === endLineNumber) {\r\n        if (edits.length === 1) {\r\n            alert(nls.localize('hint11', \"Made 1 formatting edit on line {0}\", startLineNumber));\r\n        }\r\n        else {\r\n            alert(nls.localize('hintn1', \"Made {0} formatting edits on line {1}\", edits.length, startLineNumber));\r\n        }\r\n    }\r\n    else {\r\n        if (edits.length === 1) {\r\n            alert(nls.localize('hint1n', \"Made 1 formatting edit between lines {0} and {1}\", startLineNumber, endLineNumber));\r\n        }\r\n        else {\r\n            alert(nls.localize('hintnn', \"Made {0} formatting edits between lines {1} and {2}\", edits.length, startLineNumber, endLineNumber));\r\n        }\r\n    }\r\n}\r\nexport function getRealAndSyntheticDocumentFormattersOrdered(model) {\r\n    const result = [];\r\n    const seen = new Set();\r\n    // (1) add all document formatter\r\n    const docFormatter = DocumentFormattingEditProviderRegistry.ordered(model);\r\n    for (const formatter of docFormatter) {\r\n        result.push(formatter);\r\n        if (formatter.extensionId) {\r\n            seen.add(ExtensionIdentifier.toKey(formatter.extensionId));\r\n        }\r\n    }\r\n    // (2) add all range formatter as document formatter (unless the same extension already did that)\r\n    const rangeFormatter = DocumentRangeFormattingEditProviderRegistry.ordered(model);\r\n    for (const formatter of rangeFormatter) {\r\n        if (formatter.extensionId) {\r\n            if (seen.has(ExtensionIdentifier.toKey(formatter.extensionId))) {\r\n                continue;\r\n            }\r\n            seen.add(ExtensionIdentifier.toKey(formatter.extensionId));\r\n        }\r\n        result.push({\r\n            displayName: formatter.displayName,\r\n            extensionId: formatter.extensionId,\r\n            provideDocumentFormattingEdits(model, options, token) {\r\n                return formatter.provideDocumentRangeFormattingEdits(model, model.getFullModelRange(), options, token);\r\n            }\r\n        });\r\n    }\r\n    return result;\r\n}\r\nexport class FormattingConflicts {\r\n    static setFormatterSelector(selector) {\r\n        const remove = FormattingConflicts._selectors.unshift(selector);\r\n        return { dispose: remove };\r\n    }\r\n    static select(formatter, document, mode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (formatter.length === 0) {\r\n                return undefined;\r\n            }\r\n            const selector = Iterable.first(FormattingConflicts._selectors);\r\n            if (selector) {\r\n                return yield selector(formatter, document, mode);\r\n            }\r\n            return undefined;\r\n        });\r\n    }\r\n}\r\nFormattingConflicts._selectors = new LinkedList();\r\nexport function formatDocumentRangesWithSelectedProvider(accessor, editorOrModel, rangeOrRanges, mode, progress, token) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const instaService = accessor.get(IInstantiationService);\r\n        const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\r\n        const provider = DocumentRangeFormattingEditProviderRegistry.ordered(model);\r\n        const selected = yield FormattingConflicts.select(provider, model, mode);\r\n        if (selected) {\r\n            progress.report(selected);\r\n            yield instaService.invokeFunction(formatDocumentRangesWithProvider, selected, editorOrModel, rangeOrRanges, token);\r\n        }\r\n    });\r\n}\r\nexport function formatDocumentRangesWithProvider(accessor, provider, editorOrModel, rangeOrRanges, token) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const workerService = accessor.get(IEditorWorkerService);\r\n        let model;\r\n        let cts;\r\n        if (isCodeEditor(editorOrModel)) {\r\n            model = editorOrModel.getModel();\r\n            cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* Value */ | 4 /* Position */, undefined, token);\r\n        }\r\n        else {\r\n            model = editorOrModel;\r\n            cts = new TextModelCancellationTokenSource(editorOrModel, token);\r\n        }\r\n        // make sure that ranges don't overlap nor touch each other\r\n        let ranges = [];\r\n        let len = 0;\r\n        for (let range of asArray(rangeOrRanges).sort(Range.compareRangesUsingStarts)) {\r\n            if (len > 0 && Range.areIntersectingOrTouching(ranges[len - 1], range)) {\r\n                ranges[len - 1] = Range.fromPositions(ranges[len - 1].getStartPosition(), range.getEndPosition());\r\n            }\r\n            else {\r\n                len = ranges.push(range);\r\n            }\r\n        }\r\n        const allEdits = [];\r\n        for (let range of ranges) {\r\n            try {\r\n                const rawEdits = yield provider.provideDocumentRangeFormattingEdits(model, range, model.getFormattingOptions(), cts.token);\r\n                const minEdits = yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\r\n                if (minEdits) {\r\n                    allEdits.push(...minEdits);\r\n                }\r\n                if (cts.token.isCancellationRequested) {\r\n                    return true;\r\n                }\r\n            }\r\n            finally {\r\n                cts.dispose();\r\n            }\r\n        }\r\n        if (allEdits.length === 0) {\r\n            return false;\r\n        }\r\n        if (isCodeEditor(editorOrModel)) {\r\n            // use editor to apply edits\r\n            FormattingEdit.execute(editorOrModel, allEdits, true);\r\n            alertFormattingEdits(allEdits);\r\n            editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* Immediate */);\r\n        }\r\n        else {\r\n            // use model to apply edits\r\n            const [{ range }] = allEdits;\r\n            const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n            model.pushEditOperations([initialSelection], allEdits.map(edit => {\r\n                return {\r\n                    text: edit.text,\r\n                    range: Range.lift(edit.range),\r\n                    forceMoveMarkers: true\r\n                };\r\n            }), undoEdits => {\r\n                for (const { range } of undoEdits) {\r\n                    if (Range.areIntersectingOrTouching(range, initialSelection)) {\r\n                        return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\r\n                    }\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n        return true;\r\n    });\r\n}\r\nexport function formatDocumentWithSelectedProvider(accessor, editorOrModel, mode, progress, token) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const instaService = accessor.get(IInstantiationService);\r\n        const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\r\n        const provider = getRealAndSyntheticDocumentFormattersOrdered(model);\r\n        const selected = yield FormattingConflicts.select(provider, model, mode);\r\n        if (selected) {\r\n            progress.report(selected);\r\n            yield instaService.invokeFunction(formatDocumentWithProvider, selected, editorOrModel, mode, token);\r\n        }\r\n    });\r\n}\r\nexport function formatDocumentWithProvider(accessor, provider, editorOrModel, mode, token) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const workerService = accessor.get(IEditorWorkerService);\r\n        let model;\r\n        let cts;\r\n        if (isCodeEditor(editorOrModel)) {\r\n            model = editorOrModel.getModel();\r\n            cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* Value */ | 4 /* Position */, undefined, token);\r\n        }\r\n        else {\r\n            model = editorOrModel;\r\n            cts = new TextModelCancellationTokenSource(editorOrModel, token);\r\n        }\r\n        let edits;\r\n        try {\r\n            const rawEdits = yield provider.provideDocumentFormattingEdits(model, model.getFormattingOptions(), cts.token);\r\n            edits = yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\r\n            if (cts.token.isCancellationRequested) {\r\n                return true;\r\n            }\r\n        }\r\n        finally {\r\n            cts.dispose();\r\n        }\r\n        if (!edits || edits.length === 0) {\r\n            return false;\r\n        }\r\n        if (isCodeEditor(editorOrModel)) {\r\n            // use editor to apply edits\r\n            FormattingEdit.execute(editorOrModel, edits, mode !== 2 /* Silent */);\r\n            if (mode !== 2 /* Silent */) {\r\n                alertFormattingEdits(edits);\r\n                editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* Immediate */);\r\n            }\r\n        }\r\n        else {\r\n            // use model to apply edits\r\n            const [{ range }] = edits;\r\n            const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n            model.pushEditOperations([initialSelection], edits.map(edit => {\r\n                return {\r\n                    text: edit.text,\r\n                    range: Range.lift(edit.range),\r\n                    forceMoveMarkers: true\r\n                };\r\n            }), undoEdits => {\r\n                for (const { range } of undoEdits) {\r\n                    if (Range.areIntersectingOrTouching(range, initialSelection)) {\r\n                        return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\r\n                    }\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n        return true;\r\n    });\r\n}\r\nexport function getDocumentRangeFormattingEditsUntilResult(workerService, model, range, options, token) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const providers = DocumentRangeFormattingEditProviderRegistry.ordered(model);\r\n        for (const provider of providers) {\r\n            let rawEdits = yield Promise.resolve(provider.provideDocumentRangeFormattingEdits(model, range, options, token)).catch(onUnexpectedExternalError);\r\n            if (isNonEmptyArray(rawEdits)) {\r\n                return yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\r\n            }\r\n        }\r\n        return undefined;\r\n    });\r\n}\r\nexport function getDocumentFormattingEditsUntilResult(workerService, model, options, token) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const providers = getRealAndSyntheticDocumentFormattersOrdered(model);\r\n        for (const provider of providers) {\r\n            let rawEdits = yield Promise.resolve(provider.provideDocumentFormattingEdits(model, options, token)).catch(onUnexpectedExternalError);\r\n            if (isNonEmptyArray(rawEdits)) {\r\n                return yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\r\n            }\r\n        }\r\n        return undefined;\r\n    });\r\n}\r\nexport function getOnTypeFormattingEdits(workerService, model, position, ch, options) {\r\n    const providers = OnTypeFormattingEditProviderRegistry.ordered(model);\r\n    if (providers.length === 0) {\r\n        return Promise.resolve(undefined);\r\n    }\r\n    if (providers[0].autoFormatTriggerCharacters.indexOf(ch) < 0) {\r\n        return Promise.resolve(undefined);\r\n    }\r\n    return Promise.resolve(providers[0].provideOnTypeFormattingEdits(model, position, ch, options, CancellationToken.None)).catch(onUnexpectedExternalError).then(edits => {\r\n        return workerService.computeMoreMinimalEdits(model.uri, edits);\r\n    });\r\n}\r\nCommandsRegistry.registerCommand('_executeFormatRangeProvider', function (accessor, ...args) {\r\n    const [resource, range, options] = args;\r\n    assertType(URI.isUri(resource));\r\n    assertType(Range.isIRange(range));\r\n    const model = accessor.get(IModelService).getModel(resource);\r\n    if (!model) {\r\n        throw illegalArgument('resource');\r\n    }\r\n    return getDocumentRangeFormattingEditsUntilResult(accessor.get(IEditorWorkerService), model, Range.lift(range), options, CancellationToken.None);\r\n});\r\nCommandsRegistry.registerCommand('_executeFormatDocumentProvider', function (accessor, ...args) {\r\n    const [resource, options] = args;\r\n    assertType(URI.isUri(resource));\r\n    const model = accessor.get(IModelService).getModel(resource);\r\n    if (!model) {\r\n        throw illegalArgument('resource');\r\n    }\r\n    return getDocumentFormattingEditsUntilResult(accessor.get(IEditorWorkerService), model, options, CancellationToken.None);\r\n});\r\nCommandsRegistry.registerCommand('_executeFormatOnTypeProvider', function (accessor, ...args) {\r\n    const [resource, position, ch, options] = args;\r\n    assertType(URI.isUri(resource));\r\n    assertType(Position.isIPosition(position));\r\n    assertType(typeof ch === 'string');\r\n    const model = accessor.get(IModelService).getModel(resource);\r\n    if (!model) {\r\n        throw illegalArgument('resource');\r\n    }\r\n    return getOnTypeFormattingEdits(accessor.get(IEditorWorkerService), model, Position.lift(position), ch, options);\r\n});\r\n"]},"metadata":{},"sourceType":"module"}