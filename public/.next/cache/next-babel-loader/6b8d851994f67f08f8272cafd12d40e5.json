{"ast":null,"code":"import _regeneratorRuntime from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/regenerator\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar Node = function Node(element) {\n  _classCallCheck(this, Node);\n\n  this.element = element;\n  this.next = Node.Undefined;\n  this.prev = Node.Undefined;\n};\n\nNode.Undefined = new Node(undefined);\nexport var LinkedList = /*#__PURE__*/function () {\n  function LinkedList() {\n    _classCallCheck(this, LinkedList);\n\n    this._first = Node.Undefined;\n    this._last = Node.Undefined;\n    this._size = 0;\n  }\n\n  _createClass(LinkedList, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._first === Node.Undefined;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._first = Node.Undefined;\n      this._last = Node.Undefined;\n      this._size = 0;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(element) {\n      return this._insert(element, false);\n    }\n  }, {\n    key: \"push\",\n    value: function push(element) {\n      return this._insert(element, true);\n    }\n  }, {\n    key: \"_insert\",\n    value: function _insert(element, atTheEnd) {\n      var _this = this;\n\n      var newNode = new Node(element);\n\n      if (this._first === Node.Undefined) {\n        this._first = newNode;\n        this._last = newNode;\n      } else if (atTheEnd) {\n        // push\n        var oldLast = this._last;\n        this._last = newNode;\n        newNode.prev = oldLast;\n        oldLast.next = newNode;\n      } else {\n        // unshift\n        var oldFirst = this._first;\n        this._first = newNode;\n        newNode.next = oldFirst;\n        oldFirst.prev = newNode;\n      }\n\n      this._size += 1;\n      var didRemove = false;\n      return function () {\n        if (!didRemove) {\n          didRemove = true;\n\n          _this._remove(newNode);\n        }\n      };\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this._first === Node.Undefined) {\n        return undefined;\n      } else {\n        var res = this._first.element;\n\n        this._remove(this._first);\n\n        return res;\n      }\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      if (this._last === Node.Undefined) {\n        return undefined;\n      } else {\n        var res = this._last.element;\n\n        this._remove(this._last);\n\n        return res;\n      }\n    }\n  }, {\n    key: \"_remove\",\n    value: function _remove(node) {\n      if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\n        // middle\n        var anchor = node.prev;\n        anchor.next = node.next;\n        node.next.prev = anchor;\n      } else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\n        // only node\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n      } else if (node.next === Node.Undefined) {\n        // last\n        this._last = this._last.prev;\n        this._last.next = Node.Undefined;\n      } else if (node.prev === Node.Undefined) {\n        // first\n        this._first = this._first.next;\n        this._first.prev = Node.Undefined;\n      } // done\n\n\n      this._size -= 1;\n    }\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var node;\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              node = this._first;\n\n            case 1:\n              if (!(node !== Node.Undefined)) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 4;\n              return node.element;\n\n            case 4:\n              node = node.next;\n              _context.next = 1;\n              break;\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    }\n  }]);\n\n  return LinkedList;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/common/linkedList.js"],"names":["Node","element","next","Undefined","prev","undefined","LinkedList","_first","_last","_size","_insert","atTheEnd","newNode","oldLast","oldFirst","didRemove","_remove","res","node","anchor","Symbol","iterator"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nclass Node {\r\n    constructor(element) {\r\n        this.element = element;\r\n        this.next = Node.Undefined;\r\n        this.prev = Node.Undefined;\r\n    }\r\n}\r\nNode.Undefined = new Node(undefined);\r\nexport class LinkedList {\r\n    constructor() {\r\n        this._first = Node.Undefined;\r\n        this._last = Node.Undefined;\r\n        this._size = 0;\r\n    }\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    isEmpty() {\r\n        return this._first === Node.Undefined;\r\n    }\r\n    clear() {\r\n        this._first = Node.Undefined;\r\n        this._last = Node.Undefined;\r\n        this._size = 0;\r\n    }\r\n    unshift(element) {\r\n        return this._insert(element, false);\r\n    }\r\n    push(element) {\r\n        return this._insert(element, true);\r\n    }\r\n    _insert(element, atTheEnd) {\r\n        const newNode = new Node(element);\r\n        if (this._first === Node.Undefined) {\r\n            this._first = newNode;\r\n            this._last = newNode;\r\n        }\r\n        else if (atTheEnd) {\r\n            // push\r\n            const oldLast = this._last;\r\n            this._last = newNode;\r\n            newNode.prev = oldLast;\r\n            oldLast.next = newNode;\r\n        }\r\n        else {\r\n            // unshift\r\n            const oldFirst = this._first;\r\n            this._first = newNode;\r\n            newNode.next = oldFirst;\r\n            oldFirst.prev = newNode;\r\n        }\r\n        this._size += 1;\r\n        let didRemove = false;\r\n        return () => {\r\n            if (!didRemove) {\r\n                didRemove = true;\r\n                this._remove(newNode);\r\n            }\r\n        };\r\n    }\r\n    shift() {\r\n        if (this._first === Node.Undefined) {\r\n            return undefined;\r\n        }\r\n        else {\r\n            const res = this._first.element;\r\n            this._remove(this._first);\r\n            return res;\r\n        }\r\n    }\r\n    pop() {\r\n        if (this._last === Node.Undefined) {\r\n            return undefined;\r\n        }\r\n        else {\r\n            const res = this._last.element;\r\n            this._remove(this._last);\r\n            return res;\r\n        }\r\n    }\r\n    _remove(node) {\r\n        if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\r\n            // middle\r\n            const anchor = node.prev;\r\n            anchor.next = node.next;\r\n            node.next.prev = anchor;\r\n        }\r\n        else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\r\n            // only node\r\n            this._first = Node.Undefined;\r\n            this._last = Node.Undefined;\r\n        }\r\n        else if (node.next === Node.Undefined) {\r\n            // last\r\n            this._last = this._last.prev;\r\n            this._last.next = Node.Undefined;\r\n        }\r\n        else if (node.prev === Node.Undefined) {\r\n            // first\r\n            this._first = this._first.next;\r\n            this._first.prev = Node.Undefined;\r\n        }\r\n        // done\r\n        this._size -= 1;\r\n    }\r\n    *[Symbol.iterator]() {\r\n        let node = this._first;\r\n        while (node !== Node.Undefined) {\r\n            yield node.element;\r\n            node = node.next;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}