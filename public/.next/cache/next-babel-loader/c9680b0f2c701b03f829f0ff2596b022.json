{"ast":null,"code":"import _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { HorizontalRange, VisibleRanges } from '../../../common/view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { CharacterMapping, RenderLineInput, renderViewLine, LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { ColorScheme } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\n\nvar canUseFastRenderedViewLine = function () {\n  if (platform.isNative) {\n    // In VSCode we know very well when the zoom level changes\n    return true;\n  }\n\n  if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n    // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n    // --\n    // Even though we read character widths correctly, having read them at a specific zoom level\n    // does not mean they are the same at the current zoom level.\n    // --\n    // This could be improved if we ever figure out how to get an event when browsers zoom,\n    // but until then we have to stick with reading client rects.\n    // --\n    // The same has been observed with Firefox on Windows7\n    // --\n    // The same has been oversved with Safari\n    return false;\n  }\n\n  return true;\n}();\n\nvar _monospaceAssumptionsAreValid = true;\nvar alwaysRenderInlineSelection = browser.isEdgeLegacy;\nexport var DomReadingContext = /*#__PURE__*/function () {\n  function DomReadingContext(domNode, endNode) {\n    _classCallCheck(this, DomReadingContext);\n\n    this._domNode = domNode;\n    this._clientRectDeltaLeft = 0;\n    this._clientRectDeltaLeftRead = false;\n    this.endNode = endNode;\n  }\n\n  _createClass(DomReadingContext, [{\n    key: \"clientRectDeltaLeft\",\n    get: function get() {\n      if (!this._clientRectDeltaLeftRead) {\n        this._clientRectDeltaLeftRead = true;\n        this._clientRectDeltaLeft = this._domNode.getBoundingClientRect().left;\n      }\n\n      return this._clientRectDeltaLeft;\n    }\n  }]);\n\n  return DomReadingContext;\n}();\nexport var ViewLineOptions = /*#__PURE__*/function () {\n  function ViewLineOptions(config, themeType) {\n    _classCallCheck(this, ViewLineOptions);\n\n    this.themeType = themeType;\n    var options = config.options;\n    var fontInfo = options.get(38\n    /* fontInfo */\n    );\n    this.renderWhitespace = options.get(83\n    /* renderWhitespace */\n    );\n    this.renderControlCharacters = options.get(77\n    /* renderControlCharacters */\n    );\n    this.spaceWidth = fontInfo.spaceWidth;\n    this.middotWidth = fontInfo.middotWidth;\n    this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n    this.useMonospaceOptimizations = fontInfo.isMonospace && !options.get(26\n    /* disableMonospaceOptimizations */\n    );\n    this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n    this.lineHeight = options.get(53\n    /* lineHeight */\n    );\n    this.stopRenderingLineAfter = options.get(100\n    /* stopRenderingLineAfter */\n    );\n    this.fontLigatures = options.get(39\n    /* fontLigatures */\n    );\n  }\n\n  _createClass(ViewLineOptions, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return this.themeType === other.themeType && this.renderWhitespace === other.renderWhitespace && this.renderControlCharacters === other.renderControlCharacters && this.spaceWidth === other.spaceWidth && this.middotWidth === other.middotWidth && this.wsmiddotWidth === other.wsmiddotWidth && this.useMonospaceOptimizations === other.useMonospaceOptimizations && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow && this.lineHeight === other.lineHeight && this.stopRenderingLineAfter === other.stopRenderingLineAfter && this.fontLigatures === other.fontLigatures;\n    }\n  }]);\n\n  return ViewLineOptions;\n}();\nexport var ViewLine = /*#__PURE__*/function () {\n  function ViewLine(options) {\n    _classCallCheck(this, ViewLine);\n\n    this._options = options;\n    this._isMaybeInvalid = true;\n    this._renderedViewLine = null;\n  } // --- begin IVisibleLineData\n\n\n  _createClass(ViewLine, [{\n    key: \"getDomNode\",\n    value: function getDomNode() {\n      if (this._renderedViewLine && this._renderedViewLine.domNode) {\n        return this._renderedViewLine.domNode.domNode;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"setDomNode\",\n    value: function setDomNode(domNode) {\n      if (this._renderedViewLine) {\n        this._renderedViewLine.domNode = createFastDomNode(domNode);\n      } else {\n        throw new Error('I have no rendered view line to set the dom node to...');\n      }\n    }\n  }, {\n    key: \"onContentChanged\",\n    value: function onContentChanged() {\n      this._isMaybeInvalid = true;\n    }\n  }, {\n    key: \"onTokensChanged\",\n    value: function onTokensChanged() {\n      this._isMaybeInvalid = true;\n    }\n  }, {\n    key: \"onDecorationsChanged\",\n    value: function onDecorationsChanged() {\n      this._isMaybeInvalid = true;\n    }\n  }, {\n    key: \"onOptionsChanged\",\n    value: function onOptionsChanged(newOptions) {\n      this._isMaybeInvalid = true;\n      this._options = newOptions;\n    }\n  }, {\n    key: \"onSelectionChanged\",\n    value: function onSelectionChanged() {\n      if (alwaysRenderInlineSelection || this._options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\n        this._isMaybeInvalid = true;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"renderLine\",\n    value: function renderLine(lineNumber, deltaTop, viewportData, sb) {\n      if (this._isMaybeInvalid === false) {\n        // it appears that nothing relevant has changed\n        return false;\n      }\n\n      this._isMaybeInvalid = false;\n      var lineData = viewportData.getViewLineRenderingData(lineNumber);\n      var options = this._options;\n      var actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn); // Only send selection information when needed for rendering whitespace\n\n      var selectionsOnLine = null;\n\n      if (alwaysRenderInlineSelection || options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\n        var selections = viewportData.selections;\n\n        var _iterator = _createForOfIteratorHelper(selections),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var selection = _step.value;\n\n            if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n              // Selection does not intersect line\n              continue;\n            }\n\n            var startColumn = selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn;\n            var endColumn = selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn;\n\n            if (startColumn < endColumn) {\n              if (options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace !== 'selection') {\n                actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0\n                /* Regular */\n                ));\n              } else {\n                if (!selectionsOnLine) {\n                  selectionsOnLine = [];\n                }\n\n                selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      var renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n\n      if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n        // no need to do anything, we have the same render input\n        return false;\n      }\n\n      sb.appendASCIIString('<div style=\"top:');\n      sb.appendASCIIString(String(deltaTop));\n      sb.appendASCIIString('px;height:');\n      sb.appendASCIIString(String(this._options.lineHeight));\n      sb.appendASCIIString('px;\" class=\"');\n      sb.appendASCIIString(ViewLine.CLASS_NAME);\n      sb.appendASCIIString('\">');\n      var output = renderViewLine(renderLineInput, sb);\n      sb.appendASCIIString('</div>');\n      var renderedViewLine = null;\n\n      if (_monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0\n      /* None */\n      ) {\n          if (lineData.content.length < 300 && renderLineInput.lineTokens.getCount() < 100) {\n            // Browser rounding errors have been observed in Chrome and IE, so using the fast\n            // view line only for short lines. Please test before removing the length check...\n            // ---\n            // Another rounding error has been observed on Linux in VSCode, where <span> width\n            // rounding errors add up to an observable large number...\n            // ---\n            // Also see another example of rounding errors on Windows in\n            // https://github.com/microsoft/vscode/issues/33178\n            renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n          }\n        }\n\n      if (!renderedViewLine) {\n        renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n      }\n\n      this._renderedViewLine = renderedViewLine;\n      return true;\n    }\n  }, {\n    key: \"layoutLine\",\n    value: function layoutLine(lineNumber, deltaTop) {\n      if (this._renderedViewLine && this._renderedViewLine.domNode) {\n        this._renderedViewLine.domNode.setTop(deltaTop);\n\n        this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n      }\n    } // --- end IVisibleLineData\n\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      if (!this._renderedViewLine) {\n        return 0;\n      }\n\n      return this._renderedViewLine.getWidth();\n    }\n  }, {\n    key: \"getWidthIsFast\",\n    value: function getWidthIsFast() {\n      if (!this._renderedViewLine) {\n        return true;\n      }\n\n      return this._renderedViewLine.getWidthIsFast();\n    }\n  }, {\n    key: \"needsMonospaceFontCheck\",\n    value: function needsMonospaceFontCheck() {\n      if (!this._renderedViewLine) {\n        return false;\n      }\n\n      return this._renderedViewLine instanceof FastRenderedViewLine;\n    }\n  }, {\n    key: \"monospaceAssumptionsAreValid\",\n    value: function monospaceAssumptionsAreValid() {\n      if (!this._renderedViewLine) {\n        return _monospaceAssumptionsAreValid;\n      }\n\n      if (this._renderedViewLine instanceof FastRenderedViewLine) {\n        return this._renderedViewLine.monospaceAssumptionsAreValid();\n      }\n\n      return _monospaceAssumptionsAreValid;\n    }\n  }, {\n    key: \"onMonospaceAssumptionsInvalidated\",\n    value: function onMonospaceAssumptionsInvalidated() {\n      if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n        this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n      }\n    }\n  }, {\n    key: \"getVisibleRangesForRange\",\n    value: function getVisibleRangesForRange(startColumn, endColumn, context) {\n      if (!this._renderedViewLine) {\n        return null;\n      }\n\n      startColumn = startColumn | 0; // @perf\n\n      endColumn = endColumn | 0; // @perf\n\n      startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n      endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n      var stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter | 0; // @perf\n\n      var outsideRenderedLine = false;\n\n      if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n        // This range is obviously not visible\n        outsideRenderedLine = true;\n      }\n\n      if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n        startColumn = stopRenderingLineAfter + 1;\n      }\n\n      if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n        endColumn = stopRenderingLineAfter + 1;\n      }\n\n      var horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(startColumn, endColumn, context);\n\n      if (horizontalRanges && horizontalRanges.length > 0) {\n        return new VisibleRanges(outsideRenderedLine, horizontalRanges);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getColumnOfNodeOffset\",\n    value: function getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n      if (!this._renderedViewLine) {\n        return 1;\n      }\n\n      return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\n    }\n  }]);\n\n  return ViewLine;\n}();\nViewLine.CLASS_NAME = 'view-line';\n/**\r\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\r\n */\n\nvar FastRenderedViewLine = /*#__PURE__*/function () {\n  function FastRenderedViewLine(domNode, renderLineInput, characterMapping) {\n    _classCallCheck(this, FastRenderedViewLine);\n\n    this.domNode = domNode;\n    this.input = renderLineInput;\n    this._characterMapping = characterMapping;\n    this._charWidth = renderLineInput.spaceWidth;\n  }\n\n  _createClass(FastRenderedViewLine, [{\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this._getCharPosition(this._characterMapping.length);\n    }\n  }, {\n    key: \"getWidthIsFast\",\n    value: function getWidthIsFast() {\n      return true;\n    }\n  }, {\n    key: \"monospaceAssumptionsAreValid\",\n    value: function monospaceAssumptionsAreValid() {\n      if (!this.domNode) {\n        return _monospaceAssumptionsAreValid;\n      }\n\n      var expectedWidth = this.getWidth();\n      var actualWidth = this.domNode.domNode.firstChild.offsetWidth;\n\n      if (Math.abs(expectedWidth - actualWidth) >= 2) {\n        // more than 2px off\n        console.warn(\"monospace assumptions have been violated, therefore disabling monospace optimizations!\");\n        _monospaceAssumptionsAreValid = false;\n      }\n\n      return _monospaceAssumptionsAreValid;\n    }\n  }, {\n    key: \"toSlowRenderedLine\",\n    value: function toSlowRenderedLine() {\n      return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0\n      /* None */\n      );\n    }\n  }, {\n    key: \"getVisibleRangesForRange\",\n    value: function getVisibleRangesForRange(startColumn, endColumn, context) {\n      var startPosition = this._getCharPosition(startColumn);\n\n      var endPosition = this._getCharPosition(endColumn);\n\n      return [new HorizontalRange(startPosition, endPosition - startPosition)];\n    }\n  }, {\n    key: \"_getCharPosition\",\n    value: function _getCharPosition(column) {\n      var charOffset = this._characterMapping.getAbsoluteOffsets();\n\n      if (charOffset.length === 0) {\n        // No characters on this line\n        return 0;\n      }\n\n      return Math.round(this._charWidth * charOffset[column - 1]);\n    }\n  }, {\n    key: \"getColumnOfNodeOffset\",\n    value: function getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n      var spanNodeTextContentLength = spanNode.textContent.length;\n      var spanIndex = -1;\n\n      while (spanNode) {\n        spanNode = spanNode.previousSibling;\n        spanIndex++;\n      }\n\n      var charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\n\n      return charOffset + 1;\n    }\n  }]);\n\n  return FastRenderedViewLine;\n}();\n/**\r\n * Every time we render a line, we save what we have rendered in an instance of this class.\r\n */\n\n\nvar RenderedViewLine = /*#__PURE__*/function () {\n  function RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    _classCallCheck(this, RenderedViewLine);\n\n    this.domNode = domNode;\n    this.input = renderLineInput;\n    this._characterMapping = characterMapping;\n    this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n    this._containsForeignElements = containsForeignElements;\n    this._cachedWidth = -1;\n    this._pixelOffsetCache = null;\n\n    if (!containsRTL || this._characterMapping.length === 0\n    /* the line is empty */\n    ) {\n        this._pixelOffsetCache = new Int32Array(Math.max(2, this._characterMapping.length + 1));\n\n        for (var column = 0, len = this._characterMapping.length; column <= len; column++) {\n          this._pixelOffsetCache[column] = -1;\n        }\n      }\n  } // --- Reading from the DOM methods\n\n\n  _createClass(RenderedViewLine, [{\n    key: \"_getReadingTarget\",\n    value: function _getReadingTarget(myDomNode) {\n      return myDomNode.domNode.firstChild;\n    }\n    /**\r\n     * Width of the line in pixels\r\n     */\n\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      if (!this.domNode) {\n        return 0;\n      }\n\n      if (this._cachedWidth === -1) {\n        this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n      }\n\n      return this._cachedWidth;\n    }\n  }, {\n    key: \"getWidthIsFast\",\n    value: function getWidthIsFast() {\n      if (this._cachedWidth === -1) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\r\n     * Visible ranges for a model range\r\n     */\n\n  }, {\n    key: \"getVisibleRangesForRange\",\n    value: function getVisibleRangesForRange(startColumn, endColumn, context) {\n      if (!this.domNode) {\n        return null;\n      }\n\n      if (this._pixelOffsetCache !== null) {\n        // the text is LTR\n        var startOffset = this._readPixelOffset(this.domNode, startColumn, context);\n\n        if (startOffset === -1) {\n          return null;\n        }\n\n        var endOffset = this._readPixelOffset(this.domNode, endColumn, context);\n\n        if (endOffset === -1) {\n          return null;\n        }\n\n        return [new HorizontalRange(startOffset, endOffset - startOffset)];\n      }\n\n      return this._readVisibleRangesForRange(this.domNode, startColumn, endColumn, context);\n    }\n  }, {\n    key: \"_readVisibleRangesForRange\",\n    value: function _readVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n      if (startColumn === endColumn) {\n        var pixelOffset = this._readPixelOffset(domNode, startColumn, context);\n\n        if (pixelOffset === -1) {\n          return null;\n        } else {\n          return [new HorizontalRange(pixelOffset, 0)];\n        }\n      } else {\n        return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n      }\n    }\n  }, {\n    key: \"_readPixelOffset\",\n    value: function _readPixelOffset(domNode, column, context) {\n      if (this._characterMapping.length === 0) {\n        // This line has no content\n        if (this._containsForeignElements === 0\n        /* None */\n        ) {\n            // We can assume the line is really empty\n            return 0;\n          }\n\n        if (this._containsForeignElements === 2\n        /* After */\n        ) {\n            // We have foreign elements after the (empty) line\n            return 0;\n          }\n\n        if (this._containsForeignElements === 1\n        /* Before */\n        ) {\n            // We have foreign elements before the (empty) line\n            return this.getWidth();\n          } // We have foreign elements before & after the (empty) line\n\n\n        var readingTarget = this._getReadingTarget(domNode);\n\n        if (readingTarget.firstChild) {\n          return readingTarget.firstChild.offsetWidth;\n        } else {\n          return 0;\n        }\n      }\n\n      if (this._pixelOffsetCache !== null) {\n        // the text is LTR\n        var cachedPixelOffset = this._pixelOffsetCache[column];\n\n        if (cachedPixelOffset !== -1) {\n          return cachedPixelOffset;\n        }\n\n        var result = this._actualReadPixelOffset(domNode, column, context);\n\n        this._pixelOffsetCache[column] = result;\n        return result;\n      }\n\n      return this._actualReadPixelOffset(domNode, column, context);\n    }\n  }, {\n    key: \"_actualReadPixelOffset\",\n    value: function _actualReadPixelOffset(domNode, column, context) {\n      if (this._characterMapping.length === 0) {\n        // This line has no content\n        var _r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context.clientRectDeltaLeft, context.endNode);\n\n        if (!_r || _r.length === 0) {\n          return -1;\n        }\n\n        return _r[0].left;\n      }\n\n      if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0\n      /* None */\n      ) {\n          // This branch helps in the case of whitespace only lines which have a width set\n          return this.getWidth();\n        }\n\n      var partData = this._characterMapping.charOffsetToPartData(column - 1);\n\n      var partIndex = CharacterMapping.getPartIndex(partData);\n      var charOffsetInPart = CharacterMapping.getCharIndex(partData);\n      var r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), partIndex, charOffsetInPart, partIndex, charOffsetInPart, context.clientRectDeltaLeft, context.endNode);\n\n      if (!r || r.length === 0) {\n        return -1;\n      }\n\n      var result = r[0].left;\n\n      if (this.input.isBasicASCII) {\n        var charOffset = this._characterMapping.getAbsoluteOffsets();\n\n        var expectedResult = Math.round(this.input.spaceWidth * charOffset[column - 1]);\n\n        if (Math.abs(expectedResult - result) <= 1) {\n          return expectedResult;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_readRawVisibleRangesForRange\",\n    value: function _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n      if (startColumn === 1 && endColumn === this._characterMapping.length) {\n        // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n        return [new HorizontalRange(0, this.getWidth())];\n      }\n\n      var startPartData = this._characterMapping.charOffsetToPartData(startColumn - 1);\n\n      var startPartIndex = CharacterMapping.getPartIndex(startPartData);\n      var startCharOffsetInPart = CharacterMapping.getCharIndex(startPartData);\n\n      var endPartData = this._characterMapping.charOffsetToPartData(endColumn - 1);\n\n      var endPartIndex = CharacterMapping.getPartIndex(endPartData);\n      var endCharOffsetInPart = CharacterMapping.getCharIndex(endPartData);\n      return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startPartIndex, startCharOffsetInPart, endPartIndex, endCharOffsetInPart, context.clientRectDeltaLeft, context.endNode);\n    }\n    /**\r\n     * Returns the column for the text found at a specific offset inside a rendered dom node\r\n     */\n\n  }, {\n    key: \"getColumnOfNodeOffset\",\n    value: function getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n      var spanNodeTextContentLength = spanNode.textContent.length;\n      var spanIndex = -1;\n\n      while (spanNode) {\n        spanNode = spanNode.previousSibling;\n        spanIndex++;\n      }\n\n      var charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\n\n      return charOffset + 1;\n    }\n  }]);\n\n  return RenderedViewLine;\n}();\n\nvar WebKitRenderedViewLine = /*#__PURE__*/function (_RenderedViewLine) {\n  _inherits(WebKitRenderedViewLine, _RenderedViewLine);\n\n  var _super = _createSuper(WebKitRenderedViewLine);\n\n  function WebKitRenderedViewLine() {\n    _classCallCheck(this, WebKitRenderedViewLine);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WebKitRenderedViewLine, [{\n    key: \"_readVisibleRangesForRange\",\n    value: function _readVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n      var output = _get(_getPrototypeOf(WebKitRenderedViewLine.prototype), \"_readVisibleRangesForRange\", this).call(this, domNode, startColumn, endColumn, context);\n\n      if (!output || output.length === 0 || startColumn === endColumn || startColumn === 1 && endColumn === this._characterMapping.length) {\n        return output;\n      } // WebKit is buggy and returns an expanded range (to contain words in some cases)\n      // The last client rect is enlarged (I think)\n\n\n      if (!this.input.containsRTL) {\n        // This is an attempt to patch things up\n        // Find position of last column\n        var endPixelOffset = this._readPixelOffset(domNode, endColumn, context);\n\n        if (endPixelOffset !== -1) {\n          var lastRange = output[output.length - 1];\n\n          if (lastRange.left < endPixelOffset) {\n            // Trim down the width of the last visible range to not go after the last column's position\n            lastRange.width = endPixelOffset - lastRange.left;\n          }\n        }\n      }\n\n      return output;\n    }\n  }]);\n\n  return WebKitRenderedViewLine;\n}(RenderedViewLine);\n\nvar createRenderedLine = function () {\n  if (browser.isWebKit) {\n    return createWebKitRenderedLine;\n  }\n\n  return createNormalRenderedLine;\n}();\n\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n  return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n  return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLine.js"],"names":["browser","createFastDomNode","platform","RangeUtil","HorizontalRange","VisibleRanges","LineDecoration","CharacterMapping","RenderLineInput","renderViewLine","LineRange","ColorScheme","EditorFontLigatures","canUseFastRenderedViewLine","isNative","isLinux","isFirefox","isSafari","monospaceAssumptionsAreValid","alwaysRenderInlineSelection","isEdgeLegacy","DomReadingContext","domNode","endNode","_domNode","_clientRectDeltaLeft","_clientRectDeltaLeftRead","getBoundingClientRect","left","ViewLineOptions","config","themeType","options","fontInfo","get","renderWhitespace","renderControlCharacters","spaceWidth","middotWidth","wsmiddotWidth","useMonospaceOptimizations","isMonospace","canUseHalfwidthRightwardsArrow","lineHeight","stopRenderingLineAfter","fontLigatures","other","ViewLine","_options","_isMaybeInvalid","_renderedViewLine","Error","newOptions","HIGH_CONTRAST","lineNumber","deltaTop","viewportData","sb","lineData","getViewLineRenderingData","actualInlineDecorations","filter","inlineDecorations","minColumn","maxColumn","selectionsOnLine","selections","selection","endLineNumber","startLineNumber","startColumn","endColumn","push","renderLineInput","content","continuesWithWrappedLine","isBasicASCII","containsRTL","tokens","tabSize","startVisibleColumn","OFF","input","equals","appendASCIIString","String","CLASS_NAME","output","renderedViewLine","containsForeignElements","length","lineTokens","getCount","FastRenderedViewLine","characterMapping","createRenderedLine","setTop","setHeight","getWidth","getWidthIsFast","toSlowRenderedLine","context","Math","min","lineContent","max","outsideRenderedLine","horizontalRanges","getVisibleRangesForRange","spanNode","offset","getColumnOfNodeOffset","_characterMapping","_charWidth","_getCharPosition","expectedWidth","actualWidth","firstChild","offsetWidth","abs","console","warn","startPosition","endPosition","column","charOffset","getAbsoluteOffsets","round","spanNodeTextContentLength","textContent","spanIndex","previousSibling","partDataToCharOffset","RenderedViewLine","_isWhitespaceOnly","test","_containsForeignElements","_cachedWidth","_pixelOffsetCache","Int32Array","len","myDomNode","_getReadingTarget","startOffset","_readPixelOffset","endOffset","_readVisibleRangesForRange","pixelOffset","_readRawVisibleRangesForRange","readingTarget","cachedPixelOffset","result","_actualReadPixelOffset","r","readHorizontalRanges","clientRectDeltaLeft","partData","charOffsetToPartData","partIndex","getPartIndex","charOffsetInPart","getCharIndex","expectedResult","startPartData","startPartIndex","startCharOffsetInPart","endPartData","endPartIndex","endCharOffsetInPart","WebKitRenderedViewLine","endPixelOffset","lastRange","width","isWebKit","createWebKitRenderedLine","createNormalRenderedLine"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAZ,MAAyB,qCAAzB;AACA,SAASC,iBAAT,QAAkC,yCAAlC;AACA,OAAO,KAAKC,QAAZ,MAA0B,qCAA1B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,0CAA/C;AACA,SAASC,cAAT,QAA+B,+CAA/B;AACA,SAASC,gBAAT,EAA2BC,eAA3B,EAA4CC,cAA5C,EAA4DC,SAA5D,QAA6E,gDAA7E;AACA,SAASC,WAAT,QAA4B,4CAA5B;AACA,SAASC,mBAAT,QAAoC,yCAApC;;AACA,IAAMC,0BAA0B,GAAI,YAAY;AAC5C,MAAIX,QAAQ,CAACY,QAAb,EAAuB;AACnB;AACA,WAAO,IAAP;AACH;;AACD,MAAIZ,QAAQ,CAACa,OAAT,IAAoBf,OAAO,CAACgB,SAA5B,IAAyChB,OAAO,CAACiB,QAArD,EAA+D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH,CApBkC,EAAnC;;AAqBA,IAAIC,6BAA4B,GAAG,IAAnC;AACA,IAAMC,2BAA2B,GAAInB,OAAO,CAACoB,YAA7C;AACA,WAAaC,iBAAb;AACI,6BAAYC,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;;AAC1B,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,oBAAL,GAA4B,CAA5B;AACA,SAAKC,wBAAL,GAAgC,KAAhC;AACA,SAAKH,OAAL,GAAeA,OAAf;AACH;;AANL;AAAA;AAAA,wBAO8B;AACtB,UAAI,CAAC,KAAKG,wBAAV,EAAoC;AAChC,aAAKA,wBAAL,GAAgC,IAAhC;AACA,aAAKD,oBAAL,GAA4B,KAAKD,QAAL,CAAcG,qBAAd,GAAsCC,IAAlE;AACH;;AACD,aAAO,KAAKH,oBAAZ;AACH;AAbL;;AAAA;AAAA;AAeA,WAAaI,eAAb;AACI,2BAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAC3B,SAAKA,SAAL,GAAiBA,SAAjB;AACA,QAAMC,OAAO,GAAGF,MAAM,CAACE,OAAvB;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,KAAjB;AACA,SAAKC,gBAAL,GAAwBH,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,KAAxB;AACA,SAAKE,uBAAL,GAA+BJ,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,KAA/B;AACA,SAAKG,UAAL,GAAkBJ,QAAQ,CAACI,UAA3B;AACA,SAAKC,WAAL,GAAmBL,QAAQ,CAACK,WAA5B;AACA,SAAKC,aAAL,GAAqBN,QAAQ,CAACM,aAA9B;AACA,SAAKC,yBAAL,GAAkCP,QAAQ,CAACQ,WAAT,IAC3B,CAACT,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,KADR;AAEA,SAAKQ,8BAAL,GAAsCT,QAAQ,CAACS,8BAA/C;AACA,SAAKC,UAAL,GAAkBX,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,KAAlB;AACA,SAAKU,sBAAL,GAA8BZ,OAAO,CAACE,GAAR,CAAY;AAAI;AAAhB,KAA9B;AACA,SAAKW,aAAL,GAAqBb,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,KAArB;AACH;;AAhBL;AAAA;AAAA,2BAiBWY,KAjBX,EAiBkB;AACV,aAAQ,KAAKf,SAAL,KAAmBe,KAAK,CAACf,SAAzB,IACD,KAAKI,gBAAL,KAA0BW,KAAK,CAACX,gBAD/B,IAED,KAAKC,uBAAL,KAAiCU,KAAK,CAACV,uBAFtC,IAGD,KAAKC,UAAL,KAAoBS,KAAK,CAACT,UAHzB,IAID,KAAKC,WAAL,KAAqBQ,KAAK,CAACR,WAJ1B,IAKD,KAAKC,aAAL,KAAuBO,KAAK,CAACP,aAL5B,IAMD,KAAKC,yBAAL,KAAmCM,KAAK,CAACN,yBANxC,IAOD,KAAKE,8BAAL,KAAwCI,KAAK,CAACJ,8BAP7C,IAQD,KAAKC,UAAL,KAAoBG,KAAK,CAACH,UARzB,IASD,KAAKC,sBAAL,KAAgCE,KAAK,CAACF,sBATrC,IAUD,KAAKC,aAAL,KAAuBC,KAAK,CAACD,aAVpC;AAWH;AA7BL;;AAAA;AAAA;AA+BA,WAAaE,QAAb;AACI,oBAAYf,OAAZ,EAAqB;AAAA;;AACjB,SAAKgB,QAAL,GAAgBhB,OAAhB;AACA,SAAKiB,eAAL,GAAuB,IAAvB;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACH,GALL,CAMI;;;AANJ;AAAA;AAAA,iCAOiB;AACT,UAAI,KAAKA,iBAAL,IAA0B,KAAKA,iBAAL,CAAuB5B,OAArD,EAA8D;AAC1D,eAAO,KAAK4B,iBAAL,CAAuB5B,OAAvB,CAA+BA,OAAtC;AACH;;AACD,aAAO,IAAP;AACH;AAZL;AAAA;AAAA,+BAaeA,OAbf,EAawB;AAChB,UAAI,KAAK4B,iBAAT,EAA4B;AACxB,aAAKA,iBAAL,CAAuB5B,OAAvB,GAAiCrB,iBAAiB,CAACqB,OAAD,CAAlD;AACH,OAFD,MAGK;AACD,cAAM,IAAI6B,KAAJ,CAAU,wDAAV,CAAN;AACH;AACJ;AApBL;AAAA;AAAA,uCAqBuB;AACf,WAAKF,eAAL,GAAuB,IAAvB;AACH;AAvBL;AAAA;AAAA,sCAwBsB;AACd,WAAKA,eAAL,GAAuB,IAAvB;AACH;AA1BL;AAAA;AAAA,2CA2B2B;AACnB,WAAKA,eAAL,GAAuB,IAAvB;AACH;AA7BL;AAAA;AAAA,qCA8BqBG,UA9BrB,EA8BiC;AACzB,WAAKH,eAAL,GAAuB,IAAvB;AACA,WAAKD,QAAL,GAAgBI,UAAhB;AACH;AAjCL;AAAA;AAAA,yCAkCyB;AACjB,UAAIjC,2BAA2B,IAAI,KAAK6B,QAAL,CAAcjB,SAAd,KAA4BpB,WAAW,CAAC0C,aAAvE,IAAwF,KAAKL,QAAL,CAAcb,gBAAd,KAAmC,WAA/H,EAA4I;AACxI,aAAKc,eAAL,GAAuB,IAAvB;AACA,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;AAxCL;AAAA;AAAA,+BAyCeK,UAzCf,EAyC2BC,QAzC3B,EAyCqCC,YAzCrC,EAyCmDC,EAzCnD,EAyCuD;AAC/C,UAAI,KAAKR,eAAL,KAAyB,KAA7B,EAAoC;AAChC;AACA,eAAO,KAAP;AACH;;AACD,WAAKA,eAAL,GAAuB,KAAvB;AACA,UAAMS,QAAQ,GAAGF,YAAY,CAACG,wBAAb,CAAsCL,UAAtC,CAAjB;AACA,UAAMtB,OAAO,GAAG,KAAKgB,QAArB;AACA,UAAMY,uBAAuB,GAAGtD,cAAc,CAACuD,MAAf,CAAsBH,QAAQ,CAACI,iBAA/B,EAAkDR,UAAlD,EAA8DI,QAAQ,CAACK,SAAvE,EAAkFL,QAAQ,CAACM,SAA3F,CAAhC,CAR+C,CAS/C;;AACA,UAAIC,gBAAgB,GAAG,IAAvB;;AACA,UAAI9C,2BAA2B,IAAIa,OAAO,CAACD,SAAR,KAAsBpB,WAAW,CAAC0C,aAAjE,IAAkF,KAAKL,QAAL,CAAcb,gBAAd,KAAmC,WAAzH,EAAsI;AAClI,YAAM+B,UAAU,GAAGV,YAAY,CAACU,UAAhC;;AADkI,mDAE1GA,UAF0G;AAAA;;AAAA;AAElI,8DAAoC;AAAA,gBAAzBC,SAAyB;;AAChC,gBAAIA,SAAS,CAACC,aAAV,GAA0Bd,UAA1B,IAAwCa,SAAS,CAACE,eAAV,GAA4Bf,UAAxE,EAAoF;AAChF;AACA;AACH;;AACD,gBAAMgB,WAAW,GAAIH,SAAS,CAACE,eAAV,KAA8Bf,UAA9B,GAA2Ca,SAAS,CAACG,WAArD,GAAmEZ,QAAQ,CAACK,SAAjG;AACA,gBAAMQ,SAAS,GAAIJ,SAAS,CAACC,aAAV,KAA4Bd,UAA5B,GAAyCa,SAAS,CAACI,SAAnD,GAA+Db,QAAQ,CAACM,SAA3F;;AACA,gBAAIM,WAAW,GAAGC,SAAlB,EAA6B;AACzB,kBAAIvC,OAAO,CAACD,SAAR,KAAsBpB,WAAW,CAAC0C,aAAlC,IAAmD,KAAKL,QAAL,CAAcb,gBAAd,KAAmC,WAA1F,EAAuG;AACnGyB,gBAAAA,uBAAuB,CAACY,IAAxB,CAA6B,IAAIlE,cAAJ,CAAmBgE,WAAnB,EAAgCC,SAAhC,EAA2C,sBAA3C,EAAmE;AAAE;AAArE,iBAA7B;AACH,eAFD,MAGK;AACD,oBAAI,CAACN,gBAAL,EAAuB;AACnBA,kBAAAA,gBAAgB,GAAG,EAAnB;AACH;;AACDA,gBAAAA,gBAAgB,CAACO,IAAjB,CAAsB,IAAI9D,SAAJ,CAAc4D,WAAW,GAAG,CAA5B,EAA+BC,SAAS,GAAG,CAA3C,CAAtB;AACH;AACJ;AACJ;AApBiI;AAAA;AAAA;AAAA;AAAA;AAqBrI;;AACD,UAAME,eAAe,GAAG,IAAIjE,eAAJ,CAAoBwB,OAAO,CAACQ,yBAA5B,EAAuDR,OAAO,CAACU,8BAA/D,EAA+FgB,QAAQ,CAACgB,OAAxG,EAAiHhB,QAAQ,CAACiB,wBAA1H,EAAoJjB,QAAQ,CAACkB,YAA7J,EAA2KlB,QAAQ,CAACmB,WAApL,EAAiMnB,QAAQ,CAACK,SAAT,GAAqB,CAAtN,EAAyNL,QAAQ,CAACoB,MAAlO,EAA0OlB,uBAA1O,EAAmQF,QAAQ,CAACqB,OAA5Q,EAAqRrB,QAAQ,CAACsB,kBAA9R,EAAkThD,OAAO,CAACK,UAA1T,EAAsUL,OAAO,CAACM,WAA9U,EAA2VN,OAAO,CAACO,aAAnW,EAAkXP,OAAO,CAACY,sBAA1X,EAAkZZ,OAAO,CAACG,gBAA1Z,EAA4aH,OAAO,CAACI,uBAApb,EAA6cJ,OAAO,CAACa,aAAR,KAA0BjC,mBAAmB,CAACqE,GAA3f,EAAggBhB,gBAAhgB,CAAxB;;AACA,UAAI,KAAKf,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBgC,KAAvB,CAA6BC,MAA7B,CAAoCV,eAApC,CAA9B,EAAoF;AAChF;AACA,eAAO,KAAP;AACH;;AACDhB,MAAAA,EAAE,CAAC2B,iBAAH,CAAqB,kBAArB;AACA3B,MAAAA,EAAE,CAAC2B,iBAAH,CAAqBC,MAAM,CAAC9B,QAAD,CAA3B;AACAE,MAAAA,EAAE,CAAC2B,iBAAH,CAAqB,YAArB;AACA3B,MAAAA,EAAE,CAAC2B,iBAAH,CAAqBC,MAAM,CAAC,KAAKrC,QAAL,CAAcL,UAAf,CAA3B;AACAc,MAAAA,EAAE,CAAC2B,iBAAH,CAAqB,cAArB;AACA3B,MAAAA,EAAE,CAAC2B,iBAAH,CAAqBrC,QAAQ,CAACuC,UAA9B;AACA7B,MAAAA,EAAE,CAAC2B,iBAAH,CAAqB,IAArB;AACA,UAAMG,MAAM,GAAG9E,cAAc,CAACgE,eAAD,EAAkBhB,EAAlB,CAA7B;AACAA,MAAAA,EAAE,CAAC2B,iBAAH,CAAqB,QAArB;AACA,UAAII,gBAAgB,GAAG,IAAvB;;AACA,UAAItE,6BAA4B,IAAIL,0BAAhC,IAA8D6C,QAAQ,CAACkB,YAAvE,IAAuF5C,OAAO,CAACQ,yBAA/F,IAA4H+C,MAAM,CAACE,uBAAP,KAAmC;AAAE;AAArK,QAAiL;AAC7K,cAAI/B,QAAQ,CAACgB,OAAT,CAAiBgB,MAAjB,GAA0B,GAA1B,IAAiCjB,eAAe,CAACkB,UAAhB,CAA2BC,QAA3B,KAAwC,GAA7E,EAAkF;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,YAAAA,gBAAgB,GAAG,IAAIK,oBAAJ,CAAyB,KAAK3C,iBAAL,GAAyB,KAAKA,iBAAL,CAAuB5B,OAAhD,GAA0D,IAAnF,EAAyFmD,eAAzF,EAA0Gc,MAAM,CAACO,gBAAjH,CAAnB;AACH;AACJ;;AACD,UAAI,CAACN,gBAAL,EAAuB;AACnBA,QAAAA,gBAAgB,GAAGO,kBAAkB,CAAC,KAAK7C,iBAAL,GAAyB,KAAKA,iBAAL,CAAuB5B,OAAhD,GAA0D,IAA3D,EAAiEmD,eAAjE,EAAkFc,MAAM,CAACO,gBAAzF,EAA2GP,MAAM,CAACV,WAAlH,EAA+HU,MAAM,CAACE,uBAAtI,CAArC;AACH;;AACD,WAAKvC,iBAAL,GAAyBsC,gBAAzB;AACA,aAAO,IAAP;AACH;AA3GL;AAAA;AAAA,+BA4GelC,UA5Gf,EA4G2BC,QA5G3B,EA4GqC;AAC7B,UAAI,KAAKL,iBAAL,IAA0B,KAAKA,iBAAL,CAAuB5B,OAArD,EAA8D;AAC1D,aAAK4B,iBAAL,CAAuB5B,OAAvB,CAA+B0E,MAA/B,CAAsCzC,QAAtC;;AACA,aAAKL,iBAAL,CAAuB5B,OAAvB,CAA+B2E,SAA/B,CAAyC,KAAKjD,QAAL,CAAcL,UAAvD;AACH;AACJ,KAjHL,CAkHI;;AAlHJ;AAAA;AAAA,+BAmHe;AACP,UAAI,CAAC,KAAKO,iBAAV,EAA6B;AACzB,eAAO,CAAP;AACH;;AACD,aAAO,KAAKA,iBAAL,CAAuBgD,QAAvB,EAAP;AACH;AAxHL;AAAA;AAAA,qCAyHqB;AACb,UAAI,CAAC,KAAKhD,iBAAV,EAA6B;AACzB,eAAO,IAAP;AACH;;AACD,aAAO,KAAKA,iBAAL,CAAuBiD,cAAvB,EAAP;AACH;AA9HL;AAAA;AAAA,8CA+H8B;AACtB,UAAI,CAAC,KAAKjD,iBAAV,EAA6B;AACzB,eAAO,KAAP;AACH;;AACD,aAAQ,KAAKA,iBAAL,YAAkC2C,oBAA1C;AACH;AApIL;AAAA;AAAA,mDAqImC;AAC3B,UAAI,CAAC,KAAK3C,iBAAV,EAA6B;AACzB,eAAOhC,6BAAP;AACH;;AACD,UAAI,KAAKgC,iBAAL,YAAkC2C,oBAAtC,EAA4D;AACxD,eAAO,KAAK3C,iBAAL,CAAuBhC,4BAAvB,EAAP;AACH;;AACD,aAAOA,6BAAP;AACH;AA7IL;AAAA;AAAA,wDA8IwC;AAChC,UAAI,KAAKgC,iBAAL,IAA0B,KAAKA,iBAAL,YAAkC2C,oBAAhE,EAAsF;AAClF,aAAK3C,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBkD,kBAAvB,EAAzB;AACH;AACJ;AAlJL;AAAA;AAAA,6CAmJ6B9B,WAnJ7B,EAmJ0CC,SAnJ1C,EAmJqD8B,OAnJrD,EAmJ8D;AACtD,UAAI,CAAC,KAAKnD,iBAAV,EAA6B;AACzB,eAAO,IAAP;AACH;;AACDoB,MAAAA,WAAW,GAAGA,WAAW,GAAG,CAA5B,CAJsD,CAIvB;;AAC/BC,MAAAA,SAAS,GAAGA,SAAS,GAAG,CAAxB,CALsD,CAK3B;;AAC3BD,MAAAA,WAAW,GAAGgC,IAAI,CAACC,GAAL,CAAS,KAAKrD,iBAAL,CAAuBgC,KAAvB,CAA6BsB,WAA7B,CAAyCd,MAAzC,GAAkD,CAA3D,EAA8DY,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYnC,WAAZ,CAA9D,CAAd;AACAC,MAAAA,SAAS,GAAG+B,IAAI,CAACC,GAAL,CAAS,KAAKrD,iBAAL,CAAuBgC,KAAvB,CAA6BsB,WAA7B,CAAyCd,MAAzC,GAAkD,CAA3D,EAA8DY,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYlC,SAAZ,CAA9D,CAAZ;AACA,UAAM3B,sBAAsB,GAAG,KAAKM,iBAAL,CAAuBgC,KAAvB,CAA6BtC,sBAA7B,GAAsD,CAArF,CARsD,CAQkC;;AACxF,UAAI8D,mBAAmB,GAAG,KAA1B;;AACA,UAAI9D,sBAAsB,KAAK,CAAC,CAA5B,IAAiC0B,WAAW,GAAG1B,sBAAsB,GAAG,CAAxE,IAA6E2B,SAAS,GAAG3B,sBAAsB,GAAG,CAAtH,EAAyH;AACrH;AACA8D,QAAAA,mBAAmB,GAAG,IAAtB;AACH;;AACD,UAAI9D,sBAAsB,KAAK,CAAC,CAA5B,IAAiC0B,WAAW,GAAG1B,sBAAsB,GAAG,CAA5E,EAA+E;AAC3E0B,QAAAA,WAAW,GAAG1B,sBAAsB,GAAG,CAAvC;AACH;;AACD,UAAIA,sBAAsB,KAAK,CAAC,CAA5B,IAAiC2B,SAAS,GAAG3B,sBAAsB,GAAG,CAA1E,EAA6E;AACzE2B,QAAAA,SAAS,GAAG3B,sBAAsB,GAAG,CAArC;AACH;;AACD,UAAM+D,gBAAgB,GAAG,KAAKzD,iBAAL,CAAuB0D,wBAAvB,CAAgDtC,WAAhD,EAA6DC,SAA7D,EAAwE8B,OAAxE,CAAzB;;AACA,UAAIM,gBAAgB,IAAIA,gBAAgB,CAACjB,MAAjB,GAA0B,CAAlD,EAAqD;AACjD,eAAO,IAAIrF,aAAJ,CAAkBqG,mBAAlB,EAAuCC,gBAAvC,CAAP;AACH;;AACD,aAAO,IAAP;AACH;AA5KL;AAAA;AAAA,0CA6K0BrD,UA7K1B,EA6KsCuD,QA7KtC,EA6KgDC,MA7KhD,EA6KwD;AAChD,UAAI,CAAC,KAAK5D,iBAAV,EAA6B;AACzB,eAAO,CAAP;AACH;;AACD,aAAO,KAAKA,iBAAL,CAAuB6D,qBAAvB,CAA6CzD,UAA7C,EAAyDuD,QAAzD,EAAmEC,MAAnE,CAAP;AACH;AAlLL;;AAAA;AAAA;AAoLA/D,QAAQ,CAACuC,UAAT,GAAsB,WAAtB;AACA;AACA;AACA;;IACMO,oB;AACF,gCAAYvE,OAAZ,EAAqBmD,eAArB,EAAsCqB,gBAAtC,EAAwD;AAAA;;AACpD,SAAKxE,OAAL,GAAeA,OAAf;AACA,SAAK4D,KAAL,GAAaT,eAAb;AACA,SAAKuC,iBAAL,GAAyBlB,gBAAzB;AACA,SAAKmB,UAAL,GAAkBxC,eAAe,CAACpC,UAAlC;AACH;;;;+BACU;AACP,aAAO,KAAK6E,gBAAL,CAAsB,KAAKF,iBAAL,CAAuBtB,MAA7C,CAAP;AACH;;;qCACgB;AACb,aAAO,IAAP;AACH;;;mDAC8B;AAC3B,UAAI,CAAC,KAAKpE,OAAV,EAAmB;AACf,eAAOJ,6BAAP;AACH;;AACD,UAAMiG,aAAa,GAAG,KAAKjB,QAAL,EAAtB;AACA,UAAMkB,WAAW,GAAG,KAAK9F,OAAL,CAAaA,OAAb,CAAqB+F,UAArB,CAAgCC,WAApD;;AACA,UAAIhB,IAAI,CAACiB,GAAL,CAASJ,aAAa,GAAGC,WAAzB,KAAyC,CAA7C,EAAgD;AAC5C;AACAI,QAAAA,OAAO,CAACC,IAAR;AACAvG,QAAAA,6BAA4B,GAAG,KAA/B;AACH;;AACD,aAAOA,6BAAP;AACH;;;yCACoB;AACjB,aAAO6E,kBAAkB,CAAC,KAAKzE,OAAN,EAAe,KAAK4D,KAApB,EAA2B,KAAK8B,iBAAhC,EAAmD,KAAnD,EAA0D;AAAE;AAA5D,OAAzB;AACH;;;6CACwB1C,W,EAAaC,S,EAAW8B,O,EAAS;AACtD,UAAMqB,aAAa,GAAG,KAAKR,gBAAL,CAAsB5C,WAAtB,CAAtB;;AACA,UAAMqD,WAAW,GAAG,KAAKT,gBAAL,CAAsB3C,SAAtB,CAApB;;AACA,aAAO,CAAC,IAAInE,eAAJ,CAAoBsH,aAApB,EAAmCC,WAAW,GAAGD,aAAjD,CAAD,CAAP;AACH;;;qCACgBE,M,EAAQ;AACrB,UAAMC,UAAU,GAAG,KAAKb,iBAAL,CAAuBc,kBAAvB,EAAnB;;AACA,UAAID,UAAU,CAACnC,MAAX,KAAsB,CAA1B,EAA6B;AACzB;AACA,eAAO,CAAP;AACH;;AACD,aAAOY,IAAI,CAACyB,KAAL,CAAW,KAAKd,UAAL,GAAkBY,UAAU,CAACD,MAAM,GAAG,CAAV,CAAvC,CAAP;AACH;;;0CACqBtE,U,EAAYuD,Q,EAAUC,M,EAAQ;AAChD,UAAMkB,yBAAyB,GAAGnB,QAAQ,CAACoB,WAAT,CAAqBvC,MAAvD;AACA,UAAIwC,SAAS,GAAG,CAAC,CAAjB;;AACA,aAAOrB,QAAP,EAAiB;AACbA,QAAAA,QAAQ,GAAGA,QAAQ,CAACsB,eAApB;AACAD,QAAAA,SAAS;AACZ;;AACD,UAAML,UAAU,GAAG,KAAKb,iBAAL,CAAuBoB,oBAAvB,CAA4CF,SAA5C,EAAuDF,yBAAvD,EAAkFlB,MAAlF,CAAnB;;AACA,aAAOe,UAAU,GAAG,CAApB;AACH;;;;;AAEL;AACA;AACA;;;IACMQ,gB;AACF,4BAAY/G,OAAZ,EAAqBmD,eAArB,EAAsCqB,gBAAtC,EAAwDjB,WAAxD,EAAqEY,uBAArE,EAA8F;AAAA;;AAC1F,SAAKnE,OAAL,GAAeA,OAAf;AACA,SAAK4D,KAAL,GAAaT,eAAb;AACA,SAAKuC,iBAAL,GAAyBlB,gBAAzB;AACA,SAAKwC,iBAAL,GAAyB,QAAQC,IAAR,CAAa9D,eAAe,CAAC+B,WAA7B,CAAzB;AACA,SAAKgC,wBAAL,GAAgC/C,uBAAhC;AACA,SAAKgD,YAAL,GAAoB,CAAC,CAArB;AACA,SAAKC,iBAAL,GAAyB,IAAzB;;AACA,QAAI,CAAC7D,WAAD,IAAgB,KAAKmC,iBAAL,CAAuBtB,MAAvB,KAAkC;AAAE;AAAxD,MAAiF;AAC7E,aAAKgD,iBAAL,GAAyB,IAAIC,UAAJ,CAAerC,IAAI,CAACG,GAAL,CAAS,CAAT,EAAY,KAAKO,iBAAL,CAAuBtB,MAAvB,GAAgC,CAA5C,CAAf,CAAzB;;AACA,aAAK,IAAIkC,MAAM,GAAG,CAAb,EAAgBgB,GAAG,GAAG,KAAK5B,iBAAL,CAAuBtB,MAAlD,EAA0DkC,MAAM,IAAIgB,GAApE,EAAyEhB,MAAM,EAA/E,EAAmF;AAC/E,eAAKc,iBAAL,CAAuBd,MAAvB,IAAiC,CAAC,CAAlC;AACH;AACJ;AACJ,G,CACD;;;;;sCACkBiB,S,EAAW;AACzB,aAAOA,SAAS,CAACvH,OAAV,CAAkB+F,UAAzB;AACH;AACD;AACJ;AACA;;;;+BACe;AACP,UAAI,CAAC,KAAK/F,OAAV,EAAmB;AACf,eAAO,CAAP;AACH;;AACD,UAAI,KAAKmH,YAAL,KAAsB,CAAC,CAA3B,EAA8B;AAC1B,aAAKA,YAAL,GAAoB,KAAKK,iBAAL,CAAuB,KAAKxH,OAA5B,EAAqCgG,WAAzD;AACH;;AACD,aAAO,KAAKmB,YAAZ;AACH;;;qCACgB;AACb,UAAI,KAAKA,YAAL,KAAsB,CAAC,CAA3B,EAA8B;AAC1B,eAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACH;AACD;AACJ;AACA;;;;6CAC6BnE,W,EAAaC,S,EAAW8B,O,EAAS;AACtD,UAAI,CAAC,KAAK/E,OAAV,EAAmB;AACf,eAAO,IAAP;AACH;;AACD,UAAI,KAAKoH,iBAAL,KAA2B,IAA/B,EAAqC;AACjC;AACA,YAAMK,WAAW,GAAG,KAAKC,gBAAL,CAAsB,KAAK1H,OAA3B,EAAoCgD,WAApC,EAAiD+B,OAAjD,CAApB;;AACA,YAAI0C,WAAW,KAAK,CAAC,CAArB,EAAwB;AACpB,iBAAO,IAAP;AACH;;AACD,YAAME,SAAS,GAAG,KAAKD,gBAAL,CAAsB,KAAK1H,OAA3B,EAAoCiD,SAApC,EAA+C8B,OAA/C,CAAlB;;AACA,YAAI4C,SAAS,KAAK,CAAC,CAAnB,EAAsB;AAClB,iBAAO,IAAP;AACH;;AACD,eAAO,CAAC,IAAI7I,eAAJ,CAAoB2I,WAApB,EAAiCE,SAAS,GAAGF,WAA7C,CAAD,CAAP;AACH;;AACD,aAAO,KAAKG,0BAAL,CAAgC,KAAK5H,OAArC,EAA8CgD,WAA9C,EAA2DC,SAA3D,EAAsE8B,OAAtE,CAAP;AACH;;;+CAC0B/E,O,EAASgD,W,EAAaC,S,EAAW8B,O,EAAS;AACjE,UAAI/B,WAAW,KAAKC,SAApB,EAA+B;AAC3B,YAAM4E,WAAW,GAAG,KAAKH,gBAAL,CAAsB1H,OAAtB,EAA+BgD,WAA/B,EAA4C+B,OAA5C,CAApB;;AACA,YAAI8C,WAAW,KAAK,CAAC,CAArB,EAAwB;AACpB,iBAAO,IAAP;AACH,SAFD,MAGK;AACD,iBAAO,CAAC,IAAI/I,eAAJ,CAAoB+I,WAApB,EAAiC,CAAjC,CAAD,CAAP;AACH;AACJ,OARD,MASK;AACD,eAAO,KAAKC,6BAAL,CAAmC9H,OAAnC,EAA4CgD,WAA5C,EAAyDC,SAAzD,EAAoE8B,OAApE,CAAP;AACH;AACJ;;;qCACgB/E,O,EAASsG,M,EAAQvB,O,EAAS;AACvC,UAAI,KAAKW,iBAAL,CAAuBtB,MAAvB,KAAkC,CAAtC,EAAyC;AACrC;AACA,YAAI,KAAK8C,wBAAL,KAAkC;AAAE;AAAxC,UAAoD;AAChD;AACA,mBAAO,CAAP;AACH;;AACD,YAAI,KAAKA,wBAAL,KAAkC;AAAE;AAAxC,UAAqD;AACjD;AACA,mBAAO,CAAP;AACH;;AACD,YAAI,KAAKA,wBAAL,KAAkC;AAAE;AAAxC,UAAsD;AAClD;AACA,mBAAO,KAAKtC,QAAL,EAAP;AACH,WAboC,CAcrC;;;AACA,YAAMmD,aAAa,GAAG,KAAKP,iBAAL,CAAuBxH,OAAvB,CAAtB;;AACA,YAAI+H,aAAa,CAAChC,UAAlB,EAA8B;AAC1B,iBAAOgC,aAAa,CAAChC,UAAd,CAAyBC,WAAhC;AACH,SAFD,MAGK;AACD,iBAAO,CAAP;AACH;AACJ;;AACD,UAAI,KAAKoB,iBAAL,KAA2B,IAA/B,EAAqC;AACjC;AACA,YAAMY,iBAAiB,GAAG,KAAKZ,iBAAL,CAAuBd,MAAvB,CAA1B;;AACA,YAAI0B,iBAAiB,KAAK,CAAC,CAA3B,EAA8B;AAC1B,iBAAOA,iBAAP;AACH;;AACD,YAAMC,MAAM,GAAG,KAAKC,sBAAL,CAA4BlI,OAA5B,EAAqCsG,MAArC,EAA6CvB,OAA7C,CAAf;;AACA,aAAKqC,iBAAL,CAAuBd,MAAvB,IAAiC2B,MAAjC;AACA,eAAOA,MAAP;AACH;;AACD,aAAO,KAAKC,sBAAL,CAA4BlI,OAA5B,EAAqCsG,MAArC,EAA6CvB,OAA7C,CAAP;AACH;;;2CACsB/E,O,EAASsG,M,EAAQvB,O,EAAS;AAC7C,UAAI,KAAKW,iBAAL,CAAuBtB,MAAvB,KAAkC,CAAtC,EAAyC;AACrC;AACA,YAAM+D,EAAC,GAAGtJ,SAAS,CAACuJ,oBAAV,CAA+B,KAAKZ,iBAAL,CAAuBxH,OAAvB,CAA/B,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,CAAtE,EAAyE,CAAzE,EAA4E+E,OAAO,CAACsD,mBAApF,EAAyGtD,OAAO,CAAC9E,OAAjH,CAAV;;AACA,YAAI,CAACkI,EAAD,IAAMA,EAAC,CAAC/D,MAAF,KAAa,CAAvB,EAA0B;AACtB,iBAAO,CAAC,CAAR;AACH;;AACD,eAAO+D,EAAC,CAAC,CAAD,CAAD,CAAK7H,IAAZ;AACH;;AACD,UAAIgG,MAAM,KAAK,KAAKZ,iBAAL,CAAuBtB,MAAlC,IAA4C,KAAK4C,iBAAjD,IAAsE,KAAKE,wBAAL,KAAkC;AAAE;AAA9G,QAA0H;AACtH;AACA,iBAAO,KAAKtC,QAAL,EAAP;AACH;;AACD,UAAM0D,QAAQ,GAAG,KAAK5C,iBAAL,CAAuB6C,oBAAvB,CAA4CjC,MAAM,GAAG,CAArD,CAAjB;;AACA,UAAMkC,SAAS,GAAGvJ,gBAAgB,CAACwJ,YAAjB,CAA8BH,QAA9B,CAAlB;AACA,UAAMI,gBAAgB,GAAGzJ,gBAAgB,CAAC0J,YAAjB,CAA8BL,QAA9B,CAAzB;AACA,UAAMH,CAAC,GAAGtJ,SAAS,CAACuJ,oBAAV,CAA+B,KAAKZ,iBAAL,CAAuBxH,OAAvB,CAA/B,EAAgEwI,SAAhE,EAA2EE,gBAA3E,EAA6FF,SAA7F,EAAwGE,gBAAxG,EAA0H3D,OAAO,CAACsD,mBAAlI,EAAuJtD,OAAO,CAAC9E,OAA/J,CAAV;;AACA,UAAI,CAACkI,CAAD,IAAMA,CAAC,CAAC/D,MAAF,KAAa,CAAvB,EAA0B;AACtB,eAAO,CAAC,CAAR;AACH;;AACD,UAAM6D,MAAM,GAAGE,CAAC,CAAC,CAAD,CAAD,CAAK7H,IAApB;;AACA,UAAI,KAAKsD,KAAL,CAAWN,YAAf,EAA6B;AACzB,YAAMiD,UAAU,GAAG,KAAKb,iBAAL,CAAuBc,kBAAvB,EAAnB;;AACA,YAAMoC,cAAc,GAAG5D,IAAI,CAACyB,KAAL,CAAW,KAAK7C,KAAL,CAAW7C,UAAX,GAAwBwF,UAAU,CAACD,MAAM,GAAG,CAAV,CAA7C,CAAvB;;AACA,YAAItB,IAAI,CAACiB,GAAL,CAAS2C,cAAc,GAAGX,MAA1B,KAAqC,CAAzC,EAA4C;AACxC,iBAAOW,cAAP;AACH;AACJ;;AACD,aAAOX,MAAP;AACH;;;kDAC6BjI,O,EAASgD,W,EAAaC,S,EAAW8B,O,EAAS;AACpE,UAAI/B,WAAW,KAAK,CAAhB,IAAqBC,SAAS,KAAK,KAAKyC,iBAAL,CAAuBtB,MAA9D,EAAsE;AAClE;AACA,eAAO,CAAC,IAAItF,eAAJ,CAAoB,CAApB,EAAuB,KAAK8F,QAAL,EAAvB,CAAD,CAAP;AACH;;AACD,UAAMiE,aAAa,GAAG,KAAKnD,iBAAL,CAAuB6C,oBAAvB,CAA4CvF,WAAW,GAAG,CAA1D,CAAtB;;AACA,UAAM8F,cAAc,GAAG7J,gBAAgB,CAACwJ,YAAjB,CAA8BI,aAA9B,CAAvB;AACA,UAAME,qBAAqB,GAAG9J,gBAAgB,CAAC0J,YAAjB,CAA8BE,aAA9B,CAA9B;;AACA,UAAMG,WAAW,GAAG,KAAKtD,iBAAL,CAAuB6C,oBAAvB,CAA4CtF,SAAS,GAAG,CAAxD,CAApB;;AACA,UAAMgG,YAAY,GAAGhK,gBAAgB,CAACwJ,YAAjB,CAA8BO,WAA9B,CAArB;AACA,UAAME,mBAAmB,GAAGjK,gBAAgB,CAAC0J,YAAjB,CAA8BK,WAA9B,CAA5B;AACA,aAAOnK,SAAS,CAACuJ,oBAAV,CAA+B,KAAKZ,iBAAL,CAAuBxH,OAAvB,CAA/B,EAAgE8I,cAAhE,EAAgFC,qBAAhF,EAAuGE,YAAvG,EAAqHC,mBAArH,EAA0InE,OAAO,CAACsD,mBAAlJ,EAAuKtD,OAAO,CAAC9E,OAA/K,CAAP;AACH;AACD;AACJ;AACA;;;;0CAC0B+B,U,EAAYuD,Q,EAAUC,M,EAAQ;AAChD,UAAMkB,yBAAyB,GAAGnB,QAAQ,CAACoB,WAAT,CAAqBvC,MAAvD;AACA,UAAIwC,SAAS,GAAG,CAAC,CAAjB;;AACA,aAAOrB,QAAP,EAAiB;AACbA,QAAAA,QAAQ,GAAGA,QAAQ,CAACsB,eAApB;AACAD,QAAAA,SAAS;AACZ;;AACD,UAAML,UAAU,GAAG,KAAKb,iBAAL,CAAuBoB,oBAAvB,CAA4CF,SAA5C,EAAuDF,yBAAvD,EAAkFlB,MAAlF,CAAnB;;AACA,aAAOe,UAAU,GAAG,CAApB;AACH;;;;;;IAEC4C,sB;;;;;;;;;;;;;+CACyBnJ,O,EAASgD,W,EAAaC,S,EAAW8B,O,EAAS;AACjE,UAAMd,MAAM,0GAAoCjE,OAApC,EAA6CgD,WAA7C,EAA0DC,SAA1D,EAAqE8B,OAArE,CAAZ;;AACA,UAAI,CAACd,MAAD,IAAWA,MAAM,CAACG,MAAP,KAAkB,CAA7B,IAAkCpB,WAAW,KAAKC,SAAlD,IAAgED,WAAW,KAAK,CAAhB,IAAqBC,SAAS,KAAK,KAAKyC,iBAAL,CAAuBtB,MAA9H,EAAuI;AACnI,eAAOH,MAAP;AACH,OAJgE,CAKjE;AACA;;;AACA,UAAI,CAAC,KAAKL,KAAL,CAAWL,WAAhB,EAA6B;AACzB;AACA;AACA,YAAM6F,cAAc,GAAG,KAAK1B,gBAAL,CAAsB1H,OAAtB,EAA+BiD,SAA/B,EAA0C8B,OAA1C,CAAvB;;AACA,YAAIqE,cAAc,KAAK,CAAC,CAAxB,EAA2B;AACvB,cAAMC,SAAS,GAAGpF,MAAM,CAACA,MAAM,CAACG,MAAP,GAAgB,CAAjB,CAAxB;;AACA,cAAIiF,SAAS,CAAC/I,IAAV,GAAiB8I,cAArB,EAAqC;AACjC;AACAC,YAAAA,SAAS,CAACC,KAAV,GAAkBF,cAAc,GAAGC,SAAS,CAAC/I,IAA7C;AACH;AACJ;AACJ;;AACD,aAAO2D,MAAP;AACH;;;;EArBgC8C,gB;;AAuBrC,IAAMtC,kBAAkB,GAAI,YAAY;AACpC,MAAI/F,OAAO,CAAC6K,QAAZ,EAAsB;AAClB,WAAOC,wBAAP;AACH;;AACD,SAAOC,wBAAP;AACH,CAL0B,EAA3B;;AAMA,SAASD,wBAAT,CAAkCxJ,OAAlC,EAA2CmD,eAA3C,EAA4DqB,gBAA5D,EAA8EjB,WAA9E,EAA2FY,uBAA3F,EAAoH;AAChH,SAAO,IAAIgF,sBAAJ,CAA2BnJ,OAA3B,EAAoCmD,eAApC,EAAqDqB,gBAArD,EAAuEjB,WAAvE,EAAoFY,uBAApF,CAAP;AACH;;AACD,SAASsF,wBAAT,CAAkCzJ,OAAlC,EAA2CmD,eAA3C,EAA4DqB,gBAA5D,EAA8EjB,WAA9E,EAA2FY,uBAA3F,EAAoH;AAChH,SAAO,IAAI4C,gBAAJ,CAAqB/G,OAArB,EAA8BmD,eAA9B,EAA+CqB,gBAA/C,EAAiEjB,WAAjE,EAA8EY,uBAA9E,CAAP;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as browser from '../../../../base/browser/browser.js';\r\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\r\nimport * as platform from '../../../../base/common/platform.js';\r\nimport { RangeUtil } from './rangeUtil.js';\r\nimport { HorizontalRange, VisibleRanges } from '../../../common/view/renderingContext.js';\r\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\r\nimport { CharacterMapping, RenderLineInput, renderViewLine, LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\r\nimport { ColorScheme } from '../../../../platform/theme/common/theme.js';\r\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\r\nconst canUseFastRenderedViewLine = (function () {\r\n    if (platform.isNative) {\r\n        // In VSCode we know very well when the zoom level changes\r\n        return true;\r\n    }\r\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\r\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\r\n        // --\r\n        // Even though we read character widths correctly, having read them at a specific zoom level\r\n        // does not mean they are the same at the current zoom level.\r\n        // --\r\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\r\n        // but until then we have to stick with reading client rects.\r\n        // --\r\n        // The same has been observed with Firefox on Windows7\r\n        // --\r\n        // The same has been oversved with Safari\r\n        return false;\r\n    }\r\n    return true;\r\n})();\r\nlet monospaceAssumptionsAreValid = true;\r\nconst alwaysRenderInlineSelection = (browser.isEdgeLegacy);\r\nexport class DomReadingContext {\r\n    constructor(domNode, endNode) {\r\n        this._domNode = domNode;\r\n        this._clientRectDeltaLeft = 0;\r\n        this._clientRectDeltaLeftRead = false;\r\n        this.endNode = endNode;\r\n    }\r\n    get clientRectDeltaLeft() {\r\n        if (!this._clientRectDeltaLeftRead) {\r\n            this._clientRectDeltaLeftRead = true;\r\n            this._clientRectDeltaLeft = this._domNode.getBoundingClientRect().left;\r\n        }\r\n        return this._clientRectDeltaLeft;\r\n    }\r\n}\r\nexport class ViewLineOptions {\r\n    constructor(config, themeType) {\r\n        this.themeType = themeType;\r\n        const options = config.options;\r\n        const fontInfo = options.get(38 /* fontInfo */);\r\n        this.renderWhitespace = options.get(83 /* renderWhitespace */);\r\n        this.renderControlCharacters = options.get(77 /* renderControlCharacters */);\r\n        this.spaceWidth = fontInfo.spaceWidth;\r\n        this.middotWidth = fontInfo.middotWidth;\r\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\r\n        this.useMonospaceOptimizations = (fontInfo.isMonospace\r\n            && !options.get(26 /* disableMonospaceOptimizations */));\r\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\r\n        this.lineHeight = options.get(53 /* lineHeight */);\r\n        this.stopRenderingLineAfter = options.get(100 /* stopRenderingLineAfter */);\r\n        this.fontLigatures = options.get(39 /* fontLigatures */);\r\n    }\r\n    equals(other) {\r\n        return (this.themeType === other.themeType\r\n            && this.renderWhitespace === other.renderWhitespace\r\n            && this.renderControlCharacters === other.renderControlCharacters\r\n            && this.spaceWidth === other.spaceWidth\r\n            && this.middotWidth === other.middotWidth\r\n            && this.wsmiddotWidth === other.wsmiddotWidth\r\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\r\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\r\n            && this.lineHeight === other.lineHeight\r\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\r\n            && this.fontLigatures === other.fontLigatures);\r\n    }\r\n}\r\nexport class ViewLine {\r\n    constructor(options) {\r\n        this._options = options;\r\n        this._isMaybeInvalid = true;\r\n        this._renderedViewLine = null;\r\n    }\r\n    // --- begin IVisibleLineData\r\n    getDomNode() {\r\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\r\n            return this._renderedViewLine.domNode.domNode;\r\n        }\r\n        return null;\r\n    }\r\n    setDomNode(domNode) {\r\n        if (this._renderedViewLine) {\r\n            this._renderedViewLine.domNode = createFastDomNode(domNode);\r\n        }\r\n        else {\r\n            throw new Error('I have no rendered view line to set the dom node to...');\r\n        }\r\n    }\r\n    onContentChanged() {\r\n        this._isMaybeInvalid = true;\r\n    }\r\n    onTokensChanged() {\r\n        this._isMaybeInvalid = true;\r\n    }\r\n    onDecorationsChanged() {\r\n        this._isMaybeInvalid = true;\r\n    }\r\n    onOptionsChanged(newOptions) {\r\n        this._isMaybeInvalid = true;\r\n        this._options = newOptions;\r\n    }\r\n    onSelectionChanged() {\r\n        if (alwaysRenderInlineSelection || this._options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\r\n            this._isMaybeInvalid = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\r\n        if (this._isMaybeInvalid === false) {\r\n            // it appears that nothing relevant has changed\r\n            return false;\r\n        }\r\n        this._isMaybeInvalid = false;\r\n        const lineData = viewportData.getViewLineRenderingData(lineNumber);\r\n        const options = this._options;\r\n        const actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\r\n        // Only send selection information when needed for rendering whitespace\r\n        let selectionsOnLine = null;\r\n        if (alwaysRenderInlineSelection || options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\r\n            const selections = viewportData.selections;\r\n            for (const selection of selections) {\r\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\r\n                    // Selection does not intersect line\r\n                    continue;\r\n                }\r\n                const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\r\n                const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\r\n                if (startColumn < endColumn) {\r\n                    if (options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace !== 'selection') {\r\n                        actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* Regular */));\r\n                    }\r\n                    else {\r\n                        if (!selectionsOnLine) {\r\n                            selectionsOnLine = [];\r\n                        }\r\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\r\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\r\n            // no need to do anything, we have the same render input\r\n            return false;\r\n        }\r\n        sb.appendASCIIString('<div style=\"top:');\r\n        sb.appendASCIIString(String(deltaTop));\r\n        sb.appendASCIIString('px;height:');\r\n        sb.appendASCIIString(String(this._options.lineHeight));\r\n        sb.appendASCIIString('px;\" class=\"');\r\n        sb.appendASCIIString(ViewLine.CLASS_NAME);\r\n        sb.appendASCIIString('\">');\r\n        const output = renderViewLine(renderLineInput, sb);\r\n        sb.appendASCIIString('</div>');\r\n        let renderedViewLine = null;\r\n        if (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* None */) {\r\n            if (lineData.content.length < 300 && renderLineInput.lineTokens.getCount() < 100) {\r\n                // Browser rounding errors have been observed in Chrome and IE, so using the fast\r\n                // view line only for short lines. Please test before removing the length check...\r\n                // ---\r\n                // Another rounding error has been observed on Linux in VSCode, where <span> width\r\n                // rounding errors add up to an observable large number...\r\n                // ---\r\n                // Also see another example of rounding errors on Windows in\r\n                // https://github.com/microsoft/vscode/issues/33178\r\n                renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\r\n            }\r\n        }\r\n        if (!renderedViewLine) {\r\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\r\n        }\r\n        this._renderedViewLine = renderedViewLine;\r\n        return true;\r\n    }\r\n    layoutLine(lineNumber, deltaTop) {\r\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\r\n            this._renderedViewLine.domNode.setTop(deltaTop);\r\n            this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\r\n        }\r\n    }\r\n    // --- end IVisibleLineData\r\n    getWidth() {\r\n        if (!this._renderedViewLine) {\r\n            return 0;\r\n        }\r\n        return this._renderedViewLine.getWidth();\r\n    }\r\n    getWidthIsFast() {\r\n        if (!this._renderedViewLine) {\r\n            return true;\r\n        }\r\n        return this._renderedViewLine.getWidthIsFast();\r\n    }\r\n    needsMonospaceFontCheck() {\r\n        if (!this._renderedViewLine) {\r\n            return false;\r\n        }\r\n        return (this._renderedViewLine instanceof FastRenderedViewLine);\r\n    }\r\n    monospaceAssumptionsAreValid() {\r\n        if (!this._renderedViewLine) {\r\n            return monospaceAssumptionsAreValid;\r\n        }\r\n        if (this._renderedViewLine instanceof FastRenderedViewLine) {\r\n            return this._renderedViewLine.monospaceAssumptionsAreValid();\r\n        }\r\n        return monospaceAssumptionsAreValid;\r\n    }\r\n    onMonospaceAssumptionsInvalidated() {\r\n        if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\r\n            this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\r\n        }\r\n    }\r\n    getVisibleRangesForRange(startColumn, endColumn, context) {\r\n        if (!this._renderedViewLine) {\r\n            return null;\r\n        }\r\n        startColumn = startColumn | 0; // @perf\r\n        endColumn = endColumn | 0; // @perf\r\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\r\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\r\n        const stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter | 0; // @perf\r\n        let outsideRenderedLine = false;\r\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\r\n            // This range is obviously not visible\r\n            outsideRenderedLine = true;\r\n        }\r\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\r\n            startColumn = stopRenderingLineAfter + 1;\r\n        }\r\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\r\n            endColumn = stopRenderingLineAfter + 1;\r\n        }\r\n        const horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(startColumn, endColumn, context);\r\n        if (horizontalRanges && horizontalRanges.length > 0) {\r\n            return new VisibleRanges(outsideRenderedLine, horizontalRanges);\r\n        }\r\n        return null;\r\n    }\r\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\r\n        if (!this._renderedViewLine) {\r\n            return 1;\r\n        }\r\n        return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\r\n    }\r\n}\r\nViewLine.CLASS_NAME = 'view-line';\r\n/**\r\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\r\n */\r\nclass FastRenderedViewLine {\r\n    constructor(domNode, renderLineInput, characterMapping) {\r\n        this.domNode = domNode;\r\n        this.input = renderLineInput;\r\n        this._characterMapping = characterMapping;\r\n        this._charWidth = renderLineInput.spaceWidth;\r\n    }\r\n    getWidth() {\r\n        return this._getCharPosition(this._characterMapping.length);\r\n    }\r\n    getWidthIsFast() {\r\n        return true;\r\n    }\r\n    monospaceAssumptionsAreValid() {\r\n        if (!this.domNode) {\r\n            return monospaceAssumptionsAreValid;\r\n        }\r\n        const expectedWidth = this.getWidth();\r\n        const actualWidth = this.domNode.domNode.firstChild.offsetWidth;\r\n        if (Math.abs(expectedWidth - actualWidth) >= 2) {\r\n            // more than 2px off\r\n            console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\r\n            monospaceAssumptionsAreValid = false;\r\n        }\r\n        return monospaceAssumptionsAreValid;\r\n    }\r\n    toSlowRenderedLine() {\r\n        return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0 /* None */);\r\n    }\r\n    getVisibleRangesForRange(startColumn, endColumn, context) {\r\n        const startPosition = this._getCharPosition(startColumn);\r\n        const endPosition = this._getCharPosition(endColumn);\r\n        return [new HorizontalRange(startPosition, endPosition - startPosition)];\r\n    }\r\n    _getCharPosition(column) {\r\n        const charOffset = this._characterMapping.getAbsoluteOffsets();\r\n        if (charOffset.length === 0) {\r\n            // No characters on this line\r\n            return 0;\r\n        }\r\n        return Math.round(this._charWidth * charOffset[column - 1]);\r\n    }\r\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\r\n        const spanNodeTextContentLength = spanNode.textContent.length;\r\n        let spanIndex = -1;\r\n        while (spanNode) {\r\n            spanNode = spanNode.previousSibling;\r\n            spanIndex++;\r\n        }\r\n        const charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\r\n        return charOffset + 1;\r\n    }\r\n}\r\n/**\r\n * Every time we render a line, we save what we have rendered in an instance of this class.\r\n */\r\nclass RenderedViewLine {\r\n    constructor(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\r\n        this.domNode = domNode;\r\n        this.input = renderLineInput;\r\n        this._characterMapping = characterMapping;\r\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\r\n        this._containsForeignElements = containsForeignElements;\r\n        this._cachedWidth = -1;\r\n        this._pixelOffsetCache = null;\r\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\r\n            this._pixelOffsetCache = new Int32Array(Math.max(2, this._characterMapping.length + 1));\r\n            for (let column = 0, len = this._characterMapping.length; column <= len; column++) {\r\n                this._pixelOffsetCache[column] = -1;\r\n            }\r\n        }\r\n    }\r\n    // --- Reading from the DOM methods\r\n    _getReadingTarget(myDomNode) {\r\n        return myDomNode.domNode.firstChild;\r\n    }\r\n    /**\r\n     * Width of the line in pixels\r\n     */\r\n    getWidth() {\r\n        if (!this.domNode) {\r\n            return 0;\r\n        }\r\n        if (this._cachedWidth === -1) {\r\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\r\n        }\r\n        return this._cachedWidth;\r\n    }\r\n    getWidthIsFast() {\r\n        if (this._cachedWidth === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Visible ranges for a model range\r\n     */\r\n    getVisibleRangesForRange(startColumn, endColumn, context) {\r\n        if (!this.domNode) {\r\n            return null;\r\n        }\r\n        if (this._pixelOffsetCache !== null) {\r\n            // the text is LTR\r\n            const startOffset = this._readPixelOffset(this.domNode, startColumn, context);\r\n            if (startOffset === -1) {\r\n                return null;\r\n            }\r\n            const endOffset = this._readPixelOffset(this.domNode, endColumn, context);\r\n            if (endOffset === -1) {\r\n                return null;\r\n            }\r\n            return [new HorizontalRange(startOffset, endOffset - startOffset)];\r\n        }\r\n        return this._readVisibleRangesForRange(this.domNode, startColumn, endColumn, context);\r\n    }\r\n    _readVisibleRangesForRange(domNode, startColumn, endColumn, context) {\r\n        if (startColumn === endColumn) {\r\n            const pixelOffset = this._readPixelOffset(domNode, startColumn, context);\r\n            if (pixelOffset === -1) {\r\n                return null;\r\n            }\r\n            else {\r\n                return [new HorizontalRange(pixelOffset, 0)];\r\n            }\r\n        }\r\n        else {\r\n            return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\r\n        }\r\n    }\r\n    _readPixelOffset(domNode, column, context) {\r\n        if (this._characterMapping.length === 0) {\r\n            // This line has no content\r\n            if (this._containsForeignElements === 0 /* None */) {\r\n                // We can assume the line is really empty\r\n                return 0;\r\n            }\r\n            if (this._containsForeignElements === 2 /* After */) {\r\n                // We have foreign elements after the (empty) line\r\n                return 0;\r\n            }\r\n            if (this._containsForeignElements === 1 /* Before */) {\r\n                // We have foreign elements before the (empty) line\r\n                return this.getWidth();\r\n            }\r\n            // We have foreign elements before & after the (empty) line\r\n            const readingTarget = this._getReadingTarget(domNode);\r\n            if (readingTarget.firstChild) {\r\n                return readingTarget.firstChild.offsetWidth;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (this._pixelOffsetCache !== null) {\r\n            // the text is LTR\r\n            const cachedPixelOffset = this._pixelOffsetCache[column];\r\n            if (cachedPixelOffset !== -1) {\r\n                return cachedPixelOffset;\r\n            }\r\n            const result = this._actualReadPixelOffset(domNode, column, context);\r\n            this._pixelOffsetCache[column] = result;\r\n            return result;\r\n        }\r\n        return this._actualReadPixelOffset(domNode, column, context);\r\n    }\r\n    _actualReadPixelOffset(domNode, column, context) {\r\n        if (this._characterMapping.length === 0) {\r\n            // This line has no content\r\n            const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context.clientRectDeltaLeft, context.endNode);\r\n            if (!r || r.length === 0) {\r\n                return -1;\r\n            }\r\n            return r[0].left;\r\n        }\r\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* None */) {\r\n            // This branch helps in the case of whitespace only lines which have a width set\r\n            return this.getWidth();\r\n        }\r\n        const partData = this._characterMapping.charOffsetToPartData(column - 1);\r\n        const partIndex = CharacterMapping.getPartIndex(partData);\r\n        const charOffsetInPart = CharacterMapping.getCharIndex(partData);\r\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), partIndex, charOffsetInPart, partIndex, charOffsetInPart, context.clientRectDeltaLeft, context.endNode);\r\n        if (!r || r.length === 0) {\r\n            return -1;\r\n        }\r\n        const result = r[0].left;\r\n        if (this.input.isBasicASCII) {\r\n            const charOffset = this._characterMapping.getAbsoluteOffsets();\r\n            const expectedResult = Math.round(this.input.spaceWidth * charOffset[column - 1]);\r\n            if (Math.abs(expectedResult - result) <= 1) {\r\n                return expectedResult;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\r\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\r\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\r\n            return [new HorizontalRange(0, this.getWidth())];\r\n        }\r\n        const startPartData = this._characterMapping.charOffsetToPartData(startColumn - 1);\r\n        const startPartIndex = CharacterMapping.getPartIndex(startPartData);\r\n        const startCharOffsetInPart = CharacterMapping.getCharIndex(startPartData);\r\n        const endPartData = this._characterMapping.charOffsetToPartData(endColumn - 1);\r\n        const endPartIndex = CharacterMapping.getPartIndex(endPartData);\r\n        const endCharOffsetInPart = CharacterMapping.getCharIndex(endPartData);\r\n        return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startPartIndex, startCharOffsetInPart, endPartIndex, endCharOffsetInPart, context.clientRectDeltaLeft, context.endNode);\r\n    }\r\n    /**\r\n     * Returns the column for the text found at a specific offset inside a rendered dom node\r\n     */\r\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\r\n        const spanNodeTextContentLength = spanNode.textContent.length;\r\n        let spanIndex = -1;\r\n        while (spanNode) {\r\n            spanNode = spanNode.previousSibling;\r\n            spanIndex++;\r\n        }\r\n        const charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\r\n        return charOffset + 1;\r\n    }\r\n}\r\nclass WebKitRenderedViewLine extends RenderedViewLine {\r\n    _readVisibleRangesForRange(domNode, startColumn, endColumn, context) {\r\n        const output = super._readVisibleRangesForRange(domNode, startColumn, endColumn, context);\r\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\r\n            return output;\r\n        }\r\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\r\n        // The last client rect is enlarged (I think)\r\n        if (!this.input.containsRTL) {\r\n            // This is an attempt to patch things up\r\n            // Find position of last column\r\n            const endPixelOffset = this._readPixelOffset(domNode, endColumn, context);\r\n            if (endPixelOffset !== -1) {\r\n                const lastRange = output[output.length - 1];\r\n                if (lastRange.left < endPixelOffset) {\r\n                    // Trim down the width of the last visible range to not go after the last column's position\r\n                    lastRange.width = endPixelOffset - lastRange.left;\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n}\r\nconst createRenderedLine = (function () {\r\n    if (browser.isWebKit) {\r\n        return createWebKitRenderedLine;\r\n    }\r\n    return createNormalRenderedLine;\r\n})();\r\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\r\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\r\n}\r\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\r\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}