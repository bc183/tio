{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport var LinesDecorationsOverlay = /*#__PURE__*/function (_DedupOverlay) {\n  _inherits(LinesDecorationsOverlay, _DedupOverlay);\n\n  var _super = _createSuper(LinesDecorationsOverlay);\n\n  function LinesDecorationsOverlay(context) {\n    var _this;\n\n    _classCallCheck(this, LinesDecorationsOverlay);\n\n    _this = _super.call(this);\n    _this._context = context;\n    var options = _this._context.configuration.options;\n    var layoutInfo = options.get(124\n    /* layoutInfo */\n    );\n    _this._decorationsLeft = layoutInfo.decorationsLeft;\n    _this._decorationsWidth = layoutInfo.decorationsWidth;\n    _this._renderResult = null;\n\n    _this._context.addEventHandler(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(LinesDecorationsOverlay, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._context.removeEventHandler(this);\n\n      this._renderResult = null;\n\n      _get(_getPrototypeOf(LinesDecorationsOverlay.prototype), \"dispose\", this).call(this);\n    } // --- begin event handlers\n\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n      var layoutInfo = options.get(124\n      /* layoutInfo */\n      );\n      this._decorationsLeft = layoutInfo.decorationsLeft;\n      this._decorationsWidth = layoutInfo.decorationsWidth;\n      return true;\n    }\n  }, {\n    key: \"onDecorationsChanged\",\n    value: function onDecorationsChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return e.scrollTopChanged;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    } // --- end event handlers\n\n  }, {\n    key: \"_getDecorations\",\n    value: function _getDecorations(ctx) {\n      var decorations = ctx.getDecorationsInViewport();\n      var r = [],\n          rLen = 0;\n\n      for (var i = 0, len = decorations.length; i < len; i++) {\n        var d = decorations[i];\n        var linesDecorationsClassName = d.options.linesDecorationsClassName;\n\n        if (linesDecorationsClassName) {\n          r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName);\n        }\n\n        var firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n\n        if (firstLineDecorationClassName) {\n          r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName);\n        }\n      }\n\n      return r;\n    }\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n      var toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n\n      var left = this._decorationsLeft.toString();\n\n      var width = this._decorationsWidth.toString();\n\n      var common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n      var output = [];\n\n      for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n        var lineIndex = lineNumber - visibleStartLineNumber;\n        var classNames = toRender[lineIndex];\n        var lineOutput = '';\n\n        for (var i = 0, len = classNames.length; i < len; i++) {\n          lineOutput += '<div class=\"cldr ' + classNames[i] + common;\n        }\n\n        output[lineIndex] = lineOutput;\n      }\n\n      this._renderResult = output;\n    }\n  }, {\n    key: \"render\",\n    value: function render(startLineNumber, lineNumber) {\n      if (!this._renderResult) {\n        return '';\n      }\n\n      return this._renderResult[lineNumber - startLineNumber];\n    }\n  }]);\n\n  return LinesDecorationsOverlay;\n}(DedupOverlay);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/linesDecorations/linesDecorations.js"],"names":["DecorationToRender","DedupOverlay","LinesDecorationsOverlay","context","_context","options","configuration","layoutInfo","get","_decorationsLeft","decorationsLeft","_decorationsWidth","decorationsWidth","_renderResult","addEventHandler","removeEventHandler","e","scrollTopChanged","ctx","decorations","getDecorationsInViewport","r","rLen","i","len","length","d","linesDecorationsClassName","range","startLineNumber","endLineNumber","firstLineDecorationClassName","visibleStartLineNumber","visibleRange","visibleEndLineNumber","toRender","_render","_getDecorations","left","toString","width","common","output","lineNumber","lineIndex","classNames","lineOutput"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './linesDecorations.css';\r\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\r\nexport class LinesDecorationsOverlay extends DedupOverlay {\r\n    constructor(context) {\r\n        super();\r\n        this._context = context;\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._decorationsLeft = layoutInfo.decorationsLeft;\r\n        this._decorationsWidth = layoutInfo.decorationsWidth;\r\n        this._renderResult = null;\r\n        this._context.addEventHandler(this);\r\n    }\r\n    dispose() {\r\n        this._context.removeEventHandler(this);\r\n        this._renderResult = null;\r\n        super.dispose();\r\n    }\r\n    // --- begin event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._decorationsLeft = layoutInfo.decorationsLeft;\r\n        this._decorationsWidth = layoutInfo.decorationsWidth;\r\n        return true;\r\n    }\r\n    onDecorationsChanged(e) {\r\n        return true;\r\n    }\r\n    onFlushed(e) {\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return true;\r\n    }\r\n    onLinesDeleted(e) {\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return e.scrollTopChanged;\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    // --- end event handlers\r\n    _getDecorations(ctx) {\r\n        const decorations = ctx.getDecorationsInViewport();\r\n        let r = [], rLen = 0;\r\n        for (let i = 0, len = decorations.length; i < len; i++) {\r\n            const d = decorations[i];\r\n            const linesDecorationsClassName = d.options.linesDecorationsClassName;\r\n            if (linesDecorationsClassName) {\r\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName);\r\n            }\r\n            const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\r\n            if (firstLineDecorationClassName) {\r\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName);\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n    prepareRender(ctx) {\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\r\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\r\n        const left = this._decorationsLeft.toString();\r\n        const width = this._decorationsWidth.toString();\r\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\r\n        const output = [];\r\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\r\n            const lineIndex = lineNumber - visibleStartLineNumber;\r\n            const classNames = toRender[lineIndex];\r\n            let lineOutput = '';\r\n            for (let i = 0, len = classNames.length; i < len; i++) {\r\n                lineOutput += '<div class=\"cldr ' + classNames[i] + common;\r\n            }\r\n            output[lineIndex] = lineOutput;\r\n        }\r\n        this._renderResult = output;\r\n    }\r\n    render(startLineNumber, lineNumber) {\r\n        if (!this._renderResult) {\r\n            return '';\r\n        }\r\n        return this._renderResult[lineNumber - startLineNumber];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}