{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nexport var BracketElectricCharacterSupport = /*#__PURE__*/function () {\n  function BracketElectricCharacterSupport(richEditBrackets) {\n    _classCallCheck(this, BracketElectricCharacterSupport);\n\n    this._richEditBrackets = richEditBrackets;\n  }\n\n  _createClass(BracketElectricCharacterSupport, [{\n    key: \"getElectricCharacters\",\n    value: function getElectricCharacters() {\n      var result = [];\n\n      if (this._richEditBrackets) {\n        var _iterator = _createForOfIteratorHelper(this._richEditBrackets.brackets),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var bracket = _step.value;\n\n            var _iterator2 = _createForOfIteratorHelper(bracket.close),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var close = _step2.value;\n                var lastChar = close.charAt(close.length - 1);\n                result.push(lastChar);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } // Filter duplicate entries\n\n\n      result = result.filter(function (item, pos, array) {\n        return array.indexOf(item) === pos;\n      });\n      return result;\n    }\n  }, {\n    key: \"onElectricCharacter\",\n    value: function onElectricCharacter(character, context, column) {\n      if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n        return null;\n      }\n\n      var tokenIndex = context.findTokenIndexAtOffset(column - 1);\n\n      if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n        return null;\n      }\n\n      var reversedBracketRegex = this._richEditBrackets.reversedRegex;\n      var text = context.getLineContent().substring(0, column - 1) + character;\n      var r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n\n      if (!r) {\n        return null;\n      }\n\n      var bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n      var isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n\n      if (isOpen) {\n        return null;\n      }\n\n      var textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n\n      if (!/^\\s*$/.test(textBeforeBracket)) {\n        // There is other text on the line before the bracket\n        return null;\n      }\n\n      return {\n        matchOpenBracket: bracketText\n      };\n    }\n  }]);\n\n  return BracketElectricCharacterSupport;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/electricCharacter.js"],"names":["ignoreBracketsInToken","BracketsUtils","BracketElectricCharacterSupport","richEditBrackets","_richEditBrackets","result","brackets","bracket","close","lastChar","charAt","length","push","filter","item","pos","array","indexOf","character","context","column","tokenIndex","findTokenIndexAtOffset","getStandardTokenType","reversedBracketRegex","reversedRegex","text","getLineContent","substring","r","findPrevBracketInRange","bracketText","startColumn","endColumn","toLowerCase","isOpen","textIsOpenBracket","textBeforeBracket","getActualLineContentBefore","test","matchOpenBracket"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,qBAAT,QAAsC,gBAAtC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,WAAaC,+BAAb;AACI,2CAAYC,gBAAZ,EAA8B;AAAA;;AAC1B,SAAKC,iBAAL,GAAyBD,gBAAzB;AACH;;AAHL;AAAA;AAAA,4CAI4B;AACpB,UAAIE,MAAM,GAAG,EAAb;;AACA,UAAI,KAAKD,iBAAT,EAA4B;AAAA,mDACF,KAAKA,iBAAL,CAAuBE,QADrB;AAAA;;AAAA;AACxB,8DAAuD;AAAA,gBAA5CC,OAA4C;;AAAA,wDAC/BA,OAAO,CAACC,KADuB;AAAA;;AAAA;AACnD,qEAAmC;AAAA,oBAAxBA,KAAwB;AAC/B,oBAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaF,KAAK,CAACG,MAAN,GAAe,CAA5B,CAAjB;AACAN,gBAAAA,MAAM,CAACO,IAAP,CAAYH,QAAZ;AACH;AAJkD;AAAA;AAAA;AAAA;AAAA;AAKtD;AANuB;AAAA;AAAA;AAAA;AAAA;AAO3B,OATmB,CAUpB;;;AACAJ,MAAAA,MAAM,GAAGA,MAAM,CAACQ,MAAP,CAAc,UAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAsB;AACzC,eAAOA,KAAK,CAACC,OAAN,CAAcH,IAAd,MAAwBC,GAA/B;AACH,OAFQ,CAAT;AAGA,aAAOV,MAAP;AACH;AAnBL;AAAA;AAAA,wCAoBwBa,SApBxB,EAoBmCC,OApBnC,EAoB4CC,MApB5C,EAoBoD;AAC5C,UAAI,CAAC,KAAKhB,iBAAN,IAA2B,KAAKA,iBAAL,CAAuBE,QAAvB,CAAgCK,MAAhC,KAA2C,CAA1E,EAA6E;AACzE,eAAO,IAAP;AACH;;AACD,UAAMU,UAAU,GAAGF,OAAO,CAACG,sBAAR,CAA+BF,MAAM,GAAG,CAAxC,CAAnB;;AACA,UAAIpB,qBAAqB,CAACmB,OAAO,CAACI,oBAAR,CAA6BF,UAA7B,CAAD,CAAzB,EAAqE;AACjE,eAAO,IAAP;AACH;;AACD,UAAMG,oBAAoB,GAAG,KAAKpB,iBAAL,CAAuBqB,aAApD;AACA,UAAMC,IAAI,GAAGP,OAAO,CAACQ,cAAR,GAAyBC,SAAzB,CAAmC,CAAnC,EAAsCR,MAAM,GAAG,CAA/C,IAAoDF,SAAjE;AACA,UAAMW,CAAC,GAAG5B,aAAa,CAAC6B,sBAAd,CAAqCN,oBAArC,EAA2D,CAA3D,EAA8DE,IAA9D,EAAoE,CAApE,EAAuEA,IAAI,CAACf,MAA5E,CAAV;;AACA,UAAI,CAACkB,CAAL,EAAQ;AACJ,eAAO,IAAP;AACH;;AACD,UAAME,WAAW,GAAGL,IAAI,CAACE,SAAL,CAAeC,CAAC,CAACG,WAAF,GAAgB,CAA/B,EAAkCH,CAAC,CAACI,SAAF,GAAc,CAAhD,EAAmDC,WAAnD,EAApB;AACA,UAAMC,MAAM,GAAG,KAAK/B,iBAAL,CAAuBgC,iBAAvB,CAAyCL,WAAzC,CAAf;;AACA,UAAII,MAAJ,EAAY;AACR,eAAO,IAAP;AACH;;AACD,UAAME,iBAAiB,GAAGlB,OAAO,CAACmB,0BAAR,CAAmCT,CAAC,CAACG,WAAF,GAAgB,CAAnD,CAA1B;;AACA,UAAI,CAAC,QAAQO,IAAR,CAAaF,iBAAb,CAAL,EAAsC;AAClC;AACA,eAAO,IAAP;AACH;;AACD,aAAO;AACHG,QAAAA,gBAAgB,EAAET;AADf,OAAP;AAGH;AA/CL;;AAAA;AAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { ignoreBracketsInToken } from '../supports.js';\r\nimport { BracketsUtils } from './richEditBrackets.js';\r\nexport class BracketElectricCharacterSupport {\r\n    constructor(richEditBrackets) {\r\n        this._richEditBrackets = richEditBrackets;\r\n    }\r\n    getElectricCharacters() {\r\n        let result = [];\r\n        if (this._richEditBrackets) {\r\n            for (const bracket of this._richEditBrackets.brackets) {\r\n                for (const close of bracket.close) {\r\n                    const lastChar = close.charAt(close.length - 1);\r\n                    result.push(lastChar);\r\n                }\r\n            }\r\n        }\r\n        // Filter duplicate entries\r\n        result = result.filter((item, pos, array) => {\r\n            return array.indexOf(item) === pos;\r\n        });\r\n        return result;\r\n    }\r\n    onElectricCharacter(character, context, column) {\r\n        if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\r\n            return null;\r\n        }\r\n        const tokenIndex = context.findTokenIndexAtOffset(column - 1);\r\n        if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\r\n            return null;\r\n        }\r\n        const reversedBracketRegex = this._richEditBrackets.reversedRegex;\r\n        const text = context.getLineContent().substring(0, column - 1) + character;\r\n        const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\r\n        if (!r) {\r\n            return null;\r\n        }\r\n        const bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\r\n        const isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\r\n        if (isOpen) {\r\n            return null;\r\n        }\r\n        const textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\r\n        if (!/^\\s*$/.test(textBeforeBracket)) {\r\n            // There is other text on the line before the bracket\r\n            return null;\r\n        }\r\n        return {\r\n            matchOpenBracket: bracketText\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}