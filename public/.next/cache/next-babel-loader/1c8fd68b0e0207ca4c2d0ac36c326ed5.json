{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/view/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewModel/viewEventHandler.js';\nexport var OverviewRuler = /*#__PURE__*/function (_ViewEventHandler) {\n  _inherits(OverviewRuler, _ViewEventHandler);\n\n  var _super = _createSuper(OverviewRuler);\n\n  function OverviewRuler(context, cssClassName) {\n    var _this;\n\n    _classCallCheck(this, OverviewRuler);\n\n    _this = _super.call(this);\n    _this._context = context;\n    var options = _this._context.configuration.options;\n    _this._domNode = createFastDomNode(document.createElement('canvas'));\n\n    _this._domNode.setClassName(cssClassName);\n\n    _this._domNode.setPosition('absolute');\n\n    _this._domNode.setLayerHinting(true);\n\n    _this._domNode.setContain('strict');\n\n    _this._zoneManager = new OverviewZoneManager(function (lineNumber) {\n      return _this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n    });\n\n    _this._zoneManager.setDOMWidth(0);\n\n    _this._zoneManager.setDOMHeight(0);\n\n    _this._zoneManager.setOuterHeight(_this._context.viewLayout.getScrollHeight());\n\n    _this._zoneManager.setLineHeight(options.get(53\n    /* lineHeight */\n    ));\n\n    _this._zoneManager.setPixelRatio(options.get(122\n    /* pixelRatio */\n    ));\n\n    _this._context.addEventHandler(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(OverviewRuler, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._context.removeEventHandler(this);\n\n      _get(_getPrototypeOf(OverviewRuler.prototype), \"dispose\", this).call(this);\n    } // ---- begin view event handlers\n\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n\n      if (e.hasChanged(53\n      /* lineHeight */\n      )) {\n        this._zoneManager.setLineHeight(options.get(53\n        /* lineHeight */\n        ));\n\n        this._render();\n      }\n\n      if (e.hasChanged(122\n      /* pixelRatio */\n      )) {\n        this._zoneManager.setPixelRatio(options.get(122\n        /* pixelRatio */\n        ));\n\n        this._domNode.setWidth(this._zoneManager.getDOMWidth());\n\n        this._domNode.setHeight(this._zoneManager.getDOMHeight());\n\n        this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n        this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n\n        this._render();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      this._render();\n\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      if (e.scrollHeightChanged) {\n        this._zoneManager.setOuterHeight(e.scrollHeight);\n\n        this._render();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      this._render();\n\n      return true;\n    } // ---- end view event handlers\n\n  }, {\n    key: \"getDomNode\",\n    value: function getDomNode() {\n      return this._domNode.domNode;\n    }\n  }, {\n    key: \"setLayout\",\n    value: function setLayout(position) {\n      this._domNode.setTop(position.top);\n\n      this._domNode.setRight(position.right);\n\n      var hasChanged = false;\n      hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n      hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n\n      if (hasChanged) {\n        this._domNode.setWidth(this._zoneManager.getDOMWidth());\n\n        this._domNode.setHeight(this._zoneManager.getDOMHeight());\n\n        this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n        this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n\n        this._render();\n      }\n    }\n  }, {\n    key: \"setZones\",\n    value: function setZones(zones) {\n      this._zoneManager.setZones(zones);\n\n      this._render();\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      if (this._zoneManager.getOuterHeight() === 0) {\n        return false;\n      }\n\n      var width = this._zoneManager.getCanvasWidth();\n\n      var height = this._zoneManager.getCanvasHeight();\n\n      var colorZones = this._zoneManager.resolveColorZones();\n\n      var id2Color = this._zoneManager.getId2Color();\n\n      var ctx = this._domNode.domNode.getContext('2d');\n\n      ctx.clearRect(0, 0, width, height);\n\n      if (colorZones.length > 0) {\n        this._renderOneLane(ctx, colorZones, id2Color, width);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_renderOneLane\",\n    value: function _renderOneLane(ctx, colorZones, id2Color, width) {\n      var currentColorId = 0;\n      var currentFrom = 0;\n      var currentTo = 0;\n\n      var _iterator = _createForOfIteratorHelper(colorZones),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var zone = _step.value;\n          var zoneColorId = zone.colorId;\n          var zoneFrom = zone.from;\n          var zoneTo = zone.to;\n\n          if (zoneColorId !== currentColorId) {\n            ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n            currentColorId = zoneColorId;\n            ctx.fillStyle = id2Color[currentColorId];\n            currentFrom = zoneFrom;\n            currentTo = zoneTo;\n          } else {\n            if (currentTo >= zoneFrom) {\n              currentTo = Math.max(currentTo, zoneTo);\n            } else {\n              ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n              currentFrom = zoneFrom;\n              currentTo = zoneTo;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n    }\n  }]);\n\n  return OverviewRuler;\n}(ViewEventHandler);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/overviewRuler.js"],"names":["createFastDomNode","OverviewZoneManager","ViewEventHandler","OverviewRuler","context","cssClassName","_context","options","configuration","_domNode","document","createElement","setClassName","setPosition","setLayerHinting","setContain","_zoneManager","lineNumber","viewLayout","getVerticalOffsetForLineNumber","setDOMWidth","setDOMHeight","setOuterHeight","getScrollHeight","setLineHeight","get","setPixelRatio","addEventHandler","removeEventHandler","e","hasChanged","_render","setWidth","getDOMWidth","setHeight","getDOMHeight","domNode","width","getCanvasWidth","height","getCanvasHeight","scrollHeightChanged","scrollHeight","position","setTop","top","setRight","right","zones","setZones","getOuterHeight","colorZones","resolveColorZones","id2Color","getId2Color","ctx","getContext","clearRect","length","_renderOneLane","currentColorId","currentFrom","currentTo","zone","zoneColorId","colorId","zoneFrom","from","zoneTo","to","fillRect","fillStyle","Math","max"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\r\nimport { OverviewZoneManager } from '../../../common/view/overviewZoneManager.js';\r\nimport { ViewEventHandler } from '../../../common/viewModel/viewEventHandler.js';\r\nexport class OverviewRuler extends ViewEventHandler {\r\n    constructor(context, cssClassName) {\r\n        super();\r\n        this._context = context;\r\n        const options = this._context.configuration.options;\r\n        this._domNode = createFastDomNode(document.createElement('canvas'));\r\n        this._domNode.setClassName(cssClassName);\r\n        this._domNode.setPosition('absolute');\r\n        this._domNode.setLayerHinting(true);\r\n        this._domNode.setContain('strict');\r\n        this._zoneManager = new OverviewZoneManager((lineNumber) => this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber));\r\n        this._zoneManager.setDOMWidth(0);\r\n        this._zoneManager.setDOMHeight(0);\r\n        this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight());\r\n        this._zoneManager.setLineHeight(options.get(53 /* lineHeight */));\r\n        this._zoneManager.setPixelRatio(options.get(122 /* pixelRatio */));\r\n        this._context.addEventHandler(this);\r\n    }\r\n    dispose() {\r\n        this._context.removeEventHandler(this);\r\n        super.dispose();\r\n    }\r\n    // ---- begin view event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        if (e.hasChanged(53 /* lineHeight */)) {\r\n            this._zoneManager.setLineHeight(options.get(53 /* lineHeight */));\r\n            this._render();\r\n        }\r\n        if (e.hasChanged(122 /* pixelRatio */)) {\r\n            this._zoneManager.setPixelRatio(options.get(122 /* pixelRatio */));\r\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\r\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\r\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\r\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\r\n            this._render();\r\n        }\r\n        return true;\r\n    }\r\n    onFlushed(e) {\r\n        this._render();\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        if (e.scrollHeightChanged) {\r\n            this._zoneManager.setOuterHeight(e.scrollHeight);\r\n            this._render();\r\n        }\r\n        return true;\r\n    }\r\n    onZonesChanged(e) {\r\n        this._render();\r\n        return true;\r\n    }\r\n    // ---- end view event handlers\r\n    getDomNode() {\r\n        return this._domNode.domNode;\r\n    }\r\n    setLayout(position) {\r\n        this._domNode.setTop(position.top);\r\n        this._domNode.setRight(position.right);\r\n        let hasChanged = false;\r\n        hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\r\n        hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\r\n        if (hasChanged) {\r\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\r\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\r\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\r\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\r\n            this._render();\r\n        }\r\n    }\r\n    setZones(zones) {\r\n        this._zoneManager.setZones(zones);\r\n        this._render();\r\n    }\r\n    _render() {\r\n        if (this._zoneManager.getOuterHeight() === 0) {\r\n            return false;\r\n        }\r\n        const width = this._zoneManager.getCanvasWidth();\r\n        const height = this._zoneManager.getCanvasHeight();\r\n        const colorZones = this._zoneManager.resolveColorZones();\r\n        const id2Color = this._zoneManager.getId2Color();\r\n        const ctx = this._domNode.domNode.getContext('2d');\r\n        ctx.clearRect(0, 0, width, height);\r\n        if (colorZones.length > 0) {\r\n            this._renderOneLane(ctx, colorZones, id2Color, width);\r\n        }\r\n        return true;\r\n    }\r\n    _renderOneLane(ctx, colorZones, id2Color, width) {\r\n        let currentColorId = 0;\r\n        let currentFrom = 0;\r\n        let currentTo = 0;\r\n        for (const zone of colorZones) {\r\n            const zoneColorId = zone.colorId;\r\n            const zoneFrom = zone.from;\r\n            const zoneTo = zone.to;\r\n            if (zoneColorId !== currentColorId) {\r\n                ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\r\n                currentColorId = zoneColorId;\r\n                ctx.fillStyle = id2Color[currentColorId];\r\n                currentFrom = zoneFrom;\r\n                currentTo = zoneTo;\r\n            }\r\n            else {\r\n                if (currentTo >= zoneFrom) {\r\n                    currentTo = Math.max(currentTo, zoneTo);\r\n                }\r\n                else {\r\n                    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\r\n                    currentFrom = zoneFrom;\r\n                    currentTo = zoneTo;\r\n                }\r\n            }\r\n        }\r\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}