{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport var CharWidthRequest = /*#__PURE__*/function () {\n  function CharWidthRequest(chr, type) {\n    _classCallCheck(this, CharWidthRequest);\n\n    this.chr = chr;\n    this.type = type;\n    this.width = 0;\n  }\n\n  _createClass(CharWidthRequest, [{\n    key: \"fulfill\",\n    value: function fulfill(width) {\n      this.width = width;\n    }\n  }]);\n\n  return CharWidthRequest;\n}();\n\nvar DomCharWidthReader = /*#__PURE__*/function () {\n  function DomCharWidthReader(bareFontInfo, requests) {\n    _classCallCheck(this, DomCharWidthReader);\n\n    this._bareFontInfo = bareFontInfo;\n    this._requests = requests;\n    this._container = null;\n    this._testElements = null;\n  }\n\n  _createClass(DomCharWidthReader, [{\n    key: \"read\",\n    value: function read() {\n      // Create a test container with all these test elements\n      this._createDomElements(); // Add the container to the DOM\n\n\n      document.body.appendChild(this._container); // Read character widths\n\n      this._readFromDomElements(); // Remove the container from the DOM\n\n\n      document.body.removeChild(this._container);\n      this._container = null;\n      this._testElements = null;\n    }\n  }, {\n    key: \"_createDomElements\",\n    value: function _createDomElements() {\n      var container = document.createElement('div');\n      container.style.position = 'absolute';\n      container.style.top = '-50000px';\n      container.style.width = '50000px';\n      var regularDomNode = document.createElement('div');\n      regularDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n      regularDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n      regularDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n      regularDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n      regularDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n      regularDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n      container.appendChild(regularDomNode);\n      var boldDomNode = document.createElement('div');\n      boldDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n      boldDomNode.style.fontWeight = 'bold';\n      boldDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n      boldDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n      boldDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n      boldDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n      container.appendChild(boldDomNode);\n      var italicDomNode = document.createElement('div');\n      italicDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n      italicDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n      italicDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n      italicDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n      italicDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n      italicDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n      italicDomNode.style.fontStyle = 'italic';\n      container.appendChild(italicDomNode);\n      var testElements = [];\n\n      var _iterator = _createForOfIteratorHelper(this._requests),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var request = _step.value;\n          var parent = void 0;\n\n          if (request.type === 0\n          /* Regular */\n          ) {\n              parent = regularDomNode;\n            }\n\n          if (request.type === 2\n          /* Bold */\n          ) {\n              parent = boldDomNode;\n            }\n\n          if (request.type === 1\n          /* Italic */\n          ) {\n              parent = italicDomNode;\n            }\n\n          parent.appendChild(document.createElement('br'));\n          var testElement = document.createElement('span');\n\n          DomCharWidthReader._render(testElement, request);\n\n          parent.appendChild(testElement);\n          testElements.push(testElement);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._container = container;\n      this._testElements = testElements;\n    }\n  }, {\n    key: \"_readFromDomElements\",\n    value: function _readFromDomElements() {\n      for (var i = 0, len = this._requests.length; i < len; i++) {\n        var request = this._requests[i];\n        var testElement = this._testElements[i];\n        request.fulfill(testElement.offsetWidth / 256);\n      }\n    }\n  }], [{\n    key: \"_render\",\n    value: function _render(testElement, request) {\n      if (request.chr === ' ') {\n        var htmlString = \"\\xA0\"; // Repeat character 256 (2^8) times\n\n        for (var i = 0; i < 8; i++) {\n          htmlString += htmlString;\n        }\n\n        testElement.innerText = htmlString;\n      } else {\n        var testString = request.chr; // Repeat character 256 (2^8) times\n\n        for (var _i = 0; _i < 8; _i++) {\n          testString += testString;\n        }\n\n        testElement.textContent = testString;\n      }\n    }\n  }]);\n\n  return DomCharWidthReader;\n}();\n\nexport function readCharWidths(bareFontInfo, requests) {\n  var reader = new DomCharWidthReader(bareFontInfo, requests);\n  reader.read();\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/config/charWidthReader.js"],"names":["CharWidthRequest","chr","type","width","DomCharWidthReader","bareFontInfo","requests","_bareFontInfo","_requests","_container","_testElements","_createDomElements","document","body","appendChild","_readFromDomElements","removeChild","container","createElement","style","position","top","regularDomNode","fontFamily","getMassagedFontFamily","fontWeight","fontSize","fontFeatureSettings","lineHeight","letterSpacing","boldDomNode","italicDomNode","fontStyle","testElements","request","parent","testElement","_render","push","i","len","length","fulfill","offsetWidth","htmlString","innerText","testString","textContent","readCharWidths","reader","read"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport class CharWidthRequest {\r\n    constructor(chr, type) {\r\n        this.chr = chr;\r\n        this.type = type;\r\n        this.width = 0;\r\n    }\r\n    fulfill(width) {\r\n        this.width = width;\r\n    }\r\n}\r\nclass DomCharWidthReader {\r\n    constructor(bareFontInfo, requests) {\r\n        this._bareFontInfo = bareFontInfo;\r\n        this._requests = requests;\r\n        this._container = null;\r\n        this._testElements = null;\r\n    }\r\n    read() {\r\n        // Create a test container with all these test elements\r\n        this._createDomElements();\r\n        // Add the container to the DOM\r\n        document.body.appendChild(this._container);\r\n        // Read character widths\r\n        this._readFromDomElements();\r\n        // Remove the container from the DOM\r\n        document.body.removeChild(this._container);\r\n        this._container = null;\r\n        this._testElements = null;\r\n    }\r\n    _createDomElements() {\r\n        const container = document.createElement('div');\r\n        container.style.position = 'absolute';\r\n        container.style.top = '-50000px';\r\n        container.style.width = '50000px';\r\n        const regularDomNode = document.createElement('div');\r\n        regularDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\r\n        regularDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\r\n        regularDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\r\n        regularDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\r\n        regularDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\r\n        regularDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\r\n        container.appendChild(regularDomNode);\r\n        const boldDomNode = document.createElement('div');\r\n        boldDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\r\n        boldDomNode.style.fontWeight = 'bold';\r\n        boldDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\r\n        boldDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\r\n        boldDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\r\n        boldDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\r\n        container.appendChild(boldDomNode);\r\n        const italicDomNode = document.createElement('div');\r\n        italicDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\r\n        italicDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\r\n        italicDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\r\n        italicDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\r\n        italicDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\r\n        italicDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\r\n        italicDomNode.style.fontStyle = 'italic';\r\n        container.appendChild(italicDomNode);\r\n        const testElements = [];\r\n        for (const request of this._requests) {\r\n            let parent;\r\n            if (request.type === 0 /* Regular */) {\r\n                parent = regularDomNode;\r\n            }\r\n            if (request.type === 2 /* Bold */) {\r\n                parent = boldDomNode;\r\n            }\r\n            if (request.type === 1 /* Italic */) {\r\n                parent = italicDomNode;\r\n            }\r\n            parent.appendChild(document.createElement('br'));\r\n            const testElement = document.createElement('span');\r\n            DomCharWidthReader._render(testElement, request);\r\n            parent.appendChild(testElement);\r\n            testElements.push(testElement);\r\n        }\r\n        this._container = container;\r\n        this._testElements = testElements;\r\n    }\r\n    static _render(testElement, request) {\r\n        if (request.chr === ' ') {\r\n            let htmlString = '\\u00a0';\r\n            // Repeat character 256 (2^8) times\r\n            for (let i = 0; i < 8; i++) {\r\n                htmlString += htmlString;\r\n            }\r\n            testElement.innerText = htmlString;\r\n        }\r\n        else {\r\n            let testString = request.chr;\r\n            // Repeat character 256 (2^8) times\r\n            for (let i = 0; i < 8; i++) {\r\n                testString += testString;\r\n            }\r\n            testElement.textContent = testString;\r\n        }\r\n    }\r\n    _readFromDomElements() {\r\n        for (let i = 0, len = this._requests.length; i < len; i++) {\r\n            const request = this._requests[i];\r\n            const testElement = this._testElements[i];\r\n            request.fulfill(testElement.offsetWidth / 256);\r\n        }\r\n    }\r\n}\r\nexport function readCharWidths(bareFontInfo, requests) {\r\n    const reader = new DomCharWidthReader(bareFontInfo, requests);\r\n    reader.read();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}