{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { createKeybinding } from '../../../base/common/keyCodes.js';\nimport { OS } from '../../../base/common/platform.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nvar KeybindingsRegistryImpl = /*#__PURE__*/function () {\n  function KeybindingsRegistryImpl() {\n    _classCallCheck(this, KeybindingsRegistryImpl);\n\n    this._coreKeybindings = [];\n    this._extensionKeybindings = [];\n    this._cachedMergedKeybindings = null;\n  }\n  /**\r\n   * Take current platform into account and reduce to primary & secondary.\r\n   */\n\n\n  _createClass(KeybindingsRegistryImpl, [{\n    key: \"registerKeybindingRule\",\n    value: function registerKeybindingRule(rule) {\n      var actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n\n      if (actualKb && actualKb.primary) {\n        var kk = createKeybinding(actualKb.primary, OS);\n\n        if (kk) {\n          this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);\n        }\n      }\n\n      if (actualKb && Array.isArray(actualKb.secondary)) {\n        for (var i = 0, len = actualKb.secondary.length; i < len; i++) {\n          var k = actualKb.secondary[i];\n\n          var _kk = createKeybinding(k, OS);\n\n          if (_kk) {\n            this._registerDefaultKeybinding(_kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"registerCommandAndKeybindingRule\",\n    value: function registerCommandAndKeybindingRule(desc) {\n      this.registerKeybindingRule(desc);\n      CommandsRegistry.registerCommand(desc);\n    }\n  }, {\n    key: \"_assertNoCtrlAlt\",\n    value: function _assertNoCtrlAlt(keybinding, commandId) {\n      if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n        if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n          console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n        }\n      }\n    }\n  }, {\n    key: \"_registerDefaultKeybinding\",\n    value: function _registerDefaultKeybinding(keybinding, commandId, commandArgs, weight1, weight2, when) {\n      if (OS === 1\n      /* Windows */\n      ) {\n          this._assertNoCtrlAlt(keybinding.parts[0], commandId);\n        }\n\n      this._coreKeybindings.push({\n        keybinding: keybinding,\n        command: commandId,\n        commandArgs: commandArgs,\n        when: when,\n        weight1: weight1,\n        weight2: weight2,\n        extensionId: null,\n        isBuiltinExtension: false\n      });\n\n      this._cachedMergedKeybindings = null;\n    }\n  }, {\n    key: \"getDefaultKeybindings\",\n    value: function getDefaultKeybindings() {\n      if (!this._cachedMergedKeybindings) {\n        this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\n\n        this._cachedMergedKeybindings.sort(sorter);\n      }\n\n      return this._cachedMergedKeybindings.slice(0);\n    }\n  }], [{\n    key: \"bindToCurrentPlatform\",\n    value: function bindToCurrentPlatform(kb) {\n      if (OS === 1\n      /* Windows */\n      ) {\n          if (kb && kb.win) {\n            return kb.win;\n          }\n        } else if (OS === 2\n      /* Macintosh */\n      ) {\n          if (kb && kb.mac) {\n            return kb.mac;\n          }\n        } else {\n        if (kb && kb.linux) {\n          return kb.linux;\n        }\n      }\n\n      return kb;\n    }\n  }, {\n    key: \"_mightProduceChar\",\n    value: function _mightProduceChar(keyCode) {\n      if (keyCode >= 21\n      /* KEY_0 */\n      && keyCode <= 30\n      /* KEY_9 */\n      ) {\n          return true;\n        }\n\n      if (keyCode >= 31\n      /* KEY_A */\n      && keyCode <= 56\n      /* KEY_Z */\n      ) {\n          return true;\n        }\n\n      return keyCode === 80\n      /* US_SEMICOLON */\n      || keyCode === 81\n      /* US_EQUAL */\n      || keyCode === 82\n      /* US_COMMA */\n      || keyCode === 83\n      /* US_MINUS */\n      || keyCode === 84\n      /* US_DOT */\n      || keyCode === 85\n      /* US_SLASH */\n      || keyCode === 86\n      /* US_BACKTICK */\n      || keyCode === 110\n      /* ABNT_C1 */\n      || keyCode === 111\n      /* ABNT_C2 */\n      || keyCode === 87\n      /* US_OPEN_SQUARE_BRACKET */\n      || keyCode === 88\n      /* US_BACKSLASH */\n      || keyCode === 89\n      /* US_CLOSE_SQUARE_BRACKET */\n      || keyCode === 90\n      /* US_QUOTE */\n      || keyCode === 91\n      /* OEM_8 */\n      || keyCode === 92\n      /* OEM_102 */\n      ;\n    }\n  }]);\n\n  return KeybindingsRegistryImpl;\n}();\n\nexport var KeybindingsRegistry = new KeybindingsRegistryImpl(); // Define extension point ids\n\nexport var Extensions = {\n  EditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\n\nfunction sorter(a, b) {\n  if (a.weight1 !== b.weight1) {\n    return a.weight1 - b.weight1;\n  }\n\n  if (a.command < b.command) {\n    return -1;\n  }\n\n  if (a.command > b.command) {\n    return 1;\n  }\n\n  return a.weight2 - b.weight2;\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js"],"names":["createKeybinding","OS","CommandsRegistry","Registry","KeybindingsRegistryImpl","_coreKeybindings","_extensionKeybindings","_cachedMergedKeybindings","rule","actualKb","bindToCurrentPlatform","primary","kk","_registerDefaultKeybinding","id","args","weight","when","Array","isArray","secondary","i","len","length","k","desc","registerKeybindingRule","registerCommand","keybinding","commandId","ctrlKey","altKey","metaKey","_mightProduceChar","keyCode","console","warn","commandArgs","weight1","weight2","_assertNoCtrlAlt","parts","push","command","extensionId","isBuiltinExtension","concat","sort","sorter","slice","kb","win","mac","linux","KeybindingsRegistry","Extensions","EditorModes","add","a","b"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { createKeybinding } from '../../../base/common/keyCodes.js';\r\nimport { OS } from '../../../base/common/platform.js';\r\nimport { CommandsRegistry } from '../../commands/common/commands.js';\r\nimport { Registry } from '../../registry/common/platform.js';\r\nclass KeybindingsRegistryImpl {\r\n    constructor() {\r\n        this._coreKeybindings = [];\r\n        this._extensionKeybindings = [];\r\n        this._cachedMergedKeybindings = null;\r\n    }\r\n    /**\r\n     * Take current platform into account and reduce to primary & secondary.\r\n     */\r\n    static bindToCurrentPlatform(kb) {\r\n        if (OS === 1 /* Windows */) {\r\n            if (kb && kb.win) {\r\n                return kb.win;\r\n            }\r\n        }\r\n        else if (OS === 2 /* Macintosh */) {\r\n            if (kb && kb.mac) {\r\n                return kb.mac;\r\n            }\r\n        }\r\n        else {\r\n            if (kb && kb.linux) {\r\n                return kb.linux;\r\n            }\r\n        }\r\n        return kb;\r\n    }\r\n    registerKeybindingRule(rule) {\r\n        const actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\r\n        if (actualKb && actualKb.primary) {\r\n            const kk = createKeybinding(actualKb.primary, OS);\r\n            if (kk) {\r\n                this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);\r\n            }\r\n        }\r\n        if (actualKb && Array.isArray(actualKb.secondary)) {\r\n            for (let i = 0, len = actualKb.secondary.length; i < len; i++) {\r\n                const k = actualKb.secondary[i];\r\n                const kk = createKeybinding(k, OS);\r\n                if (kk) {\r\n                    this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    registerCommandAndKeybindingRule(desc) {\r\n        this.registerKeybindingRule(desc);\r\n        CommandsRegistry.registerCommand(desc);\r\n    }\r\n    static _mightProduceChar(keyCode) {\r\n        if (keyCode >= 21 /* KEY_0 */ && keyCode <= 30 /* KEY_9 */) {\r\n            return true;\r\n        }\r\n        if (keyCode >= 31 /* KEY_A */ && keyCode <= 56 /* KEY_Z */) {\r\n            return true;\r\n        }\r\n        return (keyCode === 80 /* US_SEMICOLON */\r\n            || keyCode === 81 /* US_EQUAL */\r\n            || keyCode === 82 /* US_COMMA */\r\n            || keyCode === 83 /* US_MINUS */\r\n            || keyCode === 84 /* US_DOT */\r\n            || keyCode === 85 /* US_SLASH */\r\n            || keyCode === 86 /* US_BACKTICK */\r\n            || keyCode === 110 /* ABNT_C1 */\r\n            || keyCode === 111 /* ABNT_C2 */\r\n            || keyCode === 87 /* US_OPEN_SQUARE_BRACKET */\r\n            || keyCode === 88 /* US_BACKSLASH */\r\n            || keyCode === 89 /* US_CLOSE_SQUARE_BRACKET */\r\n            || keyCode === 90 /* US_QUOTE */\r\n            || keyCode === 91 /* OEM_8 */\r\n            || keyCode === 92 /* OEM_102 */);\r\n    }\r\n    _assertNoCtrlAlt(keybinding, commandId) {\r\n        if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\r\n            if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\r\n                console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\r\n            }\r\n        }\r\n    }\r\n    _registerDefaultKeybinding(keybinding, commandId, commandArgs, weight1, weight2, when) {\r\n        if (OS === 1 /* Windows */) {\r\n            this._assertNoCtrlAlt(keybinding.parts[0], commandId);\r\n        }\r\n        this._coreKeybindings.push({\r\n            keybinding: keybinding,\r\n            command: commandId,\r\n            commandArgs: commandArgs,\r\n            when: when,\r\n            weight1: weight1,\r\n            weight2: weight2,\r\n            extensionId: null,\r\n            isBuiltinExtension: false\r\n        });\r\n        this._cachedMergedKeybindings = null;\r\n    }\r\n    getDefaultKeybindings() {\r\n        if (!this._cachedMergedKeybindings) {\r\n            this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\r\n            this._cachedMergedKeybindings.sort(sorter);\r\n        }\r\n        return this._cachedMergedKeybindings.slice(0);\r\n    }\r\n}\r\nexport const KeybindingsRegistry = new KeybindingsRegistryImpl();\r\n// Define extension point ids\r\nexport const Extensions = {\r\n    EditorModes: 'platform.keybindingsRegistry'\r\n};\r\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\r\nfunction sorter(a, b) {\r\n    if (a.weight1 !== b.weight1) {\r\n        return a.weight1 - b.weight1;\r\n    }\r\n    if (a.command < b.command) {\r\n        return -1;\r\n    }\r\n    if (a.command > b.command) {\r\n        return 1;\r\n    }\r\n    return a.weight2 - b.weight2;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}