{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport dayjs from 'dayjs';\nimport 'react';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { Fragment, useEffect, useState } from 'react';\nimport PostCard from '../components/PostCard';\nimport useSwr, { useSWRInfinite } from 'swr';\nimport Image from 'next/image';\nimport { useAuthState } from '../context/auth';\ndayjs.extend(relativeTime);\nexport default function Home() {\n  //const { data: posts } = useSwr<Post[]>('/posts');\n  const {\n    data: topSubs\n  } = useSwr('/misc/top-subs');\n  const {\n    0: dummy,\n    1: setDummy\n  } = useState(1);\n  const {\n    0: observedPost,\n    1: setObservedPost\n  } = useState('');\n  const {\n    data,\n    error,\n    mutate,\n    size: page,\n    setSize: setPage,\n    isValidating,\n    revalidate\n  } = useSWRInfinite(index => `/posts?page=${index}`);\n  const posts = data ? [].concat(...data) : [];\n  const isLoadingInitialData = !data && !error;\n  const title = \"TIO: Talk It Out\";\n  const description = \"Talk It Out is a platorm where people gather together as a communtiy to talk about the stuffs they like.\";\n  useEffect(() => {\n    if (!posts || posts.length === 0) {\n      return;\n    }\n\n    const id = posts[posts.length - 1].identifier;\n\n    if (id !== observedPost) {\n      setObservedPost(id);\n      observeElement(document.getElementById(id));\n    }\n  }, [posts]);\n\n  const observeElement = element => {\n    if (!element) {\n      return;\n    }\n\n    const observer = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting === true) {\n        console.log(\"hii\");\n        setPage(page + 1);\n        observer.unobserve(element);\n      }\n    }, {\n      threshold: 1\n    });\n    observer.observe(element);\n  };\n\n  const setVote = (value, post) => {\n    let index = 0;\n    posts.forEach((postTemp, indexTemp) => {\n      if (postTemp.identifier === post.identifier) {\n        index = indexTemp;\n        console.log(post.identifier);\n      }\n    });\n    let postEdit = posts[index];\n    postEdit.userVote = value;\n    postEdit.voteScore = postEdit.voteScore === 0 || postEdit.voteScore === 1 || postEdit.voteScore === -1 ? value : postEdit.voteScore += value;\n    posts.splice(index, 1);\n    posts.splice(index, 0, postEdit);\n    console.log(posts);\n  };\n\n  const {\n    authenticated\n  } = useAuthState();\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: description\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:description\",\n        content: description\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:title\",\n        content: title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"twitter:title\",\n        content: title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"twitter:description\",\n        content: description\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"container flex pt-4\",\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"w-full md:w-160\",\n        children: [isLoadingInitialData && /*#__PURE__*/_jsx(\"p\", {\n          className: \"text-lg text-center\",\n          children: \"Loading...\"\n        }), posts === null || posts === void 0 ? void 0 : posts.map(post => /*#__PURE__*/_jsx(PostCard, {\n          post: post,\n          setVote: setVote,\n          setDummy: setDummy\n        }, post.identifier)), isValidating && posts.length > 0 && /*#__PURE__*/_jsx(\"p\", {\n          className: \"text-lg text-center\",\n          children: \"Loading more...\"\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"hidden px-4 ml-6 md:block md:p-0 w-80\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"bg-white rounded\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"p-4 border-b-2\",\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: \"text-lg font-semibold text-center\",\n              children: \"Top Communities\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            children: topSubs === null || topSubs === void 0 ? void 0 : topSubs.map(sub => {\n              return /*#__PURE__*/_jsxs(\"div\", {\n                className: \"flex items-center px-4 py-2 text-xs border-b\",\n                children: [/*#__PURE__*/_jsx(Link, {\n                  href: `/r/${sub.name}`,\n                  children: /*#__PURE__*/_jsx(\"a\", {\n                    children: /*#__PURE__*/_jsx(Image, {\n                      className: \"rounded-full cursor-pointer\",\n                      src: sub.imageUrl,\n                      alt: \"sub\",\n                      width: 6 * 16 / 4,\n                      height: 6 * 16 / 4\n                    })\n                  })\n                }), /*#__PURE__*/_jsx(Link, {\n                  href: `/r/${sub.name}`,\n                  children: /*#__PURE__*/_jsxs(\"a\", {\n                    className: \"ml-2 font-bold hover:cursor-pointer\",\n                    children: [\"/r/\", sub.name]\n                  })\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  className: \"ml-auto font-medium\",\n                  children: sub.postCount\n                })]\n              }, sub.name);\n            })\n          }), authenticated && /*#__PURE__*/_jsx(\"div\", {\n            className: \"p-4 border-t-2\",\n            children: /*#__PURE__*/_jsx(Link, {\n              href: \"/subs/create\",\n              children: /*#__PURE__*/_jsx(\"a\", {\n                className: \"w-full px-2 py-1 blue button\",\n                children: \"Create Community\"\n              })\n            })\n          })]\n        })\n      })]\n    })]\n  });\n} // server side rendering\n// export const getServerSideProps: GetServerSideProps = async (context) => {\n//   try {\n//     const res = await Axios.get('/posts')\n//     return { props: {posts: res.data} }\n//   } catch (error) {\n//     return {props: {error: 'Something went wrong'}}\n//   }\n// }","map":null,"metadata":{},"sourceType":"module"}