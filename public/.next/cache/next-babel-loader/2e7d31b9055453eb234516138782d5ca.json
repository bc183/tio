{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { FrankensteinMode } from '../modes/abstractMode.js';\nimport { NULL_LANGUAGE_IDENTIFIER } from '../modes/nullMode.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\n\nvar LanguageSelection = /*#__PURE__*/function (_Disposable) {\n  _inherits(LanguageSelection, _Disposable);\n\n  var _super = _createSuper(LanguageSelection);\n\n  function LanguageSelection(onLanguagesMaybeChanged, selector) {\n    var _this;\n\n    _classCallCheck(this, LanguageSelection);\n\n    _this = _super.call(this);\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    _this._selector = selector;\n    _this.languageIdentifier = _this._selector();\n\n    _this._register(onLanguagesMaybeChanged(function () {\n      return _this._evaluate();\n    }));\n\n    return _this;\n  }\n\n  _createClass(LanguageSelection, [{\n    key: \"_evaluate\",\n    value: function _evaluate() {\n      var languageIdentifier = this._selector();\n\n      if (languageIdentifier.id === this.languageIdentifier.id) {\n        // no change\n        return;\n      }\n\n      this.languageIdentifier = languageIdentifier;\n\n      this._onDidChange.fire(this.languageIdentifier);\n    }\n  }]);\n\n  return LanguageSelection;\n}(Disposable);\n\nexport var ModeServiceImpl = /*#__PURE__*/function (_Disposable2) {\n  _inherits(ModeServiceImpl, _Disposable2);\n\n  var _super2 = _createSuper(ModeServiceImpl);\n\n  function ModeServiceImpl() {\n    var _this2;\n\n    var warnOnOverwrite = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    _classCallCheck(this, ModeServiceImpl);\n\n    _this2 = _super2.call(this);\n    _this2._onDidCreateMode = _this2._register(new Emitter());\n    _this2.onDidCreateMode = _this2._onDidCreateMode.event;\n    _this2._onLanguagesMaybeChanged = _this2._register(new Emitter());\n    _this2.onLanguagesMaybeChanged = _this2._onLanguagesMaybeChanged.event;\n    _this2._instantiatedModes = {};\n    _this2._registry = _this2._register(new LanguagesRegistry(true, warnOnOverwrite));\n\n    _this2._register(_this2._registry.onDidChange(function () {\n      return _this2._onLanguagesMaybeChanged.fire();\n    }));\n\n    return _this2;\n  }\n\n  _createClass(ModeServiceImpl, [{\n    key: \"isRegisteredMode\",\n    value: function isRegisteredMode(mimetypeOrModeId) {\n      return this._registry.isRegisteredMode(mimetypeOrModeId);\n    }\n  }, {\n    key: \"getModeIdForLanguageName\",\n    value: function getModeIdForLanguageName(alias) {\n      return this._registry.getModeIdForLanguageNameLowercase(alias);\n    }\n  }, {\n    key: \"getModeIdByFilepathOrFirstLine\",\n    value: function getModeIdByFilepathOrFirstLine(resource, firstLine) {\n      var modeIds = this._registry.getModeIdsFromFilepathOrFirstLine(resource, firstLine);\n\n      return firstOrDefault(modeIds, null);\n    }\n  }, {\n    key: \"getModeId\",\n    value: function getModeId(commaSeparatedMimetypesOrCommaSeparatedIds) {\n      var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n\n      return firstOrDefault(modeIds, null);\n    }\n  }, {\n    key: \"getLanguageIdentifier\",\n    value: function getLanguageIdentifier(modeId) {\n      return this._registry.getLanguageIdentifier(modeId);\n    } // --- instantiation\n\n  }, {\n    key: \"create\",\n    value: function create(commaSeparatedMimetypesOrCommaSeparatedIds) {\n      var _this3 = this;\n\n      return new LanguageSelection(this.onLanguagesMaybeChanged, function () {\n        var modeId = _this3.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n\n        return _this3._createModeAndGetLanguageIdentifier(modeId);\n      });\n    }\n  }, {\n    key: \"createByFilepathOrFirstLine\",\n    value: function createByFilepathOrFirstLine(resource, firstLine) {\n      var _this4 = this;\n\n      return new LanguageSelection(this.onLanguagesMaybeChanged, function () {\n        var modeId = _this4.getModeIdByFilepathOrFirstLine(resource, firstLine);\n\n        return _this4._createModeAndGetLanguageIdentifier(modeId);\n      });\n    }\n  }, {\n    key: \"_createModeAndGetLanguageIdentifier\",\n    value: function _createModeAndGetLanguageIdentifier(modeId) {\n      // Fall back to plain text if no mode was found\n      var languageIdentifier = this.getLanguageIdentifier(modeId || 'plaintext') || NULL_LANGUAGE_IDENTIFIER;\n\n      this._getOrCreateMode(languageIdentifier.language);\n\n      return languageIdentifier;\n    }\n  }, {\n    key: \"triggerMode\",\n    value: function triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds) {\n      var modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds); // Fall back to plain text if no mode was found\n\n      this._getOrCreateMode(modeId || 'plaintext');\n    }\n  }, {\n    key: \"_getOrCreateMode\",\n    value: function _getOrCreateMode(modeId) {\n      if (!this._instantiatedModes.hasOwnProperty(modeId)) {\n        var languageIdentifier = this.getLanguageIdentifier(modeId) || NULL_LANGUAGE_IDENTIFIER;\n        this._instantiatedModes[modeId] = new FrankensteinMode(languageIdentifier);\n\n        this._onDidCreateMode.fire(this._instantiatedModes[modeId]);\n      }\n\n      return this._instantiatedModes[modeId];\n    }\n  }]);\n\n  return ModeServiceImpl;\n}(Disposable);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/services/modeServiceImpl.js"],"names":["Emitter","Disposable","FrankensteinMode","NULL_LANGUAGE_IDENTIFIER","LanguagesRegistry","firstOrDefault","LanguageSelection","onLanguagesMaybeChanged","selector","_onDidChange","_register","onDidChange","event","_selector","languageIdentifier","_evaluate","id","fire","ModeServiceImpl","warnOnOverwrite","_onDidCreateMode","onDidCreateMode","_onLanguagesMaybeChanged","_instantiatedModes","_registry","mimetypeOrModeId","isRegisteredMode","alias","getModeIdForLanguageNameLowercase","resource","firstLine","modeIds","getModeIdsFromFilepathOrFirstLine","commaSeparatedMimetypesOrCommaSeparatedIds","extractModeIds","modeId","getLanguageIdentifier","getModeId","_createModeAndGetLanguageIdentifier","getModeIdByFilepathOrFirstLine","_getOrCreateMode","language","hasOwnProperty"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { FrankensteinMode } from '../modes/abstractMode.js';\r\nimport { NULL_LANGUAGE_IDENTIFIER } from '../modes/nullMode.js';\r\nimport { LanguagesRegistry } from './languagesRegistry.js';\r\nimport { firstOrDefault } from '../../../base/common/arrays.js';\r\nclass LanguageSelection extends Disposable {\r\n    constructor(onLanguagesMaybeChanged, selector) {\r\n        super();\r\n        this._onDidChange = this._register(new Emitter());\r\n        this.onDidChange = this._onDidChange.event;\r\n        this._selector = selector;\r\n        this.languageIdentifier = this._selector();\r\n        this._register(onLanguagesMaybeChanged(() => this._evaluate()));\r\n    }\r\n    _evaluate() {\r\n        let languageIdentifier = this._selector();\r\n        if (languageIdentifier.id === this.languageIdentifier.id) {\r\n            // no change\r\n            return;\r\n        }\r\n        this.languageIdentifier = languageIdentifier;\r\n        this._onDidChange.fire(this.languageIdentifier);\r\n    }\r\n}\r\nexport class ModeServiceImpl extends Disposable {\r\n    constructor(warnOnOverwrite = false) {\r\n        super();\r\n        this._onDidCreateMode = this._register(new Emitter());\r\n        this.onDidCreateMode = this._onDidCreateMode.event;\r\n        this._onLanguagesMaybeChanged = this._register(new Emitter());\r\n        this.onLanguagesMaybeChanged = this._onLanguagesMaybeChanged.event;\r\n        this._instantiatedModes = {};\r\n        this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\r\n        this._register(this._registry.onDidChange(() => this._onLanguagesMaybeChanged.fire()));\r\n    }\r\n    isRegisteredMode(mimetypeOrModeId) {\r\n        return this._registry.isRegisteredMode(mimetypeOrModeId);\r\n    }\r\n    getModeIdForLanguageName(alias) {\r\n        return this._registry.getModeIdForLanguageNameLowercase(alias);\r\n    }\r\n    getModeIdByFilepathOrFirstLine(resource, firstLine) {\r\n        const modeIds = this._registry.getModeIdsFromFilepathOrFirstLine(resource, firstLine);\r\n        return firstOrDefault(modeIds, null);\r\n    }\r\n    getModeId(commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n        const modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\r\n        return firstOrDefault(modeIds, null);\r\n    }\r\n    getLanguageIdentifier(modeId) {\r\n        return this._registry.getLanguageIdentifier(modeId);\r\n    }\r\n    // --- instantiation\r\n    create(commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n        return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\r\n            const modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\r\n            return this._createModeAndGetLanguageIdentifier(modeId);\r\n        });\r\n    }\r\n    createByFilepathOrFirstLine(resource, firstLine) {\r\n        return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\r\n            const modeId = this.getModeIdByFilepathOrFirstLine(resource, firstLine);\r\n            return this._createModeAndGetLanguageIdentifier(modeId);\r\n        });\r\n    }\r\n    _createModeAndGetLanguageIdentifier(modeId) {\r\n        // Fall back to plain text if no mode was found\r\n        const languageIdentifier = this.getLanguageIdentifier(modeId || 'plaintext') || NULL_LANGUAGE_IDENTIFIER;\r\n        this._getOrCreateMode(languageIdentifier.language);\r\n        return languageIdentifier;\r\n    }\r\n    triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n        const modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\r\n        // Fall back to plain text if no mode was found\r\n        this._getOrCreateMode(modeId || 'plaintext');\r\n    }\r\n    _getOrCreateMode(modeId) {\r\n        if (!this._instantiatedModes.hasOwnProperty(modeId)) {\r\n            let languageIdentifier = this.getLanguageIdentifier(modeId) || NULL_LANGUAGE_IDENTIFIER;\r\n            this._instantiatedModes[modeId] = new FrankensteinMode(languageIdentifier);\r\n            this._onDidCreateMode.fire(this._instantiatedModes[modeId]);\r\n        }\r\n        return this._instantiatedModes[modeId];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}