{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n\n/**\r\n * A position in the editor.\r\n */\nexport var Position = /*#__PURE__*/function () {\n  function Position(lineNumber, column) {\n    _classCallCheck(this, Position);\n\n    this.lineNumber = lineNumber;\n    this.column = column;\n  }\n  /**\r\n   * Create a new position from this position.\r\n   *\r\n   * @param newLineNumber new line number\r\n   * @param newColumn new column\r\n   */\n\n\n  _createClass(Position, [{\n    key: \"with\",\n    value: function _with() {\n      var newLineNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lineNumber;\n      var newColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.column;\n\n      if (newLineNumber === this.lineNumber && newColumn === this.column) {\n        return this;\n      } else {\n        return new Position(newLineNumber, newColumn);\n      }\n    }\n    /**\r\n     * Derive a new position from this position.\r\n     *\r\n     * @param deltaLineNumber line number delta\r\n     * @param deltaColumn column delta\r\n     */\n\n  }, {\n    key: \"delta\",\n    value: function delta() {\n      var deltaLineNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var deltaColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return this[\"with\"](this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n    }\n    /**\r\n     * Test if this position equals other position\r\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return Position.equals(this, other);\n    }\n    /**\r\n     * Test if position `a` equals position `b`\r\n     */\n\n  }, {\n    key: \"isBefore\",\n\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be false.\r\n     */\n    value: function isBefore(other) {\n      return Position.isBefore(this, other);\n    }\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be false.\r\n     */\n\n  }, {\n    key: \"isBeforeOrEqual\",\n\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be true.\r\n     */\n    value: function isBeforeOrEqual(other) {\n      return Position.isBeforeOrEqual(this, other);\n    }\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be true.\r\n     */\n\n  }, {\n    key: \"clone\",\n\n    /**\r\n     * Clone this position.\r\n     */\n    value: function clone() {\n      return new Position(this.lineNumber, this.column);\n    }\n    /**\r\n     * Convert to a human-readable representation.\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '(' + this.lineNumber + ',' + this.column + ')';\n    } // ---\n\n    /**\r\n     * Create a `Position` from an `IPosition`.\r\n     */\n\n  }], [{\n    key: \"equals\",\n    value: function equals(a, b) {\n      if (!a && !b) {\n        return true;\n      }\n\n      return !!a && !!b && a.lineNumber === b.lineNumber && a.column === b.column;\n    }\n  }, {\n    key: \"isBefore\",\n    value: function isBefore(a, b) {\n      if (a.lineNumber < b.lineNumber) {\n        return true;\n      }\n\n      if (b.lineNumber < a.lineNumber) {\n        return false;\n      }\n\n      return a.column < b.column;\n    }\n  }, {\n    key: \"isBeforeOrEqual\",\n    value: function isBeforeOrEqual(a, b) {\n      if (a.lineNumber < b.lineNumber) {\n        return true;\n      }\n\n      if (b.lineNumber < a.lineNumber) {\n        return false;\n      }\n\n      return a.column <= b.column;\n    }\n    /**\r\n     * A function that compares positions, useful for sorting\r\n     */\n\n  }, {\n    key: \"compare\",\n    value: function compare(a, b) {\n      var aLineNumber = a.lineNumber | 0;\n      var bLineNumber = b.lineNumber | 0;\n\n      if (aLineNumber === bLineNumber) {\n        var aColumn = a.column | 0;\n        var bColumn = b.column | 0;\n        return aColumn - bColumn;\n      }\n\n      return aLineNumber - bLineNumber;\n    }\n  }, {\n    key: \"lift\",\n    value: function lift(pos) {\n      return new Position(pos.lineNumber, pos.column);\n    }\n    /**\r\n     * Test if `obj` is an `IPosition`.\r\n     */\n\n  }, {\n    key: \"isIPosition\",\n    value: function isIPosition(obj) {\n      return obj && typeof obj.lineNumber === 'number' && typeof obj.column === 'number';\n    }\n  }]);\n\n  return Position;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/core/position.js"],"names":["Position","lineNumber","column","newLineNumber","newColumn","deltaLineNumber","deltaColumn","other","equals","isBefore","isBeforeOrEqual","a","b","aLineNumber","bLineNumber","aColumn","bColumn","pos","obj"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * A position in the editor.\r\n */\r\nexport class Position {\r\n    constructor(lineNumber, column) {\r\n        this.lineNumber = lineNumber;\r\n        this.column = column;\r\n    }\r\n    /**\r\n     * Create a new position from this position.\r\n     *\r\n     * @param newLineNumber new line number\r\n     * @param newColumn new column\r\n     */\r\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\r\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\r\n            return this;\r\n        }\r\n        else {\r\n            return new Position(newLineNumber, newColumn);\r\n        }\r\n    }\r\n    /**\r\n     * Derive a new position from this position.\r\n     *\r\n     * @param deltaLineNumber line number delta\r\n     * @param deltaColumn column delta\r\n     */\r\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\r\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\r\n    }\r\n    /**\r\n     * Test if this position equals other position\r\n     */\r\n    equals(other) {\r\n        return Position.equals(this, other);\r\n    }\r\n    /**\r\n     * Test if position `a` equals position `b`\r\n     */\r\n    static equals(a, b) {\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        return (!!a &&\r\n            !!b &&\r\n            a.lineNumber === b.lineNumber &&\r\n            a.column === b.column);\r\n    }\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    isBefore(other) {\r\n        return Position.isBefore(this, other);\r\n    }\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    static isBefore(a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column < b.column;\r\n    }\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    isBeforeOrEqual(other) {\r\n        return Position.isBeforeOrEqual(this, other);\r\n    }\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    static isBeforeOrEqual(a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column <= b.column;\r\n    }\r\n    /**\r\n     * A function that compares positions, useful for sorting\r\n     */\r\n    static compare(a, b) {\r\n        let aLineNumber = a.lineNumber | 0;\r\n        let bLineNumber = b.lineNumber | 0;\r\n        if (aLineNumber === bLineNumber) {\r\n            let aColumn = a.column | 0;\r\n            let bColumn = b.column | 0;\r\n            return aColumn - bColumn;\r\n        }\r\n        return aLineNumber - bLineNumber;\r\n    }\r\n    /**\r\n     * Clone this position.\r\n     */\r\n    clone() {\r\n        return new Position(this.lineNumber, this.column);\r\n    }\r\n    /**\r\n     * Convert to a human-readable representation.\r\n     */\r\n    toString() {\r\n        return '(' + this.lineNumber + ',' + this.column + ')';\r\n    }\r\n    // ---\r\n    /**\r\n     * Create a `Position` from an `IPosition`.\r\n     */\r\n    static lift(pos) {\r\n        return new Position(pos.lineNumber, pos.column);\r\n    }\r\n    /**\r\n     * Test if `obj` is an `IPosition`.\r\n     */\r\n    static isIPosition(obj) {\r\n        return (obj\r\n            && (typeof obj.lineNumber === 'number')\r\n            && (typeof obj.column === 'number'));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}