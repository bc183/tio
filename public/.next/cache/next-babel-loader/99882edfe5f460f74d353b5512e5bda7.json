{"ast":null,"code":"import _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { AtomicTabMoveOperations } from './cursorAtomicMoveOperations.js';\nexport var CursorPosition = function CursorPosition(lineNumber, column, leftoverVisibleColumns) {\n  _classCallCheck(this, CursorPosition);\n\n  this.lineNumber = lineNumber;\n  this.column = column;\n  this.leftoverVisibleColumns = leftoverVisibleColumns;\n};\nexport var MoveOperations = /*#__PURE__*/function () {\n  function MoveOperations() {\n    _classCallCheck(this, MoveOperations);\n  }\n\n  _createClass(MoveOperations, null, [{\n    key: \"leftPosition\",\n    value: function leftPosition(model, lineNumber, column) {\n      if (column > model.getLineMinColumn(lineNumber)) {\n        column = column - strings.prevCharLength(model.getLineContent(lineNumber), column - 1);\n      } else if (lineNumber > 1) {\n        lineNumber = lineNumber - 1;\n        column = model.getLineMaxColumn(lineNumber);\n      }\n\n      return new Position(lineNumber, column);\n    }\n  }, {\n    key: \"leftPositionAtomicSoftTabs\",\n    value: function leftPositionAtomicSoftTabs(model, lineNumber, column, tabSize) {\n      var minColumn = model.getLineMinColumn(lineNumber);\n      var lineContent = model.getLineContent(lineNumber);\n      var newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, column - 1, tabSize, 0\n      /* Left */\n      );\n\n      if (newPosition === -1 || newPosition + 1 < minColumn) {\n        return this.leftPosition(model, lineNumber, column);\n      }\n\n      return new Position(lineNumber, newPosition + 1);\n    }\n  }, {\n    key: \"left\",\n    value: function left(config, model, lineNumber, column) {\n      var pos = config.stickyTabStops ? MoveOperations.leftPositionAtomicSoftTabs(model, lineNumber, column, config.tabSize) : MoveOperations.leftPosition(model, lineNumber, column);\n      return new CursorPosition(pos.lineNumber, pos.column, 0);\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft(config, model, cursor, inSelectionMode, noOfColumns) {\n      var lineNumber, column;\n\n      if (cursor.hasSelection() && !inSelectionMode) {\n        // If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\n        lineNumber = cursor.selection.startLineNumber;\n        column = cursor.selection.startColumn;\n      } else {\n        var r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\n        lineNumber = r.lineNumber;\n        column = r.column;\n      }\n\n      return cursor.move(inSelectionMode, lineNumber, column, 0);\n    }\n  }, {\n    key: \"rightPosition\",\n    value: function rightPosition(model, lineNumber, column) {\n      if (column < model.getLineMaxColumn(lineNumber)) {\n        column = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\n      } else if (lineNumber < model.getLineCount()) {\n        lineNumber = lineNumber + 1;\n        column = model.getLineMinColumn(lineNumber);\n      }\n\n      return new Position(lineNumber, column);\n    }\n  }, {\n    key: \"rightPositionAtomicSoftTabs\",\n    value: function rightPositionAtomicSoftTabs(model, lineNumber, column, tabSize, indentSize) {\n      var lineContent = model.getLineContent(lineNumber);\n      var newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, column - 1, tabSize, 1\n      /* Right */\n      );\n\n      if (newPosition === -1) {\n        return this.rightPosition(model, lineNumber, column);\n      }\n\n      return new Position(lineNumber, newPosition + 1);\n    }\n  }, {\n    key: \"right\",\n    value: function right(config, model, lineNumber, column) {\n      var pos = config.stickyTabStops ? MoveOperations.rightPositionAtomicSoftTabs(model, lineNumber, column, config.tabSize, config.indentSize) : MoveOperations.rightPosition(model, lineNumber, column);\n      return new CursorPosition(pos.lineNumber, pos.column, 0);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight(config, model, cursor, inSelectionMode, noOfColumns) {\n      var lineNumber, column;\n\n      if (cursor.hasSelection() && !inSelectionMode) {\n        // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n        lineNumber = cursor.selection.endLineNumber;\n        column = cursor.selection.endColumn;\n      } else {\n        var r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\n        lineNumber = r.lineNumber;\n        column = r.column;\n      }\n\n      return cursor.move(inSelectionMode, lineNumber, column, 0);\n    }\n  }, {\n    key: \"down\",\n    value: function down(config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\n      var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n      var lineCount = model.getLineCount();\n      var wasOnLastPosition = lineNumber === lineCount && column === model.getLineMaxColumn(lineNumber);\n      lineNumber = lineNumber + count;\n\n      if (lineNumber > lineCount) {\n        lineNumber = lineCount;\n\n        if (allowMoveOnLastLine) {\n          column = model.getLineMaxColumn(lineNumber);\n        } else {\n          column = Math.min(model.getLineMaxColumn(lineNumber), column);\n        }\n      } else {\n        column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n      }\n\n      if (wasOnLastPosition) {\n        leftoverVisibleColumns = 0;\n      } else {\n        leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n      }\n\n      return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown(config, model, cursor, inSelectionMode, linesCount) {\n      var lineNumber, column;\n\n      if (cursor.hasSelection() && !inSelectionMode) {\n        // If we are in selection mode, move down acts relative to the end of selection\n        lineNumber = cursor.selection.endLineNumber;\n        column = cursor.selection.endColumn;\n      } else {\n        lineNumber = cursor.position.lineNumber;\n        column = cursor.position.column;\n      }\n\n      var r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n      return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n    }\n  }, {\n    key: \"translateDown\",\n    value: function translateDown(config, model, cursor) {\n      var selection = cursor.selection;\n      var selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n      var position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n      return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n    }\n  }, {\n    key: \"up\",\n    value: function up(config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\n      var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n      var wasOnFirstPosition = lineNumber === 1 && column === 1;\n      lineNumber = lineNumber - count;\n\n      if (lineNumber < 1) {\n        lineNumber = 1;\n\n        if (allowMoveOnFirstLine) {\n          column = model.getLineMinColumn(lineNumber);\n        } else {\n          column = Math.min(model.getLineMaxColumn(lineNumber), column);\n        }\n      } else {\n        column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n      }\n\n      if (wasOnFirstPosition) {\n        leftoverVisibleColumns = 0;\n      } else {\n        leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n      }\n\n      return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp(config, model, cursor, inSelectionMode, linesCount) {\n      var lineNumber, column;\n\n      if (cursor.hasSelection() && !inSelectionMode) {\n        // If we are in selection mode, move up acts relative to the beginning of selection\n        lineNumber = cursor.selection.startLineNumber;\n        column = cursor.selection.startColumn;\n      } else {\n        lineNumber = cursor.position.lineNumber;\n        column = cursor.position.column;\n      }\n\n      var r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n      return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n    }\n  }, {\n    key: \"translateUp\",\n    value: function translateUp(config, model, cursor) {\n      var selection = cursor.selection;\n      var selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n      var position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n      return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n    }\n  }, {\n    key: \"moveToBeginningOfLine\",\n    value: function moveToBeginningOfLine(config, model, cursor, inSelectionMode) {\n      var lineNumber = cursor.position.lineNumber;\n      var minColumn = model.getLineMinColumn(lineNumber);\n      var firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n      var column;\n      var relevantColumnNumber = cursor.position.column;\n\n      if (relevantColumnNumber === firstNonBlankColumn) {\n        column = minColumn;\n      } else {\n        column = firstNonBlankColumn;\n      }\n\n      return cursor.move(inSelectionMode, lineNumber, column, 0);\n    }\n  }, {\n    key: \"moveToEndOfLine\",\n    value: function moveToEndOfLine(config, model, cursor, inSelectionMode, sticky) {\n      var lineNumber = cursor.position.lineNumber;\n      var maxColumn = model.getLineMaxColumn(lineNumber);\n      return cursor.move(inSelectionMode, lineNumber, maxColumn, sticky ? 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      - maxColumn : 0);\n    }\n  }, {\n    key: \"moveToBeginningOfBuffer\",\n    value: function moveToBeginningOfBuffer(config, model, cursor, inSelectionMode) {\n      return cursor.move(inSelectionMode, 1, 1, 0);\n    }\n  }, {\n    key: \"moveToEndOfBuffer\",\n    value: function moveToEndOfBuffer(config, model, cursor, inSelectionMode) {\n      var lastLineNumber = model.getLineCount();\n      var lastColumn = model.getLineMaxColumn(lastLineNumber);\n      return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n    }\n  }]);\n\n  return MoveOperations;\n}();","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorMoveOperations.js"],"names":["CursorColumns","SingleCursorState","Position","Range","strings","AtomicTabMoveOperations","CursorPosition","lineNumber","column","leftoverVisibleColumns","MoveOperations","model","getLineMinColumn","prevCharLength","getLineContent","getLineMaxColumn","tabSize","minColumn","lineContent","newPosition","atomicPosition","leftPosition","config","pos","stickyTabStops","leftPositionAtomicSoftTabs","cursor","inSelectionMode","noOfColumns","hasSelection","selection","startLineNumber","startColumn","r","left","position","move","nextCharLength","getLineCount","indentSize","rightPosition","rightPositionAtomicSoftTabs","endLineNumber","endColumn","right","count","allowMoveOnLastLine","currentVisibleColumn","visibleColumnFromColumn","lineCount","wasOnLastPosition","Math","min","columnFromVisibleColumn2","linesCount","down","selectionStart","selectionStartLineNumber","selectionStartColumn","selectionStartLeftoverVisibleColumns","positionLineNumber","positionColumn","allowMoveOnFirstLine","wasOnFirstPosition","up","firstNonBlankColumn","getLineFirstNonWhitespaceColumn","relevantColumnNumber","sticky","maxColumn","lastLineNumber","lastColumn"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { AtomicTabMoveOperations } from './cursorAtomicMoveOperations.js';\r\nexport class CursorPosition {\r\n    constructor(lineNumber, column, leftoverVisibleColumns) {\r\n        this.lineNumber = lineNumber;\r\n        this.column = column;\r\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\r\n    }\r\n}\r\nexport class MoveOperations {\r\n    static leftPosition(model, lineNumber, column) {\r\n        if (column > model.getLineMinColumn(lineNumber)) {\r\n            column = column - strings.prevCharLength(model.getLineContent(lineNumber), column - 1);\r\n        }\r\n        else if (lineNumber > 1) {\r\n            lineNumber = lineNumber - 1;\r\n            column = model.getLineMaxColumn(lineNumber);\r\n        }\r\n        return new Position(lineNumber, column);\r\n    }\r\n    static leftPositionAtomicSoftTabs(model, lineNumber, column, tabSize) {\r\n        const minColumn = model.getLineMinColumn(lineNumber);\r\n        const lineContent = model.getLineContent(lineNumber);\r\n        const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, column - 1, tabSize, 0 /* Left */);\r\n        if (newPosition === -1 || newPosition + 1 < minColumn) {\r\n            return this.leftPosition(model, lineNumber, column);\r\n        }\r\n        return new Position(lineNumber, newPosition + 1);\r\n    }\r\n    static left(config, model, lineNumber, column) {\r\n        const pos = config.stickyTabStops\r\n            ? MoveOperations.leftPositionAtomicSoftTabs(model, lineNumber, column, config.tabSize)\r\n            : MoveOperations.leftPosition(model, lineNumber, column);\r\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\r\n    }\r\n    static moveLeft(config, model, cursor, inSelectionMode, noOfColumns) {\r\n        let lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\r\n            lineNumber = cursor.selection.startLineNumber;\r\n            column = cursor.selection.startColumn;\r\n        }\r\n        else {\r\n            let r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\r\n            lineNumber = r.lineNumber;\r\n            column = r.column;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    }\r\n    static rightPosition(model, lineNumber, column) {\r\n        if (column < model.getLineMaxColumn(lineNumber)) {\r\n            column = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\r\n        }\r\n        else if (lineNumber < model.getLineCount()) {\r\n            lineNumber = lineNumber + 1;\r\n            column = model.getLineMinColumn(lineNumber);\r\n        }\r\n        return new Position(lineNumber, column);\r\n    }\r\n    static rightPositionAtomicSoftTabs(model, lineNumber, column, tabSize, indentSize) {\r\n        const lineContent = model.getLineContent(lineNumber);\r\n        const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, column - 1, tabSize, 1 /* Right */);\r\n        if (newPosition === -1) {\r\n            return this.rightPosition(model, lineNumber, column);\r\n        }\r\n        return new Position(lineNumber, newPosition + 1);\r\n    }\r\n    static right(config, model, lineNumber, column) {\r\n        const pos = config.stickyTabStops\r\n            ? MoveOperations.rightPositionAtomicSoftTabs(model, lineNumber, column, config.tabSize, config.indentSize)\r\n            : MoveOperations.rightPosition(model, lineNumber, column);\r\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\r\n    }\r\n    static moveRight(config, model, cursor, inSelectionMode, noOfColumns) {\r\n        let lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\r\n            lineNumber = cursor.selection.endLineNumber;\r\n            column = cursor.selection.endColumn;\r\n        }\r\n        else {\r\n            let r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\r\n            lineNumber = r.lineNumber;\r\n            column = r.column;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    }\r\n    static down(config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\r\n        const currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\r\n        const lineCount = model.getLineCount();\r\n        const wasOnLastPosition = (lineNumber === lineCount && column === model.getLineMaxColumn(lineNumber));\r\n        lineNumber = lineNumber + count;\r\n        if (lineNumber > lineCount) {\r\n            lineNumber = lineCount;\r\n            if (allowMoveOnLastLine) {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n            else {\r\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\r\n            }\r\n        }\r\n        else {\r\n            column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\r\n        }\r\n        if (wasOnLastPosition) {\r\n            leftoverVisibleColumns = 0;\r\n        }\r\n        else {\r\n            leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\r\n        }\r\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\r\n    }\r\n    static moveDown(config, model, cursor, inSelectionMode, linesCount) {\r\n        let lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move down acts relative to the end of selection\r\n            lineNumber = cursor.selection.endLineNumber;\r\n            column = cursor.selection.endColumn;\r\n        }\r\n        else {\r\n            lineNumber = cursor.position.lineNumber;\r\n            column = cursor.position.column;\r\n        }\r\n        let r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\r\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\r\n    }\r\n    static translateDown(config, model, cursor) {\r\n        let selection = cursor.selection;\r\n        let selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\r\n        let position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\r\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\r\n    }\r\n    static up(config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\r\n        const currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\r\n        const wasOnFirstPosition = (lineNumber === 1 && column === 1);\r\n        lineNumber = lineNumber - count;\r\n        if (lineNumber < 1) {\r\n            lineNumber = 1;\r\n            if (allowMoveOnFirstLine) {\r\n                column = model.getLineMinColumn(lineNumber);\r\n            }\r\n            else {\r\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\r\n            }\r\n        }\r\n        else {\r\n            column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\r\n        }\r\n        if (wasOnFirstPosition) {\r\n            leftoverVisibleColumns = 0;\r\n        }\r\n        else {\r\n            leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\r\n        }\r\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\r\n    }\r\n    static moveUp(config, model, cursor, inSelectionMode, linesCount) {\r\n        let lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move up acts relative to the beginning of selection\r\n            lineNumber = cursor.selection.startLineNumber;\r\n            column = cursor.selection.startColumn;\r\n        }\r\n        else {\r\n            lineNumber = cursor.position.lineNumber;\r\n            column = cursor.position.column;\r\n        }\r\n        let r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\r\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\r\n    }\r\n    static translateUp(config, model, cursor) {\r\n        let selection = cursor.selection;\r\n        let selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\r\n        let position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\r\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\r\n    }\r\n    static moveToBeginningOfLine(config, model, cursor, inSelectionMode) {\r\n        let lineNumber = cursor.position.lineNumber;\r\n        let minColumn = model.getLineMinColumn(lineNumber);\r\n        let firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\r\n        let column;\r\n        let relevantColumnNumber = cursor.position.column;\r\n        if (relevantColumnNumber === firstNonBlankColumn) {\r\n            column = minColumn;\r\n        }\r\n        else {\r\n            column = firstNonBlankColumn;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    }\r\n    static moveToEndOfLine(config, model, cursor, inSelectionMode, sticky) {\r\n        let lineNumber = cursor.position.lineNumber;\r\n        let maxColumn = model.getLineMaxColumn(lineNumber);\r\n        return cursor.move(inSelectionMode, lineNumber, maxColumn, sticky ? 1073741824 /* MAX_SAFE_SMALL_INTEGER */ - maxColumn : 0);\r\n    }\r\n    static moveToBeginningOfBuffer(config, model, cursor, inSelectionMode) {\r\n        return cursor.move(inSelectionMode, 1, 1, 0);\r\n    }\r\n    static moveToEndOfBuffer(config, model, cursor, inSelectionMode) {\r\n        let lastLineNumber = model.getLineCount();\r\n        let lastColumn = model.getLineMaxColumn(lastLineNumber);\r\n        return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}