{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from './browser.js';\nimport * as platform from '../common/platform.js';\n/**\r\n * Browser feature we can support in current platform, browser and environment.\r\n */\n\nexport var BrowserFeatures = {\n  clipboard: {\n    writeText: platform.isNative || document.queryCommandSupported && document.queryCommandSupported('copy') || !!(navigator && navigator.clipboard && navigator.clipboard.writeText),\n    readText: platform.isNative || !!(navigator && navigator.clipboard && navigator.clipboard.readText),\n    richText: function () {\n      if (browser.isEdgeLegacy) {\n        var index = navigator.userAgent.indexOf('Edge/');\n        var version = parseInt(navigator.userAgent.substring(index + 5, navigator.userAgent.indexOf('.', index)), 10);\n\n        if (!version || version >= 12 && version <= 16) {\n          return false;\n        }\n      }\n\n      return true;\n    }()\n  },\n  keyboard: function () {\n    if (platform.isNative || browser.isStandalone) {\n      return 0\n      /* Always */\n      ;\n    }\n\n    if (navigator.keyboard || browser.isSafari) {\n      return 1\n      /* FullScreen */\n      ;\n    }\n\n    return 2\n    /* None */\n    ;\n  }(),\n  // 'ontouchstart' in window always evaluates to true with typescript's modern typings. This causes `window` to be\n  // `never` later in `window.navigator`. That's why we need the explicit `window as Window` cast\n  touch: 'ontouchstart' in window || navigator.maxTouchPoints > 0 || window.navigator.msMaxTouchPoints > 0,\n  pointerEvents: window.PointerEvent && ('ontouchstart' in window || window.navigator.maxTouchPoints > 0 || navigator.maxTouchPoints > 0 || window.navigator.msMaxTouchPoints > 0)\n};","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/browser/canIUse.js"],"names":["browser","platform","BrowserFeatures","clipboard","writeText","isNative","document","queryCommandSupported","navigator","readText","richText","isEdgeLegacy","index","userAgent","indexOf","version","parseInt","substring","keyboard","isStandalone","isSafari","touch","window","maxTouchPoints","msMaxTouchPoints","pointerEvents","PointerEvent"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB;AACA,OAAO,KAAKC,QAAZ,MAA0B,uBAA1B;AACA;AACA;AACA;;AACA,OAAO,IAAMC,eAAe,GAAG;AAC3BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,SAAS,EAAGH,QAAQ,CAACI,QAAT,IACJC,QAAQ,CAACC,qBAAT,IAAkCD,QAAQ,CAACC,qBAAT,CAA+B,MAA/B,CAD9B,IAEL,CAAC,EAAEC,SAAS,IAAIA,SAAS,CAACL,SAAvB,IAAoCK,SAAS,CAACL,SAAV,CAAoBC,SAA1D,CAHD;AAIPK,IAAAA,QAAQ,EAAGR,QAAQ,CAACI,QAAT,IACJ,CAAC,EAAEG,SAAS,IAAIA,SAAS,CAACL,SAAvB,IAAoCK,SAAS,CAACL,SAAV,CAAoBM,QAA1D,CALD;AAMPC,IAAAA,QAAQ,EAAG,YAAM;AACb,UAAIV,OAAO,CAACW,YAAZ,EAA0B;AACtB,YAAIC,KAAK,GAAGJ,SAAS,CAACK,SAAV,CAAoBC,OAApB,CAA4B,OAA5B,CAAZ;AACA,YAAIC,OAAO,GAAGC,QAAQ,CAACR,SAAS,CAACK,SAAV,CAAoBI,SAApB,CAA8BL,KAAK,GAAG,CAAtC,EAAyCJ,SAAS,CAACK,SAAV,CAAoBC,OAApB,CAA4B,GAA5B,EAAiCF,KAAjC,CAAzC,CAAD,EAAoF,EAApF,CAAtB;;AACA,YAAI,CAACG,OAAD,IAAaA,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,EAA7C,EAAkD;AAC9C,iBAAO,KAAP;AACH;AACJ;;AACD,aAAO,IAAP;AACH,KATS;AANH,GADgB;AAkB3BG,EAAAA,QAAQ,EAAG,YAAM;AACb,QAAIjB,QAAQ,CAACI,QAAT,IAAqBL,OAAO,CAACmB,YAAjC,EAA+C;AAC3C,aAAO;AAAE;AAAT;AACH;;AACD,QAAIX,SAAS,CAACU,QAAV,IAAsBlB,OAAO,CAACoB,QAAlC,EAA4C;AACxC,aAAO;AAAE;AAAT;AACH;;AACD,WAAO;AAAE;AAAT;AACH,GARS,EAlBiB;AA2B3B;AACA;AACAC,EAAAA,KAAK,EAAE,kBAAkBC,MAAlB,IAA4Bd,SAAS,CAACe,cAAV,GAA2B,CAAvD,IAA4DD,MAAM,CAACd,SAAP,CAAiBgB,gBAAjB,GAAoC,CA7B5E;AA8B3BC,EAAAA,aAAa,EAAEH,MAAM,CAACI,YAAP,KAAwB,kBAAkBJ,MAAlB,IAA4BA,MAAM,CAACd,SAAP,CAAiBe,cAAjB,GAAkC,CAA9D,IAAmEf,SAAS,CAACe,cAAV,GAA2B,CAA9F,IAAmGD,MAAM,CAACd,SAAP,CAAiBgB,gBAAjB,GAAoC,CAA/J;AA9BY,CAAxB","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as browser from './browser.js';\r\nimport * as platform from '../common/platform.js';\r\n/**\r\n * Browser feature we can support in current platform, browser and environment.\r\n */\r\nexport const BrowserFeatures = {\r\n    clipboard: {\r\n        writeText: (platform.isNative\r\n            || (document.queryCommandSupported && document.queryCommandSupported('copy'))\r\n            || !!(navigator && navigator.clipboard && navigator.clipboard.writeText)),\r\n        readText: (platform.isNative\r\n            || !!(navigator && navigator.clipboard && navigator.clipboard.readText)),\r\n        richText: (() => {\r\n            if (browser.isEdgeLegacy) {\r\n                let index = navigator.userAgent.indexOf('Edge/');\r\n                let version = parseInt(navigator.userAgent.substring(index + 5, navigator.userAgent.indexOf('.', index)), 10);\r\n                if (!version || (version >= 12 && version <= 16)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        })()\r\n    },\r\n    keyboard: (() => {\r\n        if (platform.isNative || browser.isStandalone) {\r\n            return 0 /* Always */;\r\n        }\r\n        if (navigator.keyboard || browser.isSafari) {\r\n            return 1 /* FullScreen */;\r\n        }\r\n        return 2 /* None */;\r\n    })(),\r\n    // 'ontouchstart' in window always evaluates to true with typescript's modern typings. This causes `window` to be\r\n    // `never` later in `window.navigator`. That's why we need the explicit `window as Window` cast\r\n    touch: 'ontouchstart' in window || navigator.maxTouchPoints > 0 || window.navigator.msMaxTouchPoints > 0,\r\n    pointerEvents: window.PointerEvent && ('ontouchstart' in window || window.navigator.maxTouchPoints > 0 || navigator.maxTouchPoints > 0 || window.navigator.msMaxTouchPoints > 0)\r\n};\r\n"]},"metadata":{},"sourceType":"module"}