{"ast":null,"code":"import _toConsumableArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { PauseableEmitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { DisposableStore, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { TernarySearchTree } from '../../../base/common/map.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IContextKeyService, SET_CONTEXT_COMMAND_ID } from '../common/contextkey.js';\nimport { KeybindingResolver } from '../../keybinding/common/keybindingResolver.js';\nvar KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\nexport var Context = /*#__PURE__*/function () {\n  function Context(id, parent) {\n    _classCallCheck(this, Context);\n\n    this._id = id;\n    this._parent = parent;\n    this._value = Object.create(null);\n    this._value['_contextId'] = id;\n  }\n\n  _createClass(Context, [{\n    key: \"setValue\",\n    value: function setValue(key, value) {\n      // console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\n      if (this._value[key] !== value) {\n        this._value[key] = value;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"removeValue\",\n    value: function removeValue(key) {\n      // console.log('REMOVE ' + key + ' FROM ' + this._id);\n      if (key in this._value) {\n        delete this._value[key];\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key) {\n      var ret = this._value[key];\n\n      if (typeof ret === 'undefined' && this._parent) {\n        return this._parent.getValue(key);\n      }\n\n      return ret;\n    }\n  }]);\n\n  return Context;\n}();\n\nvar NullContext = /*#__PURE__*/function (_Context) {\n  _inherits(NullContext, _Context);\n\n  var _super = _createSuper(NullContext);\n\n  function NullContext() {\n    _classCallCheck(this, NullContext);\n\n    return _super.call(this, -1, null);\n  }\n\n  _createClass(NullContext, [{\n    key: \"setValue\",\n    value: function setValue(key, value) {\n      return false;\n    }\n  }, {\n    key: \"removeValue\",\n    value: function removeValue(key) {\n      return false;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key) {\n      return undefined;\n    }\n  }]);\n\n  return NullContext;\n}(Context);\n\nNullContext.INSTANCE = new NullContext();\n\nvar ConfigAwareContextValuesContainer = /*#__PURE__*/function (_Context2) {\n  _inherits(ConfigAwareContextValuesContainer, _Context2);\n\n  var _super2 = _createSuper(ConfigAwareContextValuesContainer);\n\n  function ConfigAwareContextValuesContainer(id, _configurationService, emitter) {\n    var _this;\n\n    _classCallCheck(this, ConfigAwareContextValuesContainer);\n\n    _this = _super2.call(this, id, null);\n    _this._configurationService = _configurationService;\n    _this._values = TernarySearchTree.forConfigKeys();\n    _this._listener = _this._configurationService.onDidChangeConfiguration(function (event) {\n      if (event.source === 6\n      /* DEFAULT */\n      ) {\n          // new setting, reset everything\n          var allKeys = Array.from(Iterable.map(_this._values, function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 1),\n                k = _ref2[0];\n\n            return k;\n          }));\n\n          _this._values.clear();\n\n          emitter.fire(new ArrayContextKeyChangeEvent(allKeys));\n        } else {\n        var changedKeys = [];\n\n        var _iterator = _createForOfIteratorHelper(event.affectedKeys),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var configKey = _step.value;\n            var contextKey = \"config.\".concat(configKey);\n\n            var cachedItems = _this._values.findSuperstr(contextKey);\n\n            if (cachedItems !== undefined) {\n              changedKeys.push.apply(changedKeys, _toConsumableArray(Iterable.map(cachedItems, function (_ref3) {\n                var _ref4 = _slicedToArray(_ref3, 1),\n                    key = _ref4[0];\n\n                return key;\n              })));\n\n              _this._values.deleteSuperstr(contextKey);\n            }\n\n            if (_this._values.has(contextKey)) {\n              changedKeys.push(contextKey);\n\n              _this._values[\"delete\"](contextKey);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        emitter.fire(new ArrayContextKeyChangeEvent(changedKeys));\n      }\n    });\n    return _this;\n  }\n\n  _createClass(ConfigAwareContextValuesContainer, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._listener.dispose();\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key) {\n      if (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\n        return _get(_getPrototypeOf(ConfigAwareContextValuesContainer.prototype), \"getValue\", this).call(this, key);\n      }\n\n      if (this._values.has(key)) {\n        return this._values.get(key);\n      }\n\n      var configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\n\n      var configValue = this._configurationService.getValue(configKey);\n\n      var value = undefined;\n\n      switch (typeof configValue) {\n        case 'number':\n        case 'boolean':\n        case 'string':\n          value = configValue;\n          break;\n\n        default:\n          if (Array.isArray(configValue)) {\n            value = JSON.stringify(configValue);\n          } else {\n            value = configValue;\n          }\n\n      }\n\n      this._values.set(key, value);\n\n      return value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(key, value) {\n      return _get(_getPrototypeOf(ConfigAwareContextValuesContainer.prototype), \"setValue\", this).call(this, key, value);\n    }\n  }, {\n    key: \"removeValue\",\n    value: function removeValue(key) {\n      return _get(_getPrototypeOf(ConfigAwareContextValuesContainer.prototype), \"removeValue\", this).call(this, key);\n    }\n  }]);\n\n  return ConfigAwareContextValuesContainer;\n}(Context);\n\nConfigAwareContextValuesContainer._keyPrefix = 'config.';\n\nvar ContextKey = /*#__PURE__*/function () {\n  function ContextKey(service, key, defaultValue) {\n    _classCallCheck(this, ContextKey);\n\n    this._service = service;\n    this._key = key;\n    this._defaultValue = defaultValue;\n    this.reset();\n  }\n\n  _createClass(ContextKey, [{\n    key: \"set\",\n    value: function set(value) {\n      this._service.setContext(this._key, value);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (typeof this._defaultValue === 'undefined') {\n        this._service.removeContext(this._key);\n      } else {\n        this._service.setContext(this._key, this._defaultValue);\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this._service.getContextKeyValue(this._key);\n    }\n  }]);\n\n  return ContextKey;\n}();\n\nvar SimpleContextKeyChangeEvent = /*#__PURE__*/function () {\n  function SimpleContextKeyChangeEvent(key) {\n    _classCallCheck(this, SimpleContextKeyChangeEvent);\n\n    this.key = key;\n  }\n\n  _createClass(SimpleContextKeyChangeEvent, [{\n    key: \"affectsSome\",\n    value: function affectsSome(keys) {\n      return keys.has(this.key);\n    }\n  }]);\n\n  return SimpleContextKeyChangeEvent;\n}();\n\nvar ArrayContextKeyChangeEvent = /*#__PURE__*/function () {\n  function ArrayContextKeyChangeEvent(keys) {\n    _classCallCheck(this, ArrayContextKeyChangeEvent);\n\n    this.keys = keys;\n  }\n\n  _createClass(ArrayContextKeyChangeEvent, [{\n    key: \"affectsSome\",\n    value: function affectsSome(keys) {\n      var _iterator2 = _createForOfIteratorHelper(this.keys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var key = _step2.value;\n\n          if (keys.has(key)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return false;\n    }\n  }]);\n\n  return ArrayContextKeyChangeEvent;\n}();\n\nvar CompositeContextKeyChangeEvent = /*#__PURE__*/function () {\n  function CompositeContextKeyChangeEvent(events) {\n    _classCallCheck(this, CompositeContextKeyChangeEvent);\n\n    this.events = events;\n  }\n\n  _createClass(CompositeContextKeyChangeEvent, [{\n    key: \"affectsSome\",\n    value: function affectsSome(keys) {\n      var _iterator3 = _createForOfIteratorHelper(this.events),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var e = _step3.value;\n\n          if (e.affectsSome(keys)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return false;\n    }\n  }]);\n\n  return CompositeContextKeyChangeEvent;\n}();\n\nexport var AbstractContextKeyService = /*#__PURE__*/function () {\n  function AbstractContextKeyService(myContextId) {\n    _classCallCheck(this, AbstractContextKeyService);\n\n    this._onDidChangeContext = new PauseableEmitter({\n      merge: function merge(input) {\n        return new CompositeContextKeyChangeEvent(input);\n      }\n    });\n    this.onDidChangeContext = this._onDidChangeContext.event;\n    this._isDisposed = false;\n    this._myContextId = myContextId;\n  }\n\n  _createClass(AbstractContextKeyService, [{\n    key: \"createKey\",\n    value: function createKey(key, defaultValue) {\n      if (this._isDisposed) {\n        throw new Error(\"AbstractContextKeyService has been disposed\");\n      }\n\n      return new ContextKey(this, key, defaultValue);\n    }\n  }, {\n    key: \"bufferChangeEvents\",\n    value: function bufferChangeEvents(callback) {\n      this._onDidChangeContext.pause();\n\n      try {\n        callback();\n      } finally {\n        this._onDidChangeContext.resume();\n      }\n    }\n  }, {\n    key: \"createScoped\",\n    value: function createScoped(domNode) {\n      if (this._isDisposed) {\n        throw new Error(\"AbstractContextKeyService has been disposed\");\n      }\n\n      return new ScopedContextKeyService(this, domNode);\n    }\n  }, {\n    key: \"contextMatchesRules\",\n    value: function contextMatchesRules(rules) {\n      if (this._isDisposed) {\n        throw new Error(\"AbstractContextKeyService has been disposed\");\n      }\n\n      var context = this.getContextValuesContainer(this._myContextId);\n      var result = KeybindingResolver.contextMatchesRules(context, rules); // console.group(rules.serialize() + ' -> ' + result);\n      // rules.keys().forEach(key => { console.log(key, ctx[key]); });\n      // console.groupEnd();\n\n      return result;\n    }\n  }, {\n    key: \"getContextKeyValue\",\n    value: function getContextKeyValue(key) {\n      if (this._isDisposed) {\n        return undefined;\n      }\n\n      return this.getContextValuesContainer(this._myContextId).getValue(key);\n    }\n  }, {\n    key: \"setContext\",\n    value: function setContext(key, value) {\n      if (this._isDisposed) {\n        return;\n      }\n\n      var myContext = this.getContextValuesContainer(this._myContextId);\n\n      if (!myContext) {\n        return;\n      }\n\n      if (myContext.setValue(key, value)) {\n        this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n      }\n    }\n  }, {\n    key: \"removeContext\",\n    value: function removeContext(key) {\n      if (this._isDisposed) {\n        return;\n      }\n\n      if (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\n        this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n      }\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(target) {\n      if (this._isDisposed) {\n        return NullContext.INSTANCE;\n      }\n\n      return this.getContextValuesContainer(findContextAttr(target));\n    }\n  }]);\n\n  return AbstractContextKeyService;\n}();\n\nvar ContextKeyService = /*#__PURE__*/function (_AbstractContextKeySe) {\n  _inherits(ContextKeyService, _AbstractContextKeySe);\n\n  var _super3 = _createSuper(ContextKeyService);\n\n  function ContextKeyService(configurationService) {\n    var _this2;\n\n    _classCallCheck(this, ContextKeyService);\n\n    _this2 = _super3.call(this, 0);\n    _this2._contexts = new Map();\n    _this2._toDispose = new DisposableStore();\n    _this2._lastContextId = 0;\n    var myContext = new ConfigAwareContextValuesContainer(_this2._myContextId, configurationService, _this2._onDidChangeContext);\n\n    _this2._contexts.set(_this2._myContextId, myContext);\n\n    _this2._toDispose.add(myContext); // Uncomment this to see the contexts continuously logged\n    // let lastLoggedValue: string | null = null;\n    // setInterval(() => {\n    // \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\n    // \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\n    // \tif (lastLoggedValue !== logValue) {\n    // \t\tlastLoggedValue = logValue;\n    // \t\tconsole.log(lastLoggedValue);\n    // \t}\n    // }, 2000);\n\n\n    return _this2;\n  }\n\n  _createClass(ContextKeyService, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._onDidChangeContext.dispose();\n\n      this._isDisposed = true;\n\n      this._toDispose.dispose();\n    }\n  }, {\n    key: \"getContextValuesContainer\",\n    value: function getContextValuesContainer(contextId) {\n      if (this._isDisposed) {\n        return NullContext.INSTANCE;\n      }\n\n      return this._contexts.get(contextId) || NullContext.INSTANCE;\n    }\n  }, {\n    key: \"createChildContext\",\n    value: function createChildContext() {\n      var parentContextId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._myContextId;\n\n      if (this._isDisposed) {\n        throw new Error(\"ContextKeyService has been disposed\");\n      }\n\n      var id = ++this._lastContextId;\n\n      this._contexts.set(id, new Context(id, this.getContextValuesContainer(parentContextId)));\n\n      return id;\n    }\n  }, {\n    key: \"disposeContext\",\n    value: function disposeContext(contextId) {\n      if (!this._isDisposed) {\n        this._contexts[\"delete\"](contextId);\n      }\n    }\n  }]);\n\n  return ContextKeyService;\n}(AbstractContextKeyService);\n\nContextKeyService = __decorate([__param(0, IConfigurationService)], ContextKeyService);\nexport { ContextKeyService };\n\nvar ScopedContextKeyService = /*#__PURE__*/function (_AbstractContextKeySe2) {\n  _inherits(ScopedContextKeyService, _AbstractContextKeySe2);\n\n  var _super4 = _createSuper(ScopedContextKeyService);\n\n  function ScopedContextKeyService(parent, domNode) {\n    var _this3;\n\n    _classCallCheck(this, ScopedContextKeyService);\n\n    _this3 = _super4.call(this, parent.createChildContext());\n    _this3._parentChangeListener = new MutableDisposable();\n    _this3._parent = parent;\n\n    _this3._updateParentChangeListener();\n\n    if (domNode) {\n      _this3._domNode = domNode;\n\n      if (_this3._domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n        var extraInfo = '';\n\n        if (_this3._domNode.classList) {\n          extraInfo = Array.from(_this3._domNode.classList.values()).join(', ');\n        }\n\n        console.error(\"Element already has context attribute\".concat(extraInfo ? ': ' + extraInfo : ''));\n      }\n\n      _this3._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(_this3._myContextId));\n    }\n\n    return _this3;\n  }\n\n  _createClass(ScopedContextKeyService, [{\n    key: \"_updateParentChangeListener\",\n    value: function _updateParentChangeListener() {\n      // Forward parent events to this listener. Parent will change.\n      this._parentChangeListener.value = this._parent.onDidChangeContext(this._onDidChangeContext.fire, this._onDidChangeContext);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _a;\n\n      this._onDidChangeContext.dispose();\n\n      this._isDisposed = true;\n\n      this._parent.disposeContext(this._myContextId);\n\n      (_a = this._parentChangeListener) === null || _a === void 0 ? void 0 : _a.dispose();\n\n      if (this._domNode) {\n        this._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\n\n        this._domNode = undefined;\n      }\n    }\n  }, {\n    key: \"getContextValuesContainer\",\n    value: function getContextValuesContainer(contextId) {\n      if (this._isDisposed) {\n        return NullContext.INSTANCE;\n      }\n\n      return this._parent.getContextValuesContainer(contextId);\n    }\n  }, {\n    key: \"createChildContext\",\n    value: function createChildContext() {\n      var parentContextId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._myContextId;\n\n      if (this._isDisposed) {\n        throw new Error(\"ScopedContextKeyService has been disposed\");\n      }\n\n      return this._parent.createChildContext(parentContextId);\n    }\n  }, {\n    key: \"disposeContext\",\n    value: function disposeContext(contextId) {\n      if (this._isDisposed) {\n        return;\n      }\n\n      this._parent.disposeContext(contextId);\n    }\n  }]);\n\n  return ScopedContextKeyService;\n}(AbstractContextKeyService);\n\nfunction findContextAttr(domNode) {\n  while (domNode) {\n    if (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n      var attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\n\n      if (attr) {\n        return parseInt(attr, 10);\n      }\n\n      return NaN;\n    }\n\n    domNode = domNode.parentElement;\n  }\n\n  return 0;\n}\n\nCommandsRegistry.registerCommand(SET_CONTEXT_COMMAND_ID, function (accessor, contextKey, contextValue) {\n  accessor.get(IContextKeyService).createKey(String(contextKey), contextValue);\n});","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/platform/contextkey/browser/contextKeyService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","PauseableEmitter","Iterable","DisposableStore","MutableDisposable","TernarySearchTree","CommandsRegistry","IConfigurationService","IContextKeyService","SET_CONTEXT_COMMAND_ID","KeybindingResolver","KEYBINDING_CONTEXT_ATTR","Context","id","parent","_id","_parent","_value","create","value","ret","getValue","NullContext","undefined","INSTANCE","ConfigAwareContextValuesContainer","_configurationService","emitter","_values","forConfigKeys","_listener","onDidChangeConfiguration","event","source","allKeys","Array","from","map","k","clear","fire","ArrayContextKeyChangeEvent","changedKeys","affectedKeys","configKey","contextKey","cachedItems","findSuperstr","push","deleteSuperstr","has","dispose","indexOf","_keyPrefix","get","substr","configValue","isArray","JSON","stringify","set","ContextKey","service","defaultValue","_service","_key","_defaultValue","reset","setContext","removeContext","getContextKeyValue","SimpleContextKeyChangeEvent","keys","CompositeContextKeyChangeEvent","events","e","affectsSome","AbstractContextKeyService","myContextId","_onDidChangeContext","merge","input","onDidChangeContext","_isDisposed","_myContextId","Error","callback","pause","resume","domNode","ScopedContextKeyService","rules","context","getContextValuesContainer","result","contextMatchesRules","myContext","setValue","removeValue","findContextAttr","ContextKeyService","configurationService","_contexts","Map","_toDispose","_lastContextId","add","contextId","parentContextId","createChildContext","_parentChangeListener","_updateParentChangeListener","_domNode","hasAttribute","extraInfo","classList","values","join","console","error","setAttribute","String","_a","disposeContext","removeAttribute","attr","getAttribute","parseInt","NaN","parentElement","registerCommand","accessor","contextValue","createKey"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nimport { PauseableEmitter } from '../../../base/common/event.js';\r\nimport { Iterable } from '../../../base/common/iterator.js';\r\nimport { DisposableStore, MutableDisposable } from '../../../base/common/lifecycle.js';\r\nimport { TernarySearchTree } from '../../../base/common/map.js';\r\nimport { CommandsRegistry } from '../../commands/common/commands.js';\r\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\r\nimport { IContextKeyService, SET_CONTEXT_COMMAND_ID } from '../common/contextkey.js';\r\nimport { KeybindingResolver } from '../../keybinding/common/keybindingResolver.js';\r\nconst KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\r\nexport class Context {\r\n    constructor(id, parent) {\r\n        this._id = id;\r\n        this._parent = parent;\r\n        this._value = Object.create(null);\r\n        this._value['_contextId'] = id;\r\n    }\r\n    setValue(key, value) {\r\n        // console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\r\n        if (this._value[key] !== value) {\r\n            this._value[key] = value;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    removeValue(key) {\r\n        // console.log('REMOVE ' + key + ' FROM ' + this._id);\r\n        if (key in this._value) {\r\n            delete this._value[key];\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getValue(key) {\r\n        const ret = this._value[key];\r\n        if (typeof ret === 'undefined' && this._parent) {\r\n            return this._parent.getValue(key);\r\n        }\r\n        return ret;\r\n    }\r\n}\r\nclass NullContext extends Context {\r\n    constructor() {\r\n        super(-1, null);\r\n    }\r\n    setValue(key, value) {\r\n        return false;\r\n    }\r\n    removeValue(key) {\r\n        return false;\r\n    }\r\n    getValue(key) {\r\n        return undefined;\r\n    }\r\n}\r\nNullContext.INSTANCE = new NullContext();\r\nclass ConfigAwareContextValuesContainer extends Context {\r\n    constructor(id, _configurationService, emitter) {\r\n        super(id, null);\r\n        this._configurationService = _configurationService;\r\n        this._values = TernarySearchTree.forConfigKeys();\r\n        this._listener = this._configurationService.onDidChangeConfiguration(event => {\r\n            if (event.source === 6 /* DEFAULT */) {\r\n                // new setting, reset everything\r\n                const allKeys = Array.from(Iterable.map(this._values, ([k]) => k));\r\n                this._values.clear();\r\n                emitter.fire(new ArrayContextKeyChangeEvent(allKeys));\r\n            }\r\n            else {\r\n                const changedKeys = [];\r\n                for (const configKey of event.affectedKeys) {\r\n                    const contextKey = `config.${configKey}`;\r\n                    const cachedItems = this._values.findSuperstr(contextKey);\r\n                    if (cachedItems !== undefined) {\r\n                        changedKeys.push(...Iterable.map(cachedItems, ([key]) => key));\r\n                        this._values.deleteSuperstr(contextKey);\r\n                    }\r\n                    if (this._values.has(contextKey)) {\r\n                        changedKeys.push(contextKey);\r\n                        this._values.delete(contextKey);\r\n                    }\r\n                }\r\n                emitter.fire(new ArrayContextKeyChangeEvent(changedKeys));\r\n            }\r\n        });\r\n    }\r\n    dispose() {\r\n        this._listener.dispose();\r\n    }\r\n    getValue(key) {\r\n        if (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\r\n            return super.getValue(key);\r\n        }\r\n        if (this._values.has(key)) {\r\n            return this._values.get(key);\r\n        }\r\n        const configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\r\n        const configValue = this._configurationService.getValue(configKey);\r\n        let value = undefined;\r\n        switch (typeof configValue) {\r\n            case 'number':\r\n            case 'boolean':\r\n            case 'string':\r\n                value = configValue;\r\n                break;\r\n            default:\r\n                if (Array.isArray(configValue)) {\r\n                    value = JSON.stringify(configValue);\r\n                }\r\n                else {\r\n                    value = configValue;\r\n                }\r\n        }\r\n        this._values.set(key, value);\r\n        return value;\r\n    }\r\n    setValue(key, value) {\r\n        return super.setValue(key, value);\r\n    }\r\n    removeValue(key) {\r\n        return super.removeValue(key);\r\n    }\r\n}\r\nConfigAwareContextValuesContainer._keyPrefix = 'config.';\r\nclass ContextKey {\r\n    constructor(service, key, defaultValue) {\r\n        this._service = service;\r\n        this._key = key;\r\n        this._defaultValue = defaultValue;\r\n        this.reset();\r\n    }\r\n    set(value) {\r\n        this._service.setContext(this._key, value);\r\n    }\r\n    reset() {\r\n        if (typeof this._defaultValue === 'undefined') {\r\n            this._service.removeContext(this._key);\r\n        }\r\n        else {\r\n            this._service.setContext(this._key, this._defaultValue);\r\n        }\r\n    }\r\n    get() {\r\n        return this._service.getContextKeyValue(this._key);\r\n    }\r\n}\r\nclass SimpleContextKeyChangeEvent {\r\n    constructor(key) {\r\n        this.key = key;\r\n    }\r\n    affectsSome(keys) {\r\n        return keys.has(this.key);\r\n    }\r\n}\r\nclass ArrayContextKeyChangeEvent {\r\n    constructor(keys) {\r\n        this.keys = keys;\r\n    }\r\n    affectsSome(keys) {\r\n        for (const key of this.keys) {\r\n            if (keys.has(key)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nclass CompositeContextKeyChangeEvent {\r\n    constructor(events) {\r\n        this.events = events;\r\n    }\r\n    affectsSome(keys) {\r\n        for (const e of this.events) {\r\n            if (e.affectsSome(keys)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport class AbstractContextKeyService {\r\n    constructor(myContextId) {\r\n        this._onDidChangeContext = new PauseableEmitter({ merge: input => new CompositeContextKeyChangeEvent(input) });\r\n        this.onDidChangeContext = this._onDidChangeContext.event;\r\n        this._isDisposed = false;\r\n        this._myContextId = myContextId;\r\n    }\r\n    createKey(key, defaultValue) {\r\n        if (this._isDisposed) {\r\n            throw new Error(`AbstractContextKeyService has been disposed`);\r\n        }\r\n        return new ContextKey(this, key, defaultValue);\r\n    }\r\n    bufferChangeEvents(callback) {\r\n        this._onDidChangeContext.pause();\r\n        try {\r\n            callback();\r\n        }\r\n        finally {\r\n            this._onDidChangeContext.resume();\r\n        }\r\n    }\r\n    createScoped(domNode) {\r\n        if (this._isDisposed) {\r\n            throw new Error(`AbstractContextKeyService has been disposed`);\r\n        }\r\n        return new ScopedContextKeyService(this, domNode);\r\n    }\r\n    contextMatchesRules(rules) {\r\n        if (this._isDisposed) {\r\n            throw new Error(`AbstractContextKeyService has been disposed`);\r\n        }\r\n        const context = this.getContextValuesContainer(this._myContextId);\r\n        const result = KeybindingResolver.contextMatchesRules(context, rules);\r\n        // console.group(rules.serialize() + ' -> ' + result);\r\n        // rules.keys().forEach(key => { console.log(key, ctx[key]); });\r\n        // console.groupEnd();\r\n        return result;\r\n    }\r\n    getContextKeyValue(key) {\r\n        if (this._isDisposed) {\r\n            return undefined;\r\n        }\r\n        return this.getContextValuesContainer(this._myContextId).getValue(key);\r\n    }\r\n    setContext(key, value) {\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n        const myContext = this.getContextValuesContainer(this._myContextId);\r\n        if (!myContext) {\r\n            return;\r\n        }\r\n        if (myContext.setValue(key, value)) {\r\n            this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\r\n        }\r\n    }\r\n    removeContext(key) {\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n        if (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\r\n            this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\r\n        }\r\n    }\r\n    getContext(target) {\r\n        if (this._isDisposed) {\r\n            return NullContext.INSTANCE;\r\n        }\r\n        return this.getContextValuesContainer(findContextAttr(target));\r\n    }\r\n}\r\nlet ContextKeyService = class ContextKeyService extends AbstractContextKeyService {\r\n    constructor(configurationService) {\r\n        super(0);\r\n        this._contexts = new Map();\r\n        this._toDispose = new DisposableStore();\r\n        this._lastContextId = 0;\r\n        const myContext = new ConfigAwareContextValuesContainer(this._myContextId, configurationService, this._onDidChangeContext);\r\n        this._contexts.set(this._myContextId, myContext);\r\n        this._toDispose.add(myContext);\r\n        // Uncomment this to see the contexts continuously logged\r\n        // let lastLoggedValue: string | null = null;\r\n        // setInterval(() => {\r\n        // \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\r\n        // \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\r\n        // \tif (lastLoggedValue !== logValue) {\r\n        // \t\tlastLoggedValue = logValue;\r\n        // \t\tconsole.log(lastLoggedValue);\r\n        // \t}\r\n        // }, 2000);\r\n    }\r\n    dispose() {\r\n        this._onDidChangeContext.dispose();\r\n        this._isDisposed = true;\r\n        this._toDispose.dispose();\r\n    }\r\n    getContextValuesContainer(contextId) {\r\n        if (this._isDisposed) {\r\n            return NullContext.INSTANCE;\r\n        }\r\n        return this._contexts.get(contextId) || NullContext.INSTANCE;\r\n    }\r\n    createChildContext(parentContextId = this._myContextId) {\r\n        if (this._isDisposed) {\r\n            throw new Error(`ContextKeyService has been disposed`);\r\n        }\r\n        let id = (++this._lastContextId);\r\n        this._contexts.set(id, new Context(id, this.getContextValuesContainer(parentContextId)));\r\n        return id;\r\n    }\r\n    disposeContext(contextId) {\r\n        if (!this._isDisposed) {\r\n            this._contexts.delete(contextId);\r\n        }\r\n    }\r\n};\r\nContextKeyService = __decorate([\r\n    __param(0, IConfigurationService)\r\n], ContextKeyService);\r\nexport { ContextKeyService };\r\nclass ScopedContextKeyService extends AbstractContextKeyService {\r\n    constructor(parent, domNode) {\r\n        super(parent.createChildContext());\r\n        this._parentChangeListener = new MutableDisposable();\r\n        this._parent = parent;\r\n        this._updateParentChangeListener();\r\n        if (domNode) {\r\n            this._domNode = domNode;\r\n            if (this._domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\r\n                let extraInfo = '';\r\n                if (this._domNode.classList) {\r\n                    extraInfo = Array.from(this._domNode.classList.values()).join(', ');\r\n                }\r\n                console.error(`Element already has context attribute${extraInfo ? ': ' + extraInfo : ''}`);\r\n            }\r\n            this._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(this._myContextId));\r\n        }\r\n    }\r\n    _updateParentChangeListener() {\r\n        // Forward parent events to this listener. Parent will change.\r\n        this._parentChangeListener.value = this._parent.onDidChangeContext(this._onDidChangeContext.fire, this._onDidChangeContext);\r\n    }\r\n    dispose() {\r\n        var _a;\r\n        this._onDidChangeContext.dispose();\r\n        this._isDisposed = true;\r\n        this._parent.disposeContext(this._myContextId);\r\n        (_a = this._parentChangeListener) === null || _a === void 0 ? void 0 : _a.dispose();\r\n        if (this._domNode) {\r\n            this._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\r\n            this._domNode = undefined;\r\n        }\r\n    }\r\n    getContextValuesContainer(contextId) {\r\n        if (this._isDisposed) {\r\n            return NullContext.INSTANCE;\r\n        }\r\n        return this._parent.getContextValuesContainer(contextId);\r\n    }\r\n    createChildContext(parentContextId = this._myContextId) {\r\n        if (this._isDisposed) {\r\n            throw new Error(`ScopedContextKeyService has been disposed`);\r\n        }\r\n        return this._parent.createChildContext(parentContextId);\r\n    }\r\n    disposeContext(contextId) {\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n        this._parent.disposeContext(contextId);\r\n    }\r\n}\r\nfunction findContextAttr(domNode) {\r\n    while (domNode) {\r\n        if (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\r\n            const attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\r\n            if (attr) {\r\n                return parseInt(attr, 10);\r\n            }\r\n            return NaN;\r\n        }\r\n        domNode = domNode.parentElement;\r\n    }\r\n    return 0;\r\n}\r\nCommandsRegistry.registerCommand(SET_CONTEXT_COMMAND_ID, function (accessor, contextKey, contextValue) {\r\n    accessor.get(IContextKeyService).createKey(String(contextKey), contextValue);\r\n});\r\n"]},"metadata":{},"sourceType":"module"}