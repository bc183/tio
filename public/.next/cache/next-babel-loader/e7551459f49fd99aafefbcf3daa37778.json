{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as types from '../../../base/common/types.js';\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { WordOperations } from './cursorWordOperations.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport var CursorMoveCommands = /*#__PURE__*/function () {\n  function CursorMoveCommands() {\n    _classCallCheck(this, CursorMoveCommands);\n  }\n\n  _createClass(CursorMoveCommands, null, [{\n    key: \"addCursorDown\",\n    value: function addCursorDown(viewModel, cursors, useLogicalLine) {\n      var result = [],\n          resultLen = 0;\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\n        if (useLogicalLine) {\n          result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n        } else {\n          result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel, cursor.viewState));\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"addCursorUp\",\n    value: function addCursorUp(viewModel, cursors, useLogicalLine) {\n      var result = [],\n          resultLen = 0;\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\n        if (useLogicalLine) {\n          result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n        } else {\n          result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel, cursor.viewState));\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"moveToBeginningOfLine\",\n    value: function moveToBeginningOfLine(viewModel, cursors, inSelectionMode) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = this._moveToLineStart(viewModel, cursor, inSelectionMode);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveToLineStart\",\n    value: function _moveToLineStart(viewModel, cursor, inSelectionMode) {\n      var currentViewStateColumn = cursor.viewState.position.column;\n      var currentModelStateColumn = cursor.modelState.position.column;\n      var isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n      var currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n      var firstNonBlankColumn = viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n      var isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n\n      if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n        return this._moveToLineStartByView(viewModel, cursor, inSelectionMode);\n      } else {\n        return this._moveToLineStartByModel(viewModel, cursor, inSelectionMode);\n      }\n    }\n  }, {\n    key: \"_moveToLineStartByView\",\n    value: function _moveToLineStartByView(viewModel, cursor, inSelectionMode) {\n      return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode));\n    }\n  }, {\n    key: \"_moveToLineStartByModel\",\n    value: function _moveToLineStartByModel(viewModel, cursor, inSelectionMode) {\n      return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n    }\n  }, {\n    key: \"moveToEndOfLine\",\n    value: function moveToEndOfLine(viewModel, cursors, inSelectionMode, sticky) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = this._moveToLineEnd(viewModel, cursor, inSelectionMode, sticky);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveToLineEnd\",\n    value: function _moveToLineEnd(viewModel, cursor, inSelectionMode, sticky) {\n      var viewStatePosition = cursor.viewState.position;\n      var viewModelMaxColumn = viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n      var isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n      var modelStatePosition = cursor.modelState.position;\n      var modelMaxColumn = viewModel.model.getLineMaxColumn(modelStatePosition.lineNumber);\n      var isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n\n      if (isEndOfViewLine || isEndLineOfWrappedLine) {\n        return this._moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky);\n      } else {\n        return this._moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky);\n      }\n    }\n  }, {\n    key: \"_moveToLineEndByView\",\n    value: function _moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky) {\n      return CursorState.fromViewState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, sticky));\n    }\n  }, {\n    key: \"_moveToLineEndByModel\",\n    value: function _moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky) {\n      return CursorState.fromModelState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, sticky));\n    }\n  }, {\n    key: \"expandLineSelection\",\n    value: function expandLineSelection(viewModel, cursors) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var startLineNumber = cursor.modelState.selection.startLineNumber;\n        var lineCount = viewModel.model.getLineCount();\n        var endLineNumber = cursor.modelState.selection.endLineNumber;\n        var endColumn = void 0;\n\n        if (endLineNumber === lineCount) {\n          endColumn = viewModel.model.getLineMaxColumn(lineCount);\n        } else {\n          endLineNumber++;\n          endColumn = 1;\n        }\n\n        result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0, new Position(endLineNumber, endColumn), 0));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"moveToBeginningOfBuffer\",\n    value: function moveToBeginningOfBuffer(viewModel, cursors, inSelectionMode) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"moveToEndOfBuffer\",\n    value: function moveToEndOfBuffer(viewModel, cursors, inSelectionMode) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll(viewModel, cursor) {\n      var lineCount = viewModel.model.getLineCount();\n      var maxColumn = viewModel.model.getLineMaxColumn(lineCount);\n      return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(lineCount, maxColumn), 0));\n    }\n  }, {\n    key: \"line\",\n    value: function line(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n      var position = viewModel.model.validatePosition(_position);\n      var viewPosition = _viewPosition ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position);\n\n      if (!inSelectionMode || !cursor.modelState.hasSelection()) {\n        // Entering line selection for the first time\n        var lineCount = viewModel.model.getLineCount();\n        var selectToLineNumber = position.lineNumber + 1;\n        var selectToColumn = 1;\n\n        if (selectToLineNumber > lineCount) {\n          selectToLineNumber = lineCount;\n          selectToColumn = viewModel.model.getLineMaxColumn(selectToLineNumber);\n        }\n\n        return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0, new Position(selectToLineNumber, selectToColumn), 0));\n      } // Continuing line selection\n\n\n      var enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n\n      if (position.lineNumber < enteringLineNumber) {\n        return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0));\n      } else if (position.lineNumber > enteringLineNumber) {\n        var _lineCount = viewModel.getLineCount();\n\n        var selectToViewLineNumber = viewPosition.lineNumber + 1;\n        var selectToViewColumn = 1;\n\n        if (selectToViewLineNumber > _lineCount) {\n          selectToViewLineNumber = _lineCount;\n          selectToViewColumn = viewModel.getLineMaxColumn(selectToViewLineNumber);\n        }\n\n        return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0));\n      } else {\n        var endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n        return CursorState.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\n      }\n    }\n  }, {\n    key: \"word\",\n    value: function word(viewModel, cursor, inSelectionMode, _position) {\n      var position = viewModel.model.validatePosition(_position);\n      return CursorState.fromModelState(WordOperations.word(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, position));\n    }\n  }, {\n    key: \"cancelSelection\",\n    value: function cancelSelection(viewModel, cursor) {\n      if (!cursor.modelState.hasSelection()) {\n        return new CursorState(cursor.modelState, cursor.viewState);\n      }\n\n      var lineNumber = cursor.viewState.position.lineNumber;\n      var column = cursor.viewState.position.column;\n      return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0, new Position(lineNumber, column), 0));\n    }\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n      var position = viewModel.model.validatePosition(_position);\n      var viewPosition = _viewPosition ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position);\n      return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n    }\n  }, {\n    key: \"simpleMove\",\n    value: function simpleMove(viewModel, cursors, direction, inSelectionMode, value, unit) {\n      switch (direction) {\n        case 0\n        /* Left */\n        :\n          {\n            if (unit === 4\n            /* HalfLine */\n            ) {\n                // Move left by half the current line length\n                return this._moveHalfLineLeft(viewModel, cursors, inSelectionMode);\n              } else {\n              // Move left by `moveParams.value` columns\n              return this._moveLeft(viewModel, cursors, inSelectionMode, value);\n            }\n          }\n\n        case 1\n        /* Right */\n        :\n          {\n            if (unit === 4\n            /* HalfLine */\n            ) {\n                // Move right by half the current line length\n                return this._moveHalfLineRight(viewModel, cursors, inSelectionMode);\n              } else {\n              // Move right by `moveParams.value` columns\n              return this._moveRight(viewModel, cursors, inSelectionMode, value);\n            }\n          }\n\n        case 2\n        /* Up */\n        :\n          {\n            if (unit === 2\n            /* WrappedLine */\n            ) {\n                // Move up by view lines\n                return this._moveUpByViewLines(viewModel, cursors, inSelectionMode, value);\n              } else {\n              // Move up by model lines\n              return this._moveUpByModelLines(viewModel, cursors, inSelectionMode, value);\n            }\n          }\n\n        case 3\n        /* Down */\n        :\n          {\n            if (unit === 2\n            /* WrappedLine */\n            ) {\n                // Move down by view lines\n                return this._moveDownByViewLines(viewModel, cursors, inSelectionMode, value);\n              } else {\n              // Move down by model lines\n              return this._moveDownByModelLines(viewModel, cursors, inSelectionMode, value);\n            }\n          }\n\n        case 4\n        /* WrappedLineStart */\n        :\n          {\n            // Move to the beginning of the current view line\n            return this._moveToViewMinColumn(viewModel, cursors, inSelectionMode);\n          }\n\n        case 5\n        /* WrappedLineFirstNonWhitespaceCharacter */\n        :\n          {\n            // Move to the first non-whitespace column of the current view line\n            return this._moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n          }\n\n        case 6\n        /* WrappedLineColumnCenter */\n        :\n          {\n            // Move to the \"center\" of the current view line\n            return this._moveToViewCenterColumn(viewModel, cursors, inSelectionMode);\n          }\n\n        case 7\n        /* WrappedLineEnd */\n        :\n          {\n            // Move to the end of the current view line\n            return this._moveToViewMaxColumn(viewModel, cursors, inSelectionMode);\n          }\n\n        case 8\n        /* WrappedLineLastNonWhitespaceCharacter */\n        :\n          {\n            // Move to the last non-whitespace column of the current view line\n            return this._moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n          }\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"viewportMove\",\n    value: function viewportMove(viewModel, cursors, direction, inSelectionMode, value) {\n      var visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n      var visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n\n      switch (direction) {\n        case 9\n        /* ViewPortTop */\n        :\n          {\n            // Move to the nth line start in the viewport (from the top)\n            var modelLineNumber = this._firstLineNumberInRange(viewModel.model, visibleModelRange, value);\n\n            var modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n            return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n          }\n\n        case 11\n        /* ViewPortBottom */\n        :\n          {\n            // Move to the nth line start in the viewport (from the bottom)\n            var _modelLineNumber = this._lastLineNumberInRange(viewModel.model, visibleModelRange, value);\n\n            var _modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(_modelLineNumber);\n\n            return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, _modelLineNumber, _modelColumn)];\n          }\n\n        case 10\n        /* ViewPortCenter */\n        :\n          {\n            // Move to the line start in the viewport center\n            var _modelLineNumber2 = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n\n            var _modelColumn2 = viewModel.model.getLineFirstNonWhitespaceColumn(_modelLineNumber2);\n\n            return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, _modelLineNumber2, _modelColumn2)];\n          }\n\n        case 12\n        /* ViewPortIfOutside */\n        :\n          {\n            // Move to a position inside the viewport\n            var result = [];\n\n            for (var i = 0, len = cursors.length; i < len; i++) {\n              var cursor = cursors[i];\n              result[i] = this.findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode);\n            }\n\n            return result;\n          }\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"findPositionInViewportIfOutside\",\n    value: function findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode) {\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n\n      if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n        // Nothing to do, cursor is in viewport\n        return new CursorState(cursor.modelState, cursor.viewState);\n      } else {\n        if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n          viewLineNumber = visibleViewRange.endLineNumber - 1;\n        }\n\n        if (viewLineNumber < visibleViewRange.startLineNumber) {\n          viewLineNumber = visibleViewRange.startLineNumber;\n        }\n\n        var viewColumn = viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n        return this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n      }\n    }\n    /**\r\n     * Find the nth line start included in the range (from the start).\r\n     */\n\n  }, {\n    key: \"_firstLineNumberInRange\",\n    value: function _firstLineNumberInRange(model, range, count) {\n      var startLineNumber = range.startLineNumber;\n\n      if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n        // Move on to the second line if the first line start is not included in the range\n        startLineNumber++;\n      }\n\n      return Math.min(range.endLineNumber, startLineNumber + count - 1);\n    }\n    /**\r\n     * Find the nth line start included in the range (from the end).\r\n     */\n\n  }, {\n    key: \"_lastLineNumberInRange\",\n    value: function _lastLineNumberInRange(model, range, count) {\n      var startLineNumber = range.startLineNumber;\n\n      if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n        // Move on to the second line if the first line start is not included in the range\n        startLineNumber++;\n      }\n\n      return Math.max(startLineNumber, range.endLineNumber - count + 1);\n    }\n  }, {\n    key: \"_moveLeft\",\n    value: function _moveLeft(viewModel, cursors, inSelectionMode, noOfColumns) {\n      var hasMultipleCursors = cursors.length > 1;\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var skipWrappingPointStop = hasMultipleCursors || !cursor.viewState.hasSelection();\n        var newViewState = MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n\n        if (skipWrappingPointStop && noOfColumns === 1 && cursor.viewState.position.column === viewModel.getLineMinColumn(cursor.viewState.position.lineNumber) && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n          // moved over to the previous view line\n          var newViewModelPosition = viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n\n          if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n            // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n            newViewState = MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, newViewState, inSelectionMode, 1);\n          }\n        }\n\n        result[i] = CursorState.fromViewState(newViewState);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveHalfLineLeft\",\n    value: function _moveHalfLineLeft(viewModel, cursors, inSelectionMode) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var halfLine = Math.round(viewModel.getLineContent(viewLineNumber).length / 2);\n        result[i] = CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveRight\",\n    value: function _moveRight(viewModel, cursors, inSelectionMode, noOfColumns) {\n      var hasMultipleCursors = cursors.length > 1;\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var skipWrappingPointStop = hasMultipleCursors || !cursor.viewState.hasSelection();\n        var newViewState = MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n\n        if (skipWrappingPointStop && noOfColumns === 1 && cursor.viewState.position.column === viewModel.getLineMaxColumn(cursor.viewState.position.lineNumber) && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n          // moved over to the next view line\n          var newViewModelPosition = viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n\n          if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n            // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n            newViewState = MoveOperations.moveRight(viewModel.cursorConfig, viewModel, newViewState, inSelectionMode, 1);\n          }\n        }\n\n        result[i] = CursorState.fromViewState(newViewState);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveHalfLineRight\",\n    value: function _moveHalfLineRight(viewModel, cursors, inSelectionMode) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var halfLine = Math.round(viewModel.getLineContent(viewLineNumber).length / 2);\n        result[i] = CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveDownByViewLines\",\n    value: function _moveDownByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromViewState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveDownByModelLines\",\n    value: function _moveDownByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromModelState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveUpByViewLines\",\n    value: function _moveUpByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromViewState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveUpByModelLines\",\n    value: function _moveUpByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromModelState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveToViewPosition\",\n    value: function _moveToViewPosition(viewModel, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\n      return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n    }\n  }, {\n    key: \"_moveToModelPosition\",\n    value: function _moveToModelPosition(viewModel, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\n      return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n    }\n  }, {\n    key: \"_moveToViewMinColumn\",\n    value: function _moveToViewMinColumn(viewModel, cursors, inSelectionMode) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var viewColumn = viewModel.getLineMinColumn(viewLineNumber);\n        result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveToViewFirstNonWhitespaceColumn\",\n    value: function _moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var viewColumn = viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n        result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveToViewCenterColumn\",\n    value: function _moveToViewCenterColumn(viewModel, cursors, inSelectionMode) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var viewColumn = Math.round((viewModel.getLineMaxColumn(viewLineNumber) + viewModel.getLineMinColumn(viewLineNumber)) / 2);\n        result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveToViewMaxColumn\",\n    value: function _moveToViewMaxColumn(viewModel, cursors, inSelectionMode) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var viewColumn = viewModel.getLineMaxColumn(viewLineNumber);\n        result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_moveToViewLastNonWhitespaceColumn\",\n    value: function _moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var viewColumn = viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n        result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n      }\n\n      return result;\n    }\n  }]);\n\n  return CursorMoveCommands;\n}();\nexport var CursorMove;\n\n(function (CursorMove) {\n  var isCursorMoveArgs = function isCursorMoveArgs(arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n\n    var cursorMoveArg = arg;\n\n    if (!types.isString(cursorMoveArg.to)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  CursorMove.description = {\n    description: 'Move cursor to a logical position in the view',\n    args: [{\n      name: 'Cursor move argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory logical position value providing where to move the cursor.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'left', 'right', 'up', 'down'\\n\\t\\t\\t\\t\\t\\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\\n\\t\\t\\t\\t\\t\\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\\n\\t\\t\\t\\t\\t\\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'character', 'halfLine'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'select': If 'true' makes the selection. Default is 'false'.\\n\\t\\t\\t\\t\",\n      constraint: isCursorMoveArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['left', 'right', 'up', 'down', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'select': {\n            'type': 'boolean',\n            'default': false\n          }\n        }\n      }\n    }]\n  };\n  /**\r\n   * Positions in the view for cursor move command.\r\n   */\n\n  CursorMove.RawDirection = {\n    Left: 'left',\n    Right: 'right',\n    Up: 'up',\n    Down: 'down',\n    WrappedLineStart: 'wrappedLineStart',\n    WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n    WrappedLineColumnCenter: 'wrappedLineColumnCenter',\n    WrappedLineEnd: 'wrappedLineEnd',\n    WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n    ViewPortTop: 'viewPortTop',\n    ViewPortCenter: 'viewPortCenter',\n    ViewPortBottom: 'viewPortBottom',\n    ViewPortIfOutside: 'viewPortIfOutside'\n  };\n  /**\r\n   * Units for Cursor move 'by' argument\r\n   */\n\n  CursorMove.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Character: 'character',\n    HalfLine: 'halfLine'\n  };\n\n  function parse(args) {\n    if (!args.to) {\n      // illegal arguments\n      return null;\n    }\n\n    var direction;\n\n    switch (args.to) {\n      case CursorMove.RawDirection.Left:\n        direction = 0\n        /* Left */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Right:\n        direction = 1\n        /* Right */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Up:\n        direction = 2\n        /* Up */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Down:\n        direction = 3\n        /* Down */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineStart:\n        direction = 4\n        /* WrappedLineStart */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n        direction = 5\n        /* WrappedLineFirstNonWhitespaceCharacter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineColumnCenter:\n        direction = 6\n        /* WrappedLineColumnCenter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineEnd:\n        direction = 7\n        /* WrappedLineEnd */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\n        direction = 8\n        /* WrappedLineLastNonWhitespaceCharacter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortTop:\n        direction = 9\n        /* ViewPortTop */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortBottom:\n        direction = 11\n        /* ViewPortBottom */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortCenter:\n        direction = 10\n        /* ViewPortCenter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortIfOutside:\n        direction = 12\n        /* ViewPortIfOutside */\n        ;\n        break;\n\n      default:\n        // illegal arguments\n        return null;\n    }\n\n    var unit = 0\n    /* None */\n    ;\n\n    switch (args.by) {\n      case CursorMove.RawUnit.Line:\n        unit = 1\n        /* Line */\n        ;\n        break;\n\n      case CursorMove.RawUnit.WrappedLine:\n        unit = 2\n        /* WrappedLine */\n        ;\n        break;\n\n      case CursorMove.RawUnit.Character:\n        unit = 3\n        /* Character */\n        ;\n        break;\n\n      case CursorMove.RawUnit.HalfLine:\n        unit = 4\n        /* HalfLine */\n        ;\n        break;\n    }\n\n    return {\n      direction: direction,\n      unit: unit,\n      select: !!args.select,\n      value: args.value || 1\n    };\n  }\n\n  CursorMove.parse = parse;\n})(CursorMove || (CursorMove = {}));","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorMoveCommands.js"],"names":["types","CursorState","SingleCursorState","MoveOperations","WordOperations","Position","Range","CursorMoveCommands","viewModel","cursors","useLogicalLine","result","resultLen","i","len","length","cursor","modelState","viewState","fromModelState","translateDown","cursorConfig","model","fromViewState","translateUp","inSelectionMode","_moveToLineStart","currentViewStateColumn","position","column","currentModelStateColumn","isFirstLineOfWrappedLine","currentViewStatelineNumber","lineNumber","firstNonBlankColumn","getLineFirstNonWhitespaceColumn","isBeginningOfViewLine","_moveToLineStartByView","_moveToLineStartByModel","moveToBeginningOfLine","sticky","_moveToLineEnd","viewStatePosition","viewModelMaxColumn","getLineMaxColumn","isEndOfViewLine","modelStatePosition","modelMaxColumn","isEndLineOfWrappedLine","_moveToLineEndByModel","_moveToLineEndByView","moveToEndOfLine","startLineNumber","selection","lineCount","getLineCount","endLineNumber","endColumn","moveToBeginningOfBuffer","moveToEndOfBuffer","maxColumn","_position","_viewPosition","validatePosition","viewPosition","coordinatesConverter","validateViewPosition","convertModelPositionToViewPosition","hasSelection","selectToLineNumber","selectToColumn","enteringLineNumber","selectionStart","getStartPosition","move","selectToViewLineNumber","selectToViewColumn","endPositionOfSelectionStart","getEndPosition","word","direction","value","unit","_moveHalfLineLeft","_moveLeft","_moveHalfLineRight","_moveRight","_moveUpByViewLines","_moveUpByModelLines","_moveDownByViewLines","_moveDownByModelLines","_moveToViewMinColumn","_moveToViewFirstNonWhitespaceColumn","_moveToViewCenterColumn","_moveToViewMaxColumn","_moveToViewLastNonWhitespaceColumn","visibleViewRange","getCompletelyVisibleViewRange","visibleModelRange","convertViewRangeToModelRange","modelLineNumber","_firstLineNumberInRange","modelColumn","_moveToModelPosition","_lastLineNumberInRange","Math","round","findPositionInViewportIfOutside","viewLineNumber","viewColumn","_moveToViewPosition","range","count","startColumn","getLineMinColumn","min","max","noOfColumns","hasMultipleCursors","skipWrappingPointStop","newViewState","moveLeft","newViewModelPosition","convertViewPositionToModelPosition","halfLine","getLineContent","moveRight","linesCount","moveDown","moveUp","toViewLineNumber","toViewColumn","toModelLineNumber","toModelColumn","getLineLastNonWhitespaceColumn","CursorMove","isCursorMoveArgs","arg","isObject","cursorMoveArg","isString","to","isUndefined","select","isBoolean","by","isNumber","description","args","name","constraint","schema","RawDirection","Left","Right","Up","Down","WrappedLineStart","WrappedLineFirstNonWhitespaceCharacter","WrappedLineColumnCenter","WrappedLineEnd","WrappedLineLastNonWhitespaceCharacter","ViewPortTop","ViewPortCenter","ViewPortBottom","ViewPortIfOutside","RawUnit","Line","WrappedLine","Character","HalfLine","parse"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as types from '../../../base/common/types.js';\r\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\r\nimport { MoveOperations } from './cursorMoveOperations.js';\r\nimport { WordOperations } from './cursorWordOperations.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nexport class CursorMoveCommands {\r\n    static addCursorDown(viewModel, cursors, useLogicalLine) {\r\n        let result = [], resultLen = 0;\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\r\n            if (useLogicalLine) {\r\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel.model, cursor.modelState));\r\n            }\r\n            else {\r\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel, cursor.viewState));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    static addCursorUp(viewModel, cursors, useLogicalLine) {\r\n        let result = [], resultLen = 0;\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\r\n            if (useLogicalLine) {\r\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel.model, cursor.modelState));\r\n            }\r\n            else {\r\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel, cursor.viewState));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    static moveToBeginningOfLine(viewModel, cursors, inSelectionMode) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            result[i] = this._moveToLineStart(viewModel, cursor, inSelectionMode);\r\n        }\r\n        return result;\r\n    }\r\n    static _moveToLineStart(viewModel, cursor, inSelectionMode) {\r\n        const currentViewStateColumn = cursor.viewState.position.column;\r\n        const currentModelStateColumn = cursor.modelState.position.column;\r\n        const isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\r\n        const currentViewStatelineNumber = cursor.viewState.position.lineNumber;\r\n        const firstNonBlankColumn = viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\r\n        const isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\r\n        if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\r\n            return this._moveToLineStartByView(viewModel, cursor, inSelectionMode);\r\n        }\r\n        else {\r\n            return this._moveToLineStartByModel(viewModel, cursor, inSelectionMode);\r\n        }\r\n    }\r\n    static _moveToLineStartByView(viewModel, cursor, inSelectionMode) {\r\n        return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode));\r\n    }\r\n    static _moveToLineStartByModel(viewModel, cursor, inSelectionMode) {\r\n        return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\r\n    }\r\n    static moveToEndOfLine(viewModel, cursors, inSelectionMode, sticky) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            result[i] = this._moveToLineEnd(viewModel, cursor, inSelectionMode, sticky);\r\n        }\r\n        return result;\r\n    }\r\n    static _moveToLineEnd(viewModel, cursor, inSelectionMode, sticky) {\r\n        const viewStatePosition = cursor.viewState.position;\r\n        const viewModelMaxColumn = viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\r\n        const isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\r\n        const modelStatePosition = cursor.modelState.position;\r\n        const modelMaxColumn = viewModel.model.getLineMaxColumn(modelStatePosition.lineNumber);\r\n        const isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\r\n        if (isEndOfViewLine || isEndLineOfWrappedLine) {\r\n            return this._moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky);\r\n        }\r\n        else {\r\n            return this._moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky);\r\n        }\r\n    }\r\n    static _moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky) {\r\n        return CursorState.fromViewState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, sticky));\r\n    }\r\n    static _moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky) {\r\n        return CursorState.fromModelState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, sticky));\r\n    }\r\n    static expandLineSelection(viewModel, cursors) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            const startLineNumber = cursor.modelState.selection.startLineNumber;\r\n            const lineCount = viewModel.model.getLineCount();\r\n            let endLineNumber = cursor.modelState.selection.endLineNumber;\r\n            let endColumn;\r\n            if (endLineNumber === lineCount) {\r\n                endColumn = viewModel.model.getLineMaxColumn(lineCount);\r\n            }\r\n            else {\r\n                endLineNumber++;\r\n                endColumn = 1;\r\n            }\r\n            result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0, new Position(endLineNumber, endColumn), 0));\r\n        }\r\n        return result;\r\n    }\r\n    static moveToBeginningOfBuffer(viewModel, cursors, inSelectionMode) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\r\n        }\r\n        return result;\r\n    }\r\n    static moveToEndOfBuffer(viewModel, cursors, inSelectionMode) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\r\n        }\r\n        return result;\r\n    }\r\n    static selectAll(viewModel, cursor) {\r\n        const lineCount = viewModel.model.getLineCount();\r\n        const maxColumn = viewModel.model.getLineMaxColumn(lineCount);\r\n        return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(lineCount, maxColumn), 0));\r\n    }\r\n    static line(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\r\n        const position = viewModel.model.validatePosition(_position);\r\n        const viewPosition = (_viewPosition\r\n            ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\r\n            : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position));\r\n        if (!inSelectionMode || !cursor.modelState.hasSelection()) {\r\n            // Entering line selection for the first time\r\n            const lineCount = viewModel.model.getLineCount();\r\n            let selectToLineNumber = position.lineNumber + 1;\r\n            let selectToColumn = 1;\r\n            if (selectToLineNumber > lineCount) {\r\n                selectToLineNumber = lineCount;\r\n                selectToColumn = viewModel.model.getLineMaxColumn(selectToLineNumber);\r\n            }\r\n            return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0, new Position(selectToLineNumber, selectToColumn), 0));\r\n        }\r\n        // Continuing line selection\r\n        const enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\r\n        if (position.lineNumber < enteringLineNumber) {\r\n            return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0));\r\n        }\r\n        else if (position.lineNumber > enteringLineNumber) {\r\n            const lineCount = viewModel.getLineCount();\r\n            let selectToViewLineNumber = viewPosition.lineNumber + 1;\r\n            let selectToViewColumn = 1;\r\n            if (selectToViewLineNumber > lineCount) {\r\n                selectToViewLineNumber = lineCount;\r\n                selectToViewColumn = viewModel.getLineMaxColumn(selectToViewLineNumber);\r\n            }\r\n            return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0));\r\n        }\r\n        else {\r\n            const endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\r\n            return CursorState.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\r\n        }\r\n    }\r\n    static word(viewModel, cursor, inSelectionMode, _position) {\r\n        const position = viewModel.model.validatePosition(_position);\r\n        return CursorState.fromModelState(WordOperations.word(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, position));\r\n    }\r\n    static cancelSelection(viewModel, cursor) {\r\n        if (!cursor.modelState.hasSelection()) {\r\n            return new CursorState(cursor.modelState, cursor.viewState);\r\n        }\r\n        const lineNumber = cursor.viewState.position.lineNumber;\r\n        const column = cursor.viewState.position.column;\r\n        return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0, new Position(lineNumber, column), 0));\r\n    }\r\n    static moveTo(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\r\n        const position = viewModel.model.validatePosition(_position);\r\n        const viewPosition = (_viewPosition\r\n            ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\r\n            : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position));\r\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\r\n    }\r\n    static simpleMove(viewModel, cursors, direction, inSelectionMode, value, unit) {\r\n        switch (direction) {\r\n            case 0 /* Left */: {\r\n                if (unit === 4 /* HalfLine */) {\r\n                    // Move left by half the current line length\r\n                    return this._moveHalfLineLeft(viewModel, cursors, inSelectionMode);\r\n                }\r\n                else {\r\n                    // Move left by `moveParams.value` columns\r\n                    return this._moveLeft(viewModel, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 1 /* Right */: {\r\n                if (unit === 4 /* HalfLine */) {\r\n                    // Move right by half the current line length\r\n                    return this._moveHalfLineRight(viewModel, cursors, inSelectionMode);\r\n                }\r\n                else {\r\n                    // Move right by `moveParams.value` columns\r\n                    return this._moveRight(viewModel, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 2 /* Up */: {\r\n                if (unit === 2 /* WrappedLine */) {\r\n                    // Move up by view lines\r\n                    return this._moveUpByViewLines(viewModel, cursors, inSelectionMode, value);\r\n                }\r\n                else {\r\n                    // Move up by model lines\r\n                    return this._moveUpByModelLines(viewModel, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 3 /* Down */: {\r\n                if (unit === 2 /* WrappedLine */) {\r\n                    // Move down by view lines\r\n                    return this._moveDownByViewLines(viewModel, cursors, inSelectionMode, value);\r\n                }\r\n                else {\r\n                    // Move down by model lines\r\n                    return this._moveDownByModelLines(viewModel, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 4 /* WrappedLineStart */: {\r\n                // Move to the beginning of the current view line\r\n                return this._moveToViewMinColumn(viewModel, cursors, inSelectionMode);\r\n            }\r\n            case 5 /* WrappedLineFirstNonWhitespaceCharacter */: {\r\n                // Move to the first non-whitespace column of the current view line\r\n                return this._moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\r\n            }\r\n            case 6 /* WrappedLineColumnCenter */: {\r\n                // Move to the \"center\" of the current view line\r\n                return this._moveToViewCenterColumn(viewModel, cursors, inSelectionMode);\r\n            }\r\n            case 7 /* WrappedLineEnd */: {\r\n                // Move to the end of the current view line\r\n                return this._moveToViewMaxColumn(viewModel, cursors, inSelectionMode);\r\n            }\r\n            case 8 /* WrappedLineLastNonWhitespaceCharacter */: {\r\n                // Move to the last non-whitespace column of the current view line\r\n                return this._moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\r\n            }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    static viewportMove(viewModel, cursors, direction, inSelectionMode, value) {\r\n        const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\r\n        const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\r\n        switch (direction) {\r\n            case 9 /* ViewPortTop */: {\r\n                // Move to the nth line start in the viewport (from the top)\r\n                const modelLineNumber = this._firstLineNumberInRange(viewModel.model, visibleModelRange, value);\r\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 11 /* ViewPortBottom */: {\r\n                // Move to the nth line start in the viewport (from the bottom)\r\n                const modelLineNumber = this._lastLineNumberInRange(viewModel.model, visibleModelRange, value);\r\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 10 /* ViewPortCenter */: {\r\n                // Move to the line start in the viewport center\r\n                const modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\r\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 12 /* ViewPortIfOutside */: {\r\n                // Move to a position inside the viewport\r\n                let result = [];\r\n                for (let i = 0, len = cursors.length; i < len; i++) {\r\n                    const cursor = cursors[i];\r\n                    result[i] = this.findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode);\r\n                }\r\n                return result;\r\n            }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    static findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode) {\r\n        let viewLineNumber = cursor.viewState.position.lineNumber;\r\n        if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\r\n            // Nothing to do, cursor is in viewport\r\n            return new CursorState(cursor.modelState, cursor.viewState);\r\n        }\r\n        else {\r\n            if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\r\n                viewLineNumber = visibleViewRange.endLineNumber - 1;\r\n            }\r\n            if (viewLineNumber < visibleViewRange.startLineNumber) {\r\n                viewLineNumber = visibleViewRange.startLineNumber;\r\n            }\r\n            const viewColumn = viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\r\n            return this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n    }\r\n    /**\r\n     * Find the nth line start included in the range (from the start).\r\n     */\r\n    static _firstLineNumberInRange(model, range, count) {\r\n        let startLineNumber = range.startLineNumber;\r\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\r\n            // Move on to the second line if the first line start is not included in the range\r\n            startLineNumber++;\r\n        }\r\n        return Math.min(range.endLineNumber, startLineNumber + count - 1);\r\n    }\r\n    /**\r\n     * Find the nth line start included in the range (from the end).\r\n     */\r\n    static _lastLineNumberInRange(model, range, count) {\r\n        let startLineNumber = range.startLineNumber;\r\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\r\n            // Move on to the second line if the first line start is not included in the range\r\n            startLineNumber++;\r\n        }\r\n        return Math.max(startLineNumber, range.endLineNumber - count + 1);\r\n    }\r\n    static _moveLeft(viewModel, cursors, inSelectionMode, noOfColumns) {\r\n        const hasMultipleCursors = (cursors.length > 1);\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            const skipWrappingPointStop = hasMultipleCursors || !cursor.viewState.hasSelection();\r\n            let newViewState = MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns);\r\n            if (skipWrappingPointStop\r\n                && noOfColumns === 1\r\n                && cursor.viewState.position.column === viewModel.getLineMinColumn(cursor.viewState.position.lineNumber)\r\n                && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\r\n                // moved over to the previous view line\r\n                const newViewModelPosition = viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\r\n                if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\r\n                    // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\r\n                    newViewState = MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, newViewState, inSelectionMode, 1);\r\n                }\r\n            }\r\n            result[i] = CursorState.fromViewState(newViewState);\r\n        }\r\n        return result;\r\n    }\r\n    static _moveHalfLineLeft(viewModel, cursors, inSelectionMode) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            const viewLineNumber = cursor.viewState.position.lineNumber;\r\n            const halfLine = Math.round(viewModel.getLineContent(viewLineNumber).length / 2);\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\r\n        }\r\n        return result;\r\n    }\r\n    static _moveRight(viewModel, cursors, inSelectionMode, noOfColumns) {\r\n        const hasMultipleCursors = (cursors.length > 1);\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            const skipWrappingPointStop = hasMultipleCursors || !cursor.viewState.hasSelection();\r\n            let newViewState = MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns);\r\n            if (skipWrappingPointStop\r\n                && noOfColumns === 1\r\n                && cursor.viewState.position.column === viewModel.getLineMaxColumn(cursor.viewState.position.lineNumber)\r\n                && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\r\n                // moved over to the next view line\r\n                const newViewModelPosition = viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\r\n                if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\r\n                    // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\r\n                    newViewState = MoveOperations.moveRight(viewModel.cursorConfig, viewModel, newViewState, inSelectionMode, 1);\r\n                }\r\n            }\r\n            result[i] = CursorState.fromViewState(newViewState);\r\n        }\r\n        return result;\r\n    }\r\n    static _moveHalfLineRight(viewModel, cursors, inSelectionMode) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            const viewLineNumber = cursor.viewState.position.lineNumber;\r\n            const halfLine = Math.round(viewModel.getLineContent(viewLineNumber).length / 2);\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\r\n        }\r\n        return result;\r\n    }\r\n    static _moveDownByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    }\r\n    static _moveDownByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    }\r\n    static _moveUpByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    }\r\n    static _moveUpByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    }\r\n    static _moveToViewPosition(viewModel, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\r\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\r\n    }\r\n    static _moveToModelPosition(viewModel, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\r\n        return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\r\n    }\r\n    static _moveToViewMinColumn(viewModel, cursors, inSelectionMode) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            const viewLineNumber = cursor.viewState.position.lineNumber;\r\n            const viewColumn = viewModel.getLineMinColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    }\r\n    static _moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            const viewLineNumber = cursor.viewState.position.lineNumber;\r\n            const viewColumn = viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    }\r\n    static _moveToViewCenterColumn(viewModel, cursors, inSelectionMode) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            const viewLineNumber = cursor.viewState.position.lineNumber;\r\n            const viewColumn = Math.round((viewModel.getLineMaxColumn(viewLineNumber) + viewModel.getLineMinColumn(viewLineNumber)) / 2);\r\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    }\r\n    static _moveToViewMaxColumn(viewModel, cursors, inSelectionMode) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            const viewLineNumber = cursor.viewState.position.lineNumber;\r\n            const viewColumn = viewModel.getLineMaxColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    }\r\n    static _moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\r\n        let result = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            const cursor = cursors[i];\r\n            const viewLineNumber = cursor.viewState.position.lineNumber;\r\n            const viewColumn = viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport var CursorMove;\r\n(function (CursorMove) {\r\n    const isCursorMoveArgs = function (arg) {\r\n        if (!types.isObject(arg)) {\r\n            return false;\r\n        }\r\n        let cursorMoveArg = arg;\r\n        if (!types.isString(cursorMoveArg.to)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    CursorMove.description = {\r\n        description: 'Move cursor to a logical position in the view',\r\n        args: [\r\n            {\r\n                name: 'Cursor move argument object',\r\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'left', 'right', 'up', 'down'\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t`,\r\n                constraint: isCursorMoveArgs,\r\n                schema: {\r\n                    'type': 'object',\r\n                    'required': ['to'],\r\n                    'properties': {\r\n                        'to': {\r\n                            'type': 'string',\r\n                            'enum': ['left', 'right', 'up', 'down', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\r\n                        },\r\n                        'by': {\r\n                            'type': 'string',\r\n                            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\r\n                        },\r\n                        'value': {\r\n                            'type': 'number',\r\n                            'default': 1\r\n                        },\r\n                        'select': {\r\n                            'type': 'boolean',\r\n                            'default': false\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    /**\r\n     * Positions in the view for cursor move command.\r\n     */\r\n    CursorMove.RawDirection = {\r\n        Left: 'left',\r\n        Right: 'right',\r\n        Up: 'up',\r\n        Down: 'down',\r\n        WrappedLineStart: 'wrappedLineStart',\r\n        WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\r\n        WrappedLineColumnCenter: 'wrappedLineColumnCenter',\r\n        WrappedLineEnd: 'wrappedLineEnd',\r\n        WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\r\n        ViewPortTop: 'viewPortTop',\r\n        ViewPortCenter: 'viewPortCenter',\r\n        ViewPortBottom: 'viewPortBottom',\r\n        ViewPortIfOutside: 'viewPortIfOutside'\r\n    };\r\n    /**\r\n     * Units for Cursor move 'by' argument\r\n     */\r\n    CursorMove.RawUnit = {\r\n        Line: 'line',\r\n        WrappedLine: 'wrappedLine',\r\n        Character: 'character',\r\n        HalfLine: 'halfLine'\r\n    };\r\n    function parse(args) {\r\n        if (!args.to) {\r\n            // illegal arguments\r\n            return null;\r\n        }\r\n        let direction;\r\n        switch (args.to) {\r\n            case CursorMove.RawDirection.Left:\r\n                direction = 0 /* Left */;\r\n                break;\r\n            case CursorMove.RawDirection.Right:\r\n                direction = 1 /* Right */;\r\n                break;\r\n            case CursorMove.RawDirection.Up:\r\n                direction = 2 /* Up */;\r\n                break;\r\n            case CursorMove.RawDirection.Down:\r\n                direction = 3 /* Down */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineStart:\r\n                direction = 4 /* WrappedLineStart */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\r\n                direction = 5 /* WrappedLineFirstNonWhitespaceCharacter */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineColumnCenter:\r\n                direction = 6 /* WrappedLineColumnCenter */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineEnd:\r\n                direction = 7 /* WrappedLineEnd */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\r\n                direction = 8 /* WrappedLineLastNonWhitespaceCharacter */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortTop:\r\n                direction = 9 /* ViewPortTop */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortBottom:\r\n                direction = 11 /* ViewPortBottom */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortCenter:\r\n                direction = 10 /* ViewPortCenter */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortIfOutside:\r\n                direction = 12 /* ViewPortIfOutside */;\r\n                break;\r\n            default:\r\n                // illegal arguments\r\n                return null;\r\n        }\r\n        let unit = 0 /* None */;\r\n        switch (args.by) {\r\n            case CursorMove.RawUnit.Line:\r\n                unit = 1 /* Line */;\r\n                break;\r\n            case CursorMove.RawUnit.WrappedLine:\r\n                unit = 2 /* WrappedLine */;\r\n                break;\r\n            case CursorMove.RawUnit.Character:\r\n                unit = 3 /* Character */;\r\n                break;\r\n            case CursorMove.RawUnit.HalfLine:\r\n                unit = 4 /* HalfLine */;\r\n                break;\r\n        }\r\n        return {\r\n            direction: direction,\r\n            unit: unit,\r\n            select: (!!args.select),\r\n            value: (args.value || 1)\r\n        };\r\n    }\r\n    CursorMove.parse = parse;\r\n})(CursorMove || (CursorMove = {}));\r\n"]},"metadata":{},"sourceType":"module"}