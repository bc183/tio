{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange } from '../../../common/view/renderingContext.js';\nexport var DecorationsOverlay = /*#__PURE__*/function (_DynamicViewOverlay) {\n  _inherits(DecorationsOverlay, _DynamicViewOverlay);\n\n  var _super = _createSuper(DecorationsOverlay);\n\n  function DecorationsOverlay(context) {\n    var _this;\n\n    _classCallCheck(this, DecorationsOverlay);\n\n    _this = _super.call(this);\n    _this._context = context;\n    var options = _this._context.configuration.options;\n    _this._lineHeight = options.get(53\n    /* lineHeight */\n    );\n    _this._typicalHalfwidthCharacterWidth = options.get(38\n    /* fontInfo */\n    ).typicalHalfwidthCharacterWidth;\n    _this._renderResult = null;\n\n    _this._context.addEventHandler(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(DecorationsOverlay, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._context.removeEventHandler(this);\n\n      this._renderResult = null;\n\n      _get(_getPrototypeOf(DecorationsOverlay.prototype), \"dispose\", this).call(this);\n    } // --- begin event handlers\n\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n      this._lineHeight = options.get(53\n      /* lineHeight */\n      );\n      this._typicalHalfwidthCharacterWidth = options.get(38\n      /* fontInfo */\n      ).typicalHalfwidthCharacterWidth;\n      return true;\n    }\n  }, {\n    key: \"onDecorationsChanged\",\n    value: function onDecorationsChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    } // --- end event handlers\n\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      var _decorations = ctx.getDecorationsInViewport(); // Keep only decorations with `className`\n\n\n      var decorations = [],\n          decorationsLen = 0;\n\n      for (var i = 0, len = _decorations.length; i < len; i++) {\n        var d = _decorations[i];\n\n        if (d.options.className) {\n          decorations[decorationsLen++] = d;\n        }\n      } // Sort decorations for consistent render output\n\n\n      decorations = decorations.sort(function (a, b) {\n        if (a.options.zIndex < b.options.zIndex) {\n          return -1;\n        }\n\n        if (a.options.zIndex > b.options.zIndex) {\n          return 1;\n        }\n\n        var aClassName = a.options.className;\n        var bClassName = b.options.className;\n\n        if (aClassName < bClassName) {\n          return -1;\n        }\n\n        if (aClassName > bClassName) {\n          return 1;\n        }\n\n        return Range.compareRangesUsingStarts(a.range, b.range);\n      });\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n      var output = [];\n\n      for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n        var lineIndex = lineNumber - visibleStartLineNumber;\n        output[lineIndex] = '';\n      } // Render first whole line decorations and then regular decorations\n\n\n      this._renderWholeLineDecorations(ctx, decorations, output);\n\n      this._renderNormalDecorations(ctx, decorations, output);\n\n      this._renderResult = output;\n    }\n  }, {\n    key: \"_renderWholeLineDecorations\",\n    value: function _renderWholeLineDecorations(ctx, decorations, output) {\n      var lineHeight = String(this._lineHeight);\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n      for (var i = 0, lenI = decorations.length; i < lenI; i++) {\n        var d = decorations[i];\n\n        if (!d.options.isWholeLine) {\n          continue;\n        }\n\n        var decorationOutput = '<div class=\"cdr ' + d.options.className + '\" style=\"left:0;width:100%;height:' + lineHeight + 'px;\"></div>';\n        var startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n        var endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n\n        for (var j = startLineNumber; j <= endLineNumber; j++) {\n          var lineIndex = j - visibleStartLineNumber;\n          output[lineIndex] += decorationOutput;\n        }\n      }\n    }\n  }, {\n    key: \"_renderNormalDecorations\",\n    value: function _renderNormalDecorations(ctx, decorations, output) {\n      var lineHeight = String(this._lineHeight);\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var prevClassName = null;\n      var prevShowIfCollapsed = false;\n      var prevRange = null;\n\n      for (var i = 0, lenI = decorations.length; i < lenI; i++) {\n        var d = decorations[i];\n\n        if (d.options.isWholeLine) {\n          continue;\n        }\n\n        var className = d.options.className;\n        var showIfCollapsed = Boolean(d.options.showIfCollapsed);\n        var range = d.range;\n\n        if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n          range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.model.getLineMaxColumn(range.endLineNumber - 1));\n        }\n\n        if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n          // merge into previous decoration\n          prevRange = Range.plusRange(prevRange, range);\n          continue;\n        } // flush previous decoration\n\n\n        if (prevClassName !== null) {\n          this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n        }\n\n        prevClassName = className;\n        prevShowIfCollapsed = showIfCollapsed;\n        prevRange = range;\n      }\n\n      if (prevClassName !== null) {\n        this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n      }\n    }\n  }, {\n    key: \"_renderNormalDecoration\",\n    value: function _renderNormalDecoration(ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n      var linesVisibleRanges = ctx.linesVisibleRangesForRange(range,\n      /*TODO@Alex*/\n      className === 'findMatch');\n\n      if (!linesVisibleRanges) {\n        return;\n      }\n\n      for (var j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n        var lineVisibleRanges = linesVisibleRanges[j];\n\n        if (lineVisibleRanges.outsideRenderedLine) {\n          continue;\n        }\n\n        var lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n\n        if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n          var singleVisibleRange = lineVisibleRanges.ranges[0];\n\n          if (singleVisibleRange.width === 0) {\n            // collapsed range case => make the decoration visible by faking its width\n            lineVisibleRanges.ranges[0] = new HorizontalRange(singleVisibleRange.left, this._typicalHalfwidthCharacterWidth);\n          }\n        }\n\n        for (var k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n          var visibleRange = lineVisibleRanges.ranges[k];\n          var decorationOutput = '<div class=\"cdr ' + className + '\" style=\"left:' + String(visibleRange.left) + 'px;width:' + String(visibleRange.width) + 'px;height:' + lineHeight + 'px;\"></div>';\n          output[lineIndex] += decorationOutput;\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(startLineNumber, lineNumber) {\n      if (!this._renderResult) {\n        return '';\n      }\n\n      var lineIndex = lineNumber - startLineNumber;\n\n      if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n        return '';\n      }\n\n      return this._renderResult[lineIndex];\n    }\n  }]);\n\n  return DecorationsOverlay;\n}(DynamicViewOverlay);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js"],"names":["DynamicViewOverlay","Range","HorizontalRange","DecorationsOverlay","context","_context","options","configuration","_lineHeight","get","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_renderResult","addEventHandler","removeEventHandler","e","scrollTopChanged","scrollWidthChanged","ctx","_decorations","getDecorationsInViewport","decorations","decorationsLen","i","len","length","d","className","sort","a","b","zIndex","aClassName","bClassName","compareRangesUsingStarts","range","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","output","lineNumber","lineIndex","_renderWholeLineDecorations","_renderNormalDecorations","lineHeight","String","lenI","isWholeLine","decorationOutput","Math","max","min","j","prevClassName","prevShowIfCollapsed","prevRange","showIfCollapsed","Boolean","endColumn","startColumn","model","getLineMaxColumn","areIntersectingOrTouching","plusRange","_renderNormalDecoration","linesVisibleRanges","linesVisibleRangesForRange","lenJ","lineVisibleRanges","outsideRenderedLine","ranges","singleVisibleRange","width","left","k","lenK"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './decorations.css';\r\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\r\nimport { Range } from '../../../common/core/range.js';\r\nimport { HorizontalRange } from '../../../common/view/renderingContext.js';\r\nexport class DecorationsOverlay extends DynamicViewOverlay {\r\n    constructor(context) {\r\n        super();\r\n        this._context = context;\r\n        const options = this._context.configuration.options;\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._typicalHalfwidthCharacterWidth = options.get(38 /* fontInfo */).typicalHalfwidthCharacterWidth;\r\n        this._renderResult = null;\r\n        this._context.addEventHandler(this);\r\n    }\r\n    dispose() {\r\n        this._context.removeEventHandler(this);\r\n        this._renderResult = null;\r\n        super.dispose();\r\n    }\r\n    // --- begin event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._typicalHalfwidthCharacterWidth = options.get(38 /* fontInfo */).typicalHalfwidthCharacterWidth;\r\n        return true;\r\n    }\r\n    onDecorationsChanged(e) {\r\n        return true;\r\n    }\r\n    onFlushed(e) {\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return true;\r\n    }\r\n    onLinesDeleted(e) {\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return e.scrollTopChanged || e.scrollWidthChanged;\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    // --- end event handlers\r\n    prepareRender(ctx) {\r\n        const _decorations = ctx.getDecorationsInViewport();\r\n        // Keep only decorations with `className`\r\n        let decorations = [], decorationsLen = 0;\r\n        for (let i = 0, len = _decorations.length; i < len; i++) {\r\n            const d = _decorations[i];\r\n            if (d.options.className) {\r\n                decorations[decorationsLen++] = d;\r\n            }\r\n        }\r\n        // Sort decorations for consistent render output\r\n        decorations = decorations.sort((a, b) => {\r\n            if (a.options.zIndex < b.options.zIndex) {\r\n                return -1;\r\n            }\r\n            if (a.options.zIndex > b.options.zIndex) {\r\n                return 1;\r\n            }\r\n            const aClassName = a.options.className;\r\n            const bClassName = b.options.className;\r\n            if (aClassName < bClassName) {\r\n                return -1;\r\n            }\r\n            if (aClassName > bClassName) {\r\n                return 1;\r\n            }\r\n            return Range.compareRangesUsingStarts(a.range, b.range);\r\n        });\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\r\n        const output = [];\r\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\r\n            const lineIndex = lineNumber - visibleStartLineNumber;\r\n            output[lineIndex] = '';\r\n        }\r\n        // Render first whole line decorations and then regular decorations\r\n        this._renderWholeLineDecorations(ctx, decorations, output);\r\n        this._renderNormalDecorations(ctx, decorations, output);\r\n        this._renderResult = output;\r\n    }\r\n    _renderWholeLineDecorations(ctx, decorations, output) {\r\n        const lineHeight = String(this._lineHeight);\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\r\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\r\n            const d = decorations[i];\r\n            if (!d.options.isWholeLine) {\r\n                continue;\r\n            }\r\n            const decorationOutput = ('<div class=\"cdr '\r\n                + d.options.className\r\n                + '\" style=\"left:0;width:100%;height:'\r\n                + lineHeight\r\n                + 'px;\"></div>');\r\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\r\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\r\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\r\n                const lineIndex = j - visibleStartLineNumber;\r\n                output[lineIndex] += decorationOutput;\r\n            }\r\n        }\r\n    }\r\n    _renderNormalDecorations(ctx, decorations, output) {\r\n        const lineHeight = String(this._lineHeight);\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        let prevClassName = null;\r\n        let prevShowIfCollapsed = false;\r\n        let prevRange = null;\r\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\r\n            const d = decorations[i];\r\n            if (d.options.isWholeLine) {\r\n                continue;\r\n            }\r\n            const className = d.options.className;\r\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\r\n            let range = d.range;\r\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\r\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.model.getLineMaxColumn(range.endLineNumber - 1));\r\n            }\r\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\r\n                // merge into previous decoration\r\n                prevRange = Range.plusRange(prevRange, range);\r\n                continue;\r\n            }\r\n            // flush previous decoration\r\n            if (prevClassName !== null) {\r\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\r\n            }\r\n            prevClassName = className;\r\n            prevShowIfCollapsed = showIfCollapsed;\r\n            prevRange = range;\r\n        }\r\n        if (prevClassName !== null) {\r\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\r\n        }\r\n    }\r\n    _renderNormalDecoration(ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\r\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\r\n        if (!linesVisibleRanges) {\r\n            return;\r\n        }\r\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\r\n            const lineVisibleRanges = linesVisibleRanges[j];\r\n            if (lineVisibleRanges.outsideRenderedLine) {\r\n                continue;\r\n            }\r\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\r\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\r\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\r\n                if (singleVisibleRange.width === 0) {\r\n                    // collapsed range case => make the decoration visible by faking its width\r\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(singleVisibleRange.left, this._typicalHalfwidthCharacterWidth);\r\n                }\r\n            }\r\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\r\n                const visibleRange = lineVisibleRanges.ranges[k];\r\n                const decorationOutput = ('<div class=\"cdr '\r\n                    + className\r\n                    + '\" style=\"left:'\r\n                    + String(visibleRange.left)\r\n                    + 'px;width:'\r\n                    + String(visibleRange.width)\r\n                    + 'px;height:'\r\n                    + lineHeight\r\n                    + 'px;\"></div>');\r\n                output[lineIndex] += decorationOutput;\r\n            }\r\n        }\r\n    }\r\n    render(startLineNumber, lineNumber) {\r\n        if (!this._renderResult) {\r\n            return '';\r\n        }\r\n        const lineIndex = lineNumber - startLineNumber;\r\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\r\n            return '';\r\n        }\r\n        return this._renderResult[lineIndex];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}