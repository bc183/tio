{"ast":null,"code":"import _toConsumableArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport * as types from '../../../base/common/types.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nexport var Extensions = {\n  Configuration: 'base.contributions.configuration'\n};\nexport var allSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var applicationSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var machineSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var machineOverridableSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var windowSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var resourceSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nvar contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\n\nvar ConfigurationRegistry = /*#__PURE__*/function () {\n  function ConfigurationRegistry() {\n    _classCallCheck(this, ConfigurationRegistry);\n\n    this.overrideIdentifiers = new Set();\n    this._onDidSchemaChange = new Emitter();\n    this._onDidUpdateConfiguration = new Emitter();\n    this.defaultValues = {};\n    this.defaultLanguageConfigurationOverridesNode = {\n      id: 'defaultOverrides',\n      title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n      properties: {}\n    };\n    this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n    this.resourceLanguageSettingsSchema = {\n      properties: {},\n      patternProperties: {},\n      additionalProperties: false,\n      errorMessage: 'Unknown editor configuration setting',\n      allowTrailingCommas: true,\n      allowComments: true\n    };\n    this.configurationProperties = {};\n    this.excludedConfigurationProperties = {};\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n  }\n\n  _createClass(ConfigurationRegistry, [{\n    key: \"registerConfiguration\",\n    value: function registerConfiguration(configuration) {\n      var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.registerConfigurations([configuration], validate);\n    }\n  }, {\n    key: \"registerConfigurations\",\n    value: function registerConfigurations(configurations) {\n      var _this = this;\n\n      var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var properties = [];\n      configurations.forEach(function (configuration) {\n        properties.push.apply(properties, _toConsumableArray(_this.validateAndRegisterProperties(configuration, validate))); // fills in defaults\n\n        _this.configurationContributors.push(configuration);\n\n        _this.registerJSONConfiguration(configuration);\n      });\n      contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\n      this._onDidSchemaChange.fire();\n\n      this._onDidUpdateConfiguration.fire(properties);\n    }\n  }, {\n    key: \"registerOverrideIdentifiers\",\n    value: function registerOverrideIdentifiers(overrideIdentifiers) {\n      var _iterator = _createForOfIteratorHelper(overrideIdentifiers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var overrideIdentifier = _step.value;\n          this.overrideIdentifiers.add(overrideIdentifier);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.updateOverridePropertyPatternKey();\n    }\n  }, {\n    key: \"validateAndRegisterProperties\",\n    value: function validateAndRegisterProperties(configuration)\n    /* WINDOW */\n    {\n      var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n      scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n      var propertyKeys = [];\n      var properties = configuration.properties;\n\n      if (properties) {\n        for (var key in properties) {\n          if (validate && validateProperty(key)) {\n            delete properties[key];\n            continue;\n          }\n\n          var property = properties[key]; // update default value\n\n          this.updatePropertyDefaultValue(key, property); // update scope\n\n          if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n            property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n          } else {\n            property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n          } // Add to properties maps\n          // Property is included by default if 'included' is unspecified\n\n\n          if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n            this.excludedConfigurationProperties[key] = properties[key];\n            delete properties[key];\n            continue;\n          } else {\n            this.configurationProperties[key] = properties[key];\n          }\n\n          if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n            // If not set, default deprecationMessage to the markdown source\n            properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n          }\n\n          propertyKeys.push(key);\n        }\n      }\n\n      var subNodes = configuration.allOf;\n\n      if (subNodes) {\n        var _iterator2 = _createForOfIteratorHelper(subNodes),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var node = _step2.value;\n            propertyKeys.push.apply(propertyKeys, _toConsumableArray(this.validateAndRegisterProperties(node, validate, scope)));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      return propertyKeys;\n    }\n  }, {\n    key: \"getConfigurationProperties\",\n    value: function getConfigurationProperties() {\n      return this.configurationProperties;\n    }\n  }, {\n    key: \"registerJSONConfiguration\",\n    value: function registerJSONConfiguration(configuration) {\n      var _this2 = this;\n\n      var register = function register(configuration) {\n        var properties = configuration.properties;\n\n        if (properties) {\n          for (var key in properties) {\n            _this2.updateSchema(key, properties[key]);\n          }\n        }\n\n        var subNodes = configuration.allOf;\n\n        if (subNodes) {\n          subNodes.forEach(register);\n        }\n      };\n\n      register(configuration);\n    }\n  }, {\n    key: \"updateSchema\",\n    value: function updateSchema(key, property) {\n      allSettings.properties[key] = property;\n\n      switch (property.scope) {\n        case 1\n        /* APPLICATION */\n        :\n          applicationSettings.properties[key] = property;\n          break;\n\n        case 2\n        /* MACHINE */\n        :\n          machineSettings.properties[key] = property;\n          break;\n\n        case 6\n        /* MACHINE_OVERRIDABLE */\n        :\n          machineOverridableSettings.properties[key] = property;\n          break;\n\n        case 3\n        /* WINDOW */\n        :\n          windowSettings.properties[key] = property;\n          break;\n\n        case 4\n        /* RESOURCE */\n        :\n          resourceSettings.properties[key] = property;\n          break;\n\n        case 5\n        /* LANGUAGE_OVERRIDABLE */\n        :\n          resourceSettings.properties[key] = property;\n          this.resourceLanguageSettingsSchema.properties[key] = property;\n          break;\n      }\n    }\n  }, {\n    key: \"updateOverridePropertyPatternKey\",\n    value: function updateOverridePropertyPatternKey() {\n      var _iterator3 = _createForOfIteratorHelper(this.overrideIdentifiers.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var overrideIdentifier = _step3.value;\n          var overrideIdentifierProperty = \"[\".concat(overrideIdentifier, \"]\");\n          var resourceLanguagePropertiesSchema = {\n            type: 'object',\n            description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n            errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n            $ref: resourceLanguageSettingsSchemaId\n          };\n          this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n          allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n          applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n          machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n          machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n          windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n          resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this._onDidSchemaChange.fire();\n    }\n  }, {\n    key: \"updatePropertyDefaultValue\",\n    value: function updatePropertyDefaultValue(key, property) {\n      var defaultValue = this.defaultValues[key];\n\n      if (types.isUndefined(defaultValue)) {\n        defaultValue = property[\"default\"];\n      }\n\n      if (types.isUndefined(defaultValue)) {\n        defaultValue = getDefaultValue(property.type);\n      }\n\n      property[\"default\"] = defaultValue;\n    }\n  }]);\n\n  return ConfigurationRegistry;\n}();\n\nvar OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\nexport var OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\nexport function overrideIdentifierFromKey(key) {\n  return key.substring(1, key.length - 1);\n}\nexport function getDefaultValue(type) {\n  var t = Array.isArray(type) ? type[0] : type;\n\n  switch (t) {\n    case 'boolean':\n      return false;\n\n    case 'integer':\n    case 'number':\n      return 0;\n\n    case 'string':\n      return '';\n\n    case 'array':\n      return [];\n\n    case 'object':\n      return {};\n\n    default:\n      return null;\n  }\n}\nvar configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property) {\n  if (!property.trim()) {\n    return nls.localize('config.property.empty', \"Cannot register an empty property\");\n  }\n\n  if (OVERRIDE_PROPERTY_PATTERN.test(property)) {\n    return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n  }\n\n  if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n    return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js"],"names":["nls","Emitter","Registry","types","Extensions","JSONExtensions","Configuration","allSettings","properties","patternProperties","applicationSettings","machineSettings","machineOverridableSettings","windowSettings","resourceSettings","resourceLanguageSettingsSchemaId","contributionRegistry","as","JSONContribution","ConfigurationRegistry","overrideIdentifiers","Set","_onDidSchemaChange","_onDidUpdateConfiguration","defaultValues","defaultLanguageConfigurationOverridesNode","id","title","localize","configurationContributors","resourceLanguageSettingsSchema","additionalProperties","errorMessage","allowTrailingCommas","allowComments","configurationProperties","excludedConfigurationProperties","registerSchema","configuration","validate","registerConfigurations","configurations","forEach","push","validateAndRegisterProperties","registerJSONConfiguration","fire","overrideIdentifier","add","updateOverridePropertyPatternKey","scope","isUndefinedOrNull","propertyKeys","key","validateProperty","property","updatePropertyDefaultValue","OVERRIDE_PROPERTY_PATTERN","test","undefined","hasOwnProperty","included","deprecationMessage","markdownDeprecationMessage","subNodes","allOf","node","register","updateSchema","values","overrideIdentifierProperty","resourceLanguagePropertiesSchema","type","description","$ref","defaultValue","isUndefined","getDefaultValue","OVERRIDE_PROPERTY","RegExp","overrideIdentifierFromKey","substring","length","t","Array","isArray","configurationRegistry","trim","getConfigurationProperties"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Registry } from '../../registry/common/platform.js';\r\nimport * as types from '../../../base/common/types.js';\r\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\r\nexport const Extensions = {\r\n    Configuration: 'base.contributions.configuration'\r\n};\r\nexport const allSettings = { properties: {}, patternProperties: {} };\r\nexport const applicationSettings = { properties: {}, patternProperties: {} };\r\nexport const machineSettings = { properties: {}, patternProperties: {} };\r\nexport const machineOverridableSettings = { properties: {}, patternProperties: {} };\r\nexport const windowSettings = { properties: {}, patternProperties: {} };\r\nexport const resourceSettings = { properties: {}, patternProperties: {} };\r\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\r\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\r\nclass ConfigurationRegistry {\r\n    constructor() {\r\n        this.overrideIdentifiers = new Set();\r\n        this._onDidSchemaChange = new Emitter();\r\n        this._onDidUpdateConfiguration = new Emitter();\r\n        this.defaultValues = {};\r\n        this.defaultLanguageConfigurationOverridesNode = {\r\n            id: 'defaultOverrides',\r\n            title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\r\n            properties: {}\r\n        };\r\n        this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\r\n        this.resourceLanguageSettingsSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting', allowTrailingCommas: true, allowComments: true };\r\n        this.configurationProperties = {};\r\n        this.excludedConfigurationProperties = {};\r\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\r\n    }\r\n    registerConfiguration(configuration, validate = true) {\r\n        this.registerConfigurations([configuration], validate);\r\n    }\r\n    registerConfigurations(configurations, validate = true) {\r\n        const properties = [];\r\n        configurations.forEach(configuration => {\r\n            properties.push(...this.validateAndRegisterProperties(configuration, validate)); // fills in defaults\r\n            this.configurationContributors.push(configuration);\r\n            this.registerJSONConfiguration(configuration);\r\n        });\r\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\r\n        this._onDidSchemaChange.fire();\r\n        this._onDidUpdateConfiguration.fire(properties);\r\n    }\r\n    registerOverrideIdentifiers(overrideIdentifiers) {\r\n        for (const overrideIdentifier of overrideIdentifiers) {\r\n            this.overrideIdentifiers.add(overrideIdentifier);\r\n        }\r\n        this.updateOverridePropertyPatternKey();\r\n    }\r\n    validateAndRegisterProperties(configuration, validate = true, scope = 3 /* WINDOW */) {\r\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\r\n        let propertyKeys = [];\r\n        let properties = configuration.properties;\r\n        if (properties) {\r\n            for (let key in properties) {\r\n                if (validate && validateProperty(key)) {\r\n                    delete properties[key];\r\n                    continue;\r\n                }\r\n                const property = properties[key];\r\n                // update default value\r\n                this.updatePropertyDefaultValue(key, property);\r\n                // update scope\r\n                if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\r\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\r\n                }\r\n                else {\r\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\r\n                }\r\n                // Add to properties maps\r\n                // Property is included by default if 'included' is unspecified\r\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\r\n                    this.excludedConfigurationProperties[key] = properties[key];\r\n                    delete properties[key];\r\n                    continue;\r\n                }\r\n                else {\r\n                    this.configurationProperties[key] = properties[key];\r\n                }\r\n                if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\r\n                    // If not set, default deprecationMessage to the markdown source\r\n                    properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\r\n                }\r\n                propertyKeys.push(key);\r\n            }\r\n        }\r\n        let subNodes = configuration.allOf;\r\n        if (subNodes) {\r\n            for (let node of subNodes) {\r\n                propertyKeys.push(...this.validateAndRegisterProperties(node, validate, scope));\r\n            }\r\n        }\r\n        return propertyKeys;\r\n    }\r\n    getConfigurationProperties() {\r\n        return this.configurationProperties;\r\n    }\r\n    registerJSONConfiguration(configuration) {\r\n        const register = (configuration) => {\r\n            let properties = configuration.properties;\r\n            if (properties) {\r\n                for (const key in properties) {\r\n                    this.updateSchema(key, properties[key]);\r\n                }\r\n            }\r\n            let subNodes = configuration.allOf;\r\n            if (subNodes) {\r\n                subNodes.forEach(register);\r\n            }\r\n        };\r\n        register(configuration);\r\n    }\r\n    updateSchema(key, property) {\r\n        allSettings.properties[key] = property;\r\n        switch (property.scope) {\r\n            case 1 /* APPLICATION */:\r\n                applicationSettings.properties[key] = property;\r\n                break;\r\n            case 2 /* MACHINE */:\r\n                machineSettings.properties[key] = property;\r\n                break;\r\n            case 6 /* MACHINE_OVERRIDABLE */:\r\n                machineOverridableSettings.properties[key] = property;\r\n                break;\r\n            case 3 /* WINDOW */:\r\n                windowSettings.properties[key] = property;\r\n                break;\r\n            case 4 /* RESOURCE */:\r\n                resourceSettings.properties[key] = property;\r\n                break;\r\n            case 5 /* LANGUAGE_OVERRIDABLE */:\r\n                resourceSettings.properties[key] = property;\r\n                this.resourceLanguageSettingsSchema.properties[key] = property;\r\n                break;\r\n        }\r\n    }\r\n    updateOverridePropertyPatternKey() {\r\n        for (const overrideIdentifier of this.overrideIdentifiers.values()) {\r\n            const overrideIdentifierProperty = `[${overrideIdentifier}]`;\r\n            const resourceLanguagePropertiesSchema = {\r\n                type: 'object',\r\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\r\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\r\n                $ref: resourceLanguageSettingsSchemaId,\r\n            };\r\n            this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\r\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n        }\r\n        this._onDidSchemaChange.fire();\r\n    }\r\n    updatePropertyDefaultValue(key, property) {\r\n        let defaultValue = this.defaultValues[key];\r\n        if (types.isUndefined(defaultValue)) {\r\n            defaultValue = property.default;\r\n        }\r\n        if (types.isUndefined(defaultValue)) {\r\n            defaultValue = getDefaultValue(property.type);\r\n        }\r\n        property.default = defaultValue;\r\n    }\r\n}\r\nconst OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\r\nexport const OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\r\nexport function overrideIdentifierFromKey(key) {\r\n    return key.substring(1, key.length - 1);\r\n}\r\nexport function getDefaultValue(type) {\r\n    const t = Array.isArray(type) ? type[0] : type;\r\n    switch (t) {\r\n        case 'boolean':\r\n            return false;\r\n        case 'integer':\r\n        case 'number':\r\n            return 0;\r\n        case 'string':\r\n            return '';\r\n        case 'array':\r\n            return [];\r\n        case 'object':\r\n            return {};\r\n        default:\r\n            return null;\r\n    }\r\n}\r\nconst configurationRegistry = new ConfigurationRegistry();\r\nRegistry.add(Extensions.Configuration, configurationRegistry);\r\nexport function validateProperty(property) {\r\n    if (!property.trim()) {\r\n        return nls.localize('config.property.empty', \"Cannot register an empty property\");\r\n    }\r\n    if (OVERRIDE_PROPERTY_PATTERN.test(property)) {\r\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\r\n    }\r\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\r\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\r\n    }\r\n    return null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}