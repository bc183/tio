{"ast":null,"code":"import _toConsumableArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../dom.js';\nimport { CSSIcon } from '../../../common/codicons.js';\nvar labelWithIconsRegex = /(\\\\)?\\$\\(([a-z\\-]+(?:~[a-z\\-]+)?)\\)/gi;\nexport function renderLabelWithIcons(text) {\n  var elements = new Array();\n  var match;\n  var textStart = 0,\n      textStop = 0;\n\n  while ((match = labelWithIconsRegex.exec(text)) !== null) {\n    textStop = match.index || 0;\n    elements.push(text.substring(textStart, textStop));\n    textStart = (match.index || 0) + match[0].length;\n\n    var _match = match,\n        _match2 = _slicedToArray(_match, 3),\n        escaped = _match2[1],\n        codicon = _match2[2];\n\n    elements.push(escaped ? \"$(\".concat(codicon, \")\") : renderIcon({\n      id: codicon\n    }));\n  }\n\n  if (textStart < text.length) {\n    elements.push(text.substring(textStart));\n  }\n\n  return elements;\n}\nexport function renderIcon(icon) {\n  var _node$classList;\n\n  var node = dom.$(\"span\");\n\n  (_node$classList = node.classList).add.apply(_node$classList, _toConsumableArray(CSSIcon.asClassNameArray(icon)));\n\n  return node;\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/browser/ui/iconLabel/iconLabels.js"],"names":["dom","CSSIcon","labelWithIconsRegex","renderLabelWithIcons","text","elements","Array","match","textStart","textStop","exec","index","push","substring","length","escaped","codicon","renderIcon","id","icon","node","$","classList","add","asClassNameArray"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,GAAZ,MAAqB,cAArB;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,IAAMC,mBAAmB,GAAG,uCAA5B;AACA,OAAO,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AACvC,MAAMC,QAAQ,GAAG,IAAIC,KAAJ,EAAjB;AACA,MAAIC,KAAJ;AACA,MAAIC,SAAS,GAAG,CAAhB;AAAA,MAAmBC,QAAQ,GAAG,CAA9B;;AACA,SAAO,CAACF,KAAK,GAAGL,mBAAmB,CAACQ,IAApB,CAAyBN,IAAzB,CAAT,MAA6C,IAApD,EAA0D;AACtDK,IAAAA,QAAQ,GAAGF,KAAK,CAACI,KAAN,IAAe,CAA1B;AACAN,IAAAA,QAAQ,CAACO,IAAT,CAAcR,IAAI,CAACS,SAAL,CAAeL,SAAf,EAA0BC,QAA1B,CAAd;AACAD,IAAAA,SAAS,GAAG,CAACD,KAAK,CAACI,KAAN,IAAe,CAAhB,IAAqBJ,KAAK,CAAC,CAAD,CAAL,CAASO,MAA1C;;AAHsD,iBAIzBP,KAJyB;AAAA;AAAA,QAI7CQ,OAJ6C;AAAA,QAIpCC,OAJoC;;AAKtDX,IAAAA,QAAQ,CAACO,IAAT,CAAcG,OAAO,eAAQC,OAAR,SAAqBC,UAAU,CAAC;AAAEC,MAAAA,EAAE,EAAEF;AAAN,KAAD,CAApD;AACH;;AACD,MAAIR,SAAS,GAAGJ,IAAI,CAACU,MAArB,EAA6B;AACzBT,IAAAA,QAAQ,CAACO,IAAT,CAAcR,IAAI,CAACS,SAAL,CAAeL,SAAf,CAAd;AACH;;AACD,SAAOH,QAAP;AACH;AACD,OAAO,SAASY,UAAT,CAAoBE,IAApB,EAA0B;AAAA;;AAC7B,MAAMC,IAAI,GAAGpB,GAAG,CAACqB,CAAJ,QAAb;;AACA,qBAAAD,IAAI,CAACE,SAAL,EAAeC,GAAf,2CAAsBtB,OAAO,CAACuB,gBAAR,CAAyBL,IAAzB,CAAtB;;AACA,SAAOC,IAAP;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as dom from '../../dom.js';\r\nimport { CSSIcon } from '../../../common/codicons.js';\r\nconst labelWithIconsRegex = /(\\\\)?\\$\\(([a-z\\-]+(?:~[a-z\\-]+)?)\\)/gi;\r\nexport function renderLabelWithIcons(text) {\r\n    const elements = new Array();\r\n    let match;\r\n    let textStart = 0, textStop = 0;\r\n    while ((match = labelWithIconsRegex.exec(text)) !== null) {\r\n        textStop = match.index || 0;\r\n        elements.push(text.substring(textStart, textStop));\r\n        textStart = (match.index || 0) + match[0].length;\r\n        const [, escaped, codicon] = match;\r\n        elements.push(escaped ? `$(${codicon})` : renderIcon({ id: codicon }));\r\n    }\r\n    if (textStart < text.length) {\r\n        elements.push(text.substring(textStart));\r\n    }\r\n    return elements;\r\n}\r\nexport function renderIcon(icon) {\r\n    const node = dom.$(`span`);\r\n    node.classList.add(...CSSIcon.asClassNameArray(icon));\r\n    return node;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}