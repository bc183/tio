{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n\n/*\r\n * This module only exports 'compile' which compiles a JSON language definition\r\n * into a typed and checked ILexer definition.\r\n */\nimport * as monarchCommon from './monarchCommon.js';\n/*\r\n * Type helpers\r\n *\r\n * Note: this is just for sanity checks on the JSON description which is\r\n * helpful for the programmer. No checks are done anymore once the lexer is\r\n * already 'compiled and checked'.\r\n *\r\n */\n\nfunction isArrayOf(elemType, obj) {\n  if (!obj) {\n    return false;\n  }\n\n  if (!Array.isArray(obj)) {\n    return false;\n  }\n\n  var _iterator = _createForOfIteratorHelper(obj),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var el = _step.value;\n\n      if (!elemType(el)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n}\n\nfunction bool(prop, defValue) {\n  if (typeof prop === 'boolean') {\n    return prop;\n  }\n\n  return defValue;\n}\n\nfunction string(prop, defValue) {\n  if (typeof prop === 'string') {\n    return prop;\n  }\n\n  return defValue;\n}\n\nfunction arrayToHash(array) {\n  var result = {};\n\n  var _iterator2 = _createForOfIteratorHelper(array),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var e = _step2.value;\n      result[e] = true;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return result;\n}\n\nfunction createKeywordMatcher(arr) {\n  var caseInsensitive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (caseInsensitive) {\n    arr = arr.map(function (x) {\n      return x.toLowerCase();\n    });\n  }\n\n  var hash = arrayToHash(arr);\n\n  if (caseInsensitive) {\n    return function (word) {\n      return hash[word.toLowerCase()] !== undefined && hash.hasOwnProperty(word.toLowerCase());\n    };\n  } else {\n    return function (word) {\n      return hash[word] !== undefined && hash.hasOwnProperty(word);\n    };\n  }\n} // Lexer helpers\n\n/**\r\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set, and the 'u' flag if 'unicode' is set.\r\n * Also replaces @\\w+ or sequences with the content of the specified attribute\r\n */\n\n\nfunction compileRegExp(lexer, str) {\n  var n = 0;\n\n  while (str.indexOf('@') >= 0 && n < 5) {\n    // at most 5 expansions\n    n++;\n    str = str.replace(/@(\\w+)/g, function (s, attr) {\n      var sub = '';\n\n      if (typeof lexer[attr] === 'string') {\n        sub = lexer[attr];\n      } else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n        sub = lexer[attr].source;\n      } else {\n        if (lexer[attr] === undefined) {\n          throw monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\n        } else {\n          throw monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\n        }\n      }\n\n      return monarchCommon.empty(sub) ? '' : '(?:' + sub + ')';\n    });\n  }\n\n  var flags = (lexer.ignoreCase ? 'i' : '') + (lexer.unicode ? 'u' : '');\n  return new RegExp(str, flags);\n}\n/**\r\n * Compiles guard functions for case matches.\r\n * This compiles 'cases' attributes into efficient match functions.\r\n *\r\n */\n\n\nfunction selectScrutinee(id, matches, state, num) {\n  if (num < 0) {\n    return id;\n  }\n\n  if (num < matches.length) {\n    return matches[num];\n  }\n\n  if (num >= 100) {\n    num = num - 100;\n    var parts = state.split('.');\n    parts.unshift(state);\n\n    if (num < parts.length) {\n      return parts[num];\n    }\n  }\n\n  return null;\n}\n\nfunction createGuard(lexer, ruleName, tkey, val) {\n  // get the scrutinee and pattern\n  var scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n\n  var oppat = tkey;\n  var matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n\n  if (matches) {\n    if (matches[3]) {\n      // if digits\n      scrut = parseInt(matches[3]);\n\n      if (matches[2]) {\n        scrut = scrut + 100; // if [sS] present\n      }\n    }\n\n    oppat = matches[4];\n  } // get operator\n\n\n  var op = '~';\n  var pat = oppat;\n\n  if (!oppat || oppat.length === 0) {\n    op = '!=';\n    pat = '';\n  } else if (/^\\w*$/.test(pat)) {\n    // just a word\n    op = '==';\n  } else {\n    matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n\n    if (matches) {\n      op = matches[1];\n      pat = matches[2];\n    }\n  } // set the tester function\n\n\n  var tester; // special case a regexp that matches just words\n\n  if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\n    var inWords = createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\n\n    tester = function tester(s) {\n      return op === '~' ? inWords(s) : !inWords(s);\n    };\n  } else if (op === '@' || op === '!@') {\n    var words = lexer[pat];\n\n    if (!words) {\n      throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\n    }\n\n    if (!isArrayOf(function (elem) {\n      return typeof elem === 'string';\n    }, words)) {\n      throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\n    }\n\n    var _inWords = createKeywordMatcher(words, lexer.ignoreCase);\n\n    tester = function tester(s) {\n      return op === '@' ? _inWords(s) : !_inWords(s);\n    };\n  } else if (op === '~' || op === '!~') {\n    if (pat.indexOf('$') < 0) {\n      // precompile regular expression\n      var re = compileRegExp(lexer, '^' + pat + '$');\n\n      tester = function tester(s) {\n        return op === '~' ? re.test(s) : !re.test(s);\n      };\n    } else {\n      tester = function tester(s, id, matches, state) {\n        var re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\n        return re.test(s);\n      };\n    }\n  } else {\n    // if (op==='==' || op==='!=') {\n    if (pat.indexOf('$') < 0) {\n      var patx = monarchCommon.fixCase(lexer, pat);\n\n      tester = function tester(s) {\n        return op === '==' ? s === patx : s !== patx;\n      };\n    } else {\n      var _patx = monarchCommon.fixCase(lexer, pat);\n\n      tester = function tester(s, id, matches, state, eos) {\n        var patexp = monarchCommon.substituteMatches(lexer, _patx, id, matches, state);\n        return op === '==' ? s === patexp : s !== patexp;\n      };\n    }\n  } // return the branch object\n\n\n  if (scrut === -1) {\n    return {\n      name: tkey,\n      value: val,\n      test: function test(id, matches, state, eos) {\n        return tester(id, id, matches, state, eos);\n      }\n    };\n  } else {\n    return {\n      name: tkey,\n      value: val,\n      test: function test(id, matches, state, eos) {\n        var scrutinee = selectScrutinee(id, matches, state, scrut);\n        return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\n      }\n    };\n  }\n}\n/**\r\n * Compiles an action: i.e. optimize regular expressions and case matches\r\n * and do many sanity checks.\r\n *\r\n * This is called only during compilation but if the lexer definition\r\n * contains user functions as actions (which is usually not allowed), then this\r\n * may be called during lexing. It is important therefore to compile common cases efficiently\r\n */\n\n\nfunction compileAction(lexer, ruleName, action) {\n  if (!action) {\n    return {\n      token: ''\n    };\n  } else if (typeof action === 'string') {\n    return action; // { token: action };\n  } else if (action.token || action.token === '') {\n    if (typeof action.token !== 'string') {\n      throw monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\n    } else {\n      // only copy specific typed fields (only happens once during compile Lexer)\n      var newAction = {\n        token: action.token\n      };\n\n      if (action.token.indexOf('$') >= 0) {\n        newAction.tokenSubst = true;\n      }\n\n      if (typeof action.bracket === 'string') {\n        if (action.bracket === '@open') {\n          newAction.bracket = 1\n          /* Open */\n          ;\n        } else if (action.bracket === '@close') {\n          newAction.bracket = -1\n          /* Close */\n          ;\n        } else {\n          throw monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\n        }\n      }\n\n      if (action.next) {\n        if (typeof action.next !== 'string') {\n          throw monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\n        } else {\n          var next = action.next;\n\n          if (!/^(@pop|@push|@popall)$/.test(next)) {\n            if (next[0] === '@') {\n              next = next.substr(1); // peel off starting @ sign\n            }\n\n            if (next.indexOf('$') < 0) {\n              // no dollar substitution, we can check if the state exists\n              if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\n                throw monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\n              }\n            }\n          }\n\n          newAction.next = next;\n        }\n      }\n\n      if (typeof action.goBack === 'number') {\n        newAction.goBack = action.goBack;\n      }\n\n      if (typeof action.switchTo === 'string') {\n        newAction.switchTo = action.switchTo;\n      }\n\n      if (typeof action.log === 'string') {\n        newAction.log = action.log;\n      }\n\n      if (typeof action.nextEmbedded === 'string') {\n        newAction.nextEmbedded = action.nextEmbedded;\n        lexer.usesEmbedded = true;\n      }\n\n      return newAction;\n    }\n  } else if (Array.isArray(action)) {\n    var results = [];\n\n    for (var i = 0, len = action.length; i < len; i++) {\n      results[i] = compileAction(lexer, ruleName, action[i]);\n    }\n\n    return {\n      group: results\n    };\n  } else if (action.cases) {\n    // build an array of test cases\n    var cases = []; // for each case, push a test function and result value\n\n    for (var tkey in action.cases) {\n      if (action.cases.hasOwnProperty(tkey)) {\n        var val = compileAction(lexer, ruleName, action.cases[tkey]); // what kind of case\n\n        if (tkey === '@default' || tkey === '@' || tkey === '') {\n          cases.push({\n            test: undefined,\n            value: val,\n            name: tkey\n          });\n        } else if (tkey === '@eos') {\n          cases.push({\n            test: function test(id, matches, state, eos) {\n              return eos;\n            },\n            value: val,\n            name: tkey\n          });\n        } else {\n          cases.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\n        }\n      }\n    } // create a matching function\n\n\n    var def = lexer.defaultToken;\n    return {\n      test: function test(id, matches, state, eos) {\n        var _iterator3 = _createForOfIteratorHelper(cases),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _case = _step3.value;\n\n            var didmatch = !_case.test || _case.test(id, matches, state, eos);\n\n            if (didmatch) {\n              return _case.value;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        return def;\n      }\n    };\n  } else {\n    throw monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\n  }\n}\n/**\r\n * Helper class for creating matching rules\r\n */\n\n\nvar Rule = /*#__PURE__*/function () {\n  function Rule(name) {\n    _classCallCheck(this, Rule);\n\n    this.regex = new RegExp('');\n    this.action = {\n      token: ''\n    };\n    this.matchOnlyAtLineStart = false;\n    this.name = '';\n    this.name = name;\n  }\n\n  _createClass(Rule, [{\n    key: \"setRegex\",\n    value: function setRegex(lexer, re) {\n      var sregex;\n\n      if (typeof re === 'string') {\n        sregex = re;\n      } else if (re instanceof RegExp) {\n        sregex = re.source;\n      } else {\n        throw monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\n      }\n\n      this.matchOnlyAtLineStart = sregex.length > 0 && sregex[0] === '^';\n      this.name = this.name + ': ' + sregex;\n      this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\n    }\n  }, {\n    key: \"setAction\",\n    value: function setAction(lexer, act) {\n      this.action = compileAction(lexer, this.name, act);\n    }\n  }]);\n\n  return Rule;\n}();\n/**\r\n * Compiles a json description function into json where all regular expressions,\r\n * case matches etc, are compiled and all include rules are expanded.\r\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\r\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\r\n * regular expression objects and functions that get called during lexing.\r\n * (Currently we have no samples that need this so perhaps we should always have\r\n * jsonStrict to true).\r\n */\n\n\nexport function compile(languageId, json) {\n  if (!json || typeof json !== 'object') {\n    throw new Error('Monarch: expecting a language definition object');\n  } // Create our lexer\n\n\n  var lexer = {};\n  lexer.languageId = languageId;\n  lexer.includeLF = bool(json.includeLF, false);\n  lexer.noThrow = false; // raise exceptions during compilation\n\n  lexer.maxStack = 100; // Set standard fields: be defensive about types\n\n  lexer.start = typeof json.start === 'string' ? json.start : null;\n  lexer.ignoreCase = bool(json.ignoreCase, false);\n  lexer.unicode = bool(json.unicode, false);\n  lexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.languageId);\n  lexer.defaultToken = string(json.defaultToken, 'source');\n  lexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\n  // For calling compileAction later on\n\n  var lexerMin = json;\n  lexerMin.languageId = languageId;\n  lexerMin.includeLF = lexer.includeLF;\n  lexerMin.ignoreCase = lexer.ignoreCase;\n  lexerMin.unicode = lexer.unicode;\n  lexerMin.noThrow = lexer.noThrow;\n  lexerMin.usesEmbedded = lexer.usesEmbedded;\n  lexerMin.stateNames = json.tokenizer;\n  lexerMin.defaultToken = lexer.defaultToken; // Compile an array of rules into newrules where RegExp objects are created.\n\n  function addRules(state, newrules, rules) {\n    var _iterator4 = _createForOfIteratorHelper(rules),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var rule = _step4.value;\n        var include = rule.include;\n\n        if (include) {\n          if (typeof include !== 'string') {\n            throw monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\n          }\n\n          if (include[0] === '@') {\n            include = include.substr(1); // peel off starting @\n          }\n\n          if (!json.tokenizer[include]) {\n            throw monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\n          }\n\n          addRules(state + '.' + include, newrules, json.tokenizer[include]);\n        } else {\n          var newrule = new Rule(state); // Set up new rule attributes\n\n          if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\n            newrule.setRegex(lexerMin, rule[0]);\n\n            if (rule.length >= 3) {\n              if (typeof rule[1] === 'string') {\n                newrule.setAction(lexerMin, {\n                  token: rule[1],\n                  next: rule[2]\n                });\n              } else if (typeof rule[1] === 'object') {\n                var rule1 = rule[1];\n                rule1.next = rule[2];\n                newrule.setAction(lexerMin, rule1);\n              } else {\n                throw monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\n              }\n            } else {\n              newrule.setAction(lexerMin, rule[1]);\n            }\n          } else {\n            if (!rule.regex) {\n              throw monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\n            }\n\n            if (rule.name) {\n              if (typeof rule.name === 'string') {\n                newrule.name = rule.name;\n              }\n            }\n\n            if (rule.matchOnlyAtStart) {\n              newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\n            }\n\n            newrule.setRegex(lexerMin, rule.regex);\n            newrule.setAction(lexerMin, rule.action);\n          }\n\n          newrules.push(newrule);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  } // compile the tokenizer rules\n\n\n  if (!json.tokenizer || typeof json.tokenizer !== 'object') {\n    throw monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\n  }\n\n  lexer.tokenizer = [];\n\n  for (var key in json.tokenizer) {\n    if (json.tokenizer.hasOwnProperty(key)) {\n      if (!lexer.start) {\n        lexer.start = key;\n      }\n\n      var rules = json.tokenizer[key];\n      lexer.tokenizer[key] = new Array();\n      addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\n    }\n  }\n\n  lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\n  // Set simple brackets\n\n  if (json.brackets) {\n    if (!Array.isArray(json.brackets)) {\n      throw monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\n    }\n  } else {\n    json.brackets = [{\n      open: '{',\n      close: '}',\n      token: 'delimiter.curly'\n    }, {\n      open: '[',\n      close: ']',\n      token: 'delimiter.square'\n    }, {\n      open: '(',\n      close: ')',\n      token: 'delimiter.parenthesis'\n    }, {\n      open: '<',\n      close: '>',\n      token: 'delimiter.angle'\n    }];\n  }\n\n  var brackets = [];\n\n  var _iterator5 = _createForOfIteratorHelper(json.brackets),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var el = _step5.value;\n      var desc = el;\n\n      if (desc && Array.isArray(desc) && desc.length === 3) {\n        desc = {\n          token: desc[2],\n          open: desc[0],\n          close: desc[1]\n        };\n      }\n\n      if (desc.open === desc.close) {\n        throw monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open + '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\n      }\n\n      if (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\n        brackets.push({\n          token: desc.token + lexer.tokenPostfix,\n          open: monarchCommon.fixCase(lexer, desc.open),\n          close: monarchCommon.fixCase(lexer, desc.close)\n        });\n      } else {\n        throw monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  lexer.brackets = brackets; // Disable throw so the syntax highlighter goes, no matter what\n\n  lexer.noThrow = true;\n  return lexer;\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCompile.js"],"names":["monarchCommon","isArrayOf","elemType","obj","Array","isArray","el","bool","prop","defValue","string","arrayToHash","array","result","e","createKeywordMatcher","arr","caseInsensitive","map","x","toLowerCase","hash","word","undefined","hasOwnProperty","compileRegExp","lexer","str","n","indexOf","replace","s","attr","sub","RegExp","source","createError","empty","flags","ignoreCase","unicode","selectScrutinee","id","matches","state","num","length","parts","split","unshift","createGuard","ruleName","tkey","val","scrut","oppat","match","parseInt","op","pat","test","tester","inWords","words","elem","re","substituteMatches","patx","fixCase","eos","patexp","name","value","scrutinee","compileAction","action","token","newAction","tokenSubst","bracket","next","substr","stateExists","goBack","switchTo","log","nextEmbedded","usesEmbedded","results","i","len","group","cases","push","def","defaultToken","_case","didmatch","Rule","regex","matchOnlyAtLineStart","sregex","act","compile","languageId","json","Error","includeLF","noThrow","maxStack","start","tokenPostfix","lexerMin","stateNames","tokenizer","addRules","newrules","rules","rule","include","newrule","setRegex","setAction","rule1","matchOnlyAtStart","key","brackets","open","close","desc"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/*\r\n * This module only exports 'compile' which compiles a JSON language definition\r\n * into a typed and checked ILexer definition.\r\n */\r\nimport * as monarchCommon from './monarchCommon.js';\r\n/*\r\n * Type helpers\r\n *\r\n * Note: this is just for sanity checks on the JSON description which is\r\n * helpful for the programmer. No checks are done anymore once the lexer is\r\n * already 'compiled and checked'.\r\n *\r\n */\r\nfunction isArrayOf(elemType, obj) {\r\n    if (!obj) {\r\n        return false;\r\n    }\r\n    if (!(Array.isArray(obj))) {\r\n        return false;\r\n    }\r\n    for (const el of obj) {\r\n        if (!(elemType(el))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction bool(prop, defValue) {\r\n    if (typeof prop === 'boolean') {\r\n        return prop;\r\n    }\r\n    return defValue;\r\n}\r\nfunction string(prop, defValue) {\r\n    if (typeof (prop) === 'string') {\r\n        return prop;\r\n    }\r\n    return defValue;\r\n}\r\nfunction arrayToHash(array) {\r\n    const result = {};\r\n    for (const e of array) {\r\n        result[e] = true;\r\n    }\r\n    return result;\r\n}\r\nfunction createKeywordMatcher(arr, caseInsensitive = false) {\r\n    if (caseInsensitive) {\r\n        arr = arr.map(function (x) { return x.toLowerCase(); });\r\n    }\r\n    const hash = arrayToHash(arr);\r\n    if (caseInsensitive) {\r\n        return function (word) {\r\n            return hash[word.toLowerCase()] !== undefined && hash.hasOwnProperty(word.toLowerCase());\r\n        };\r\n    }\r\n    else {\r\n        return function (word) {\r\n            return hash[word] !== undefined && hash.hasOwnProperty(word);\r\n        };\r\n    }\r\n}\r\n// Lexer helpers\r\n/**\r\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set, and the 'u' flag if 'unicode' is set.\r\n * Also replaces @\\w+ or sequences with the content of the specified attribute\r\n */\r\nfunction compileRegExp(lexer, str) {\r\n    let n = 0;\r\n    while (str.indexOf('@') >= 0 && n < 5) { // at most 5 expansions\r\n        n++;\r\n        str = str.replace(/@(\\w+)/g, function (s, attr) {\r\n            let sub = '';\r\n            if (typeof (lexer[attr]) === 'string') {\r\n                sub = lexer[attr];\r\n            }\r\n            else if (lexer[attr] && lexer[attr] instanceof RegExp) {\r\n                sub = lexer[attr].source;\r\n            }\r\n            else {\r\n                if (lexer[attr] === undefined) {\r\n                    throw monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\r\n                }\r\n                else {\r\n                    throw monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\r\n                }\r\n            }\r\n            return (monarchCommon.empty(sub) ? '' : '(?:' + sub + ')');\r\n        });\r\n    }\r\n    let flags = (lexer.ignoreCase ? 'i' : '') + (lexer.unicode ? 'u' : '');\r\n    return new RegExp(str, flags);\r\n}\r\n/**\r\n * Compiles guard functions for case matches.\r\n * This compiles 'cases' attributes into efficient match functions.\r\n *\r\n */\r\nfunction selectScrutinee(id, matches, state, num) {\r\n    if (num < 0) {\r\n        return id;\r\n    }\r\n    if (num < matches.length) {\r\n        return matches[num];\r\n    }\r\n    if (num >= 100) {\r\n        num = num - 100;\r\n        let parts = state.split('.');\r\n        parts.unshift(state);\r\n        if (num < parts.length) {\r\n            return parts[num];\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction createGuard(lexer, ruleName, tkey, val) {\r\n    // get the scrutinee and pattern\r\n    let scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\r\n    let oppat = tkey;\r\n    let matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\r\n    if (matches) {\r\n        if (matches[3]) { // if digits\r\n            scrut = parseInt(matches[3]);\r\n            if (matches[2]) {\r\n                scrut = scrut + 100; // if [sS] present\r\n            }\r\n        }\r\n        oppat = matches[4];\r\n    }\r\n    // get operator\r\n    let op = '~';\r\n    let pat = oppat;\r\n    if (!oppat || oppat.length === 0) {\r\n        op = '!=';\r\n        pat = '';\r\n    }\r\n    else if (/^\\w*$/.test(pat)) { // just a word\r\n        op = '==';\r\n    }\r\n    else {\r\n        matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\r\n        if (matches) {\r\n            op = matches[1];\r\n            pat = matches[2];\r\n        }\r\n    }\r\n    // set the tester function\r\n    let tester;\r\n    // special case a regexp that matches just words\r\n    if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\r\n        let inWords = createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\r\n        tester = function (s) { return (op === '~' ? inWords(s) : !inWords(s)); };\r\n    }\r\n    else if (op === '@' || op === '!@') {\r\n        let words = lexer[pat];\r\n        if (!words) {\r\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\r\n        }\r\n        if (!(isArrayOf(function (elem) { return (typeof (elem) === 'string'); }, words))) {\r\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\r\n        }\r\n        let inWords = createKeywordMatcher(words, lexer.ignoreCase);\r\n        tester = function (s) { return (op === '@' ? inWords(s) : !inWords(s)); };\r\n    }\r\n    else if (op === '~' || op === '!~') {\r\n        if (pat.indexOf('$') < 0) {\r\n            // precompile regular expression\r\n            let re = compileRegExp(lexer, '^' + pat + '$');\r\n            tester = function (s) { return (op === '~' ? re.test(s) : !re.test(s)); };\r\n        }\r\n        else {\r\n            tester = function (s, id, matches, state) {\r\n                let re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\r\n                return re.test(s);\r\n            };\r\n        }\r\n    }\r\n    else { // if (op==='==' || op==='!=') {\r\n        if (pat.indexOf('$') < 0) {\r\n            let patx = monarchCommon.fixCase(lexer, pat);\r\n            tester = function (s) { return (op === '==' ? s === patx : s !== patx); };\r\n        }\r\n        else {\r\n            let patx = monarchCommon.fixCase(lexer, pat);\r\n            tester = function (s, id, matches, state, eos) {\r\n                let patexp = monarchCommon.substituteMatches(lexer, patx, id, matches, state);\r\n                return (op === '==' ? s === patexp : s !== patexp);\r\n            };\r\n        }\r\n    }\r\n    // return the branch object\r\n    if (scrut === -1) {\r\n        return {\r\n            name: tkey, value: val, test: function (id, matches, state, eos) {\r\n                return tester(id, id, matches, state, eos);\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            name: tkey, value: val, test: function (id, matches, state, eos) {\r\n                let scrutinee = selectScrutinee(id, matches, state, scrut);\r\n                return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\r\n            }\r\n        };\r\n    }\r\n}\r\n/**\r\n * Compiles an action: i.e. optimize regular expressions and case matches\r\n * and do many sanity checks.\r\n *\r\n * This is called only during compilation but if the lexer definition\r\n * contains user functions as actions (which is usually not allowed), then this\r\n * may be called during lexing. It is important therefore to compile common cases efficiently\r\n */\r\nfunction compileAction(lexer, ruleName, action) {\r\n    if (!action) {\r\n        return { token: '' };\r\n    }\r\n    else if (typeof (action) === 'string') {\r\n        return action; // { token: action };\r\n    }\r\n    else if (action.token || action.token === '') {\r\n        if (typeof (action.token) !== 'string') {\r\n            throw monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\r\n        }\r\n        else {\r\n            // only copy specific typed fields (only happens once during compile Lexer)\r\n            let newAction = { token: action.token };\r\n            if (action.token.indexOf('$') >= 0) {\r\n                newAction.tokenSubst = true;\r\n            }\r\n            if (typeof (action.bracket) === 'string') {\r\n                if (action.bracket === '@open') {\r\n                    newAction.bracket = 1 /* Open */;\r\n                }\r\n                else if (action.bracket === '@close') {\r\n                    newAction.bracket = -1 /* Close */;\r\n                }\r\n                else {\r\n                    throw monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\r\n                }\r\n            }\r\n            if (action.next) {\r\n                if (typeof (action.next) !== 'string') {\r\n                    throw monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\r\n                }\r\n                else {\r\n                    let next = action.next;\r\n                    if (!/^(@pop|@push|@popall)$/.test(next)) {\r\n                        if (next[0] === '@') {\r\n                            next = next.substr(1); // peel off starting @ sign\r\n                        }\r\n                        if (next.indexOf('$') < 0) { // no dollar substitution, we can check if the state exists\r\n                            if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\r\n                                throw monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\r\n                            }\r\n                        }\r\n                    }\r\n                    newAction.next = next;\r\n                }\r\n            }\r\n            if (typeof (action.goBack) === 'number') {\r\n                newAction.goBack = action.goBack;\r\n            }\r\n            if (typeof (action.switchTo) === 'string') {\r\n                newAction.switchTo = action.switchTo;\r\n            }\r\n            if (typeof (action.log) === 'string') {\r\n                newAction.log = action.log;\r\n            }\r\n            if (typeof (action.nextEmbedded) === 'string') {\r\n                newAction.nextEmbedded = action.nextEmbedded;\r\n                lexer.usesEmbedded = true;\r\n            }\r\n            return newAction;\r\n        }\r\n    }\r\n    else if (Array.isArray(action)) {\r\n        let results = [];\r\n        for (let i = 0, len = action.length; i < len; i++) {\r\n            results[i] = compileAction(lexer, ruleName, action[i]);\r\n        }\r\n        return { group: results };\r\n    }\r\n    else if (action.cases) {\r\n        // build an array of test cases\r\n        let cases = [];\r\n        // for each case, push a test function and result value\r\n        for (let tkey in action.cases) {\r\n            if (action.cases.hasOwnProperty(tkey)) {\r\n                const val = compileAction(lexer, ruleName, action.cases[tkey]);\r\n                // what kind of case\r\n                if (tkey === '@default' || tkey === '@' || tkey === '') {\r\n                    cases.push({ test: undefined, value: val, name: tkey });\r\n                }\r\n                else if (tkey === '@eos') {\r\n                    cases.push({ test: function (id, matches, state, eos) { return eos; }, value: val, name: tkey });\r\n                }\r\n                else {\r\n                    cases.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\r\n                }\r\n            }\r\n        }\r\n        // create a matching function\r\n        const def = lexer.defaultToken;\r\n        return {\r\n            test: function (id, matches, state, eos) {\r\n                for (const _case of cases) {\r\n                    const didmatch = (!_case.test || _case.test(id, matches, state, eos));\r\n                    if (didmatch) {\r\n                        return _case.value;\r\n                    }\r\n                }\r\n                return def;\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        throw monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\r\n    }\r\n}\r\n/**\r\n * Helper class for creating matching rules\r\n */\r\nclass Rule {\r\n    constructor(name) {\r\n        this.regex = new RegExp('');\r\n        this.action = { token: '' };\r\n        this.matchOnlyAtLineStart = false;\r\n        this.name = '';\r\n        this.name = name;\r\n    }\r\n    setRegex(lexer, re) {\r\n        let sregex;\r\n        if (typeof (re) === 'string') {\r\n            sregex = re;\r\n        }\r\n        else if (re instanceof RegExp) {\r\n            sregex = re.source;\r\n        }\r\n        else {\r\n            throw monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\r\n        }\r\n        this.matchOnlyAtLineStart = (sregex.length > 0 && sregex[0] === '^');\r\n        this.name = this.name + ': ' + sregex;\r\n        this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\r\n    }\r\n    setAction(lexer, act) {\r\n        this.action = compileAction(lexer, this.name, act);\r\n    }\r\n}\r\n/**\r\n * Compiles a json description function into json where all regular expressions,\r\n * case matches etc, are compiled and all include rules are expanded.\r\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\r\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\r\n * regular expression objects and functions that get called during lexing.\r\n * (Currently we have no samples that need this so perhaps we should always have\r\n * jsonStrict to true).\r\n */\r\nexport function compile(languageId, json) {\r\n    if (!json || typeof (json) !== 'object') {\r\n        throw new Error('Monarch: expecting a language definition object');\r\n    }\r\n    // Create our lexer\r\n    let lexer = {};\r\n    lexer.languageId = languageId;\r\n    lexer.includeLF = bool(json.includeLF, false);\r\n    lexer.noThrow = false; // raise exceptions during compilation\r\n    lexer.maxStack = 100;\r\n    // Set standard fields: be defensive about types\r\n    lexer.start = (typeof json.start === 'string' ? json.start : null);\r\n    lexer.ignoreCase = bool(json.ignoreCase, false);\r\n    lexer.unicode = bool(json.unicode, false);\r\n    lexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.languageId);\r\n    lexer.defaultToken = string(json.defaultToken, 'source');\r\n    lexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\r\n    // For calling compileAction later on\r\n    let lexerMin = json;\r\n    lexerMin.languageId = languageId;\r\n    lexerMin.includeLF = lexer.includeLF;\r\n    lexerMin.ignoreCase = lexer.ignoreCase;\r\n    lexerMin.unicode = lexer.unicode;\r\n    lexerMin.noThrow = lexer.noThrow;\r\n    lexerMin.usesEmbedded = lexer.usesEmbedded;\r\n    lexerMin.stateNames = json.tokenizer;\r\n    lexerMin.defaultToken = lexer.defaultToken;\r\n    // Compile an array of rules into newrules where RegExp objects are created.\r\n    function addRules(state, newrules, rules) {\r\n        for (const rule of rules) {\r\n            let include = rule.include;\r\n            if (include) {\r\n                if (typeof (include) !== 'string') {\r\n                    throw monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\r\n                }\r\n                if (include[0] === '@') {\r\n                    include = include.substr(1); // peel off starting @\r\n                }\r\n                if (!json.tokenizer[include]) {\r\n                    throw monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\r\n                }\r\n                addRules(state + '.' + include, newrules, json.tokenizer[include]);\r\n            }\r\n            else {\r\n                const newrule = new Rule(state);\r\n                // Set up new rule attributes\r\n                if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\r\n                    newrule.setRegex(lexerMin, rule[0]);\r\n                    if (rule.length >= 3) {\r\n                        if (typeof (rule[1]) === 'string') {\r\n                            newrule.setAction(lexerMin, { token: rule[1], next: rule[2] });\r\n                        }\r\n                        else if (typeof (rule[1]) === 'object') {\r\n                            const rule1 = rule[1];\r\n                            rule1.next = rule[2];\r\n                            newrule.setAction(lexerMin, rule1);\r\n                        }\r\n                        else {\r\n                            throw monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newrule.setAction(lexerMin, rule[1]);\r\n                    }\r\n                }\r\n                else {\r\n                    if (!rule.regex) {\r\n                        throw monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\r\n                    }\r\n                    if (rule.name) {\r\n                        if (typeof rule.name === 'string') {\r\n                            newrule.name = rule.name;\r\n                        }\r\n                    }\r\n                    if (rule.matchOnlyAtStart) {\r\n                        newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\r\n                    }\r\n                    newrule.setRegex(lexerMin, rule.regex);\r\n                    newrule.setAction(lexerMin, rule.action);\r\n                }\r\n                newrules.push(newrule);\r\n            }\r\n        }\r\n    }\r\n    // compile the tokenizer rules\r\n    if (!json.tokenizer || typeof (json.tokenizer) !== 'object') {\r\n        throw monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\r\n    }\r\n    lexer.tokenizer = [];\r\n    for (let key in json.tokenizer) {\r\n        if (json.tokenizer.hasOwnProperty(key)) {\r\n            if (!lexer.start) {\r\n                lexer.start = key;\r\n            }\r\n            const rules = json.tokenizer[key];\r\n            lexer.tokenizer[key] = new Array();\r\n            addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\r\n        }\r\n    }\r\n    lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\r\n    // Set simple brackets\r\n    if (json.brackets) {\r\n        if (!(Array.isArray(json.brackets))) {\r\n            throw monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\r\n        }\r\n    }\r\n    else {\r\n        json.brackets = [\r\n            { open: '{', close: '}', token: 'delimiter.curly' },\r\n            { open: '[', close: ']', token: 'delimiter.square' },\r\n            { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n            { open: '<', close: '>', token: 'delimiter.angle' }\r\n        ];\r\n    }\r\n    let brackets = [];\r\n    for (let el of json.brackets) {\r\n        let desc = el;\r\n        if (desc && Array.isArray(desc) && desc.length === 3) {\r\n            desc = { token: desc[2], open: desc[0], close: desc[1] };\r\n        }\r\n        if (desc.open === desc.close) {\r\n            throw monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open +\r\n                '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\r\n        }\r\n        if (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\r\n            brackets.push({\r\n                token: desc.token + lexer.tokenPostfix,\r\n                open: monarchCommon.fixCase(lexer, desc.open),\r\n                close: monarchCommon.fixCase(lexer, desc.close)\r\n            });\r\n        }\r\n        else {\r\n            throw monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\r\n        }\r\n    }\r\n    lexer.brackets = brackets;\r\n    // Disable throw so the syntax highlighter goes, no matter what\r\n    lexer.noThrow = true;\r\n    return lexer;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}