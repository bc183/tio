{"ast":null,"code":"import _inherits from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar _a;\n\nimport './media/diffReview.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { ActionBar } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { DomScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { Action } from '../../../base/common/actions.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Configuration } from '../config/configuration.js';\nimport { EditorAction, registerEditorAction } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\nimport { LineTokens } from '../../common/core/lineTokens.js';\nimport { Position } from '../../common/core/position.js';\nimport { editorLineNumbers } from '../../common/view/editorColorRegistry.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { scrollbarShadow } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nvar DIFF_LINES_PADDING = 3;\n\nvar DiffEntry = /*#__PURE__*/function () {\n  function DiffEntry(originalLineStart, originalLineEnd, modifiedLineStart, modifiedLineEnd) {\n    _classCallCheck(this, DiffEntry);\n\n    this.originalLineStart = originalLineStart;\n    this.originalLineEnd = originalLineEnd;\n    this.modifiedLineStart = modifiedLineStart;\n    this.modifiedLineEnd = modifiedLineEnd;\n  }\n\n  _createClass(DiffEntry, [{\n    key: \"getType\",\n    value: function getType() {\n      if (this.originalLineStart === 0) {\n        return 1\n        /* Insert */\n        ;\n      }\n\n      if (this.modifiedLineStart === 0) {\n        return 2\n        /* Delete */\n        ;\n      }\n\n      return 0\n      /* Equal */\n      ;\n    }\n  }]);\n\n  return DiffEntry;\n}();\n\nvar Diff = function Diff(entries) {\n  _classCallCheck(this, Diff);\n\n  this.entries = entries;\n};\n\nvar diffReviewInsertIcon = registerIcon('diff-review-insert', Codicon.add, nls.localize('diffReviewInsertIcon', 'Icon for \\'Insert\\' in diff review.'));\nvar diffReviewRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, nls.localize('diffReviewRemoveIcon', 'Icon for \\'Remove\\' in diff review.'));\nvar diffReviewCloseIcon = registerIcon('diff-review-close', Codicon.close, nls.localize('diffReviewCloseIcon', 'Icon for \\'Close\\' in diff review.'));\nexport var DiffReview = /*#__PURE__*/function (_Disposable) {\n  _inherits(DiffReview, _Disposable);\n\n  var _super = _createSuper(DiffReview);\n\n  function DiffReview(diffEditor) {\n    var _this;\n\n    _classCallCheck(this, DiffReview);\n\n    _this = _super.call(this);\n    _this._width = 0;\n    _this._diffEditor = diffEditor;\n    _this._isVisible = false;\n    _this.shadow = createFastDomNode(document.createElement('div'));\n\n    _this.shadow.setClassName('diff-review-shadow');\n\n    _this.actionBarContainer = createFastDomNode(document.createElement('div'));\n\n    _this.actionBarContainer.setClassName('diff-review-actions');\n\n    _this._actionBar = _this._register(new ActionBar(_this.actionBarContainer.domNode));\n\n    _this._actionBar.push(new Action('diffreview.close', nls.localize('label.close', \"Close\"), 'close-diff-review ' + ThemeIcon.asClassName(diffReviewCloseIcon), true, function () {\n      _this.hide();\n\n      return Promise.resolve(null);\n    }), {\n      label: false,\n      icon: true\n    });\n\n    _this.domNode = createFastDomNode(document.createElement('div'));\n\n    _this.domNode.setClassName('diff-review monaco-editor-background');\n\n    _this._content = createFastDomNode(document.createElement('div'));\n\n    _this._content.setClassName('diff-review-content');\n\n    _this._content.setAttribute('role', 'code');\n\n    _this.scrollbar = _this._register(new DomScrollableElement(_this._content.domNode, {}));\n\n    _this.domNode.domNode.appendChild(_this.scrollbar.getDomNode());\n\n    _this._register(diffEditor.onDidUpdateDiff(function () {\n      if (!_this._isVisible) {\n        return;\n      }\n\n      _this._diffs = _this._compute();\n\n      _this._render();\n    }));\n\n    _this._register(diffEditor.getModifiedEditor().onDidChangeCursorPosition(function () {\n      if (!_this._isVisible) {\n        return;\n      }\n\n      _this._render();\n    }));\n\n    _this._register(dom.addStandardDisposableListener(_this.domNode.domNode, 'click', function (e) {\n      e.preventDefault();\n      var row = dom.findParentWithClass(e.target, 'diff-review-row');\n\n      if (row) {\n        _this._goToRow(row);\n      }\n    }));\n\n    _this._register(dom.addStandardDisposableListener(_this.domNode.domNode, 'keydown', function (e) {\n      if (e.equals(18\n      /* DownArrow */\n      ) || e.equals(2048\n      /* CtrlCmd */\n      | 18\n      /* DownArrow */\n      ) || e.equals(512\n      /* Alt */\n      | 18\n      /* DownArrow */\n      )) {\n        e.preventDefault();\n\n        _this._goToRow(_this._getNextRow());\n      }\n\n      if (e.equals(16\n      /* UpArrow */\n      ) || e.equals(2048\n      /* CtrlCmd */\n      | 16\n      /* UpArrow */\n      ) || e.equals(512\n      /* Alt */\n      | 16\n      /* UpArrow */\n      )) {\n        e.preventDefault();\n\n        _this._goToRow(_this._getPrevRow());\n      }\n\n      if (e.equals(9\n      /* Escape */\n      ) || e.equals(2048\n      /* CtrlCmd */\n      | 9\n      /* Escape */\n      ) || e.equals(512\n      /* Alt */\n      | 9\n      /* Escape */\n      ) || e.equals(1024\n      /* Shift */\n      | 9\n      /* Escape */\n      )) {\n        e.preventDefault();\n\n        _this.hide();\n      }\n\n      if (e.equals(10\n      /* Space */\n      ) || e.equals(3\n      /* Enter */\n      )) {\n        e.preventDefault();\n\n        _this.accept();\n      }\n    }));\n\n    _this._diffs = [];\n    _this._currentDiff = null;\n    return _this;\n  }\n\n  _createClass(DiffReview, [{\n    key: \"prev\",\n    value: function prev() {\n      var index = 0;\n\n      if (!this._isVisible) {\n        this._diffs = this._compute();\n      }\n\n      if (this._isVisible) {\n        var currentIndex = -1;\n\n        for (var i = 0, len = this._diffs.length; i < len; i++) {\n          if (this._diffs[i] === this._currentDiff) {\n            currentIndex = i;\n            break;\n          }\n        }\n\n        index = this._diffs.length + currentIndex - 1;\n      } else {\n        index = this._findDiffIndex(this._diffEditor.getPosition());\n      }\n\n      if (this._diffs.length === 0) {\n        // Nothing to do\n        return;\n      }\n\n      index = index % this._diffs.length;\n      var entries = this._diffs[index].entries;\n\n      this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n\n      this._diffEditor.setSelection({\n        startColumn: 1,\n        startLineNumber: entries[0].modifiedLineStart,\n        endColumn: 1073741824\n        /* MAX_SAFE_SMALL_INTEGER */\n        ,\n        endLineNumber: entries[entries.length - 1].modifiedLineEnd\n      });\n\n      this._isVisible = true;\n\n      this._diffEditor.doLayout();\n\n      this._render();\n\n      this._goToRow(this._getNextRow());\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var index = 0;\n\n      if (!this._isVisible) {\n        this._diffs = this._compute();\n      }\n\n      if (this._isVisible) {\n        var currentIndex = -1;\n\n        for (var i = 0, len = this._diffs.length; i < len; i++) {\n          if (this._diffs[i] === this._currentDiff) {\n            currentIndex = i;\n            break;\n          }\n        }\n\n        index = currentIndex + 1;\n      } else {\n        index = this._findDiffIndex(this._diffEditor.getPosition());\n      }\n\n      if (this._diffs.length === 0) {\n        // Nothing to do\n        return;\n      }\n\n      index = index % this._diffs.length;\n      var entries = this._diffs[index].entries;\n\n      this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n\n      this._diffEditor.setSelection({\n        startColumn: 1,\n        startLineNumber: entries[0].modifiedLineStart,\n        endColumn: 1073741824\n        /* MAX_SAFE_SMALL_INTEGER */\n        ,\n        endLineNumber: entries[entries.length - 1].modifiedLineEnd\n      });\n\n      this._isVisible = true;\n\n      this._diffEditor.doLayout();\n\n      this._render();\n\n      this._goToRow(this._getNextRow());\n    }\n  }, {\n    key: \"accept\",\n    value: function accept() {\n      var jumpToLineNumber = -1;\n\n      var current = this._getCurrentFocusedRow();\n\n      if (current) {\n        var lineNumber = parseInt(current.getAttribute('data-line'), 10);\n\n        if (!isNaN(lineNumber)) {\n          jumpToLineNumber = lineNumber;\n        }\n      }\n\n      this.hide();\n\n      if (jumpToLineNumber !== -1) {\n        this._diffEditor.setPosition(new Position(jumpToLineNumber, 1));\n\n        this._diffEditor.revealPosition(new Position(jumpToLineNumber, 1), 1\n        /* Immediate */\n        );\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this._isVisible = false;\n\n      this._diffEditor.updateOptions({\n        readOnly: false\n      });\n\n      this._diffEditor.focus();\n\n      this._diffEditor.doLayout();\n\n      this._render();\n    }\n  }, {\n    key: \"_getPrevRow\",\n    value: function _getPrevRow() {\n      var current = this._getCurrentFocusedRow();\n\n      if (!current) {\n        return this._getFirstRow();\n      }\n\n      if (current.previousElementSibling) {\n        return current.previousElementSibling;\n      }\n\n      return current;\n    }\n  }, {\n    key: \"_getNextRow\",\n    value: function _getNextRow() {\n      var current = this._getCurrentFocusedRow();\n\n      if (!current) {\n        return this._getFirstRow();\n      }\n\n      if (current.nextElementSibling) {\n        return current.nextElementSibling;\n      }\n\n      return current;\n    }\n  }, {\n    key: \"_getFirstRow\",\n    value: function _getFirstRow() {\n      return this.domNode.domNode.querySelector('.diff-review-row');\n    }\n  }, {\n    key: \"_getCurrentFocusedRow\",\n    value: function _getCurrentFocusedRow() {\n      var result = document.activeElement;\n\n      if (result && /diff-review-row/.test(result.className)) {\n        return result;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_goToRow\",\n    value: function _goToRow(row) {\n      var prev = this._getCurrentFocusedRow();\n\n      row.tabIndex = 0;\n      row.focus();\n\n      if (prev && prev !== row) {\n        prev.tabIndex = -1;\n      }\n\n      this.scrollbar.scanDomNode();\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._isVisible;\n    }\n  }, {\n    key: \"layout\",\n    value: function layout(top, width, height) {\n      this._width = width;\n      this.shadow.setTop(top - 6);\n      this.shadow.setWidth(width);\n      this.shadow.setHeight(this._isVisible ? 6 : 0);\n      this.domNode.setTop(top);\n      this.domNode.setWidth(width);\n      this.domNode.setHeight(height);\n\n      this._content.setHeight(height);\n\n      this._content.setWidth(width);\n\n      if (this._isVisible) {\n        this.actionBarContainer.setAttribute('aria-hidden', 'false');\n        this.actionBarContainer.setDisplay('block');\n      } else {\n        this.actionBarContainer.setAttribute('aria-hidden', 'true');\n        this.actionBarContainer.setDisplay('none');\n      }\n    }\n  }, {\n    key: \"_compute\",\n    value: function _compute() {\n      var lineChanges = this._diffEditor.getLineChanges();\n\n      if (!lineChanges || lineChanges.length === 0) {\n        return [];\n      }\n\n      var originalModel = this._diffEditor.getOriginalEditor().getModel();\n\n      var modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n\n      if (!originalModel || !modifiedModel) {\n        return [];\n      }\n\n      return DiffReview._mergeAdjacent(lineChanges, originalModel.getLineCount(), modifiedModel.getLineCount());\n    }\n  }, {\n    key: \"_findDiffIndex\",\n    value: function _findDiffIndex(pos) {\n      var lineNumber = pos.lineNumber;\n\n      for (var i = 0, len = this._diffs.length; i < len; i++) {\n        var diff = this._diffs[i].entries;\n        var lastModifiedLine = diff[diff.length - 1].modifiedLineEnd;\n\n        if (lineNumber <= lastModifiedLine) {\n          return i;\n        }\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      var originalOptions = this._diffEditor.getOriginalEditor().getOptions();\n\n      var modifiedOptions = this._diffEditor.getModifiedEditor().getOptions();\n\n      var originalModel = this._diffEditor.getOriginalEditor().getModel();\n\n      var modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n\n      var originalModelOpts = originalModel.getOptions();\n      var modifiedModelOpts = modifiedModel.getOptions();\n\n      if (!this._isVisible || !originalModel || !modifiedModel) {\n        dom.clearNode(this._content.domNode);\n        this._currentDiff = null;\n        this.scrollbar.scanDomNode();\n        return;\n      }\n\n      this._diffEditor.updateOptions({\n        readOnly: true\n      });\n\n      var diffIndex = this._findDiffIndex(this._diffEditor.getPosition());\n\n      if (this._diffs[diffIndex] === this._currentDiff) {\n        return;\n      }\n\n      this._currentDiff = this._diffs[diffIndex];\n      var diffs = this._diffs[diffIndex].entries;\n      var container = document.createElement('div');\n      container.className = 'diff-review-table';\n      container.setAttribute('role', 'list');\n      container.setAttribute('aria-label', 'Difference review. Use \"Stage | Unstage | Revert Selected Ranges\" commands');\n      Configuration.applyFontInfoSlow(container, modifiedOptions.get(38\n      /* fontInfo */\n      ));\n      var minOriginalLine = 0;\n      var maxOriginalLine = 0;\n      var minModifiedLine = 0;\n      var maxModifiedLine = 0;\n\n      for (var i = 0, len = diffs.length; i < len; i++) {\n        var diffEntry = diffs[i];\n        var originalLineStart = diffEntry.originalLineStart;\n        var originalLineEnd = diffEntry.originalLineEnd;\n        var modifiedLineStart = diffEntry.modifiedLineStart;\n        var modifiedLineEnd = diffEntry.modifiedLineEnd;\n\n        if (originalLineStart !== 0 && (minOriginalLine === 0 || originalLineStart < minOriginalLine)) {\n          minOriginalLine = originalLineStart;\n        }\n\n        if (originalLineEnd !== 0 && (maxOriginalLine === 0 || originalLineEnd > maxOriginalLine)) {\n          maxOriginalLine = originalLineEnd;\n        }\n\n        if (modifiedLineStart !== 0 && (minModifiedLine === 0 || modifiedLineStart < minModifiedLine)) {\n          minModifiedLine = modifiedLineStart;\n        }\n\n        if (modifiedLineEnd !== 0 && (maxModifiedLine === 0 || modifiedLineEnd > maxModifiedLine)) {\n          maxModifiedLine = modifiedLineEnd;\n        }\n      }\n\n      var header = document.createElement('div');\n      header.className = 'diff-review-row';\n      var cell = document.createElement('div');\n      cell.className = 'diff-review-cell diff-review-summary';\n      var originalChangedLinesCnt = maxOriginalLine - minOriginalLine + 1;\n      var modifiedChangedLinesCnt = maxModifiedLine - minModifiedLine + 1;\n      cell.appendChild(document.createTextNode(\"\".concat(diffIndex + 1, \"/\").concat(this._diffs.length, \": @@ -\").concat(minOriginalLine, \",\").concat(originalChangedLinesCnt, \" +\").concat(minModifiedLine, \",\").concat(modifiedChangedLinesCnt, \" @@\")));\n      header.setAttribute('data-line', String(minModifiedLine));\n\n      var getAriaLines = function getAriaLines(lines) {\n        if (lines === 0) {\n          return nls.localize('no_lines_changed', \"no lines changed\");\n        } else if (lines === 1) {\n          return nls.localize('one_line_changed', \"1 line changed\");\n        } else {\n          return nls.localize('more_lines_changed', \"{0} lines changed\", lines);\n        }\n      };\n\n      var originalChangedLinesCntAria = getAriaLines(originalChangedLinesCnt);\n      var modifiedChangedLinesCntAria = getAriaLines(modifiedChangedLinesCnt);\n      header.setAttribute('aria-label', nls.localize({\n        key: 'header',\n        comment: ['This is the ARIA label for a git diff header.', 'A git diff header looks like this: @@ -154,12 +159,39 @@.', 'That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.', 'Variables 0 and 1 refer to the diff index out of total number of diffs.', 'Variables 2 and 4 will be numbers (a line number).', 'Variables 3 and 5 will be \"no lines changed\", \"1 line changed\" or \"X lines changed\", localized separately.']\n      }, \"Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}\", diffIndex + 1, this._diffs.length, minOriginalLine, originalChangedLinesCntAria, minModifiedLine, modifiedChangedLinesCntAria));\n      header.appendChild(cell); // @@ -504,7 +517,7 @@\n\n      header.setAttribute('role', 'listitem');\n      container.appendChild(header);\n      var lineHeight = modifiedOptions.get(53\n      /* lineHeight */\n      );\n      var modLine = minModifiedLine;\n\n      for (var _i = 0, _len = diffs.length; _i < _len; _i++) {\n        var _diffEntry = diffs[_i];\n\n        DiffReview._renderSection(container, _diffEntry, modLine, lineHeight, this._width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts);\n\n        if (_diffEntry.modifiedLineStart !== 0) {\n          modLine = _diffEntry.modifiedLineEnd;\n        }\n      }\n\n      dom.clearNode(this._content.domNode);\n\n      this._content.domNode.appendChild(container);\n\n      this.scrollbar.scanDomNode();\n    }\n  }], [{\n    key: \"_mergeAdjacent\",\n    value: function _mergeAdjacent(lineChanges, originalLineCount, modifiedLineCount) {\n      if (!lineChanges || lineChanges.length === 0) {\n        return [];\n      }\n\n      var diffs = [],\n          diffsLength = 0;\n\n      for (var i = 0, len = lineChanges.length; i < len; i++) {\n        var lineChange = lineChanges[i];\n        var originalStart = lineChange.originalStartLineNumber;\n        var originalEnd = lineChange.originalEndLineNumber;\n        var modifiedStart = lineChange.modifiedStartLineNumber;\n        var modifiedEnd = lineChange.modifiedEndLineNumber;\n        var _r = [],\n            _rLength = 0; // Emit before anchors\n\n        {\n          var originalEqualAbove = originalEnd === 0 ? originalStart : originalStart - 1;\n          var modifiedEqualAbove = modifiedEnd === 0 ? modifiedStart : modifiedStart - 1; // Make sure we don't step into the previous diff\n\n          var minOriginal = 1;\n          var minModified = 1;\n\n          if (i > 0) {\n            var prevLineChange = lineChanges[i - 1];\n\n            if (prevLineChange.originalEndLineNumber === 0) {\n              minOriginal = prevLineChange.originalStartLineNumber + 1;\n            } else {\n              minOriginal = prevLineChange.originalEndLineNumber + 1;\n            }\n\n            if (prevLineChange.modifiedEndLineNumber === 0) {\n              minModified = prevLineChange.modifiedStartLineNumber + 1;\n            } else {\n              minModified = prevLineChange.modifiedEndLineNumber + 1;\n            }\n          }\n\n          var fromOriginal = originalEqualAbove - DIFF_LINES_PADDING + 1;\n          var fromModified = modifiedEqualAbove - DIFF_LINES_PADDING + 1;\n\n          if (fromOriginal < minOriginal) {\n            var delta = minOriginal - fromOriginal;\n            fromOriginal = fromOriginal + delta;\n            fromModified = fromModified + delta;\n          }\n\n          if (fromModified < minModified) {\n            var _delta = minModified - fromModified;\n\n            fromOriginal = fromOriginal + _delta;\n            fromModified = fromModified + _delta;\n          }\n\n          _r[_rLength++] = new DiffEntry(fromOriginal, originalEqualAbove, fromModified, modifiedEqualAbove);\n        } // Emit deleted lines\n\n        {\n          if (originalEnd !== 0) {\n            _r[_rLength++] = new DiffEntry(originalStart, originalEnd, 0, 0);\n          }\n        } // Emit inserted lines\n\n        {\n          if (modifiedEnd !== 0) {\n            _r[_rLength++] = new DiffEntry(0, 0, modifiedStart, modifiedEnd);\n          }\n        } // Emit after anchors\n\n        {\n          var originalEqualBelow = originalEnd === 0 ? originalStart + 1 : originalEnd + 1;\n          var modifiedEqualBelow = modifiedEnd === 0 ? modifiedStart + 1 : modifiedEnd + 1; // Make sure we don't step into the next diff\n\n          var maxOriginal = originalLineCount;\n          var maxModified = modifiedLineCount;\n\n          if (i + 1 < len) {\n            var nextLineChange = lineChanges[i + 1];\n\n            if (nextLineChange.originalEndLineNumber === 0) {\n              maxOriginal = nextLineChange.originalStartLineNumber;\n            } else {\n              maxOriginal = nextLineChange.originalStartLineNumber - 1;\n            }\n\n            if (nextLineChange.modifiedEndLineNumber === 0) {\n              maxModified = nextLineChange.modifiedStartLineNumber;\n            } else {\n              maxModified = nextLineChange.modifiedStartLineNumber - 1;\n            }\n          }\n\n          var toOriginal = originalEqualBelow + DIFF_LINES_PADDING - 1;\n          var toModified = modifiedEqualBelow + DIFF_LINES_PADDING - 1;\n\n          if (toOriginal > maxOriginal) {\n            var _delta2 = maxOriginal - toOriginal;\n\n            toOriginal = toOriginal + _delta2;\n            toModified = toModified + _delta2;\n          }\n\n          if (toModified > maxModified) {\n            var _delta3 = maxModified - toModified;\n\n            toOriginal = toOriginal + _delta3;\n            toModified = toModified + _delta3;\n          }\n\n          _r[_rLength++] = new DiffEntry(originalEqualBelow, toOriginal, modifiedEqualBelow, toModified);\n        }\n        diffs[diffsLength++] = new Diff(_r);\n      } // Merge adjacent diffs\n\n\n      var curr = diffs[0].entries;\n      var r = [],\n          rLength = 0;\n\n      for (var _i2 = 1, _len2 = diffs.length; _i2 < _len2; _i2++) {\n        var thisDiff = diffs[_i2].entries;\n        var currLast = curr[curr.length - 1];\n        var thisFirst = thisDiff[0];\n\n        if (currLast.getType() === 0\n        /* Equal */\n        && thisFirst.getType() === 0\n        /* Equal */\n        && thisFirst.originalLineStart <= currLast.originalLineEnd) {\n          // We are dealing with equal lines that overlap\n          curr[curr.length - 1] = new DiffEntry(currLast.originalLineStart, thisFirst.originalLineEnd, currLast.modifiedLineStart, thisFirst.modifiedLineEnd);\n          curr = curr.concat(thisDiff.slice(1));\n          continue;\n        }\n\n        r[rLength++] = new Diff(curr);\n        curr = thisDiff;\n      }\n\n      r[rLength++] = new Diff(curr);\n      return r;\n    }\n  }, {\n    key: \"_renderSection\",\n    value: function _renderSection(dest, diffEntry, modLine, lineHeight, width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts) {\n      var type = diffEntry.getType();\n      var rowClassName = 'diff-review-row';\n      var lineNumbersExtraClassName = '';\n      var spacerClassName = 'diff-review-spacer';\n      var spacerIcon = null;\n\n      switch (type) {\n        case 1\n        /* Insert */\n        :\n          rowClassName = 'diff-review-row line-insert';\n          lineNumbersExtraClassName = ' char-insert';\n          spacerIcon = diffReviewInsertIcon;\n          break;\n\n        case 2\n        /* Delete */\n        :\n          rowClassName = 'diff-review-row line-delete';\n          lineNumbersExtraClassName = ' char-delete';\n          spacerIcon = diffReviewRemoveIcon;\n          break;\n      }\n\n      var originalLineStart = diffEntry.originalLineStart;\n      var originalLineEnd = diffEntry.originalLineEnd;\n      var modifiedLineStart = diffEntry.modifiedLineStart;\n      var modifiedLineEnd = diffEntry.modifiedLineEnd;\n      var cnt = Math.max(modifiedLineEnd - modifiedLineStart, originalLineEnd - originalLineStart);\n      var originalLayoutInfo = originalOptions.get(124\n      /* layoutInfo */\n      );\n      var originalLineNumbersWidth = originalLayoutInfo.glyphMarginWidth + originalLayoutInfo.lineNumbersWidth;\n      var modifiedLayoutInfo = modifiedOptions.get(124\n      /* layoutInfo */\n      );\n      var modifiedLineNumbersWidth = 10 + modifiedLayoutInfo.glyphMarginWidth + modifiedLayoutInfo.lineNumbersWidth;\n\n      for (var i = 0; i <= cnt; i++) {\n        var originalLine = originalLineStart === 0 ? 0 : originalLineStart + i;\n        var modifiedLine = modifiedLineStart === 0 ? 0 : modifiedLineStart + i;\n        var row = document.createElement('div');\n        row.style.minWidth = width + 'px';\n        row.className = rowClassName;\n        row.setAttribute('role', 'listitem');\n\n        if (modifiedLine !== 0) {\n          modLine = modifiedLine;\n        }\n\n        row.setAttribute('data-line', String(modLine));\n        var cell = document.createElement('div');\n        cell.className = 'diff-review-cell';\n        cell.style.height = \"\".concat(lineHeight, \"px\");\n        row.appendChild(cell);\n        var originalLineNumber = document.createElement('span');\n        originalLineNumber.style.width = originalLineNumbersWidth + 'px';\n        originalLineNumber.style.minWidth = originalLineNumbersWidth + 'px';\n        originalLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n\n        if (originalLine !== 0) {\n          originalLineNumber.appendChild(document.createTextNode(String(originalLine)));\n        } else {\n          originalLineNumber.innerText = \"\\xA0\";\n        }\n\n        cell.appendChild(originalLineNumber);\n        var modifiedLineNumber = document.createElement('span');\n        modifiedLineNumber.style.width = modifiedLineNumbersWidth + 'px';\n        modifiedLineNumber.style.minWidth = modifiedLineNumbersWidth + 'px';\n        modifiedLineNumber.style.paddingRight = '10px';\n        modifiedLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n\n        if (modifiedLine !== 0) {\n          modifiedLineNumber.appendChild(document.createTextNode(String(modifiedLine)));\n        } else {\n          modifiedLineNumber.innerText = \"\\xA0\";\n        }\n\n        cell.appendChild(modifiedLineNumber);\n        var spacer = document.createElement('span');\n        spacer.className = spacerClassName;\n\n        if (spacerIcon) {\n          var spacerCodicon = document.createElement('span');\n          spacerCodicon.className = ThemeIcon.asClassName(spacerIcon);\n          spacerCodicon.innerText = \"\\xA0\\xA0\";\n          spacer.appendChild(spacerCodicon);\n        } else {\n          spacer.innerText = \"\\xA0\\xA0\";\n        }\n\n        cell.appendChild(spacer);\n        var lineContent = void 0;\n\n        if (modifiedLine !== 0) {\n          var html = this._renderLine(modifiedModel, modifiedOptions, modifiedModelOpts.tabSize, modifiedLine);\n\n          if (DiffReview._ttPolicy) {\n            html = DiffReview._ttPolicy.createHTML(html);\n          }\n\n          cell.insertAdjacentHTML('beforeend', html);\n          lineContent = modifiedModel.getLineContent(modifiedLine);\n        } else {\n          var _html = this._renderLine(originalModel, originalOptions, originalModelOpts.tabSize, originalLine);\n\n          if (DiffReview._ttPolicy) {\n            _html = DiffReview._ttPolicy.createHTML(_html);\n          }\n\n          cell.insertAdjacentHTML('beforeend', _html);\n          lineContent = originalModel.getLineContent(originalLine);\n        }\n\n        if (lineContent.length === 0) {\n          lineContent = nls.localize('blankLine', \"blank\");\n        }\n\n        var ariaLabel = '';\n\n        switch (type) {\n          case 0\n          /* Equal */\n          :\n            if (originalLine === modifiedLine) {\n              ariaLabel = nls.localize({\n                key: 'unchangedLine',\n                comment: ['The placeholders are contents of the line and should not be translated.']\n              }, \"{0} unchanged line {1}\", lineContent, originalLine);\n            } else {\n              ariaLabel = nls.localize('equalLine', \"{0} original line {1} modified line {2}\", lineContent, originalLine, modifiedLine);\n            }\n\n            break;\n\n          case 1\n          /* Insert */\n          :\n            ariaLabel = nls.localize('insertLine', \"+ {0} modified line {1}\", lineContent, modifiedLine);\n            break;\n\n          case 2\n          /* Delete */\n          :\n            ariaLabel = nls.localize('deleteLine', \"- {0} original line {1}\", lineContent, originalLine);\n            break;\n        }\n\n        row.setAttribute('aria-label', ariaLabel);\n        dest.appendChild(row);\n      }\n    }\n  }, {\n    key: \"_renderLine\",\n    value: function _renderLine(model, options, tabSize, lineNumber) {\n      var lineContent = model.getLineContent(lineNumber);\n      var fontInfo = options.get(38\n      /* fontInfo */\n      );\n      var defaultMetadata = (0\n      /* None */\n      << 11\n      /* FONT_STYLE_OFFSET */\n      | 1\n      /* DefaultForeground */\n      << 14\n      /* FOREGROUND_OFFSET */\n      | 2\n      /* DefaultBackground */\n      << 23\n      /* BACKGROUND_OFFSET */\n      ) >>> 0;\n      var tokens = new Uint32Array(2);\n      tokens[0] = lineContent.length;\n      tokens[1] = defaultMetadata;\n      var lineTokens = new LineTokens(tokens, lineContent);\n      var isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, model.mightContainNonBasicASCII());\n      var containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, model.mightContainRTL());\n      var r = renderViewLine(new RenderLineInput(fontInfo.isMonospace && !options.get(26\n      /* disableMonospaceOptimizations */\n      ), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, options.get(100\n      /* stopRenderingLineAfter */\n      ), options.get(83\n      /* renderWhitespace */\n      ), options.get(77\n      /* renderControlCharacters */\n      ), options.get(39\n      /* fontLigatures */\n      ) !== EditorFontLigatures.OFF, null));\n      return r.html;\n    }\n  }]);\n\n  return DiffReview;\n}(Disposable);\nDiffReview._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffReview', {\n  createHTML: function createHTML(value) {\n    return value;\n  }\n}); // theming\n\nregisterThemingParticipant(function (theme, collector) {\n  var lineNumbers = theme.getColor(editorLineNumbers);\n\n  if (lineNumbers) {\n    collector.addRule(\".monaco-diff-editor .diff-review-line-number { color: \".concat(lineNumbers, \"; }\"));\n  }\n\n  var shadow = theme.getColor(scrollbarShadow);\n\n  if (shadow) {\n    collector.addRule(\".monaco-diff-editor .diff-review-shadow { box-shadow: \".concat(shadow, \" 0 -6px 6px -6px inset; }\"));\n  }\n});\n\nvar DiffReviewNext = /*#__PURE__*/function (_EditorAction) {\n  _inherits(DiffReviewNext, _EditorAction);\n\n  var _super2 = _createSuper(DiffReviewNext);\n\n  function DiffReviewNext() {\n    _classCallCheck(this, DiffReviewNext);\n\n    return _super2.call(this, {\n      id: 'editor.action.diffReview.next',\n      label: nls.localize('editor.action.diffReview.next', \"Go to Next Difference\"),\n      alias: 'Go to Next Difference',\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      kbOpts: {\n        kbExpr: null,\n        primary: 65\n        /* F7 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  _createClass(DiffReviewNext, [{\n    key: \"run\",\n    value: function run(accessor, editor) {\n      var diffEditor = findFocusedDiffEditor(accessor);\n\n      if (diffEditor) {\n        diffEditor.diffReviewNext();\n      }\n    }\n  }]);\n\n  return DiffReviewNext;\n}(EditorAction);\n\nvar DiffReviewPrev = /*#__PURE__*/function (_EditorAction2) {\n  _inherits(DiffReviewPrev, _EditorAction2);\n\n  var _super3 = _createSuper(DiffReviewPrev);\n\n  function DiffReviewPrev() {\n    _classCallCheck(this, DiffReviewPrev);\n\n    return _super3.call(this, {\n      id: 'editor.action.diffReview.prev',\n      label: nls.localize('editor.action.diffReview.prev', \"Go to Previous Difference\"),\n      alias: 'Go to Previous Difference',\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      kbOpts: {\n        kbExpr: null,\n        primary: 1024\n        /* Shift */\n        | 65\n        /* F7 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  _createClass(DiffReviewPrev, [{\n    key: \"run\",\n    value: function run(accessor, editor) {\n      var diffEditor = findFocusedDiffEditor(accessor);\n\n      if (diffEditor) {\n        diffEditor.diffReviewPrev();\n      }\n    }\n  }]);\n\n  return DiffReviewPrev;\n}(EditorAction);\n\nfunction findFocusedDiffEditor(accessor) {\n  var codeEditorService = accessor.get(ICodeEditorService);\n  var diffEditors = codeEditorService.listDiffEditors();\n  var activeCodeEditor = codeEditorService.getActiveCodeEditor();\n\n  if (!activeCodeEditor) {\n    return null;\n  }\n\n  for (var i = 0, len = diffEditors.length; i < len; i++) {\n    var diffEditor = diffEditors[i];\n\n    if (diffEditor.getModifiedEditor().getId() === activeCodeEditor.getId() || diffEditor.getOriginalEditor().getId() === activeCodeEditor.getId()) {\n      return diffEditor;\n    }\n  }\n\n  return null;\n}\n\nregisterEditorAction(DiffReviewNext);\nregisterEditorAction(DiffReviewPrev);","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffReview.js"],"names":["_a","nls","dom","createFastDomNode","ActionBar","DomScrollableElement","Action","Disposable","Configuration","EditorAction","registerEditorAction","ICodeEditorService","EditorFontLigatures","LineTokens","Position","editorLineNumbers","RenderLineInput","renderViewLine2","renderViewLine","ViewLineRenderingData","ContextKeyExpr","scrollbarShadow","registerThemingParticipant","ThemeIcon","Codicon","registerIcon","DIFF_LINES_PADDING","DiffEntry","originalLineStart","originalLineEnd","modifiedLineStart","modifiedLineEnd","Diff","entries","diffReviewInsertIcon","add","localize","diffReviewRemoveIcon","remove","diffReviewCloseIcon","close","DiffReview","diffEditor","_width","_diffEditor","_isVisible","shadow","document","createElement","setClassName","actionBarContainer","_actionBar","_register","domNode","push","asClassName","hide","Promise","resolve","label","icon","_content","setAttribute","scrollbar","appendChild","getDomNode","onDidUpdateDiff","_diffs","_compute","_render","getModifiedEditor","onDidChangeCursorPosition","addStandardDisposableListener","e","preventDefault","row","findParentWithClass","target","_goToRow","equals","_getNextRow","_getPrevRow","accept","_currentDiff","index","currentIndex","i","len","length","_findDiffIndex","getPosition","setPosition","setSelection","startColumn","startLineNumber","endColumn","endLineNumber","doLayout","jumpToLineNumber","current","_getCurrentFocusedRow","lineNumber","parseInt","getAttribute","isNaN","revealPosition","updateOptions","readOnly","focus","_getFirstRow","previousElementSibling","nextElementSibling","querySelector","result","activeElement","test","className","prev","tabIndex","scanDomNode","top","width","height","setTop","setWidth","setHeight","setDisplay","lineChanges","getLineChanges","originalModel","getOriginalEditor","getModel","modifiedModel","_mergeAdjacent","getLineCount","pos","diff","lastModifiedLine","originalOptions","getOptions","modifiedOptions","originalModelOpts","modifiedModelOpts","clearNode","diffIndex","diffs","container","applyFontInfoSlow","get","minOriginalLine","maxOriginalLine","minModifiedLine","maxModifiedLine","diffEntry","header","cell","originalChangedLinesCnt","modifiedChangedLinesCnt","createTextNode","String","getAriaLines","lines","originalChangedLinesCntAria","modifiedChangedLinesCntAria","key","comment","lineHeight","modLine","_renderSection","originalLineCount","modifiedLineCount","diffsLength","lineChange","originalStart","originalStartLineNumber","originalEnd","originalEndLineNumber","modifiedStart","modifiedStartLineNumber","modifiedEnd","modifiedEndLineNumber","r","rLength","originalEqualAbove","modifiedEqualAbove","minOriginal","minModified","prevLineChange","fromOriginal","fromModified","delta","originalEqualBelow","modifiedEqualBelow","maxOriginal","maxModified","nextLineChange","toOriginal","toModified","curr","thisDiff","currLast","thisFirst","getType","concat","slice","dest","type","rowClassName","lineNumbersExtraClassName","spacerClassName","spacerIcon","cnt","Math","max","originalLayoutInfo","originalLineNumbersWidth","glyphMarginWidth","lineNumbersWidth","modifiedLayoutInfo","modifiedLineNumbersWidth","originalLine","modifiedLine","style","minWidth","originalLineNumber","innerText","modifiedLineNumber","paddingRight","spacer","spacerCodicon","lineContent","html","_renderLine","tabSize","_ttPolicy","createHTML","insertAdjacentHTML","getLineContent","ariaLabel","model","options","fontInfo","defaultMetadata","tokens","Uint32Array","lineTokens","isBasicASCII","mightContainNonBasicASCII","containsRTL","mightContainRTL","isMonospace","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","OFF","window","trustedTypes","createPolicy","value","theme","collector","lineNumbers","getColor","addRule","DiffReviewNext","id","alias","precondition","has","kbOpts","kbExpr","primary","weight","accessor","editor","findFocusedDiffEditor","diffReviewNext","DiffReviewPrev","diffReviewPrev","codeEditorService","diffEditors","listDiffEditors","activeCodeEditor","getActiveCodeEditor","getId"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _a;\r\nimport './media/diffReview.css';\r\nimport * as nls from '../../../nls.js';\r\nimport * as dom from '../../../base/browser/dom.js';\r\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\r\nimport { ActionBar } from '../../../base/browser/ui/actionbar/actionbar.js';\r\nimport { DomScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\r\nimport { Action } from '../../../base/common/actions.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { Configuration } from '../config/configuration.js';\r\nimport { EditorAction, registerEditorAction } from '../editorExtensions.js';\r\nimport { ICodeEditorService } from '../services/codeEditorService.js';\r\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\r\nimport { LineTokens } from '../../common/core/lineTokens.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { editorLineNumbers } from '../../common/view/editorColorRegistry.js';\r\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\r\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\r\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\r\nimport { scrollbarShadow } from '../../../platform/theme/common/colorRegistry.js';\r\nimport { registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\r\nimport { Codicon } from '../../../base/common/codicons.js';\r\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\r\nconst DIFF_LINES_PADDING = 3;\r\nclass DiffEntry {\r\n    constructor(originalLineStart, originalLineEnd, modifiedLineStart, modifiedLineEnd) {\r\n        this.originalLineStart = originalLineStart;\r\n        this.originalLineEnd = originalLineEnd;\r\n        this.modifiedLineStart = modifiedLineStart;\r\n        this.modifiedLineEnd = modifiedLineEnd;\r\n    }\r\n    getType() {\r\n        if (this.originalLineStart === 0) {\r\n            return 1 /* Insert */;\r\n        }\r\n        if (this.modifiedLineStart === 0) {\r\n            return 2 /* Delete */;\r\n        }\r\n        return 0 /* Equal */;\r\n    }\r\n}\r\nclass Diff {\r\n    constructor(entries) {\r\n        this.entries = entries;\r\n    }\r\n}\r\nconst diffReviewInsertIcon = registerIcon('diff-review-insert', Codicon.add, nls.localize('diffReviewInsertIcon', 'Icon for \\'Insert\\' in diff review.'));\r\nconst diffReviewRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, nls.localize('diffReviewRemoveIcon', 'Icon for \\'Remove\\' in diff review.'));\r\nconst diffReviewCloseIcon = registerIcon('diff-review-close', Codicon.close, nls.localize('diffReviewCloseIcon', 'Icon for \\'Close\\' in diff review.'));\r\nexport class DiffReview extends Disposable {\r\n    constructor(diffEditor) {\r\n        super();\r\n        this._width = 0;\r\n        this._diffEditor = diffEditor;\r\n        this._isVisible = false;\r\n        this.shadow = createFastDomNode(document.createElement('div'));\r\n        this.shadow.setClassName('diff-review-shadow');\r\n        this.actionBarContainer = createFastDomNode(document.createElement('div'));\r\n        this.actionBarContainer.setClassName('diff-review-actions');\r\n        this._actionBar = this._register(new ActionBar(this.actionBarContainer.domNode));\r\n        this._actionBar.push(new Action('diffreview.close', nls.localize('label.close', \"Close\"), 'close-diff-review ' + ThemeIcon.asClassName(diffReviewCloseIcon), true, () => {\r\n            this.hide();\r\n            return Promise.resolve(null);\r\n        }), { label: false, icon: true });\r\n        this.domNode = createFastDomNode(document.createElement('div'));\r\n        this.domNode.setClassName('diff-review monaco-editor-background');\r\n        this._content = createFastDomNode(document.createElement('div'));\r\n        this._content.setClassName('diff-review-content');\r\n        this._content.setAttribute('role', 'code');\r\n        this.scrollbar = this._register(new DomScrollableElement(this._content.domNode, {}));\r\n        this.domNode.domNode.appendChild(this.scrollbar.getDomNode());\r\n        this._register(diffEditor.onDidUpdateDiff(() => {\r\n            if (!this._isVisible) {\r\n                return;\r\n            }\r\n            this._diffs = this._compute();\r\n            this._render();\r\n        }));\r\n        this._register(diffEditor.getModifiedEditor().onDidChangeCursorPosition(() => {\r\n            if (!this._isVisible) {\r\n                return;\r\n            }\r\n            this._render();\r\n        }));\r\n        this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'click', (e) => {\r\n            e.preventDefault();\r\n            let row = dom.findParentWithClass(e.target, 'diff-review-row');\r\n            if (row) {\r\n                this._goToRow(row);\r\n            }\r\n        }));\r\n        this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'keydown', (e) => {\r\n            if (e.equals(18 /* DownArrow */)\r\n                || e.equals(2048 /* CtrlCmd */ | 18 /* DownArrow */)\r\n                || e.equals(512 /* Alt */ | 18 /* DownArrow */)) {\r\n                e.preventDefault();\r\n                this._goToRow(this._getNextRow());\r\n            }\r\n            if (e.equals(16 /* UpArrow */)\r\n                || e.equals(2048 /* CtrlCmd */ | 16 /* UpArrow */)\r\n                || e.equals(512 /* Alt */ | 16 /* UpArrow */)) {\r\n                e.preventDefault();\r\n                this._goToRow(this._getPrevRow());\r\n            }\r\n            if (e.equals(9 /* Escape */)\r\n                || e.equals(2048 /* CtrlCmd */ | 9 /* Escape */)\r\n                || e.equals(512 /* Alt */ | 9 /* Escape */)\r\n                || e.equals(1024 /* Shift */ | 9 /* Escape */)) {\r\n                e.preventDefault();\r\n                this.hide();\r\n            }\r\n            if (e.equals(10 /* Space */)\r\n                || e.equals(3 /* Enter */)) {\r\n                e.preventDefault();\r\n                this.accept();\r\n            }\r\n        }));\r\n        this._diffs = [];\r\n        this._currentDiff = null;\r\n    }\r\n    prev() {\r\n        let index = 0;\r\n        if (!this._isVisible) {\r\n            this._diffs = this._compute();\r\n        }\r\n        if (this._isVisible) {\r\n            let currentIndex = -1;\r\n            for (let i = 0, len = this._diffs.length; i < len; i++) {\r\n                if (this._diffs[i] === this._currentDiff) {\r\n                    currentIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n            index = (this._diffs.length + currentIndex - 1);\r\n        }\r\n        else {\r\n            index = this._findDiffIndex(this._diffEditor.getPosition());\r\n        }\r\n        if (this._diffs.length === 0) {\r\n            // Nothing to do\r\n            return;\r\n        }\r\n        index = index % this._diffs.length;\r\n        const entries = this._diffs[index].entries;\r\n        this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\r\n        this._diffEditor.setSelection({ startColumn: 1, startLineNumber: entries[0].modifiedLineStart, endColumn: 1073741824 /* MAX_SAFE_SMALL_INTEGER */, endLineNumber: entries[entries.length - 1].modifiedLineEnd });\r\n        this._isVisible = true;\r\n        this._diffEditor.doLayout();\r\n        this._render();\r\n        this._goToRow(this._getNextRow());\r\n    }\r\n    next() {\r\n        let index = 0;\r\n        if (!this._isVisible) {\r\n            this._diffs = this._compute();\r\n        }\r\n        if (this._isVisible) {\r\n            let currentIndex = -1;\r\n            for (let i = 0, len = this._diffs.length; i < len; i++) {\r\n                if (this._diffs[i] === this._currentDiff) {\r\n                    currentIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n            index = (currentIndex + 1);\r\n        }\r\n        else {\r\n            index = this._findDiffIndex(this._diffEditor.getPosition());\r\n        }\r\n        if (this._diffs.length === 0) {\r\n            // Nothing to do\r\n            return;\r\n        }\r\n        index = index % this._diffs.length;\r\n        const entries = this._diffs[index].entries;\r\n        this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\r\n        this._diffEditor.setSelection({ startColumn: 1, startLineNumber: entries[0].modifiedLineStart, endColumn: 1073741824 /* MAX_SAFE_SMALL_INTEGER */, endLineNumber: entries[entries.length - 1].modifiedLineEnd });\r\n        this._isVisible = true;\r\n        this._diffEditor.doLayout();\r\n        this._render();\r\n        this._goToRow(this._getNextRow());\r\n    }\r\n    accept() {\r\n        let jumpToLineNumber = -1;\r\n        let current = this._getCurrentFocusedRow();\r\n        if (current) {\r\n            let lineNumber = parseInt(current.getAttribute('data-line'), 10);\r\n            if (!isNaN(lineNumber)) {\r\n                jumpToLineNumber = lineNumber;\r\n            }\r\n        }\r\n        this.hide();\r\n        if (jumpToLineNumber !== -1) {\r\n            this._diffEditor.setPosition(new Position(jumpToLineNumber, 1));\r\n            this._diffEditor.revealPosition(new Position(jumpToLineNumber, 1), 1 /* Immediate */);\r\n        }\r\n    }\r\n    hide() {\r\n        this._isVisible = false;\r\n        this._diffEditor.updateOptions({ readOnly: false });\r\n        this._diffEditor.focus();\r\n        this._diffEditor.doLayout();\r\n        this._render();\r\n    }\r\n    _getPrevRow() {\r\n        let current = this._getCurrentFocusedRow();\r\n        if (!current) {\r\n            return this._getFirstRow();\r\n        }\r\n        if (current.previousElementSibling) {\r\n            return current.previousElementSibling;\r\n        }\r\n        return current;\r\n    }\r\n    _getNextRow() {\r\n        let current = this._getCurrentFocusedRow();\r\n        if (!current) {\r\n            return this._getFirstRow();\r\n        }\r\n        if (current.nextElementSibling) {\r\n            return current.nextElementSibling;\r\n        }\r\n        return current;\r\n    }\r\n    _getFirstRow() {\r\n        return this.domNode.domNode.querySelector('.diff-review-row');\r\n    }\r\n    _getCurrentFocusedRow() {\r\n        let result = document.activeElement;\r\n        if (result && /diff-review-row/.test(result.className)) {\r\n            return result;\r\n        }\r\n        return null;\r\n    }\r\n    _goToRow(row) {\r\n        let prev = this._getCurrentFocusedRow();\r\n        row.tabIndex = 0;\r\n        row.focus();\r\n        if (prev && prev !== row) {\r\n            prev.tabIndex = -1;\r\n        }\r\n        this.scrollbar.scanDomNode();\r\n    }\r\n    isVisible() {\r\n        return this._isVisible;\r\n    }\r\n    layout(top, width, height) {\r\n        this._width = width;\r\n        this.shadow.setTop(top - 6);\r\n        this.shadow.setWidth(width);\r\n        this.shadow.setHeight(this._isVisible ? 6 : 0);\r\n        this.domNode.setTop(top);\r\n        this.domNode.setWidth(width);\r\n        this.domNode.setHeight(height);\r\n        this._content.setHeight(height);\r\n        this._content.setWidth(width);\r\n        if (this._isVisible) {\r\n            this.actionBarContainer.setAttribute('aria-hidden', 'false');\r\n            this.actionBarContainer.setDisplay('block');\r\n        }\r\n        else {\r\n            this.actionBarContainer.setAttribute('aria-hidden', 'true');\r\n            this.actionBarContainer.setDisplay('none');\r\n        }\r\n    }\r\n    _compute() {\r\n        const lineChanges = this._diffEditor.getLineChanges();\r\n        if (!lineChanges || lineChanges.length === 0) {\r\n            return [];\r\n        }\r\n        const originalModel = this._diffEditor.getOriginalEditor().getModel();\r\n        const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\r\n        if (!originalModel || !modifiedModel) {\r\n            return [];\r\n        }\r\n        return DiffReview._mergeAdjacent(lineChanges, originalModel.getLineCount(), modifiedModel.getLineCount());\r\n    }\r\n    static _mergeAdjacent(lineChanges, originalLineCount, modifiedLineCount) {\r\n        if (!lineChanges || lineChanges.length === 0) {\r\n            return [];\r\n        }\r\n        let diffs = [], diffsLength = 0;\r\n        for (let i = 0, len = lineChanges.length; i < len; i++) {\r\n            const lineChange = lineChanges[i];\r\n            const originalStart = lineChange.originalStartLineNumber;\r\n            const originalEnd = lineChange.originalEndLineNumber;\r\n            const modifiedStart = lineChange.modifiedStartLineNumber;\r\n            const modifiedEnd = lineChange.modifiedEndLineNumber;\r\n            let r = [], rLength = 0;\r\n            // Emit before anchors\r\n            {\r\n                const originalEqualAbove = (originalEnd === 0 ? originalStart : originalStart - 1);\r\n                const modifiedEqualAbove = (modifiedEnd === 0 ? modifiedStart : modifiedStart - 1);\r\n                // Make sure we don't step into the previous diff\r\n                let minOriginal = 1;\r\n                let minModified = 1;\r\n                if (i > 0) {\r\n                    const prevLineChange = lineChanges[i - 1];\r\n                    if (prevLineChange.originalEndLineNumber === 0) {\r\n                        minOriginal = prevLineChange.originalStartLineNumber + 1;\r\n                    }\r\n                    else {\r\n                        minOriginal = prevLineChange.originalEndLineNumber + 1;\r\n                    }\r\n                    if (prevLineChange.modifiedEndLineNumber === 0) {\r\n                        minModified = prevLineChange.modifiedStartLineNumber + 1;\r\n                    }\r\n                    else {\r\n                        minModified = prevLineChange.modifiedEndLineNumber + 1;\r\n                    }\r\n                }\r\n                let fromOriginal = originalEqualAbove - DIFF_LINES_PADDING + 1;\r\n                let fromModified = modifiedEqualAbove - DIFF_LINES_PADDING + 1;\r\n                if (fromOriginal < minOriginal) {\r\n                    const delta = minOriginal - fromOriginal;\r\n                    fromOriginal = fromOriginal + delta;\r\n                    fromModified = fromModified + delta;\r\n                }\r\n                if (fromModified < minModified) {\r\n                    const delta = minModified - fromModified;\r\n                    fromOriginal = fromOriginal + delta;\r\n                    fromModified = fromModified + delta;\r\n                }\r\n                r[rLength++] = new DiffEntry(fromOriginal, originalEqualAbove, fromModified, modifiedEqualAbove);\r\n            }\r\n            // Emit deleted lines\r\n            {\r\n                if (originalEnd !== 0) {\r\n                    r[rLength++] = new DiffEntry(originalStart, originalEnd, 0, 0);\r\n                }\r\n            }\r\n            // Emit inserted lines\r\n            {\r\n                if (modifiedEnd !== 0) {\r\n                    r[rLength++] = new DiffEntry(0, 0, modifiedStart, modifiedEnd);\r\n                }\r\n            }\r\n            // Emit after anchors\r\n            {\r\n                const originalEqualBelow = (originalEnd === 0 ? originalStart + 1 : originalEnd + 1);\r\n                const modifiedEqualBelow = (modifiedEnd === 0 ? modifiedStart + 1 : modifiedEnd + 1);\r\n                // Make sure we don't step into the next diff\r\n                let maxOriginal = originalLineCount;\r\n                let maxModified = modifiedLineCount;\r\n                if (i + 1 < len) {\r\n                    const nextLineChange = lineChanges[i + 1];\r\n                    if (nextLineChange.originalEndLineNumber === 0) {\r\n                        maxOriginal = nextLineChange.originalStartLineNumber;\r\n                    }\r\n                    else {\r\n                        maxOriginal = nextLineChange.originalStartLineNumber - 1;\r\n                    }\r\n                    if (nextLineChange.modifiedEndLineNumber === 0) {\r\n                        maxModified = nextLineChange.modifiedStartLineNumber;\r\n                    }\r\n                    else {\r\n                        maxModified = nextLineChange.modifiedStartLineNumber - 1;\r\n                    }\r\n                }\r\n                let toOriginal = originalEqualBelow + DIFF_LINES_PADDING - 1;\r\n                let toModified = modifiedEqualBelow + DIFF_LINES_PADDING - 1;\r\n                if (toOriginal > maxOriginal) {\r\n                    const delta = maxOriginal - toOriginal;\r\n                    toOriginal = toOriginal + delta;\r\n                    toModified = toModified + delta;\r\n                }\r\n                if (toModified > maxModified) {\r\n                    const delta = maxModified - toModified;\r\n                    toOriginal = toOriginal + delta;\r\n                    toModified = toModified + delta;\r\n                }\r\n                r[rLength++] = new DiffEntry(originalEqualBelow, toOriginal, modifiedEqualBelow, toModified);\r\n            }\r\n            diffs[diffsLength++] = new Diff(r);\r\n        }\r\n        // Merge adjacent diffs\r\n        let curr = diffs[0].entries;\r\n        let r = [], rLength = 0;\r\n        for (let i = 1, len = diffs.length; i < len; i++) {\r\n            const thisDiff = diffs[i].entries;\r\n            const currLast = curr[curr.length - 1];\r\n            const thisFirst = thisDiff[0];\r\n            if (currLast.getType() === 0 /* Equal */\r\n                && thisFirst.getType() === 0 /* Equal */\r\n                && thisFirst.originalLineStart <= currLast.originalLineEnd) {\r\n                // We are dealing with equal lines that overlap\r\n                curr[curr.length - 1] = new DiffEntry(currLast.originalLineStart, thisFirst.originalLineEnd, currLast.modifiedLineStart, thisFirst.modifiedLineEnd);\r\n                curr = curr.concat(thisDiff.slice(1));\r\n                continue;\r\n            }\r\n            r[rLength++] = new Diff(curr);\r\n            curr = thisDiff;\r\n        }\r\n        r[rLength++] = new Diff(curr);\r\n        return r;\r\n    }\r\n    _findDiffIndex(pos) {\r\n        const lineNumber = pos.lineNumber;\r\n        for (let i = 0, len = this._diffs.length; i < len; i++) {\r\n            const diff = this._diffs[i].entries;\r\n            const lastModifiedLine = diff[diff.length - 1].modifiedLineEnd;\r\n            if (lineNumber <= lastModifiedLine) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    _render() {\r\n        const originalOptions = this._diffEditor.getOriginalEditor().getOptions();\r\n        const modifiedOptions = this._diffEditor.getModifiedEditor().getOptions();\r\n        const originalModel = this._diffEditor.getOriginalEditor().getModel();\r\n        const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\r\n        const originalModelOpts = originalModel.getOptions();\r\n        const modifiedModelOpts = modifiedModel.getOptions();\r\n        if (!this._isVisible || !originalModel || !modifiedModel) {\r\n            dom.clearNode(this._content.domNode);\r\n            this._currentDiff = null;\r\n            this.scrollbar.scanDomNode();\r\n            return;\r\n        }\r\n        this._diffEditor.updateOptions({ readOnly: true });\r\n        const diffIndex = this._findDiffIndex(this._diffEditor.getPosition());\r\n        if (this._diffs[diffIndex] === this._currentDiff) {\r\n            return;\r\n        }\r\n        this._currentDiff = this._diffs[diffIndex];\r\n        const diffs = this._diffs[diffIndex].entries;\r\n        let container = document.createElement('div');\r\n        container.className = 'diff-review-table';\r\n        container.setAttribute('role', 'list');\r\n        container.setAttribute('aria-label', 'Difference review. Use \"Stage | Unstage | Revert Selected Ranges\" commands');\r\n        Configuration.applyFontInfoSlow(container, modifiedOptions.get(38 /* fontInfo */));\r\n        let minOriginalLine = 0;\r\n        let maxOriginalLine = 0;\r\n        let minModifiedLine = 0;\r\n        let maxModifiedLine = 0;\r\n        for (let i = 0, len = diffs.length; i < len; i++) {\r\n            const diffEntry = diffs[i];\r\n            const originalLineStart = diffEntry.originalLineStart;\r\n            const originalLineEnd = diffEntry.originalLineEnd;\r\n            const modifiedLineStart = diffEntry.modifiedLineStart;\r\n            const modifiedLineEnd = diffEntry.modifiedLineEnd;\r\n            if (originalLineStart !== 0 && ((minOriginalLine === 0 || originalLineStart < minOriginalLine))) {\r\n                minOriginalLine = originalLineStart;\r\n            }\r\n            if (originalLineEnd !== 0 && ((maxOriginalLine === 0 || originalLineEnd > maxOriginalLine))) {\r\n                maxOriginalLine = originalLineEnd;\r\n            }\r\n            if (modifiedLineStart !== 0 && ((minModifiedLine === 0 || modifiedLineStart < minModifiedLine))) {\r\n                minModifiedLine = modifiedLineStart;\r\n            }\r\n            if (modifiedLineEnd !== 0 && ((maxModifiedLine === 0 || modifiedLineEnd > maxModifiedLine))) {\r\n                maxModifiedLine = modifiedLineEnd;\r\n            }\r\n        }\r\n        let header = document.createElement('div');\r\n        header.className = 'diff-review-row';\r\n        let cell = document.createElement('div');\r\n        cell.className = 'diff-review-cell diff-review-summary';\r\n        const originalChangedLinesCnt = maxOriginalLine - minOriginalLine + 1;\r\n        const modifiedChangedLinesCnt = maxModifiedLine - minModifiedLine + 1;\r\n        cell.appendChild(document.createTextNode(`${diffIndex + 1}/${this._diffs.length}: @@ -${minOriginalLine},${originalChangedLinesCnt} +${minModifiedLine},${modifiedChangedLinesCnt} @@`));\r\n        header.setAttribute('data-line', String(minModifiedLine));\r\n        const getAriaLines = (lines) => {\r\n            if (lines === 0) {\r\n                return nls.localize('no_lines_changed', \"no lines changed\");\r\n            }\r\n            else if (lines === 1) {\r\n                return nls.localize('one_line_changed', \"1 line changed\");\r\n            }\r\n            else {\r\n                return nls.localize('more_lines_changed', \"{0} lines changed\", lines);\r\n            }\r\n        };\r\n        const originalChangedLinesCntAria = getAriaLines(originalChangedLinesCnt);\r\n        const modifiedChangedLinesCntAria = getAriaLines(modifiedChangedLinesCnt);\r\n        header.setAttribute('aria-label', nls.localize({\r\n            key: 'header',\r\n            comment: [\r\n                'This is the ARIA label for a git diff header.',\r\n                'A git diff header looks like this: @@ -154,12 +159,39 @@.',\r\n                'That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.',\r\n                'Variables 0 and 1 refer to the diff index out of total number of diffs.',\r\n                'Variables 2 and 4 will be numbers (a line number).',\r\n                'Variables 3 and 5 will be \"no lines changed\", \"1 line changed\" or \"X lines changed\", localized separately.'\r\n            ]\r\n        }, \"Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}\", (diffIndex + 1), this._diffs.length, minOriginalLine, originalChangedLinesCntAria, minModifiedLine, modifiedChangedLinesCntAria));\r\n        header.appendChild(cell);\r\n        // @@ -504,7 +517,7 @@\r\n        header.setAttribute('role', 'listitem');\r\n        container.appendChild(header);\r\n        const lineHeight = modifiedOptions.get(53 /* lineHeight */);\r\n        let modLine = minModifiedLine;\r\n        for (let i = 0, len = diffs.length; i < len; i++) {\r\n            const diffEntry = diffs[i];\r\n            DiffReview._renderSection(container, diffEntry, modLine, lineHeight, this._width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts);\r\n            if (diffEntry.modifiedLineStart !== 0) {\r\n                modLine = diffEntry.modifiedLineEnd;\r\n            }\r\n        }\r\n        dom.clearNode(this._content.domNode);\r\n        this._content.domNode.appendChild(container);\r\n        this.scrollbar.scanDomNode();\r\n    }\r\n    static _renderSection(dest, diffEntry, modLine, lineHeight, width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts) {\r\n        const type = diffEntry.getType();\r\n        let rowClassName = 'diff-review-row';\r\n        let lineNumbersExtraClassName = '';\r\n        const spacerClassName = 'diff-review-spacer';\r\n        let spacerIcon = null;\r\n        switch (type) {\r\n            case 1 /* Insert */:\r\n                rowClassName = 'diff-review-row line-insert';\r\n                lineNumbersExtraClassName = ' char-insert';\r\n                spacerIcon = diffReviewInsertIcon;\r\n                break;\r\n            case 2 /* Delete */:\r\n                rowClassName = 'diff-review-row line-delete';\r\n                lineNumbersExtraClassName = ' char-delete';\r\n                spacerIcon = diffReviewRemoveIcon;\r\n                break;\r\n        }\r\n        const originalLineStart = diffEntry.originalLineStart;\r\n        const originalLineEnd = diffEntry.originalLineEnd;\r\n        const modifiedLineStart = diffEntry.modifiedLineStart;\r\n        const modifiedLineEnd = diffEntry.modifiedLineEnd;\r\n        const cnt = Math.max(modifiedLineEnd - modifiedLineStart, originalLineEnd - originalLineStart);\r\n        const originalLayoutInfo = originalOptions.get(124 /* layoutInfo */);\r\n        const originalLineNumbersWidth = originalLayoutInfo.glyphMarginWidth + originalLayoutInfo.lineNumbersWidth;\r\n        const modifiedLayoutInfo = modifiedOptions.get(124 /* layoutInfo */);\r\n        const modifiedLineNumbersWidth = 10 + modifiedLayoutInfo.glyphMarginWidth + modifiedLayoutInfo.lineNumbersWidth;\r\n        for (let i = 0; i <= cnt; i++) {\r\n            const originalLine = (originalLineStart === 0 ? 0 : originalLineStart + i);\r\n            const modifiedLine = (modifiedLineStart === 0 ? 0 : modifiedLineStart + i);\r\n            const row = document.createElement('div');\r\n            row.style.minWidth = width + 'px';\r\n            row.className = rowClassName;\r\n            row.setAttribute('role', 'listitem');\r\n            if (modifiedLine !== 0) {\r\n                modLine = modifiedLine;\r\n            }\r\n            row.setAttribute('data-line', String(modLine));\r\n            let cell = document.createElement('div');\r\n            cell.className = 'diff-review-cell';\r\n            cell.style.height = `${lineHeight}px`;\r\n            row.appendChild(cell);\r\n            const originalLineNumber = document.createElement('span');\r\n            originalLineNumber.style.width = (originalLineNumbersWidth + 'px');\r\n            originalLineNumber.style.minWidth = (originalLineNumbersWidth + 'px');\r\n            originalLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\r\n            if (originalLine !== 0) {\r\n                originalLineNumber.appendChild(document.createTextNode(String(originalLine)));\r\n            }\r\n            else {\r\n                originalLineNumber.innerText = '\\u00a0';\r\n            }\r\n            cell.appendChild(originalLineNumber);\r\n            const modifiedLineNumber = document.createElement('span');\r\n            modifiedLineNumber.style.width = (modifiedLineNumbersWidth + 'px');\r\n            modifiedLineNumber.style.minWidth = (modifiedLineNumbersWidth + 'px');\r\n            modifiedLineNumber.style.paddingRight = '10px';\r\n            modifiedLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\r\n            if (modifiedLine !== 0) {\r\n                modifiedLineNumber.appendChild(document.createTextNode(String(modifiedLine)));\r\n            }\r\n            else {\r\n                modifiedLineNumber.innerText = '\\u00a0';\r\n            }\r\n            cell.appendChild(modifiedLineNumber);\r\n            const spacer = document.createElement('span');\r\n            spacer.className = spacerClassName;\r\n            if (spacerIcon) {\r\n                const spacerCodicon = document.createElement('span');\r\n                spacerCodicon.className = ThemeIcon.asClassName(spacerIcon);\r\n                spacerCodicon.innerText = '\\u00a0\\u00a0';\r\n                spacer.appendChild(spacerCodicon);\r\n            }\r\n            else {\r\n                spacer.innerText = '\\u00a0\\u00a0';\r\n            }\r\n            cell.appendChild(spacer);\r\n            let lineContent;\r\n            if (modifiedLine !== 0) {\r\n                let html = this._renderLine(modifiedModel, modifiedOptions, modifiedModelOpts.tabSize, modifiedLine);\r\n                if (DiffReview._ttPolicy) {\r\n                    html = DiffReview._ttPolicy.createHTML(html);\r\n                }\r\n                cell.insertAdjacentHTML('beforeend', html);\r\n                lineContent = modifiedModel.getLineContent(modifiedLine);\r\n            }\r\n            else {\r\n                let html = this._renderLine(originalModel, originalOptions, originalModelOpts.tabSize, originalLine);\r\n                if (DiffReview._ttPolicy) {\r\n                    html = DiffReview._ttPolicy.createHTML(html);\r\n                }\r\n                cell.insertAdjacentHTML('beforeend', html);\r\n                lineContent = originalModel.getLineContent(originalLine);\r\n            }\r\n            if (lineContent.length === 0) {\r\n                lineContent = nls.localize('blankLine', \"blank\");\r\n            }\r\n            let ariaLabel = '';\r\n            switch (type) {\r\n                case 0 /* Equal */:\r\n                    if (originalLine === modifiedLine) {\r\n                        ariaLabel = nls.localize({ key: 'unchangedLine', comment: ['The placeholders are contents of the line and should not be translated.'] }, \"{0} unchanged line {1}\", lineContent, originalLine);\r\n                    }\r\n                    else {\r\n                        ariaLabel = nls.localize('equalLine', \"{0} original line {1} modified line {2}\", lineContent, originalLine, modifiedLine);\r\n                    }\r\n                    break;\r\n                case 1 /* Insert */:\r\n                    ariaLabel = nls.localize('insertLine', \"+ {0} modified line {1}\", lineContent, modifiedLine);\r\n                    break;\r\n                case 2 /* Delete */:\r\n                    ariaLabel = nls.localize('deleteLine', \"- {0} original line {1}\", lineContent, originalLine);\r\n                    break;\r\n            }\r\n            row.setAttribute('aria-label', ariaLabel);\r\n            dest.appendChild(row);\r\n        }\r\n    }\r\n    static _renderLine(model, options, tabSize, lineNumber) {\r\n        const lineContent = model.getLineContent(lineNumber);\r\n        const fontInfo = options.get(38 /* fontInfo */);\r\n        const defaultMetadata = ((0 /* None */ << 11 /* FONT_STYLE_OFFSET */)\r\n            | (1 /* DefaultForeground */ << 14 /* FOREGROUND_OFFSET */)\r\n            | (2 /* DefaultBackground */ << 23 /* BACKGROUND_OFFSET */)) >>> 0;\r\n        const tokens = new Uint32Array(2);\r\n        tokens[0] = lineContent.length;\r\n        tokens[1] = defaultMetadata;\r\n        const lineTokens = new LineTokens(tokens, lineContent);\r\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, model.mightContainNonBasicASCII());\r\n        const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, model.mightContainRTL());\r\n        const r = renderViewLine(new RenderLineInput((fontInfo.isMonospace && !options.get(26 /* disableMonospaceOptimizations */)), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, options.get(100 /* stopRenderingLineAfter */), options.get(83 /* renderWhitespace */), options.get(77 /* renderControlCharacters */), options.get(39 /* fontLigatures */) !== EditorFontLigatures.OFF, null));\r\n        return r.html;\r\n    }\r\n}\r\nDiffReview._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffReview', { createHTML: value => value });\r\n// theming\r\nregisterThemingParticipant((theme, collector) => {\r\n    const lineNumbers = theme.getColor(editorLineNumbers);\r\n    if (lineNumbers) {\r\n        collector.addRule(`.monaco-diff-editor .diff-review-line-number { color: ${lineNumbers}; }`);\r\n    }\r\n    const shadow = theme.getColor(scrollbarShadow);\r\n    if (shadow) {\r\n        collector.addRule(`.monaco-diff-editor .diff-review-shadow { box-shadow: ${shadow} 0 -6px 6px -6px inset; }`);\r\n    }\r\n});\r\nclass DiffReviewNext extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.diffReview.next',\r\n            label: nls.localize('editor.action.diffReview.next', \"Go to Next Difference\"),\r\n            alias: 'Go to Next Difference',\r\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\r\n            kbOpts: {\r\n                kbExpr: null,\r\n                primary: 65 /* F7 */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        const diffEditor = findFocusedDiffEditor(accessor);\r\n        if (diffEditor) {\r\n            diffEditor.diffReviewNext();\r\n        }\r\n    }\r\n}\r\nclass DiffReviewPrev extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.diffReview.prev',\r\n            label: nls.localize('editor.action.diffReview.prev', \"Go to Previous Difference\"),\r\n            alias: 'Go to Previous Difference',\r\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\r\n            kbOpts: {\r\n                kbExpr: null,\r\n                primary: 1024 /* Shift */ | 65 /* F7 */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        const diffEditor = findFocusedDiffEditor(accessor);\r\n        if (diffEditor) {\r\n            diffEditor.diffReviewPrev();\r\n        }\r\n    }\r\n}\r\nfunction findFocusedDiffEditor(accessor) {\r\n    const codeEditorService = accessor.get(ICodeEditorService);\r\n    const diffEditors = codeEditorService.listDiffEditors();\r\n    const activeCodeEditor = codeEditorService.getActiveCodeEditor();\r\n    if (!activeCodeEditor) {\r\n        return null;\r\n    }\r\n    for (let i = 0, len = diffEditors.length; i < len; i++) {\r\n        const diffEditor = diffEditors[i];\r\n        if (diffEditor.getModifiedEditor().getId() === activeCodeEditor.getId() || diffEditor.getOriginalEditor().getId() === activeCodeEditor.getId()) {\r\n            return diffEditor;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nregisterEditorAction(DiffReviewNext);\r\nregisterEditorAction(DiffReviewPrev);\r\n"]},"metadata":{},"sourceType":"module"}