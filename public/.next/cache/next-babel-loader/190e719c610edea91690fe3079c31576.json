{"ast":null,"code":"import _defineProperty from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport var Iterable;\n\n(function (Iterable) {\n  var _marked = /*#__PURE__*/_regeneratorRuntime.mark(single),\n      _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(filter),\n      _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(map),\n      _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(concat),\n      _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(concatNested),\n      _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(slice);\n\n  function is(thing) {\n    return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\n  }\n\n  Iterable.is = is;\n\n  var _empty = Object.freeze([]);\n\n  function empty() {\n    return _empty;\n  }\n\n  Iterable.empty = empty;\n\n  function single(element) {\n    return _regeneratorRuntime.wrap(function single$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return element;\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _marked);\n  }\n\n  Iterable.single = single;\n\n  function from(iterable) {\n    return iterable || _empty;\n  }\n\n  Iterable.from = from;\n\n  function isEmpty(iterable) {\n    return !iterable || iterable[Symbol.iterator]().next().done === true;\n  }\n\n  Iterable.isEmpty = isEmpty;\n\n  function first(iterable) {\n    return iterable[Symbol.iterator]().next().value;\n  }\n\n  Iterable.first = first;\n\n  function some(iterable, predicate) {\n    var _iterator = _createForOfIteratorHelper(iterable),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var element = _step.value;\n\n        if (predicate(element)) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return false;\n  }\n\n  Iterable.some = some;\n\n  function filter(iterable, predicate) {\n    var _iterator2, _step2, element;\n\n    return _regeneratorRuntime.wrap(function filter$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _iterator2 = _createForOfIteratorHelper(iterable);\n            _context2.prev = 1;\n\n            _iterator2.s();\n\n          case 3:\n            if ((_step2 = _iterator2.n()).done) {\n              _context2.next = 10;\n              break;\n            }\n\n            element = _step2.value;\n\n            if (!predicate(element)) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 8;\n            return element;\n\n          case 8:\n            _context2.next = 3;\n            break;\n\n          case 10:\n            _context2.next = 15;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](1);\n\n            _iterator2.e(_context2.t0);\n\n          case 15:\n            _context2.prev = 15;\n\n            _iterator2.f();\n\n            return _context2.finish(15);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _marked2, null, [[1, 12, 15, 18]]);\n  }\n\n  Iterable.filter = filter;\n\n  function map(iterable, fn) {\n    var _iterator3, _step3, element;\n\n    return _regeneratorRuntime.wrap(function map$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _iterator3 = _createForOfIteratorHelper(iterable);\n            _context3.prev = 1;\n\n            _iterator3.s();\n\n          case 3:\n            if ((_step3 = _iterator3.n()).done) {\n              _context3.next = 9;\n              break;\n            }\n\n            element = _step3.value;\n            _context3.next = 7;\n            return fn(element);\n\n          case 7:\n            _context3.next = 3;\n            break;\n\n          case 9:\n            _context3.next = 14;\n            break;\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](1);\n\n            _iterator3.e(_context3.t0);\n\n          case 14:\n            _context3.prev = 14;\n\n            _iterator3.f();\n\n            return _context3.finish(14);\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _marked3, null, [[1, 11, 14, 17]]);\n  }\n\n  Iterable.map = map;\n\n  function concat() {\n    var _len,\n        iterables,\n        _key,\n        _i,\n        _iterables,\n        iterable,\n        _iterator4,\n        _step4,\n        element,\n        _args4 = arguments;\n\n    return _regeneratorRuntime.wrap(function concat$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            for (_len = _args4.length, iterables = new Array(_len), _key = 0; _key < _len; _key++) {\n              iterables[_key] = _args4[_key];\n            }\n\n            _i = 0, _iterables = iterables;\n\n          case 2:\n            if (!(_i < _iterables.length)) {\n              _context4.next = 24;\n              break;\n            }\n\n            iterable = _iterables[_i];\n            _iterator4 = _createForOfIteratorHelper(iterable);\n            _context4.prev = 5;\n\n            _iterator4.s();\n\n          case 7:\n            if ((_step4 = _iterator4.n()).done) {\n              _context4.next = 13;\n              break;\n            }\n\n            element = _step4.value;\n            _context4.next = 11;\n            return element;\n\n          case 11:\n            _context4.next = 7;\n            break;\n\n          case 13:\n            _context4.next = 18;\n            break;\n\n          case 15:\n            _context4.prev = 15;\n            _context4.t0 = _context4[\"catch\"](5);\n\n            _iterator4.e(_context4.t0);\n\n          case 18:\n            _context4.prev = 18;\n\n            _iterator4.f();\n\n            return _context4.finish(18);\n\n          case 21:\n            _i++;\n            _context4.next = 2;\n            break;\n\n          case 24:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _marked4, null, [[5, 15, 18, 21]]);\n  }\n\n  Iterable.concat = concat;\n\n  function concatNested(iterables) {\n    var _iterator5, _step5, iterable, _iterator6, _step6, element;\n\n    return _regeneratorRuntime.wrap(function concatNested$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _iterator5 = _createForOfIteratorHelper(iterables);\n            _context5.prev = 1;\n\n            _iterator5.s();\n\n          case 3:\n            if ((_step5 = _iterator5.n()).done) {\n              _context5.next = 24;\n              break;\n            }\n\n            iterable = _step5.value;\n            _iterator6 = _createForOfIteratorHelper(iterable);\n            _context5.prev = 6;\n\n            _iterator6.s();\n\n          case 8:\n            if ((_step6 = _iterator6.n()).done) {\n              _context5.next = 14;\n              break;\n            }\n\n            element = _step6.value;\n            _context5.next = 12;\n            return element;\n\n          case 12:\n            _context5.next = 8;\n            break;\n\n          case 14:\n            _context5.next = 19;\n            break;\n\n          case 16:\n            _context5.prev = 16;\n            _context5.t0 = _context5[\"catch\"](6);\n\n            _iterator6.e(_context5.t0);\n\n          case 19:\n            _context5.prev = 19;\n\n            _iterator6.f();\n\n            return _context5.finish(19);\n\n          case 22:\n            _context5.next = 3;\n            break;\n\n          case 24:\n            _context5.next = 29;\n            break;\n\n          case 26:\n            _context5.prev = 26;\n            _context5.t1 = _context5[\"catch\"](1);\n\n            _iterator5.e(_context5.t1);\n\n          case 29:\n            _context5.prev = 29;\n\n            _iterator5.f();\n\n            return _context5.finish(29);\n\n          case 32:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _marked5, null, [[1, 26, 29, 32], [6, 16, 19, 22]]);\n  }\n\n  Iterable.concatNested = concatNested;\n  /**\r\n   * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\r\n   */\n\n  function slice(iterable, from) {\n    var to,\n        _args6 = arguments;\n    return _regeneratorRuntime.wrap(function slice$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            to = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : iterable.length;\n\n            if (from < 0) {\n              from += iterable.length;\n            }\n\n            if (to < 0) {\n              to += iterable.length;\n            } else if (to > iterable.length) {\n              to = iterable.length;\n            }\n\n          case 3:\n            if (!(from < to)) {\n              _context6.next = 9;\n              break;\n            }\n\n            _context6.next = 6;\n            return iterable[from];\n\n          case 6:\n            from++;\n            _context6.next = 3;\n            break;\n\n          case 9:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _marked6);\n  }\n\n  Iterable.slice = slice;\n  /**\r\n   * Consumes `atMost` elements from iterable and returns the consumed elements,\r\n   * and an iterable for the rest of the elements.\r\n   */\n\n  function consume(iterable) {\n    var atMost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;\n    var consumed = [];\n\n    if (atMost === 0) {\n      return [consumed, iterable];\n    }\n\n    var iterator = iterable[Symbol.iterator]();\n\n    for (var i = 0; i < atMost; i++) {\n      var next = iterator.next();\n\n      if (next.done) {\n        return [consumed, Iterable.empty()];\n      }\n\n      consumed.push(next.value);\n    }\n\n    return [consumed, _defineProperty({}, Symbol.iterator, function () {\n      return iterator;\n    })];\n  }\n\n  Iterable.consume = consume;\n})(Iterable || (Iterable = {}));","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/base/common/iterator.js"],"names":["Iterable","single","filter","map","concat","concatNested","slice","is","thing","Symbol","iterator","_empty","Object","freeze","empty","element","from","iterable","isEmpty","next","done","first","value","some","predicate","fn","iterables","to","length","consume","atMost","Number","POSITIVE_INFINITY","consumed","i","push"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var Iterable;\r\n(function (Iterable) {\r\n    function is(thing) {\r\n        return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\r\n    }\r\n    Iterable.is = is;\r\n    const _empty = Object.freeze([]);\r\n    function empty() {\r\n        return _empty;\r\n    }\r\n    Iterable.empty = empty;\r\n    function* single(element) {\r\n        yield element;\r\n    }\r\n    Iterable.single = single;\r\n    function from(iterable) {\r\n        return iterable || _empty;\r\n    }\r\n    Iterable.from = from;\r\n    function isEmpty(iterable) {\r\n        return !iterable || iterable[Symbol.iterator]().next().done === true;\r\n    }\r\n    Iterable.isEmpty = isEmpty;\r\n    function first(iterable) {\r\n        return iterable[Symbol.iterator]().next().value;\r\n    }\r\n    Iterable.first = first;\r\n    function some(iterable, predicate) {\r\n        for (const element of iterable) {\r\n            if (predicate(element)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    Iterable.some = some;\r\n    function* filter(iterable, predicate) {\r\n        for (const element of iterable) {\r\n            if (predicate(element)) {\r\n                yield element;\r\n            }\r\n        }\r\n    }\r\n    Iterable.filter = filter;\r\n    function* map(iterable, fn) {\r\n        for (const element of iterable) {\r\n            yield fn(element);\r\n        }\r\n    }\r\n    Iterable.map = map;\r\n    function* concat(...iterables) {\r\n        for (const iterable of iterables) {\r\n            for (const element of iterable) {\r\n                yield element;\r\n            }\r\n        }\r\n    }\r\n    Iterable.concat = concat;\r\n    function* concatNested(iterables) {\r\n        for (const iterable of iterables) {\r\n            for (const element of iterable) {\r\n                yield element;\r\n            }\r\n        }\r\n    }\r\n    Iterable.concatNested = concatNested;\r\n    /**\r\n     * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\r\n     */\r\n    function* slice(iterable, from, to = iterable.length) {\r\n        if (from < 0) {\r\n            from += iterable.length;\r\n        }\r\n        if (to < 0) {\r\n            to += iterable.length;\r\n        }\r\n        else if (to > iterable.length) {\r\n            to = iterable.length;\r\n        }\r\n        for (; from < to; from++) {\r\n            yield iterable[from];\r\n        }\r\n    }\r\n    Iterable.slice = slice;\r\n    /**\r\n     * Consumes `atMost` elements from iterable and returns the consumed elements,\r\n     * and an iterable for the rest of the elements.\r\n     */\r\n    function consume(iterable, atMost = Number.POSITIVE_INFINITY) {\r\n        const consumed = [];\r\n        if (atMost === 0) {\r\n            return [consumed, iterable];\r\n        }\r\n        const iterator = iterable[Symbol.iterator]();\r\n        for (let i = 0; i < atMost; i++) {\r\n            const next = iterator.next();\r\n            if (next.done) {\r\n                return [consumed, Iterable.empty()];\r\n            }\r\n            consumed.push(next.value);\r\n        }\r\n        return [consumed, { [Symbol.iterator]() { return iterator; } }];\r\n    }\r\n    Iterable.consume = consume;\r\n})(Iterable || (Iterable = {}));\r\n"]},"metadata":{},"sourceType":"module"}