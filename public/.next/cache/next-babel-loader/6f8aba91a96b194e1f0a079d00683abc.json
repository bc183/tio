{"ast":null,"code":"import _classCallCheck from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bar007/Desktop/projects/tio/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport function createScopedLineTokens(context, offset) {\n  var tokenCount = context.getCount();\n  var tokenIndex = context.findTokenIndexAtOffset(offset);\n  var desiredLanguageId = context.getLanguageId(tokenIndex);\n  var lastTokenIndex = tokenIndex;\n\n  while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n    lastTokenIndex++;\n  }\n\n  var firstTokenIndex = tokenIndex;\n\n  while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n    firstTokenIndex--;\n  }\n\n  return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\n}\nexport var ScopedLineTokens = /*#__PURE__*/function () {\n  function ScopedLineTokens(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\n    _classCallCheck(this, ScopedLineTokens);\n\n    this._actual = actual;\n    this.languageId = languageId;\n    this._firstTokenIndex = firstTokenIndex;\n    this._lastTokenIndex = lastTokenIndex;\n    this.firstCharOffset = firstCharOffset;\n    this._lastCharOffset = lastCharOffset;\n  }\n\n  _createClass(ScopedLineTokens, [{\n    key: \"getLineContent\",\n    value: function getLineContent() {\n      var actualLineContent = this._actual.getLineContent();\n\n      return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n    }\n  }, {\n    key: \"getActualLineContentBefore\",\n    value: function getActualLineContentBefore(offset) {\n      var actualLineContent = this._actual.getLineContent();\n\n      return actualLineContent.substring(0, this.firstCharOffset + offset);\n    }\n  }, {\n    key: \"getTokenCount\",\n    value: function getTokenCount() {\n      return this._lastTokenIndex - this._firstTokenIndex;\n    }\n  }, {\n    key: \"findTokenIndexAtOffset\",\n    value: function findTokenIndexAtOffset(offset) {\n      return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n    }\n  }, {\n    key: \"getStandardTokenType\",\n    value: function getStandardTokenType(tokenIndex) {\n      return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n    }\n  }]);\n\n  return ScopedLineTokens;\n}();\nexport function ignoreBracketsInToken(standardTokenType) {\n  return (standardTokenType & 7\n  /* value */\n  ) !== 0;\n}","map":{"version":3,"sources":["/home/bar007/Desktop/projects/tio/client/node_modules/monaco-editor/esm/vs/editor/common/modes/supports.js"],"names":["createScopedLineTokens","context","offset","tokenCount","getCount","tokenIndex","findTokenIndexAtOffset","desiredLanguageId","getLanguageId","lastTokenIndex","firstTokenIndex","ScopedLineTokens","getStartOffset","getEndOffset","actual","languageId","firstCharOffset","lastCharOffset","_actual","_firstTokenIndex","_lastTokenIndex","_lastCharOffset","actualLineContent","getLineContent","substring","getStandardTokenType","ignoreBracketsInToken","standardTokenType"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,sBAAT,CAAgCC,OAAhC,EAAyCC,MAAzC,EAAiD;AACpD,MAAIC,UAAU,GAAGF,OAAO,CAACG,QAAR,EAAjB;AACA,MAAIC,UAAU,GAAGJ,OAAO,CAACK,sBAAR,CAA+BJ,MAA/B,CAAjB;AACA,MAAIK,iBAAiB,GAAGN,OAAO,CAACO,aAAR,CAAsBH,UAAtB,CAAxB;AACA,MAAII,cAAc,GAAGJ,UAArB;;AACA,SAAOI,cAAc,GAAG,CAAjB,GAAqBN,UAArB,IAAmCF,OAAO,CAACO,aAAR,CAAsBC,cAAc,GAAG,CAAvC,MAA8CF,iBAAxF,EAA2G;AACvGE,IAAAA,cAAc;AACjB;;AACD,MAAIC,eAAe,GAAGL,UAAtB;;AACA,SAAOK,eAAe,GAAG,CAAlB,IAAuBT,OAAO,CAACO,aAAR,CAAsBE,eAAe,GAAG,CAAxC,MAA+CH,iBAA7E,EAAgG;AAC5FG,IAAAA,eAAe;AAClB;;AACD,SAAO,IAAIC,gBAAJ,CAAqBV,OAArB,EAA8BM,iBAA9B,EAAiDG,eAAjD,EAAkED,cAAc,GAAG,CAAnF,EAAsFR,OAAO,CAACW,cAAR,CAAuBF,eAAvB,CAAtF,EAA+HT,OAAO,CAACY,YAAR,CAAqBJ,cAArB,CAA/H,CAAP;AACH;AACD,WAAaE,gBAAb;AACI,4BAAYG,MAAZ,EAAoBC,UAApB,EAAgCL,eAAhC,EAAiDD,cAAjD,EAAiEO,eAAjE,EAAkFC,cAAlF,EAAkG;AAAA;;AAC9F,SAAKC,OAAL,GAAeJ,MAAf;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKI,gBAAL,GAAwBT,eAAxB;AACA,SAAKU,eAAL,GAAuBX,cAAvB;AACA,SAAKO,eAAL,GAAuBA,eAAvB;AACA,SAAKK,eAAL,GAAuBJ,cAAvB;AACH;;AARL;AAAA;AAAA,qCASqB;AACb,UAAMK,iBAAiB,GAAG,KAAKJ,OAAL,CAAaK,cAAb,EAA1B;;AACA,aAAOD,iBAAiB,CAACE,SAAlB,CAA4B,KAAKR,eAAjC,EAAkD,KAAKK,eAAvD,CAAP;AACH;AAZL;AAAA;AAAA,+CAa+BnB,MAb/B,EAauC;AAC/B,UAAMoB,iBAAiB,GAAG,KAAKJ,OAAL,CAAaK,cAAb,EAA1B;;AACA,aAAOD,iBAAiB,CAACE,SAAlB,CAA4B,CAA5B,EAA+B,KAAKR,eAAL,GAAuBd,MAAtD,CAAP;AACH;AAhBL;AAAA;AAAA,oCAiBoB;AACZ,aAAO,KAAKkB,eAAL,GAAuB,KAAKD,gBAAnC;AACH;AAnBL;AAAA;AAAA,2CAoB2BjB,MApB3B,EAoBmC;AAC3B,aAAO,KAAKgB,OAAL,CAAaZ,sBAAb,CAAoCJ,MAAM,GAAG,KAAKc,eAAlD,IAAqE,KAAKG,gBAAjF;AACH;AAtBL;AAAA;AAAA,yCAuByBd,UAvBzB,EAuBqC;AAC7B,aAAO,KAAKa,OAAL,CAAaO,oBAAb,CAAkCpB,UAAU,GAAG,KAAKc,gBAApD,CAAP;AACH;AAzBL;;AAAA;AAAA;AA2BA,OAAO,SAASO,qBAAT,CAA+BC,iBAA/B,EAAkD;AACrD,SAAO,CAACA,iBAAiB,GAAG;AAAE;AAAvB,QAAwC,CAA/C;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport function createScopedLineTokens(context, offset) {\r\n    let tokenCount = context.getCount();\r\n    let tokenIndex = context.findTokenIndexAtOffset(offset);\r\n    let desiredLanguageId = context.getLanguageId(tokenIndex);\r\n    let lastTokenIndex = tokenIndex;\r\n    while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\r\n        lastTokenIndex++;\r\n    }\r\n    let firstTokenIndex = tokenIndex;\r\n    while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\r\n        firstTokenIndex--;\r\n    }\r\n    return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\r\n}\r\nexport class ScopedLineTokens {\r\n    constructor(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\r\n        this._actual = actual;\r\n        this.languageId = languageId;\r\n        this._firstTokenIndex = firstTokenIndex;\r\n        this._lastTokenIndex = lastTokenIndex;\r\n        this.firstCharOffset = firstCharOffset;\r\n        this._lastCharOffset = lastCharOffset;\r\n    }\r\n    getLineContent() {\r\n        const actualLineContent = this._actual.getLineContent();\r\n        return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\r\n    }\r\n    getActualLineContentBefore(offset) {\r\n        const actualLineContent = this._actual.getLineContent();\r\n        return actualLineContent.substring(0, this.firstCharOffset + offset);\r\n    }\r\n    getTokenCount() {\r\n        return this._lastTokenIndex - this._firstTokenIndex;\r\n    }\r\n    findTokenIndexAtOffset(offset) {\r\n        return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\r\n    }\r\n    getStandardTokenType(tokenIndex) {\r\n        return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\r\n    }\r\n}\r\nexport function ignoreBracketsInToken(standardTokenType) {\r\n    return (standardTokenType & 7 /* value */) !== 0;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}